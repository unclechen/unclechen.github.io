{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/content/apple-touch-icon-144x144.png","path":"content/apple-touch-icon-144x144.png","modified":0,"renderable":0},{"_id":"source/content/favicon-16x16.png","path":"content/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/content/favicon-32x32.png","path":"content/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/content/favicon.ico","path":"content/favicon.ico","modified":0,"renderable":0},{"_id":"source/content/mstile-144x144.png","path":"content/mstile-144x144.png","modified":0,"renderable":0},{"_id":"source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"source/content/apple-touch-icon-152x152.png","path":"content/apple-touch-icon-152x152.png","modified":0,"renderable":0},{"_id":"source/content/favicon-196x196.png","path":"content/favicon-196x196.png","modified":0,"renderable":0},{"_id":"source/content/images/aB.png","path":"content/images/aB.png","modified":0,"renderable":0},{"_id":"source/content/images/and-you-are-done.png","path":"content/images/and-you-are-done.png","modified":0,"renderable":0},{"_id":"source/content/images/apk-outputs.png","path":"content/images/apk-outputs.png","modified":0,"renderable":0},{"_id":"source/content/images/app-cancel-perm.png","path":"content/images/app-cancel-perm.png","modified":0,"renderable":0},{"_id":"source/content/images/app-perm-after.png","path":"content/images/app-perm-after.png","modified":0,"renderable":0},{"_id":"source/content/images/app-perm-before.png","path":"content/images/app-perm-before.png","modified":0,"renderable":0},{"_id":"source/content/images/automatic-page-generator.png","path":"content/images/automatic-page-generator.png","modified":0,"renderable":0},{"_id":"source/content/images/app-storage.png","path":"content/images/app-storage.png","modified":0,"renderable":0},{"_id":"source/content/images/clone-the-repository.png","path":"content/images/clone-the-repository.png","modified":0,"renderable":0},{"_id":"source/content/images/buildconfig-enable-debug.png","path":"content/images/buildconfig-enable-debug.png","modified":0,"renderable":0},{"_id":"source/content/images/create-folders.png","path":"content/images/create-folders.png","modified":0,"renderable":0},{"_id":"source/content/images/create-index.png","path":"content/images/create-index.png","modified":0,"renderable":0},{"_id":"source/content/images/create-a-repository.png","path":"content/images/create-a-repository.png","modified":0,"renderable":0},{"_id":"source/content/images/create-gh-pages-branch.png","path":"content/images/create-gh-pages-branch.png","modified":0,"renderable":0},{"_id":"source/content/images/custom-log-enable.png","path":"content/images/custom-log-enable.png","modified":0,"renderable":0},{"_id":"source/content/images/drop-event.png","path":"content/images/drop-event.png","modified":0,"renderable":0},{"_id":"source/content/images/fiddlerWillow.png","path":"content/images/fiddlerWillow.png","modified":0,"renderable":0},{"_id":"source/content/images/fiddlerWillowRule.png","path":"content/images/fiddlerWillowRule.png","modified":0,"renderable":0},{"_id":"source/content/images/helloCreatTestApplicaiton.png","path":"content/images/helloCreatTestApplicaiton.png","modified":0,"renderable":0},{"_id":"source/content/images/helloSDK.png","path":"content/images/helloSDK.png","modified":0,"renderable":0},{"_id":"source/content/images/helloStructure.png","path":"content/images/helloStructure.png","modified":0,"renderable":0},{"_id":"source/content/images/helloStructure2.png","path":"content/images/helloStructure2.png","modified":0,"renderable":0},{"_id":"source/content/images/i-am-a-lib.png","path":"content/images/i-am-a-lib.png","modified":0,"renderable":0},{"_id":"source/content/images/me.jpg","path":"content/images/me.jpg","modified":0,"renderable":0},{"_id":"source/content/images/my-jar-lib.png","path":"content/images/my-jar-lib.png","modified":0,"renderable":0},{"_id":"source/content/images/my-lib.png","path":"content/images/my-lib.png","modified":0,"renderable":0},{"_id":"source/content/images/my-pro-lib.png","path":"content/images/my-pro-lib.png","modified":0,"renderable":0},{"_id":"source/content/images/new-a-gradle-file.png","path":"content/images/new-a-gradle-file.png","modified":0,"renderable":0},{"_id":"source/content/images/new-a-plugin-folder.png","path":"content/images/new-a-plugin-folder.png","modified":0,"renderable":0},{"_id":"source/content/images/new-class-folder.png","path":"content/images/new-class-folder.png","modified":0,"renderable":0},{"_id":"source/content/images/open-terminal.png","path":"content/images/open-terminal.png","modified":0,"renderable":0},{"_id":"source/content/images/open-the-plugin.png","path":"content/images/open-the-plugin.png","modified":0,"renderable":0},{"_id":"source/content/images/output-classes.png","path":"content/images/output-classes.png","modified":0,"renderable":0},{"_id":"source/content/images/push.png","path":"content/images/push.png","modified":0,"renderable":0},{"_id":"source/content/images/settings.png","path":"content/images/settings.png","modified":0,"renderable":0},{"_id":"source/content/images/two-modules.png","path":"content/images/two-modules.png","modified":0,"renderable":0},{"_id":"source/content/images/use-your-gradle-wrapper.png","path":"content/images/use-your-gradle-wrapper.png","modified":0,"renderable":0},{"_id":"source/content/images/you-are-done-again.png","path":"content/images/you-are-done-again.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/content/images/app-permission.png","path":"content/images/app-permission.png","modified":0,"renderable":0},{"_id":"source/content/images/create-a-project.png","path":"content/images/create-a-project.png","modified":0,"renderable":0},{"_id":"source/content/images/enroll-device.png","path":"content/images/enroll-device.png","modified":0,"renderable":0},{"_id":"source/content/images/fiddlerCatchU.png","path":"content/images/fiddlerCatchU.png","modified":0,"renderable":0},{"_id":"source/content/images/fiddlerSetup.png","path":"content/images/fiddlerSetup.png","modified":0,"renderable":0},{"_id":"source/content/images/fiddlerWifiSetup.png","path":"content/images/fiddlerWifiSetup.png","modified":0,"renderable":0},{"_id":"source/content/images/fiddlerWillowMenus.png","path":"content/images/fiddlerWillowMenus.png","modified":0,"renderable":0},{"_id":"source/content/images/hello-webview-js-demo.png","path":"content/images/hello-webview-js-demo.png","modified":0,"renderable":0},{"_id":"source/content/images/helloAS.png","path":"content/images/helloAS.png","modified":0,"renderable":0},{"_id":"source/content/images/helloFont.png","path":"content/images/helloFont.png","modified":0,"renderable":0},{"_id":"source/content/images/helloCreatTestApplicaiton2.png","path":"content/images/helloCreatTestApplicaiton2.png","modified":0,"renderable":0},{"_id":"source/content/images/helloFiddler.png","path":"content/images/helloFiddler.png","modified":0,"renderable":0},{"_id":"source/content/images/helloProxy.png","path":"content/images/helloProxy.png","modified":0,"renderable":0},{"_id":"source/content/images/helloSettings.png","path":"content/images/helloSettings.png","modified":0,"renderable":0},{"_id":"source/content/images/helloWizard.png","path":"content/images/helloWizard.png","modified":0,"renderable":0},{"_id":"source/content/images/jekyll-structure.png","path":"content/images/jekyll-structure.png","modified":0,"renderable":0},{"_id":"source/content/images/two-acts.png","path":"content/images/two-acts.png","modified":0,"renderable":0},{"_id":"source/content/images/two-apps.png","path":"content/images/two-apps.png","modified":0,"renderable":0},{"_id":"source/content/me.png","path":"content/me.png","modified":0,"renderable":0},{"_id":"source/content/images/add-groovy-sdk.png","path":"content/images/add-groovy-sdk.png","modified":0,"renderable":0},{"_id":"source/content/images/helloSDKProxy.png","path":"content/images/helloSDKProxy.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/content/images/cover/helloAndroidStudioAndGradle.png","path":"content/images/cover/helloAndroidStudioAndGradle.png","modified":0,"renderable":0},{"_id":"source/content/images/cover/helloFiddler.jpg","path":"content/images/cover/helloFiddler.jpg","modified":0,"renderable":0},{"_id":"source/content/images/drag-drop.png","path":"content/images/drag-drop.png","modified":0,"renderable":0},{"_id":"source/content/images/gmail-xml.png","path":"content/images/gmail-xml.png","modified":0,"renderable":0},{"_id":"source/content/images/new-a-lib-module.png","path":"content/images/new-a-lib-module.png","modified":0,"renderable":0},{"_id":"source/content/images/split-screen.png","path":"content/images/split-screen.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/bg.jpg","path":"images/bg.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/content/images/android-n-devices.png","path":"content/images/android-n-devices.png","modified":0,"renderable":0},{"_id":"source/content/images/start-drag.png","path":"content/images/start-drag.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"source/content/images/cover/android-n.png","path":"content/images/cover/android-n.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"source/content/images/cover/cover-create-git-pages.png","path":"content/images/cover/cover-create-git-pages.png","modified":0,"renderable":0},{"_id":"source/content/images/cover/muti-screen.png","path":"content/images/cover/muti-screen.png","modified":0,"renderable":0},{"_id":"source/content/images/fiddlerBaidu.png","path":"content/images/fiddlerBaidu.png","modified":0,"renderable":0},{"_id":"source/content/images/first-experience.png","path":"content/images/first-experience.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/content/images/yaohaola-desc-thumb.png","path":"content/images/yaohaola-desc-thumb.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"cee07c7d0131150da13e976261ad41855cac54f2","modified":1526795187000},{"_id":"source/favicon.ico","hash":"f74f5ae15db633bc7f088e0b2349760634cff8a6","modified":1526195617000},{"_id":"themes/next/.DS_Store","hash":"fbb45fceb6e9e118b4bfffd1d136f0f8abb6662f","modified":1526796088000},{"_id":"themes/next/_config.yml","hash":"a9122f07770d8160f202206483b0dc09d9357376","modified":1526195617000},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1526195617000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1526195617000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1526195617000},{"_id":"source/_posts/Android N App分屏模式完全解析-上篇.markdown","hash":"f52ef364ed26754885eb8a3e5cc273f9b8c7f8c1","modified":1526195617000},{"_id":"source/_posts/Android N App分屏模式完全解析-下篇.markdown","hash":"3cf3bab351012783ef87f7008f759bc6dd57fd99","modified":1526195617000},{"_id":"source/_posts/Android N安装方法及上手体验.markdown","hash":"80ba0535e6ed5434088e9fb178a1e3995d97fd0b","modified":1526195617000},{"_id":"source/_posts/Android Studio Gradle实践之多渠道自动化打包+版本号管理.markdown","hash":"40603385ab643a34b14250ca03deb930843e0725","modified":1526195617000},{"_id":"source/_posts/Android Studio安装配置笔记.markdown","hash":"6e8474b0ed81e81a45d68bbe27f428cd230eefd3","modified":1526195617000},{"_id":"source/_posts/Android View的可见性检查方法-上篇.md","hash":"a8e465903c75c1ad1934fa703bcd19b03716309e","modified":1526195617000},{"_id":"source/_posts/Android WebView调用JS.markdown","hash":"505e554225ee1930040ee770c37a14875755cf69","modified":1526195617000},{"_id":"source/_posts/Android6.0权限适配之SD卡写入.markdown","hash":"dd58a3a004a73e24fe6df1de8141315df4b4169a","modified":1526195617000},{"_id":"source/_posts/Android6.0运行时权限简介.markdown","hash":"bad456d251218008e90156e62a46547a4f67d9f4","modified":1526195617000},{"_id":"source/_posts/Android反编译技术总结.md","hash":"6fb95ce886131c0bb9519489961d01202130e17e","modified":1526195617000},{"_id":"source/_posts/Android地理位置服务解析.markdown","hash":"96d5815526ea8fe4d6e8afc5fbb72f3e32b8025a","modified":1526195617000},{"_id":"source/_posts/Android混合开发之WebView中使用原生组件替换标签元素.md","hash":"1c58659026e2b8cd0d3db33feaeb69d2aff70e4e","modified":1526195617000},{"_id":"source/_posts/Android埋点技术分析.md","hash":"6725a808bd115e2e2026f96da8eb94aab358826a","modified":1526195617000},{"_id":"source/_posts/App动态配置探讨.md","hash":"84f7559963ce665a2c889ec7f0b192646850f70f","modified":1526195617000},{"_id":"source/_posts/Gradle实践之打包jar+Log开关自动关闭.markdown","hash":"4865c73baa3e0dd6a2a57086431d209272d4c9c3","modified":1526195617000},{"_id":"source/_posts/JS埋点技术分析.md","hash":"2fa50e929186630c2cca0894e6a652d551c747c8","modified":1526195617000},{"_id":"source/_posts/WebView缓存原理分析和应用.md","hash":"acbbfa1e456baaf6a89dba7adbccb6d4a61057e5","modified":1526195617000},{"_id":"source/_posts/python利用beautifulsoup+selenium自动翻页抓取网页内容.md","hash":"628050df2c8177b13ec38eb2f73178ad997e7585","modified":1526195617000},{"_id":"source/_posts/不写代码实现px转换成dp.md","hash":"8f529347c41e60768ee4a12c7e94219af4bf0a06","modified":1526195617000},{"_id":"source/_posts/使用Play框架编写Web应用.md","hash":"bbd566a7cca0c48220e3d1d72a28ff674d7404b6","modified":1526215397000},{"_id":"source/_posts/使用ReactJS开发Chrome插件.md","hash":"185e88ce1581bebd73fcf10045682353ee4ca4dc","modified":1526195617000},{"_id":"source/_posts/使用前端开发利器Fiddler调试手机程序.markdown","hash":"abe215b9fec149bad9f55c42d4391fb644ce3355","modified":1526195617000},{"_id":"source/_posts/利用属性动画在Android4.x上实现Android L的元素转场动画效果.md","hash":"56fa05a0bf162aeb8687d3c810eedb39fd1e454d","modified":1526195617000},{"_id":"source/about/index.md","hash":"7f502c0d2414e95ad04554e18a88d9442f34a354","modified":1526195617000},{"_id":"source/_posts/自定义Android Gradle插件.markdown","hash":"33b0fff026edf3b4a7eb395430ad52c9b31a2605","modified":1526195617000},{"_id":"source/categories/index.md","hash":"4950b974646b5bde44ee75c506af2ac403bee648","modified":1526195617000},{"_id":"source/content/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1512814708000},{"_id":"source/content/apple-touch-icon-144x144.png","hash":"55940aff927020df38234e0d1b1928af135d8a70","modified":1526195617000},{"_id":"source/content/favicon-16x16.png","hash":"a6e32db71376a080da68d6ec1de6a53903e7f698","modified":1526195617000},{"_id":"source/content/favicon-32x32.png","hash":"fb8191fe55cc5c2cc3b666cddb67cf62b0c45b22","modified":1526195617000},{"_id":"source/content/favicon.ico","hash":"f74f5ae15db633bc7f088e0b2349760634cff8a6","modified":1526195617000},{"_id":"source/content/mstile-144x144.png","hash":"64841d80b06d40cacf1ae2ca45adee6464db19a9","modified":1526195617000},{"_id":"source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1526195617000},{"_id":"source/tags/index.md","hash":"ac630666319778f47ca8c887c122e8b654ae33cc","modified":1526195617000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1526195617000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1526195617000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1526195617000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1526195617000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1526195617000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1526195617000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1526195617000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1526195617000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1526195617000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1526195617000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1526195617000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1526195617000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1526195617000},{"_id":"themes/next/layout/.DS_Store","hash":"05c64a68748218e8e5bef281d29f2294ab8a4b7b","modified":1526796075000},{"_id":"themes/next/layout/_layout.swig","hash":"9d1a23a6add6f3d0f88c2d17979956f14aaa37a4","modified":1526195617000},{"_id":"themes/next/layout/archive.swig","hash":"44aa8c71d0504d4aa34ed71cd381591e763392c7","modified":1526195617000},{"_id":"themes/next/layout/category.swig","hash":"d3e008f5f1cbee7b36c4ac603a6b25913671f2bb","modified":1526195617000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1526195617000},{"_id":"themes/next/layout/page.swig","hash":"531dca4525ac543ab3ac334e0b72fe88c68c73ae","modified":1526195617000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1526195617000},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1526195617000},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1526195617000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1526195617000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1526195617000},{"_id":"themes/next/source/.DS_Store","hash":"6d9cafee1f8032f03d054e49d7fdc9f3cfb9aa1e","modified":1512828604000},{"_id":"themes/next/source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1526195617000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1526195617000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1526195617000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1526195617000},{"_id":"source/content/apple-touch-icon-152x152.png","hash":"01544686eb7dbac67c9adb638b8ce79ead52d206","modified":1526195617000},{"_id":"source/content/favicon-196x196.png","hash":"0b2c6c9c9685dcf6bbe0b2094ead7e3972f5974d","modified":1526195617000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526195617000},{"_id":"source/content/images/aB.png","hash":"f1035775fc4b3699aa1686ed90c5fab8ef8a6d5c","modified":1526195617000},{"_id":"source/content/images/and-you-are-done.png","hash":"8f9b02aa63fd6f5036a1d0aea46ee8650c34db99","modified":1526195617000},{"_id":"source/content/images/apk-outputs.png","hash":"68e8561d5b7d9afec40045da91a1cb8bb4c73ad3","modified":1526195617000},{"_id":"source/content/images/app-cancel-perm.png","hash":"e2d11f837d65a9b878737b2810c5559d31cc8f69","modified":1526195617000},{"_id":"source/content/images/app-perm-after.png","hash":"c141eeaf8251f2430cca6fcbe0d06805b5f8b6c8","modified":1526195617000},{"_id":"source/content/images/app-perm-before.png","hash":"d9d57129d4a8567a50057ac1b3876eb7ff422517","modified":1526195617000},{"_id":"source/content/images/automatic-page-generator.png","hash":"5782ca55e2cb1d1a677686ff9b9687814129cda0","modified":1526195617000},{"_id":"source/content/images/app-storage.png","hash":"533a871d687f6305d29fee1d1b14ccb2c113f7ac","modified":1526195617000},{"_id":"source/content/images/clone-the-repository.png","hash":"df865295292ac97bf17e3414609905d636ced38e","modified":1526195617000},{"_id":"source/content/images/buildconfig-enable-debug.png","hash":"998d2bdfb4dba56c1b33597cf73df692690e3876","modified":1526195617000},{"_id":"source/content/images/create-folders.png","hash":"68e4541b288381b3d913bff7e084a10f99f70693","modified":1526195617000},{"_id":"source/content/images/create-index.png","hash":"00756b0cb6959efbe9ab7b5743d94c2574427190","modified":1526195617000},{"_id":"source/content/images/create-a-repository.png","hash":"661d19f48bd24a0225bd5a049ea3496b00c7e289","modified":1526195617000},{"_id":"source/content/images/create-gh-pages-branch.png","hash":"ee7a78d247f193ffee8a20e97d7b000db4975193","modified":1526195617000},{"_id":"source/content/images/custom-log-enable.png","hash":"0262f41a23fca8dd5df58d573327bc6a92f9f3dd","modified":1526195617000},{"_id":"source/content/images/drop-event.png","hash":"882c3dd3c67b0e6c42cb4ec19bb4bcfb2c2cbf4b","modified":1526195617000},{"_id":"source/content/images/fiddlerWillow.png","hash":"681e6e12f275ea623a519c58f1569357b1cff63d","modified":1526195617000},{"_id":"source/content/images/fiddlerWillowRule.png","hash":"8c9cb5b42ca2847bd9b298642318136982f8c90b","modified":1526195617000},{"_id":"source/content/images/helloCreatTestApplicaiton.png","hash":"c79781cd2ffd14a93548a61184425a21a37402ac","modified":1526195617000},{"_id":"source/content/images/helloSDK.png","hash":"39702e16ac8f7fb1240f1173a3a8bdab2ab6c291","modified":1526195617000},{"_id":"source/content/images/helloStructure.png","hash":"1a1848a421f200665f4e5722086eb9c08fddc183","modified":1526195617000},{"_id":"source/content/images/helloStructure2.png","hash":"4d3505f3a8f8f0a700910d7dd2a968e89c33ca07","modified":1526195617000},{"_id":"source/content/images/i-am-a-lib.png","hash":"60de33c0be6799cd195d657e547aa9f264571463","modified":1526195617000},{"_id":"source/content/images/me.jpg","hash":"4b3aca187090c9d5e0a098c1a0d686c0c2601c3a","modified":1526195617000},{"_id":"source/content/images/my-jar-lib.png","hash":"e618f3494f0ce56340bffbc5b2fdcf60f38ac23e","modified":1526195617000},{"_id":"source/content/images/my-lib.png","hash":"e58dd2612e1aa220d1e9efc169c1f3e0e0c0daf8","modified":1526195617000},{"_id":"source/content/images/my-pro-lib.png","hash":"b9a981c02c8a079f32321aaa59c9c7531ce1ef78","modified":1526195617000},{"_id":"source/content/images/new-a-gradle-file.png","hash":"a04785da1df9c3ed3441136b7480cedfe0918b70","modified":1526195617000},{"_id":"source/content/images/new-a-plugin-folder.png","hash":"e6932c8dc3a97de1dba3fb6473ffe483165ff66b","modified":1526195617000},{"_id":"source/content/images/new-class-folder.png","hash":"b83d514efc4fa2ba18752f7110092ccfd82c8ab0","modified":1526195617000},{"_id":"source/content/images/open-terminal.png","hash":"fe9cf9b6706030460f5c047b235de4636855198d","modified":1526195617000},{"_id":"source/content/images/open-the-plugin.png","hash":"22710e1e5882792fd38191ea138c4aa7c9c22b79","modified":1526195617000},{"_id":"source/content/images/output-classes.png","hash":"ac115f620e75e836223d32e75689bca2e17fa6dd","modified":1526195617000},{"_id":"source/content/images/push.png","hash":"70137d2cfe358af2027f50d6673a501815854551","modified":1526195617000},{"_id":"source/content/images/settings.png","hash":"d3aa9fcdfbfdf0b78e65b9ebb9cad0c4516f44b9","modified":1526195617000},{"_id":"source/content/images/two-modules.png","hash":"bd1bc9c06211a0095088a76d7fe56301a74c20d0","modified":1526195617000},{"_id":"source/content/images/use-your-gradle-wrapper.png","hash":"b2d3cda516def3164ed9a06120c333fa64b88ae3","modified":1526195617000},{"_id":"source/content/images/you-are-done-again.png","hash":"7840b7fd63930c64c8db233b70fc8723bace2eca","modified":1526195617000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1526195617000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1526195617000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1526195617000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1526195617000},{"_id":"themes/next/layout/_macro/post.swig","hash":"5fd05fdc8b28030da6fd38786e241f89da1f4a5d","modified":1526195617000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1526195617000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1526195617000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1526195617000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"6a5651f50b5ffb35a025290506ba3cfdafa52e17","modified":1526195617000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7b144ba0150fc4164d2955dc65b2f4966ba1e574","modified":1526195617000},{"_id":"themes/next/layout/_partials/head.swig","hash":"d4a05c51aac02f1f6248baccf2ddb8ee12b9122f","modified":1526195617000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1526195617000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1526195617000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1526195617000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1526195617000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1526195617000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1526195617000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1526195617000},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"e7d6b4b94a17ba477bb7bd88a4f5ba6eb80e7c36","modified":1526796069000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1526195617000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1526195617000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1526195617000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1526195617000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1526195617000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1526195617000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1526195617000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1526195617000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1526195617000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1526195617000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1526195617000},{"_id":"themes/next/source/css/.DS_Store","hash":"158a3619de6a298085e5b120f58630634a0c7ae1","modified":1511601256000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1526195617000},{"_id":"themes/next/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1512828501000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1526195617000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1526195617000},{"_id":"themes/next/source/images/avatar.png","hash":"55940aff927020df38234e0d1b1928af135d8a70","modified":1526195617000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1526195617000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1526195617000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1526195617000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1526195617000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1526195617000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1526195617000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1526195617000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526195617000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526195617000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1526195617000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1526195617000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1526195617000},{"_id":"source/content/images/app-permission.png","hash":"0705bb0f63586e17fd95ec2eb1c429f9c58e15c2","modified":1526195617000},{"_id":"source/content/images/create-a-project.png","hash":"580d01879d4f3c7d126ed759849182187f55c863","modified":1526195617000},{"_id":"source/content/images/enroll-device.png","hash":"302a08a3fed347e2c22a1cb8e09d79a925358eaf","modified":1526195617000},{"_id":"source/content/images/fiddlerCatchU.png","hash":"da6f162c0a469055812d8834785230ffef5e0a3f","modified":1526195617000},{"_id":"source/content/images/fiddlerSetup.png","hash":"a5473b0b96b02621bcd07ff4ff87ce8cf0c608a8","modified":1526195617000},{"_id":"source/content/images/fiddlerWifiSetup.png","hash":"4561980201ac6071a6793860ebe6ba9adc9ae3ea","modified":1526195617000},{"_id":"source/content/images/fiddlerWillowMenus.png","hash":"41ce4f798f1cf4a863a4be922697b0659f3117c2","modified":1526195617000},{"_id":"source/content/images/hello-webview-js-demo.png","hash":"c5b07bb707bc5bae4b9057c0fceaeb844b3a58f9","modified":1526195617000},{"_id":"source/content/images/helloAS.png","hash":"67496cd369ebb030d82eeae2d7fe02520b8e7d2e","modified":1526195617000},{"_id":"source/content/images/helloFont.png","hash":"ecf9dda61b24a507739eec4e1c5f059fa06234b4","modified":1526195617000},{"_id":"source/content/images/helloCreatTestApplicaiton2.png","hash":"c294a2d91cdfe039ad6eeb3017395ae8ecde57cd","modified":1526195617000},{"_id":"source/content/images/helloFiddler.png","hash":"774e0d8c32c3d77a3d32e57aa8f836eddce0e5a4","modified":1526195617000},{"_id":"source/content/images/helloProxy.png","hash":"dec9b85ff3fcfff2d93a6e21a0c524d12303133d","modified":1526195617000},{"_id":"source/content/images/helloSettings.png","hash":"a5b9a83c009b9305bd7f0dcd6b28f5148d829707","modified":1526195617000},{"_id":"source/content/images/helloWizard.png","hash":"1df80f56e154766731ce8c893af5b3aa32252f3c","modified":1526195617000},{"_id":"source/content/images/jekyll-structure.png","hash":"c01373fdedb24d481063d4d1548174c50c36e836","modified":1526195617000},{"_id":"source/content/images/two-acts.png","hash":"fa68f59e1a3f6c59ef29a1a7ac3e070acec95d92","modified":1526195617000},{"_id":"source/content/images/two-apps.png","hash":"e60cfd3a729dc735a2d2b09d13aa6bee6af71497","modified":1526195617000},{"_id":"source/content/me.png","hash":"9e11de8b05a1c75e9b85d2002153208f7e39bd0f","modified":1526195617000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526195617000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526195617000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526195617000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526195617000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526195617000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526195617000},{"_id":"source/content/images/add-groovy-sdk.png","hash":"21895da62c40a0ef9a94fcf018225019e81e6072","modified":1526195617000},{"_id":"source/content/images/helloSDKProxy.png","hash":"01d1c5388bd19c5a6df1ad417acbff222807b824","modified":1526195617000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1526195617000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1526195617000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1526195617000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1526195617000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1526195617000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1526195617000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1526195617000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1526195617000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1526195617000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1526195617000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1526195617000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1526195617000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1526195617000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1526195617000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1526195617000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1526195617000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1526195617000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1526195617000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1526195617000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1526195617000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1526195617000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1526195617000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1526195617000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1526195617000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1526195617000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1526195617000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"112bdb4764b0ade298d874bbbe7840decf595762","modified":1526796065000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1526195617000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"e404dd931bd9fbbefb7f09c4cafd2226a894fe1c","modified":1526195617000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1d0d01aaeb7bcde3671263d736718f8837c20182","modified":1526195617000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1526195617000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1526195617000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"1f349aa30dd1f7022f7d07a1f085eea5ace3f26d","modified":1526195617000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1526195617000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1526195617000},{"_id":"themes/next/source/css/_common/.DS_Store","hash":"66880163bbb405631dda9cddf9f8e3b3a932ba06","modified":1511601251000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"72538cca3b0ad1fe7e8a3cb01b3928db1c8aaf5b","modified":1526195617000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1526195617000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1526195617000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1526195617000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1526195617000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"724625443604254d9b3ed1e6210c9f1d3a0397c4","modified":1526195617000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"8a312bb74ce0176bb65e3f78fdb79ba78968ca65","modified":1526195617000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1526195617000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1526195617000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1526195617000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1526195617000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1526195617000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1526195617000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1526195617000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1526195617000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1526195617000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1526195617000},{"_id":"themes/next/source/js/src/utils.js","hash":"803f684fa7d0e729115a48851023a31f6fb6d0a7","modified":1526195617000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1526195617000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1526195617000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1526195617000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1526195617000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1526195617000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1526195617000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1526195617000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1526195617000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1526195617000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1526195617000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1526195617000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1526195617000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1526195617000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1526195617000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1526195617000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1526195617000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1526195617000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1526195617000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1526195617000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1526195617000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1526195617000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1526195617000},{"_id":"source/content/images/cover/helloAndroidStudioAndGradle.png","hash":"79262bec61ffa29ec3e2a7e6cc2033817bc019be","modified":1526195617000},{"_id":"source/content/images/cover/helloFiddler.jpg","hash":"8bad10fef9e151820075b84ef2649151b1fb59e2","modified":1526195617000},{"_id":"source/content/images/drag-drop.png","hash":"6a72d4e867047d10f0a030abb99fd64914bf2bd7","modified":1526195617000},{"_id":"source/content/images/gmail-xml.png","hash":"dc87c0af5462a22362a0cfc04c33e30690a59a92","modified":1526195617000},{"_id":"source/content/images/new-a-lib-module.png","hash":"3b3a2fd9c6d2fe31cd5aae96e1ed02ca327e3abc","modified":1526195617000},{"_id":"source/content/images/split-screen.png","hash":"4d3ab6e8dd9452737248776710b27622ae90552a","modified":1526195617000},{"_id":"themes/next/source/images/bg.jpg","hash":"d6c89438a65355796100f514e7bbf420bec789c9","modified":1526195617000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1526195617000},{"_id":"source/content/images/android-n-devices.png","hash":"6f4051382bc20a2a94634cc4cb9be9473df2cbea","modified":1526195617000},{"_id":"source/content/images/start-drag.png","hash":"31c47115102b10964196c4d4d56484cd5b5f7c00","modified":1526195617000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1526195617000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/.DS_Store","hash":"ef1221063fe6307547efa83b5a21bec98874ead4","modified":1511601184000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4d126ed583edd0384f7b3913273bef3d6758f97c","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"bbbf939aa1d1d6ae3142adbe2dcf78abd320bceb","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"311559539b4b4377dd12f4da4a85cfc7ddc8a873","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1526195617000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1526195617000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1526195617000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1526195617000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1526195617000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1526195617000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8defca2c6e615a98d9532c315a2c2ba057ebf8d2","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1526195617000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1526195617000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1526195617000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1526195617000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1526195617000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1526195617000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1526195617000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1526195617000},{"_id":"source/content/images/cover/android-n.png","hash":"8258fe998eb44096ba3067c588773b336a185b37","modified":1526195617000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1526195617000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526195617000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1526195617000},{"_id":"source/content/images/cover/cover-create-git-pages.png","hash":"c02038f829fc8d47b9bbd9a2122c5e629430c130","modified":1526195617000},{"_id":"source/content/images/cover/muti-screen.png","hash":"a70619ee185c1b3c7b6c8a6f455550c5d9fdbc4c","modified":1526195617000},{"_id":"source/content/images/fiddlerBaidu.png","hash":"9ad9a8026b020b5d95ebba9d6973dd77d9ec7d7d","modified":1526195617000},{"_id":"source/content/images/first-experience.png","hash":"da99075f1197eeb55580999f18127ca36eeaf4e3","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"dbc07ec641a537df5918b41ce40a6466712a44f6","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"c089419916988d0f51d89b225460fe11b631e0a3","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"2cf52211c55bc9f831e6ebeec8619d8931fd9b66","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1526195617000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"bb3be8374c31c372ed0995bd8030d2b920d581de","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1526195617000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1526195617000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1526195617000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1526195617000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1526195617000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1526195617000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1526195617000},{"_id":"source/content/images/yaohaola-desc-thumb.png","hash":"a600dc9b06b8c45eb383cc95f0e97b5b4920b331","modified":1526195617000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1526195617000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1526195617000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1526195617000},{"_id":"public/atom.xml","hash":"f4c043200882e83a30c94b58ad355f16930c0113","modified":1526215709942},{"_id":"public/about/index.html","hash":"068edadd58087b19d69b150fbe56dde241d906e6","modified":1526215710050},{"_id":"public/categories/index.html","hash":"f6ba750864341655ba8f37973333ffc2363faf2e","modified":1526215710051},{"_id":"public/tags/index.html","hash":"92a9154b03b7f1b1feaa95a5dfd8fc51972ceab0","modified":1526215710051},{"_id":"public/archives/2015/04/index.html","hash":"e55b410a2be9ad587aa19c55e12bea18bf1e461a","modified":1526215710051},{"_id":"public/archives/2015/06/index.html","hash":"91cb11cb110397849cb96a72a18ce55613a5182a","modified":1526215710051},{"_id":"public/archives/2015/10/index.html","hash":"0f5f1bc9e73dbac4ffe8aa977416b700bced13a4","modified":1526215710051},{"_id":"public/archives/2015/11/index.html","hash":"0b5dd874e8f7d8f19002bcb01b86056441f8cdf1","modified":1526215710051},{"_id":"public/archives/2016/08/index.html","hash":"5d0df08e6cc5acb8813c4bc265e4f0c049938a14","modified":1526215710051},{"_id":"public/archives/2016/09/index.html","hash":"0278dca13836a22a11aec19d1a1c84adad30da84","modified":1526215710052},{"_id":"public/archives/2016/10/index.html","hash":"df6f7914e573ba3509e30674cfd7fb39e4456f90","modified":1526215710052},{"_id":"public/archives/2016/11/index.html","hash":"3768b5676d8162304a23ca4d02561d68813ba38c","modified":1526215710052},{"_id":"public/archives/2016/12/index.html","hash":"ab1567d0914f29b27eb08989c22fb5a80cd0dd0f","modified":1526215710052},{"_id":"public/archives/2017/05/index.html","hash":"6e840cc445675cd4b1a27137513212f0553cce8f","modified":1526215710052},{"_id":"public/archives/2017/06/index.html","hash":"b925d03954978f1b43cab30c0ce77b7fe1a09e38","modified":1526215710052},{"_id":"public/archives/2017/10/index.html","hash":"7adcc075b944aed5de53f0f39d0bd50ae09351cb","modified":1526215710052},{"_id":"public/archives/2017/12/index.html","hash":"c7f7d40605dad4b80290034b2a21c0edc2ad9839","modified":1526215710052},{"_id":"public/archives/2018/index.html","hash":"2938d7db6f8330faab9f39502b53d03bb2d2a89e","modified":1526215710052},{"_id":"public/archives/2018/05/index.html","hash":"1a306aac18e77e4be1c458aef601e4bbff86d819","modified":1526215710053},{"_id":"public/tags/Android7-x/index.html","hash":"6b0abebefae2bffc299746d50f9cb3f11dd7cd4a","modified":1526215710053},{"_id":"public/tags/打包/index.html","hash":"4013c5ed5cb79093b2f3c9cf9691d9052a357bdb","modified":1526215710053},{"_id":"public/tags/gradle/index.html","hash":"ab8aadccaec2a97522227a778d294cf3e3c0fbee","modified":1526215710053},{"_id":"public/tags/开发环境/index.html","hash":"69bc406cdb10994b41c7901ade308067f28baaf1","modified":1526215710053},{"_id":"public/tags/View/index.html","hash":"c0e0dfeaa942f76f0b0ceaa88b2248534d879d2e","modified":1526215710053},{"_id":"public/tags/WebView/index.html","hash":"fcb5b32715bd5d81fbe99e66cb9ad2a5c89ea516","modified":1526215710053},{"_id":"public/tags/权限/index.html","hash":"ab7eedce620d27bafe7f1168679b79aad790ebef","modified":1526215710053},{"_id":"public/tags/反编译/index.html","hash":"0a66e3351837443dcf07144f9f2213c9f70fa1b8","modified":1526215710054},{"_id":"public/tags/定位/index.html","hash":"9e157bf0bb8456058f2ad3016ec09febbeede767","modified":1526215710054},{"_id":"public/tags/客户端/index.html","hash":"d9de7d8258480a29c7316ab6958f6720d9485859","modified":1526215710054},{"_id":"public/tags/服务器/index.html","hash":"8c19034174893d878264baee010df10a1212227a","modified":1526215710054},{"_id":"public/tags/动态化/index.html","hash":"981b942c6ac6b1647f09e4524e43b0bf49117224","modified":1526215710054},{"_id":"public/tags/SDK/index.html","hash":"fdefba6a0ea7dd7ecd84044bd8c8e5e2cffb70df","modified":1526215710054},{"_id":"public/tags/埋点/index.html","hash":"7e084deb635929a81c465859996d3c0326eafd67","modified":1526215710054},{"_id":"public/tags/无埋点/index.html","hash":"db008c793ec66858ca210238adeeb43d1093f714","modified":1526215710054},{"_id":"public/tags/可视化埋点/index.html","hash":"5e7d940892c63c0f43ac9602e5d9fba72dab070a","modified":1526215710054},{"_id":"public/tags/python/index.html","hash":"1fdc336d80aa4603195e1e6af1f6730233450d5b","modified":1526215710054},{"_id":"public/tags/爬虫/index.html","hash":"5be02ec9f2436ba841901bb096fe59b084cc015d","modified":1526215710055},{"_id":"public/tags/JS/index.html","hash":"47d1b69fc77151d3dbc3c2c2c7d02223ef00ea1a","modified":1526215710055},{"_id":"public/tags/监测/index.html","hash":"8f8cb4fc9fb8a5a4f1d91fd4f72f250102b14a5a","modified":1526215710055},{"_id":"public/tags/数据/index.html","hash":"cbac2d0585d01c8dd8246141299e54f90864169a","modified":1526215710055},{"_id":"public/tags/微技巧/index.html","hash":"69134e4a3a2cd908de31ab50cb000cdf3addf5d3","modified":1526215710055},{"_id":"public/tags/Java-Web/index.html","hash":"c61193f78ddfecfa16b79632aba1e4d8049a44a7","modified":1526215710055},{"_id":"public/tags/后端/index.html","hash":"bd63e175fbd0ac47bef23cb10525acf37151da72","modified":1526215710055},{"_id":"public/tags/React/index.html","hash":"a880647e73a9992cf278f566fe1b8682b95c9280","modified":1526215710055},{"_id":"public/tags/Chrome插件/index.html","hash":"924a009be58f73ba6662e088aaaf5df51058ce4f","modified":1526215710055},{"_id":"public/tags/Web/index.html","hash":"4e23fce06b3cf1f0b36c62a159046e3ed87f0215","modified":1526215710055},{"_id":"public/tags/调试/index.html","hash":"2d8a537c2f270bcd8b123c583490bb4fecfa65e4","modified":1526215710055},{"_id":"public/tags/网络/index.html","hash":"43092fbb6a218254b350cc6f5891b560abe4f848","modified":1526215710056},{"_id":"public/tags/动画/index.html","hash":"b41a79b94ddeca352772662c938f8105db6fdba0","modified":1526215710056},{"_id":"public/2018/05/13/使用Play框架编写Web应用/index.html","hash":"309b2c10fc1c22d2db55ac1f1e9dcd4782834a8e","modified":1526796114803},{"_id":"public/2017/12/24/JS埋点技术分析/index.html","hash":"d4e4337c3bf2f7c88ebb252b6e2775aaa09a10f3","modified":1526796114803},{"_id":"public/2017/12/18/Android埋点技术分析/index.html","hash":"6314bddd5112bb0f3e9d9abc85ea9ec72c539fc5","modified":1526796114803},{"_id":"public/2017/10/15/Android混合开发之WebView中使用原生组件替换标签元素/index.html","hash":"99a4bf3e04f711fb3133be38f804f3c7a91440f3","modified":1526796114803},{"_id":"public/2017/06/16/使用ReactJS开发Chrome插件/index.html","hash":"f4e6f6f305beb5118534ce2de08e625b4ad90d6f","modified":1526796114803},{"_id":"public/2017/05/13/WebView缓存原理分析和应用/index.html","hash":"062d8b41bb31e577609832b89cb43f3ad479394f","modified":1526796114803},{"_id":"public/2016/12/11/python利用beautifulsoup+selenium自动翻页抓取网页内容/index.html","hash":"4771d326f40b58102414b6213a2d1a61f30ad438","modified":1526796114804},{"_id":"public/2016/11/08/利用属性动画在Android4.x上实现Android L的元素转场动画效果/index.html","hash":"ff69cf9e293466e692a32a5e96b262833c5ade74","modified":1526796114804},{"_id":"public/2016/10/17/Android View的可见性检查方法-上篇/index.html","hash":"730782d368f348e162862cb36ae43bf1a8f630eb","modified":1526796114804},{"_id":"public/2016/09/25/App动态配置探讨/index.html","hash":"ce68dfb985e8822530e1051bcb1676db5a441459","modified":1526796114804},{"_id":"public/2016/09/07/Android反编译技术总结/index.html","hash":"200c3bf7f23ad1ba416dd80d0028cbbc0417bd7d","modified":1526796114804},{"_id":"public/2016/09/02/Android地理位置服务解析/index.html","hash":"0bb22443c0ad1f0f85924440c0ad18cee5b8df15","modified":1526796114804},{"_id":"public/2016/08/21/不写代码实现px转换成dp/index.html","hash":"919edad8d00c28ff587b079c34ffa272fc52eaee","modified":1526796114804},{"_id":"public/2016/03/12/Android N App分屏模式完全解析-下篇/index.html","hash":"6ee56fe078a82d9e05f3d7beeafbca463ab6ca1b","modified":1526796114804},{"_id":"public/2016/03/12/Android N App分屏模式完全解析-上篇/index.html","hash":"34dabac1c362b323381bcd941b53c0bc5f3db86b","modified":1526796114804},{"_id":"public/2016/03/10/Android N安装方法及上手体验/index.html","hash":"897fcce72a2bdc822e6007caa475c086e4cde8f6","modified":1526796114804},{"_id":"public/2016/03/06/Android6.0权限适配之SD卡写入/index.html","hash":"221c4dc70631f481b536c2f426b296670537b9f0","modified":1526796114804},{"_id":"public/2016/03/05/Android6.0运行时权限简介/index.html","hash":"b3e5b3d1b644bc5eae488c58cb6fced65f6c3aee","modified":1526796114805},{"_id":"public/2015/11/26/Android WebView调用JS/index.html","hash":"45e03814cd39c094eeb6427a1f2d4c3a256afdd6","modified":1526796114805},{"_id":"public/2015/11/17/自定义Android Gradle插件/index.html","hash":"72288d1091475452474e2f0b4bb1b6dca578d77d","modified":1526796114805},{"_id":"public/2015/10/25/Gradle实践之打包jar+Log开关自动关闭/index.html","hash":"b9b964708d0b56c1a95117bd60d79bf4cfd34591","modified":1526796114805},{"_id":"public/2015/10/22/Android Studio Gradle实践之多渠道自动化打包+版本号管理/index.html","hash":"7a031412ad4e73277d4510ec02831cd0787dc851","modified":1526796114805},{"_id":"public/2015/06/01/Android Studio安装配置笔记/index.html","hash":"a828d4491d9c6f2793b5008b2036aa8f2f7bf7ca","modified":1526796114805},{"_id":"public/2015/04/30/使用前端开发利器Fiddler调试手机程序/index.html","hash":"0d95143dc6b6d8dc4bf5652e12269f0018efb42d","modified":1526796114805},{"_id":"public/archives/index.html","hash":"fb5530534bf244e56d9c55fe709f0a8c7814495f","modified":1526215710059},{"_id":"public/archives/page/2/index.html","hash":"8026b7beffd09d5ba358bf73f5988e637d2c7127","modified":1526215710059},{"_id":"public/archives/page/3/index.html","hash":"948faee100c777f86ee438981c045b43d9fd70ff","modified":1526215710059},{"_id":"public/archives/page/4/index.html","hash":"b186d5d42607ea5881e5dd949a054088f77ef984","modified":1526215710059},{"_id":"public/archives/2015/index.html","hash":"c9fd9597c35f8dc9e7efc49c9ca2ec2866a70820","modified":1526215710059},{"_id":"public/archives/2016/index.html","hash":"aef00e3ff10322868cb5d6745cd4c4d820d54d6a","modified":1526215710059},{"_id":"public/archives/2016/page/2/index.html","hash":"ac8f0b68d9f31abfd7552fb8e5c2a9f2a11316c0","modified":1526215710059},{"_id":"public/archives/2016/03/index.html","hash":"d54689e8bb276d77443bcd7c85fbce4b29a10eb2","modified":1526215710060},{"_id":"public/archives/2017/index.html","hash":"43ccaa8764a6ba8821e8abdaf99c62a3d08f71d9","modified":1526215710060},{"_id":"public/categories/技术/index.html","hash":"79752bf042d78ab5fb936eb2d1bf8ee1c1d01b62","modified":1526215710060},{"_id":"public/categories/技术/page/2/index.html","hash":"9f1b7b9e0ac4e2f2e16e2c96c310183ac4ac6a49","modified":1526215710060},{"_id":"public/categories/技术/page/3/index.html","hash":"9c1b58ab891893f187730459da368817b7c0ec9b","modified":1526215710060},{"_id":"public/categories/技术/page/4/index.html","hash":"05c7d1bd4c3670a16d2b726d0bcf35768020b28a","modified":1526215710060},{"_id":"public/index.html","hash":"a4978f96aa6544f7b4f5112b28d30eb195aef953","modified":1526215710062},{"_id":"public/page/2/index.html","hash":"29a132b88c6337094d084d71404a4dbd7811757a","modified":1526215710062},{"_id":"public/page/3/index.html","hash":"09ae61b52ff3184c43e261f4b8fb39b0a187968e","modified":1526215710062},{"_id":"public/page/4/index.html","hash":"6934dde0b4f1424962703d69c61a7f146d92efa7","modified":1526215710062},{"_id":"public/tags/Android/index.html","hash":"edf39e04642486d6bf9ba6f8b27db0d9e23d136f","modified":1526215710062},{"_id":"public/tags/Android/page/2/index.html","hash":"a4364ab7d6b475b908a14e6c10b72772558836a4","modified":1526215710062},{"_id":"public/tags/Android/page/3/index.html","hash":"edc290d6a0197d442991cf3cb1bc5791a885504a","modified":1526215710062},{"_id":"public/tags/适配/index.html","hash":"bc70d25dd49a094a5637e266ab6c28b5570f9d7f","modified":1526215710062},{"_id":"public/favicon.ico","hash":"f74f5ae15db633bc7f088e0b2349760634cff8a6","modified":1526215710081},{"_id":"public/content/favicon-16x16.png","hash":"a6e32db71376a080da68d6ec1de6a53903e7f698","modified":1526215710081},{"_id":"public/content/apple-touch-icon-144x144.png","hash":"55940aff927020df38234e0d1b1928af135d8a70","modified":1526215710081},{"_id":"public/content/favicon-32x32.png","hash":"fb8191fe55cc5c2cc3b666cddb67cf62b0c45b22","modified":1526215710081},{"_id":"public/content/favicon.ico","hash":"f74f5ae15db633bc7f088e0b2349760634cff8a6","modified":1526215710081},{"_id":"public/content/mstile-144x144.png","hash":"64841d80b06d40cacf1ae2ca45adee6464db19a9","modified":1526215710081},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1526215710081},{"_id":"public/content/images/aB.png","hash":"f1035775fc4b3699aa1686ed90c5fab8ef8a6d5c","modified":1526215710082},{"_id":"public/content/images/and-you-are-done.png","hash":"8f9b02aa63fd6f5036a1d0aea46ee8650c34db99","modified":1526215710082},{"_id":"public/content/images/apk-outputs.png","hash":"68e8561d5b7d9afec40045da91a1cb8bb4c73ad3","modified":1526215710082},{"_id":"public/content/images/app-cancel-perm.png","hash":"e2d11f837d65a9b878737b2810c5559d31cc8f69","modified":1526215710082},{"_id":"public/content/images/app-perm-after.png","hash":"c141eeaf8251f2430cca6fcbe0d06805b5f8b6c8","modified":1526215710082},{"_id":"public/content/images/app-perm-before.png","hash":"d9d57129d4a8567a50057ac1b3876eb7ff422517","modified":1526215710082},{"_id":"public/content/images/automatic-page-generator.png","hash":"5782ca55e2cb1d1a677686ff9b9687814129cda0","modified":1526215710082},{"_id":"public/content/images/clone-the-repository.png","hash":"df865295292ac97bf17e3414609905d636ced38e","modified":1526215710082},{"_id":"public/content/images/app-storage.png","hash":"533a871d687f6305d29fee1d1b14ccb2c113f7ac","modified":1526215710082},{"_id":"public/content/images/buildconfig-enable-debug.png","hash":"998d2bdfb4dba56c1b33597cf73df692690e3876","modified":1526215710082},{"_id":"public/content/images/create-folders.png","hash":"68e4541b288381b3d913bff7e084a10f99f70693","modified":1526215710082},{"_id":"public/content/images/create-index.png","hash":"00756b0cb6959efbe9ab7b5743d94c2574427190","modified":1526215710082},{"_id":"public/content/images/create-a-repository.png","hash":"661d19f48bd24a0225bd5a049ea3496b00c7e289","modified":1526215710082},{"_id":"public/content/images/create-gh-pages-branch.png","hash":"ee7a78d247f193ffee8a20e97d7b000db4975193","modified":1526215710082},{"_id":"public/content/images/custom-log-enable.png","hash":"0262f41a23fca8dd5df58d573327bc6a92f9f3dd","modified":1526215710082},{"_id":"public/content/images/drop-event.png","hash":"882c3dd3c67b0e6c42cb4ec19bb4bcfb2c2cbf4b","modified":1526215710083},{"_id":"public/content/images/fiddlerWillow.png","hash":"681e6e12f275ea623a519c58f1569357b1cff63d","modified":1526215710083},{"_id":"public/content/images/helloCreatTestApplicaiton.png","hash":"c79781cd2ffd14a93548a61184425a21a37402ac","modified":1526215710083},{"_id":"public/content/images/fiddlerWillowRule.png","hash":"8c9cb5b42ca2847bd9b298642318136982f8c90b","modified":1526215710083},{"_id":"public/content/images/helloSDK.png","hash":"39702e16ac8f7fb1240f1173a3a8bdab2ab6c291","modified":1526215710083},{"_id":"public/content/images/helloStructure.png","hash":"1a1848a421f200665f4e5722086eb9c08fddc183","modified":1526215710083},{"_id":"public/content/images/helloStructure2.png","hash":"4d3505f3a8f8f0a700910d7dd2a968e89c33ca07","modified":1526215710083},{"_id":"public/content/images/i-am-a-lib.png","hash":"60de33c0be6799cd195d657e547aa9f264571463","modified":1526215710083},{"_id":"public/content/images/me.jpg","hash":"4b3aca187090c9d5e0a098c1a0d686c0c2601c3a","modified":1526215710083},{"_id":"public/content/images/my-jar-lib.png","hash":"e618f3494f0ce56340bffbc5b2fdcf60f38ac23e","modified":1526215710083},{"_id":"public/content/images/my-pro-lib.png","hash":"b9a981c02c8a079f32321aaa59c9c7531ce1ef78","modified":1526215710083},{"_id":"public/content/images/my-lib.png","hash":"e58dd2612e1aa220d1e9efc169c1f3e0e0c0daf8","modified":1526215710083},{"_id":"public/content/images/new-a-gradle-file.png","hash":"a04785da1df9c3ed3441136b7480cedfe0918b70","modified":1526215710083},{"_id":"public/content/images/new-a-plugin-folder.png","hash":"e6932c8dc3a97de1dba3fb6473ffe483165ff66b","modified":1526215710083},{"_id":"public/content/images/open-the-plugin.png","hash":"22710e1e5882792fd38191ea138c4aa7c9c22b79","modified":1526215710084},{"_id":"public/content/images/open-terminal.png","hash":"fe9cf9b6706030460f5c047b235de4636855198d","modified":1526215710084},{"_id":"public/content/images/new-class-folder.png","hash":"b83d514efc4fa2ba18752f7110092ccfd82c8ab0","modified":1526215710084},{"_id":"public/content/images/output-classes.png","hash":"ac115f620e75e836223d32e75689bca2e17fa6dd","modified":1526215710084},{"_id":"public/content/images/push.png","hash":"70137d2cfe358af2027f50d6673a501815854551","modified":1526215710084},{"_id":"public/content/images/settings.png","hash":"d3aa9fcdfbfdf0b78e65b9ebb9cad0c4516f44b9","modified":1526215710084},{"_id":"public/content/images/two-modules.png","hash":"bd1bc9c06211a0095088a76d7fe56301a74c20d0","modified":1526215710084},{"_id":"public/content/images/use-your-gradle-wrapper.png","hash":"b2d3cda516def3164ed9a06120c333fa64b88ae3","modified":1526215710084},{"_id":"public/content/images/you-are-done-again.png","hash":"7840b7fd63930c64c8db233b70fc8723bace2eca","modified":1526215710084},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1526215710084},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1526215710084},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1526215710084},{"_id":"public/images/avatar.png","hash":"55940aff927020df38234e0d1b1928af135d8a70","modified":1526215710084},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1526215710084},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1526215710084},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1526215710084},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1526215710084},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1526215710084},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526215710084},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526215710085},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1526215710085},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1526215710085},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1526215710085},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1526215710085},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1526215710085},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526215710085},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526215710085},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526215710085},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526215710085},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526215710085},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526215710085},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1526215710085},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1526215710085},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1526215710085},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1526215710085},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1526215710086},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1526215710086},{"_id":"public/content/apple-touch-icon-152x152.png","hash":"01544686eb7dbac67c9adb638b8ce79ead52d206","modified":1526215710551},{"_id":"public/content/favicon-196x196.png","hash":"0b2c6c9c9685dcf6bbe0b2094ead7e3972f5974d","modified":1526215710552},{"_id":"public/content/images/app-permission.png","hash":"0705bb0f63586e17fd95ec2eb1c429f9c58e15c2","modified":1526215710561},{"_id":"public/content/images/create-a-project.png","hash":"580d01879d4f3c7d126ed759849182187f55c863","modified":1526215710561},{"_id":"public/content/images/enroll-device.png","hash":"302a08a3fed347e2c22a1cb8e09d79a925358eaf","modified":1526215710562},{"_id":"public/content/images/fiddlerCatchU.png","hash":"da6f162c0a469055812d8834785230ffef5e0a3f","modified":1526215710562},{"_id":"public/content/images/fiddlerSetup.png","hash":"a5473b0b96b02621bcd07ff4ff87ce8cf0c608a8","modified":1526215710562},{"_id":"public/content/images/fiddlerWifiSetup.png","hash":"4561980201ac6071a6793860ebe6ba9adc9ae3ea","modified":1526215710562},{"_id":"public/content/images/fiddlerWillowMenus.png","hash":"41ce4f798f1cf4a863a4be922697b0659f3117c2","modified":1526215710562},{"_id":"public/content/images/hello-webview-js-demo.png","hash":"c5b07bb707bc5bae4b9057c0fceaeb844b3a58f9","modified":1526215710562},{"_id":"public/content/images/helloAS.png","hash":"67496cd369ebb030d82eeae2d7fe02520b8e7d2e","modified":1526215710562},{"_id":"public/content/images/helloCreatTestApplicaiton2.png","hash":"c294a2d91cdfe039ad6eeb3017395ae8ecde57cd","modified":1526215710562},{"_id":"public/content/images/helloProxy.png","hash":"dec9b85ff3fcfff2d93a6e21a0c524d12303133d","modified":1526215710562},{"_id":"public/content/images/helloFont.png","hash":"ecf9dda61b24a507739eec4e1c5f059fa06234b4","modified":1526215710562},{"_id":"public/content/images/helloFiddler.png","hash":"774e0d8c32c3d77a3d32e57aa8f836eddce0e5a4","modified":1526215710562},{"_id":"public/content/images/helloSettings.png","hash":"a5b9a83c009b9305bd7f0dcd6b28f5148d829707","modified":1526215710562},{"_id":"public/content/images/helloWizard.png","hash":"1df80f56e154766731ce8c893af5b3aa32252f3c","modified":1526215710562},{"_id":"public/content/images/jekyll-structure.png","hash":"c01373fdedb24d481063d4d1548174c50c36e836","modified":1526215710563},{"_id":"public/content/images/two-acts.png","hash":"fa68f59e1a3f6c59ef29a1a7ac3e070acec95d92","modified":1526215710563},{"_id":"public/content/images/two-apps.png","hash":"e60cfd3a729dc735a2d2b09d13aa6bee6af71497","modified":1526215710563},{"_id":"public/content/images/cover/helloFiddler.jpg","hash":"8bad10fef9e151820075b84ef2649151b1fb59e2","modified":1526215710563},{"_id":"public/content/images/cover/helloAndroidStudioAndGradle.png","hash":"79262bec61ffa29ec3e2a7e6cc2033817bc019be","modified":1526215710563},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526215710563},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526215710563},{"_id":"public/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1526215710575},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1526215710575},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1526215710575},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1526215710575},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1526215710575},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1526215710575},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1526215710575},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1526215710575},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1526215710575},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1526215710575},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1526215710575},{"_id":"public/js/src/utils.js","hash":"803f684fa7d0e729115a48851023a31f6fb6d0a7","modified":1526215710575},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1526215710575},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1526215710575},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1526215710576},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1526215710576},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1526215710576},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1526215710576},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1526215710576},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1526215710576},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1526215710576},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1526215710576},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1526215710576},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1526215710576},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1526215710576},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1526215710576},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1526215710576},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1526215710576},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1526215710576},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1526215710576},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1526215710576},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1526215710577},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1526215710577},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1526215710577},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1526215710577},{"_id":"public/css/main.css","hash":"ede579a06fdfb5268ceb05d29927f70c6dc2d87b","modified":1526215710577},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1526215710577},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1526215710577},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1526215710577},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1526215710577},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1526215710578},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1526215710578},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1526215710578},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1526215710578},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1526215710578},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1526215710578},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1526215710578},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1526215710578},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1526215710578},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1526215710578},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1526215710578},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1526215710578},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1526215710578},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1526215710579},{"_id":"public/content/images/helloSDKProxy.png","hash":"01d1c5388bd19c5a6df1ad417acbff222807b824","modified":1526215710579},{"_id":"public/content/images/add-groovy-sdk.png","hash":"21895da62c40a0ef9a94fcf018225019e81e6072","modified":1526215710579},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526215710579},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1526215710579},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1526215710579},{"_id":"public/content/me.png","hash":"9e11de8b05a1c75e9b85d2002153208f7e39bd0f","modified":1526215710598},{"_id":"public/content/images/drag-drop.png","hash":"6a72d4e867047d10f0a030abb99fd64914bf2bd7","modified":1526215710598},{"_id":"public/content/images/gmail-xml.png","hash":"dc87c0af5462a22362a0cfc04c33e30690a59a92","modified":1526215710599},{"_id":"public/content/images/new-a-lib-module.png","hash":"3b3a2fd9c6d2fe31cd5aae96e1ed02ca327e3abc","modified":1526215710600},{"_id":"public/content/images/split-screen.png","hash":"4d3ab6e8dd9452737248776710b27622ae90552a","modified":1526215710601},{"_id":"public/images/bg.jpg","hash":"d6c89438a65355796100f514e7bbf420bec789c9","modified":1526215710602},{"_id":"public/content/images/cover/android-n.png","hash":"8258fe998eb44096ba3067c588773b336a185b37","modified":1526215710602},{"_id":"public/content/images/android-n-devices.png","hash":"6f4051382bc20a2a94634cc4cb9be9473df2cbea","modified":1526215710615},{"_id":"public/content/images/start-drag.png","hash":"31c47115102b10964196c4d4d56484cd5b5f7c00","modified":1526215710615},{"_id":"public/content/images/cover/cover-create-git-pages.png","hash":"c02038f829fc8d47b9bbd9a2122c5e629430c130","modified":1526215710615},{"_id":"public/content/images/cover/muti-screen.png","hash":"a70619ee185c1b3c7b6c8a6f455550c5d9fdbc4c","modified":1526215710616},{"_id":"public/content/images/first-experience.png","hash":"da99075f1197eeb55580999f18127ca36eeaf4e3","modified":1526215710640},{"_id":"public/content/images/fiddlerBaidu.png","hash":"9ad9a8026b020b5d95ebba9d6973dd77d9ec7d7d","modified":1526215710640},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1526215710641},{"_id":"public/content/images/yaohaola-desc-thumb.png","hash":"a600dc9b06b8c45eb383cc95f0e97b5b4920b331","modified":1526215710663},{"_id":"themes/next/scripts/.DS_Store","hash":"b282781ad05b015f473b3e3d8cb72b64865d1698","modified":1526795208000}],"Category":[{"name":"技术","_id":"cjh4tf8dm0004mtsxfigs6fpt"}],"Data":[],"Page":[{"title":"关于我","date":"2017-05-22T12:55:51.000Z","type":"about","comments":0,"_content":"\n北京某互联网公司码农，喜欢研究科技打篮球听音乐看电影看美女读书。\n\n业余爱好APP开发，业余作品**摇号啦App**，可以查询**万年难中签**的北京市个人小汽车摇号指标。\n\n# 微信小程序版\n\n只保留了最重要的功能：登录官网，查询摇号结果，打开微信扫下面的小程序码即可使用。\n\n![WeixinQrCode](http://ww1.sinaimg.cn/large/666d8c6fgy1fnlvouga95j209k09kmyw.jpg)\n\n基本界面：\n\n![WeixinApp](http://ww1.sinaimg.cn/large/666d8c6fgy1fnlvms6pjvj20xc0lw442.jpg)\n\n\n# Android版\n\n由于个人原因无法再维护新闻界面，但侧滑菜单中的登录官网，查询摇号结果仍然可用。\n\n![摇号啦APP screenshot](/content/images/yaohaola-desc-thumb.png)\n\n下载地址：\n\n[小米](http://app.mi.com/detail/66810)、[百度](http://shouji.baidu.com/soft/item?docid=7363116)、[应用宝](http://android.myapp.com/myapp/detail.htm?apkName=com.nought.yaoleme)、[豌豆荚](http://www.wandoujia.com/apps/com.nought.yaoleme)、[魅族](http://app.meizu.com/apps/public/detail?package_name=com.nought.yaoleme)\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-05-22 20:55:51\ntype: \"about\"\ncomments: false\n---\n\n北京某互联网公司码农，喜欢研究科技打篮球听音乐看电影看美女读书。\n\n业余爱好APP开发，业余作品**摇号啦App**，可以查询**万年难中签**的北京市个人小汽车摇号指标。\n\n# 微信小程序版\n\n只保留了最重要的功能：登录官网，查询摇号结果，打开微信扫下面的小程序码即可使用。\n\n![WeixinQrCode](http://ww1.sinaimg.cn/large/666d8c6fgy1fnlvouga95j209k09kmyw.jpg)\n\n基本界面：\n\n![WeixinApp](http://ww1.sinaimg.cn/large/666d8c6fgy1fnlvms6pjvj20xc0lw442.jpg)\n\n\n# Android版\n\n由于个人原因无法再维护新闻界面，但侧滑菜单中的登录官网，查询摇号结果仍然可用。\n\n![摇号啦APP screenshot](/content/images/yaohaola-desc-thumb.png)\n\n下载地址：\n\n[小米](http://app.mi.com/detail/66810)、[百度](http://shouji.baidu.com/soft/item?docid=7363116)、[应用宝](http://android.myapp.com/myapp/detail.htm?apkName=com.nought.yaoleme)、[豌豆荚](http://www.wandoujia.com/apps/com.nought.yaoleme)、[魅族](http://app.meizu.com/apps/public/detail?package_name=com.nought.yaoleme)\n","updated":"2018-05-13T07:13:37.000Z","path":"about/index.html","layout":"page","_id":"cjh4tf8dj0001mtsxspobrwtm","content":"<p>北京某互联网公司码农，喜欢研究科技打篮球听音乐看电影看美女读书。</p>\n<p>业余爱好APP开发，业余作品<strong>摇号啦App</strong>，可以查询<strong>万年难中签</strong>的北京市个人小汽车摇号指标。</p>\n<h1 id=\"微信小程序版\"><a href=\"#微信小程序版\" class=\"headerlink\" title=\"微信小程序版\"></a>微信小程序版</h1><p>只保留了最重要的功能：登录官网，查询摇号结果，打开微信扫下面的小程序码即可使用。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/666d8c6fgy1fnlvouga95j209k09kmyw.jpg\" alt=\"WeixinQrCode\"></p>\n<p>基本界面：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/666d8c6fgy1fnlvms6pjvj20xc0lw442.jpg\" alt=\"WeixinApp\"></p>\n<h1 id=\"Android版\"><a href=\"#Android版\" class=\"headerlink\" title=\"Android版\"></a>Android版</h1><p>由于个人原因无法再维护新闻界面，但侧滑菜单中的登录官网，查询摇号结果仍然可用。</p>\n<p><img src=\"/content/images/yaohaola-desc-thumb.png\" alt=\"摇号啦APP screenshot\"></p>\n<p>下载地址：</p>\n<p><a href=\"http://app.mi.com/detail/66810\" target=\"_blank\" rel=\"noopener\">小米</a>、<a href=\"http://shouji.baidu.com/soft/item?docid=7363116\" target=\"_blank\" rel=\"noopener\">百度</a>、<a href=\"http://android.myapp.com/myapp/detail.htm?apkName=com.nought.yaoleme\" target=\"_blank\" rel=\"noopener\">应用宝</a>、<a href=\"http://www.wandoujia.com/apps/com.nought.yaoleme\" target=\"_blank\" rel=\"noopener\">豌豆荚</a>、<a href=\"http://app.meizu.com/apps/public/detail?package_name=com.nought.yaoleme\" target=\"_blank\" rel=\"noopener\">魅族</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>北京某互联网公司码农，喜欢研究科技打篮球听音乐看电影看美女读书。</p>\n<p>业余爱好APP开发，业余作品<strong>摇号啦App</strong>，可以查询<strong>万年难中签</strong>的北京市个人小汽车摇号指标。</p>\n<h1 id=\"微信小程序版\"><a href=\"#微信小程序版\" class=\"headerlink\" title=\"微信小程序版\"></a>微信小程序版</h1><p>只保留了最重要的功能：登录官网，查询摇号结果，打开微信扫下面的小程序码即可使用。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/666d8c6fgy1fnlvouga95j209k09kmyw.jpg\" alt=\"WeixinQrCode\"></p>\n<p>基本界面：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/666d8c6fgy1fnlvms6pjvj20xc0lw442.jpg\" alt=\"WeixinApp\"></p>\n<h1 id=\"Android版\"><a href=\"#Android版\" class=\"headerlink\" title=\"Android版\"></a>Android版</h1><p>由于个人原因无法再维护新闻界面，但侧滑菜单中的登录官网，查询摇号结果仍然可用。</p>\n<p><img src=\"/content/images/yaohaola-desc-thumb.png\" alt=\"摇号啦APP screenshot\"></p>\n<p>下载地址：</p>\n<p><a href=\"http://app.mi.com/detail/66810\" target=\"_blank\" rel=\"noopener\">小米</a>、<a href=\"http://shouji.baidu.com/soft/item?docid=7363116\" target=\"_blank\" rel=\"noopener\">百度</a>、<a href=\"http://android.myapp.com/myapp/detail.htm?apkName=com.nought.yaoleme\" target=\"_blank\" rel=\"noopener\">应用宝</a>、<a href=\"http://www.wandoujia.com/apps/com.nought.yaoleme\" target=\"_blank\" rel=\"noopener\">豌豆荚</a>、<a href=\"http://app.meizu.com/apps/public/detail?package_name=com.nought.yaoleme\" target=\"_blank\" rel=\"noopener\">魅族</a></p>\n"},{"title":"分类","date":"2017-05-22T09:47:52.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-05-22 17:47:52\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-05-13T07:13:37.000Z","path":"categories/index.html","layout":"page","_id":"cjh4tf8dl0003mtsxdy6y6e9w","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-05-22T09:45:36.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-05-22 17:45:36\ntype: \"tags\"\ncomments: false\n---","updated":"2018-05-13T07:13:37.000Z","path":"tags/index.html","layout":"page","_id":"cjh4tf8j4004omtsxo5p8uo9b","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"Android N App分屏模式完全解析（上）","date":"2016-03-11T16:00:00.000Z","_content":"\n上手了Android N Preview，第一个不能错过的新特性就是App分屏的支持。Android7.0原生系统就可以支持两个App横屏并排或者竖屏上下摆放了。第二个新特性就是在Android TV上，原生系统也可以支持App实现画中画，用户可以一边看视频一边操作其他的应用。\n\n其实早先在国内部分厂商以及鹅厂的微信App就已经支持在大尺寸手机上进行分屏浏览。也有一些视频播放器，如MoboPlayer就已经实现了按下Home键回到首页时以迷你播放器的形式进行播放。这种体验非常棒，我猜测一般是通过WindowManager来添加悬浮播放器界面的。但是这次是原生系统增加了对这种特性的支持，相信我们会有更多理由为用户的体验做出更多新的尝试。\n\n下面介绍一下我参考[multi-window-support](http://developer.android.com/intl/zh-cn/preview/features/multi-window.html#running)对App分屏模式进行的实践。\n\n首先引用一下官方的说法：\n\n> 如果你使用Android N Preview SDK来构建你的App，你可以给添加App一些分屏浏览的配置。例如设置Activity的最小尺寸，也可以禁止自己的App进入分屏模式，保证你的App只能在全屏模式下展示。\n\n<!-- more -->\n\n# 概述\n\nAndroid N允许用户一次在屏幕中使用两个App，例如将屏幕一分为二，左边浏览网页，右边查看邮件。具体的体验取决于你的设备。\n\n- 手持设备中，用户可以左右并排/上下摆放两个App来使用。用户还可以左右/上下拖拽中间的那个小白线来改变两个App的尺寸。\n\n![split-screen](/content/images/split-screen.png)\n\n- 在运行Android N的Nexus Player上，App可以实现画中画模式，允许用户使用一个App浏览内容的同时，在另一个App上操作。\n\n- 大尺寸设备的厂商甚至可以实现自由模式，这样就可以使得用户可以完全自由地改变界面的尺寸。这又是与分屏更为不同一种体验。\n\n用户是如何操作来进入分屏模式的呢：\n\n1. 点击右下角的方块，进入任务管理器，长按一个App的标题栏，将其拖入屏幕的高亮区域，这个App金进入了分屏模式。然后在任务管理器中选择另一个App，单击它使得这个App也进入分屏模式。\n2. 打开一个App，然后长按右下角的方块，此时已经打开的这个App将进入分屏模式。然后在屏幕上的任务管理器中选择另外一个App，单击它使得这个App也进入分屏模式。\n3. 最新发现：下拉通知栏，长按右上角的设置图标，将开启隐藏设置功能`“系统界面调谐器”`，进入设置界面，最下方有系统界面调谐器选项，进入后选择`“Other”->“启用分屏上滑手势”`，就可以从任务管理器上上滑进入分屏模式了。具体操作是`当一个App已经处于全屏模式时，用手指从右下角的小方块向上滑动`。这个设置将来在正式版可能有变化，所以还是不要太依赖。\n\n用户还可以在这两个App之间拖动数据，例如将一个App的Activity上的文件拖动到另外一个App的Activity中去。具体的实现下面会介绍，谷歌官方也有[拖拽相关的教程](http://developer.android.com/intl/zh-cn/guide/topics/ui/drag-drop.html)。\n\n# 分屏模式的生命周期\n\n首先要说明的一点是，分屏模式没有改变Activity的生命周期。\n\n官方说法是：\n> 在分屏模式下，用户最近操作、激活过的Activity将被系统视为`topmost`。而其他的Activity都属于`paused`状态，即使它是一个对用户可见的Activity。但是这些可见的处于`paused`状态的Activity将比那些不可见的处于`paused`状态的Activity得到更高优先级的响应。当用户在一个可见的`paused`状态的Activity上操作时，它将得到恢复`resumed`状态，并被系统视为`topmost`。而之前那个那个处于`topmpst`的Activity将变成`paused`状态。\n\n怎么理解这段话，看下图：\n\n![two-app](/content/images/two-apps.png)\n\n其实就是说处于分屏模式下的两个Ap各自处于生命周期的什么状态。上图中我打开了两个App，上面的是一个Gmail App，下面这个是一个Demo App（[ApkParser](https://github.com/jaredrummler/APKParser)先感谢作者的分享~）是个开源应用，能够解析Apk，后面会用到它）。现在这两个App都是进入了`分屏模式`，我们还可以拖动中间这条白线来调整两个App占用的大小。\n\n我点击了Gmail，浏览了一封邮件，那么此时**Gmail**就被系统视为`topmost`状态，它是处于`resumed`状态的，而下面的**ApkPaserDemo**虽然对用户可见，但是**它仍然是处于`paused`状态**的。接着我点击了系统的`back`按钮返回，响应的是上面的**Gmail**（因为它被视为topmost）。然后我又点击了下面的**ApkParserDemo**，这时它从`paused`状态变成了`resumed`状态。而上面的**Gmail**进入了 `paused`状态。\n\n注意，这两个App对于用户都是**始终可见**的，当它们处于`paused`状态时，也将比那些后台的处于**不可见的**App得到更高系统优先级。这个优先级怎么体现呢？两个App进入分屏模式后，一定有一个处于resume/topmost状态，假如我一直按`back`返回，当这个topmost状态App的task返回栈已经为空时，那么系统将把另外一个可见的App恢复为全屏模式，这就是我的理解。\n\n那么这种`可见的pause`的状态将带来什么影响呢？引用下官方说法是：\n\n> 在分屏模式中，一个App可以在对用户可见的状态下进入`paused`状态，所以你的App在处理业务时，应该知道自己什么时候应该真正的`暂停`。例如一个视频播放器，如果进入了分屏模式，就不应该在`onPaused()`回调中暂停视频播放，而应该在`onStop()`回调中才暂停视频，然后在`onStart`回调中恢复视频播放。关于如果知道自己进入了分屏模式，在`Android N`的Activity类中，增加了一个`void onMultiWindowChanged(boolean inMultiWindow)`回调，所以我们可以在这个回调知道App是不是进入了分屏模式。\n\n当App进入分屏模式后，将会触发Activity的`onConfigurationChanged()`，这与以前我们在处理App从`横竖屏切换`时的方法一样，不同于的是这里是宽/高有所改变，而`横竖屏切换`是宽高互换。至于如何处理，可以参考官方文档[处理运行时变更](http://developer.android.com/intl/zh-cn/guide/topics/resources/runtime-changes.html)。我们最好处理好这种运行时状态的改变，否则我们的Activity将被重新创建，即以新的宽高尺寸重新`onCreate()`一遍。\n\n注意，如果用户重新调整窗口的大小，系统在**必要的时候**也可能触发`onConfigurationChanged()`。当App的窗口被用户拖动，其尺寸改变后界面的还没有绘制完成时，系统将用App主题中的`windowBackground`属性指定的背景来暂时填充这些区域。\n\n# 如何设置App的分屏模式\n\n说了一堆分屏的操作方法、生命周期，那么作为开发者，怎样才能让App进入`分屏`模式呢？有下面这几个属性。\n\n## android:resizeableActivity\n\n如果你适配到了`Android N`，即`build.gradle`是这样的：\n\n```\nandroid {\n    compileSdkVersion 'android-N'\n    buildToolsVersion '24.0.0 rc1'\n\n    defaultConfig {\n        applicationId \"com.example.noughtchen.andndemo\"\n        minSdkVersion 'N'\n        targetSdkVersion 'N'\n        versionCode 1\n        versionName \"1.0\"\n    }\n    ...\n}\n```\n\n那么直接在`AndroidManifest.xml`中的`<application>`或者`<activity>`标签下设置新的属性`android:resizeableActivity=\"true\"`。\n\n设置了这个属性后，你的App/Activity就可以进入`分屏模式`或者`自由模式`了。\n\n如果这个属性被设为`false`，那么你的App将无法进入分屏模式，如果你在打开这个App时，长按右下角的小方块，App将仍然处于全屏模式，系统会弹出Toast提示你无法进入分屏模式。这个属性在你**target**到`Android N`后，`android:resizeableActivity`的默认值就是`true`。\n\n> 注意：假如你**没有适配到Android N**（`targetSDKVersion < Android N`），打包App时的`compileSDKVersion < Android N`，你的App也是可以支持分屏的！！！！原因在于：如果你的App**没有** 设置 **`仅允许Activity竖屏/横屏`**，即没有设置类型**`android:screenOrientation=\"XXX\"`属性**时，运行Android N系统的设备还是 **可以** 将你的App **分屏！！** 但是这时候系统是不保证运行时的稳定性的，在进入分屏模式时，系统首先也会弹出Toast来提示你说明这个风险。\n\n所以其实我们在视频里看到那么多系统自带的App都是可以分屏浏览，原因就在于此。**这些App其实也并没有全部适配到Android N**。我不是骗你，不信你用`ApkParser`打开前面分屏过Gmail App的xml文件看看！\n\n![Gmail-xml](/content/images/gmail-xml.png)\n\n\n## android:supportsPictureInPicture\n\n这里不多说，Activity标签下，添加`android:supportsPictureInPicture=\"true\"`即可。\n\n```\n<activity\n            android:name=\".MainActivity\"\n            android:label=\"@string/app_name\"\n            android:resizeableActivity=\"true\"\n            android:supportsPictureInPicture=\"true\"\n            android:theme=\"@style/AppTheme.NoActionBar\">\n            ...\n        </activity>\n```\n\n## Layout attributes\n\n在Android N中，我们可以向`manifest`文件中添加`layout`节点，并设置一些新增加的属性，通过这些属性来设置分屏模式的一些行为，如最小尺寸等。\n\n- android:defaultWidth\n- android:defaultHeight\n- android:gravity\n- android:minimalSize\n\n我们可以给一个`Activity`增加一个`layout`子节点：\n\n```\n<activity\n            android:name=\".MainActivity\"\n            android:label=\"@string/app_name\"\n            android:resizeableActivity=\"true\"\n            android:supportsPictureInPicture=\"true\"\n            android:theme=\"@style/AppTheme.NoActionBar\">\n            ...\n            <layout android:defaultHeight=\"500dp\"\n                    android:defaultWidth=\"600dp\"\n                    android:gravity=\"top|end\"\n                    android:minimalSize=\"450dp\" />\n            ...\n        </activity>\n```\n\n下一篇[Android N App分屏模式完全解析（下）](http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-下篇/)将介绍一下分屏模式下运行的App将有哪些行为回调以及应该怎么处理等。\n\n---\n\nps：封面图片来自于谷歌官网\n\n\n\n\n\n\n\n\n\n","source":"_posts/Android N App分屏模式完全解析-上篇.markdown","raw":"---\nlayout: post\ntitle: Android N App分屏模式完全解析（上）\ndate: '2016-03-12 00:00:00'\nphoto: '/content/images/cover/muti-screen.png'\ntags:\n  - Android7.x\n  - Android\n  - 适配\ncategories: \n  - 技术\n---\n\n上手了Android N Preview，第一个不能错过的新特性就是App分屏的支持。Android7.0原生系统就可以支持两个App横屏并排或者竖屏上下摆放了。第二个新特性就是在Android TV上，原生系统也可以支持App实现画中画，用户可以一边看视频一边操作其他的应用。\n\n其实早先在国内部分厂商以及鹅厂的微信App就已经支持在大尺寸手机上进行分屏浏览。也有一些视频播放器，如MoboPlayer就已经实现了按下Home键回到首页时以迷你播放器的形式进行播放。这种体验非常棒，我猜测一般是通过WindowManager来添加悬浮播放器界面的。但是这次是原生系统增加了对这种特性的支持，相信我们会有更多理由为用户的体验做出更多新的尝试。\n\n下面介绍一下我参考[multi-window-support](http://developer.android.com/intl/zh-cn/preview/features/multi-window.html#running)对App分屏模式进行的实践。\n\n首先引用一下官方的说法：\n\n> 如果你使用Android N Preview SDK来构建你的App，你可以给添加App一些分屏浏览的配置。例如设置Activity的最小尺寸，也可以禁止自己的App进入分屏模式，保证你的App只能在全屏模式下展示。\n\n<!-- more -->\n\n# 概述\n\nAndroid N允许用户一次在屏幕中使用两个App，例如将屏幕一分为二，左边浏览网页，右边查看邮件。具体的体验取决于你的设备。\n\n- 手持设备中，用户可以左右并排/上下摆放两个App来使用。用户还可以左右/上下拖拽中间的那个小白线来改变两个App的尺寸。\n\n![split-screen](/content/images/split-screen.png)\n\n- 在运行Android N的Nexus Player上，App可以实现画中画模式，允许用户使用一个App浏览内容的同时，在另一个App上操作。\n\n- 大尺寸设备的厂商甚至可以实现自由模式，这样就可以使得用户可以完全自由地改变界面的尺寸。这又是与分屏更为不同一种体验。\n\n用户是如何操作来进入分屏模式的呢：\n\n1. 点击右下角的方块，进入任务管理器，长按一个App的标题栏，将其拖入屏幕的高亮区域，这个App金进入了分屏模式。然后在任务管理器中选择另一个App，单击它使得这个App也进入分屏模式。\n2. 打开一个App，然后长按右下角的方块，此时已经打开的这个App将进入分屏模式。然后在屏幕上的任务管理器中选择另外一个App，单击它使得这个App也进入分屏模式。\n3. 最新发现：下拉通知栏，长按右上角的设置图标，将开启隐藏设置功能`“系统界面调谐器”`，进入设置界面，最下方有系统界面调谐器选项，进入后选择`“Other”->“启用分屏上滑手势”`，就可以从任务管理器上上滑进入分屏模式了。具体操作是`当一个App已经处于全屏模式时，用手指从右下角的小方块向上滑动`。这个设置将来在正式版可能有变化，所以还是不要太依赖。\n\n用户还可以在这两个App之间拖动数据，例如将一个App的Activity上的文件拖动到另外一个App的Activity中去。具体的实现下面会介绍，谷歌官方也有[拖拽相关的教程](http://developer.android.com/intl/zh-cn/guide/topics/ui/drag-drop.html)。\n\n# 分屏模式的生命周期\n\n首先要说明的一点是，分屏模式没有改变Activity的生命周期。\n\n官方说法是：\n> 在分屏模式下，用户最近操作、激活过的Activity将被系统视为`topmost`。而其他的Activity都属于`paused`状态，即使它是一个对用户可见的Activity。但是这些可见的处于`paused`状态的Activity将比那些不可见的处于`paused`状态的Activity得到更高优先级的响应。当用户在一个可见的`paused`状态的Activity上操作时，它将得到恢复`resumed`状态，并被系统视为`topmost`。而之前那个那个处于`topmpst`的Activity将变成`paused`状态。\n\n怎么理解这段话，看下图：\n\n![two-app](/content/images/two-apps.png)\n\n其实就是说处于分屏模式下的两个Ap各自处于生命周期的什么状态。上图中我打开了两个App，上面的是一个Gmail App，下面这个是一个Demo App（[ApkParser](https://github.com/jaredrummler/APKParser)先感谢作者的分享~）是个开源应用，能够解析Apk，后面会用到它）。现在这两个App都是进入了`分屏模式`，我们还可以拖动中间这条白线来调整两个App占用的大小。\n\n我点击了Gmail，浏览了一封邮件，那么此时**Gmail**就被系统视为`topmost`状态，它是处于`resumed`状态的，而下面的**ApkPaserDemo**虽然对用户可见，但是**它仍然是处于`paused`状态**的。接着我点击了系统的`back`按钮返回，响应的是上面的**Gmail**（因为它被视为topmost）。然后我又点击了下面的**ApkParserDemo**，这时它从`paused`状态变成了`resumed`状态。而上面的**Gmail**进入了 `paused`状态。\n\n注意，这两个App对于用户都是**始终可见**的，当它们处于`paused`状态时，也将比那些后台的处于**不可见的**App得到更高系统优先级。这个优先级怎么体现呢？两个App进入分屏模式后，一定有一个处于resume/topmost状态，假如我一直按`back`返回，当这个topmost状态App的task返回栈已经为空时，那么系统将把另外一个可见的App恢复为全屏模式，这就是我的理解。\n\n那么这种`可见的pause`的状态将带来什么影响呢？引用下官方说法是：\n\n> 在分屏模式中，一个App可以在对用户可见的状态下进入`paused`状态，所以你的App在处理业务时，应该知道自己什么时候应该真正的`暂停`。例如一个视频播放器，如果进入了分屏模式，就不应该在`onPaused()`回调中暂停视频播放，而应该在`onStop()`回调中才暂停视频，然后在`onStart`回调中恢复视频播放。关于如果知道自己进入了分屏模式，在`Android N`的Activity类中，增加了一个`void onMultiWindowChanged(boolean inMultiWindow)`回调，所以我们可以在这个回调知道App是不是进入了分屏模式。\n\n当App进入分屏模式后，将会触发Activity的`onConfigurationChanged()`，这与以前我们在处理App从`横竖屏切换`时的方法一样，不同于的是这里是宽/高有所改变，而`横竖屏切换`是宽高互换。至于如何处理，可以参考官方文档[处理运行时变更](http://developer.android.com/intl/zh-cn/guide/topics/resources/runtime-changes.html)。我们最好处理好这种运行时状态的改变，否则我们的Activity将被重新创建，即以新的宽高尺寸重新`onCreate()`一遍。\n\n注意，如果用户重新调整窗口的大小，系统在**必要的时候**也可能触发`onConfigurationChanged()`。当App的窗口被用户拖动，其尺寸改变后界面的还没有绘制完成时，系统将用App主题中的`windowBackground`属性指定的背景来暂时填充这些区域。\n\n# 如何设置App的分屏模式\n\n说了一堆分屏的操作方法、生命周期，那么作为开发者，怎样才能让App进入`分屏`模式呢？有下面这几个属性。\n\n## android:resizeableActivity\n\n如果你适配到了`Android N`，即`build.gradle`是这样的：\n\n```\nandroid {\n    compileSdkVersion 'android-N'\n    buildToolsVersion '24.0.0 rc1'\n\n    defaultConfig {\n        applicationId \"com.example.noughtchen.andndemo\"\n        minSdkVersion 'N'\n        targetSdkVersion 'N'\n        versionCode 1\n        versionName \"1.0\"\n    }\n    ...\n}\n```\n\n那么直接在`AndroidManifest.xml`中的`<application>`或者`<activity>`标签下设置新的属性`android:resizeableActivity=\"true\"`。\n\n设置了这个属性后，你的App/Activity就可以进入`分屏模式`或者`自由模式`了。\n\n如果这个属性被设为`false`，那么你的App将无法进入分屏模式，如果你在打开这个App时，长按右下角的小方块，App将仍然处于全屏模式，系统会弹出Toast提示你无法进入分屏模式。这个属性在你**target**到`Android N`后，`android:resizeableActivity`的默认值就是`true`。\n\n> 注意：假如你**没有适配到Android N**（`targetSDKVersion < Android N`），打包App时的`compileSDKVersion < Android N`，你的App也是可以支持分屏的！！！！原因在于：如果你的App**没有** 设置 **`仅允许Activity竖屏/横屏`**，即没有设置类型**`android:screenOrientation=\"XXX\"`属性**时，运行Android N系统的设备还是 **可以** 将你的App **分屏！！** 但是这时候系统是不保证运行时的稳定性的，在进入分屏模式时，系统首先也会弹出Toast来提示你说明这个风险。\n\n所以其实我们在视频里看到那么多系统自带的App都是可以分屏浏览，原因就在于此。**这些App其实也并没有全部适配到Android N**。我不是骗你，不信你用`ApkParser`打开前面分屏过Gmail App的xml文件看看！\n\n![Gmail-xml](/content/images/gmail-xml.png)\n\n\n## android:supportsPictureInPicture\n\n这里不多说，Activity标签下，添加`android:supportsPictureInPicture=\"true\"`即可。\n\n```\n<activity\n            android:name=\".MainActivity\"\n            android:label=\"@string/app_name\"\n            android:resizeableActivity=\"true\"\n            android:supportsPictureInPicture=\"true\"\n            android:theme=\"@style/AppTheme.NoActionBar\">\n            ...\n        </activity>\n```\n\n## Layout attributes\n\n在Android N中，我们可以向`manifest`文件中添加`layout`节点，并设置一些新增加的属性，通过这些属性来设置分屏模式的一些行为，如最小尺寸等。\n\n- android:defaultWidth\n- android:defaultHeight\n- android:gravity\n- android:minimalSize\n\n我们可以给一个`Activity`增加一个`layout`子节点：\n\n```\n<activity\n            android:name=\".MainActivity\"\n            android:label=\"@string/app_name\"\n            android:resizeableActivity=\"true\"\n            android:supportsPictureInPicture=\"true\"\n            android:theme=\"@style/AppTheme.NoActionBar\">\n            ...\n            <layout android:defaultHeight=\"500dp\"\n                    android:defaultWidth=\"600dp\"\n                    android:gravity=\"top|end\"\n                    android:minimalSize=\"450dp\" />\n            ...\n        </activity>\n```\n\n下一篇[Android N App分屏模式完全解析（下）](http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-下篇/)将介绍一下分屏模式下运行的App将有哪些行为回调以及应该怎么处理等。\n\n---\n\nps：封面图片来自于谷歌官网\n\n\n\n\n\n\n\n\n\n","slug":"Android N App分屏模式完全解析-上篇","published":1,"updated":"2018-05-13T07:13:37.000Z","photos":["/content/images/cover/muti-screen.png"],"comments":1,"link":"","_id":"cjh4tf8df0000mtsx3q5f0ydg","content":"<p>上手了Android N Preview，第一个不能错过的新特性就是App分屏的支持。Android7.0原生系统就可以支持两个App横屏并排或者竖屏上下摆放了。第二个新特性就是在Android TV上，原生系统也可以支持App实现画中画，用户可以一边看视频一边操作其他的应用。</p>\n<p>其实早先在国内部分厂商以及鹅厂的微信App就已经支持在大尺寸手机上进行分屏浏览。也有一些视频播放器，如MoboPlayer就已经实现了按下Home键回到首页时以迷你播放器的形式进行播放。这种体验非常棒，我猜测一般是通过WindowManager来添加悬浮播放器界面的。但是这次是原生系统增加了对这种特性的支持，相信我们会有更多理由为用户的体验做出更多新的尝试。</p>\n<p>下面介绍一下我参考<a href=\"http://developer.android.com/intl/zh-cn/preview/features/multi-window.html#running\" target=\"_blank\" rel=\"noopener\">multi-window-support</a>对App分屏模式进行的实践。</p>\n<p>首先引用一下官方的说法：</p>\n<blockquote>\n<p>如果你使用Android N Preview SDK来构建你的App，你可以给添加App一些分屏浏览的配置。例如设置Activity的最小尺寸，也可以禁止自己的App进入分屏模式，保证你的App只能在全屏模式下展示。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Android N允许用户一次在屏幕中使用两个App，例如将屏幕一分为二，左边浏览网页，右边查看邮件。具体的体验取决于你的设备。</p>\n<ul>\n<li>手持设备中，用户可以左右并排/上下摆放两个App来使用。用户还可以左右/上下拖拽中间的那个小白线来改变两个App的尺寸。</li>\n</ul>\n<p><img src=\"/content/images/split-screen.png\" alt=\"split-screen\"></p>\n<ul>\n<li><p>在运行Android N的Nexus Player上，App可以实现画中画模式，允许用户使用一个App浏览内容的同时，在另一个App上操作。</p>\n</li>\n<li><p>大尺寸设备的厂商甚至可以实现自由模式，这样就可以使得用户可以完全自由地改变界面的尺寸。这又是与分屏更为不同一种体验。</p>\n</li>\n</ul>\n<p>用户是如何操作来进入分屏模式的呢：</p>\n<ol>\n<li>点击右下角的方块，进入任务管理器，长按一个App的标题栏，将其拖入屏幕的高亮区域，这个App金进入了分屏模式。然后在任务管理器中选择另一个App，单击它使得这个App也进入分屏模式。</li>\n<li>打开一个App，然后长按右下角的方块，此时已经打开的这个App将进入分屏模式。然后在屏幕上的任务管理器中选择另外一个App，单击它使得这个App也进入分屏模式。</li>\n<li>最新发现：下拉通知栏，长按右上角的设置图标，将开启隐藏设置功能<code>“系统界面调谐器”</code>，进入设置界面，最下方有系统界面调谐器选项，进入后选择<code>“Other”-&gt;“启用分屏上滑手势”</code>，就可以从任务管理器上上滑进入分屏模式了。具体操作是<code>当一个App已经处于全屏模式时，用手指从右下角的小方块向上滑动</code>。这个设置将来在正式版可能有变化，所以还是不要太依赖。</li>\n</ol>\n<p>用户还可以在这两个App之间拖动数据，例如将一个App的Activity上的文件拖动到另外一个App的Activity中去。具体的实现下面会介绍，谷歌官方也有<a href=\"http://developer.android.com/intl/zh-cn/guide/topics/ui/drag-drop.html\" target=\"_blank\" rel=\"noopener\">拖拽相关的教程</a>。</p>\n<h1 id=\"分屏模式的生命周期\"><a href=\"#分屏模式的生命周期\" class=\"headerlink\" title=\"分屏模式的生命周期\"></a>分屏模式的生命周期</h1><p>首先要说明的一点是，分屏模式没有改变Activity的生命周期。</p>\n<p>官方说法是：</p>\n<blockquote>\n<p>在分屏模式下，用户最近操作、激活过的Activity将被系统视为<code>topmost</code>。而其他的Activity都属于<code>paused</code>状态，即使它是一个对用户可见的Activity。但是这些可见的处于<code>paused</code>状态的Activity将比那些不可见的处于<code>paused</code>状态的Activity得到更高优先级的响应。当用户在一个可见的<code>paused</code>状态的Activity上操作时，它将得到恢复<code>resumed</code>状态，并被系统视为<code>topmost</code>。而之前那个那个处于<code>topmpst</code>的Activity将变成<code>paused</code>状态。</p>\n</blockquote>\n<p>怎么理解这段话，看下图：</p>\n<p><img src=\"/content/images/two-apps.png\" alt=\"two-app\"></p>\n<p>其实就是说处于分屏模式下的两个Ap各自处于生命周期的什么状态。上图中我打开了两个App，上面的是一个Gmail App，下面这个是一个Demo App（<a href=\"https://github.com/jaredrummler/APKParser\" target=\"_blank\" rel=\"noopener\">ApkParser</a>先感谢作者的分享~）是个开源应用，能够解析Apk，后面会用到它）。现在这两个App都是进入了<code>分屏模式</code>，我们还可以拖动中间这条白线来调整两个App占用的大小。</p>\n<p>我点击了Gmail，浏览了一封邮件，那么此时<strong>Gmail</strong>就被系统视为<code>topmost</code>状态，它是处于<code>resumed</code>状态的，而下面的<strong>ApkPaserDemo</strong>虽然对用户可见，但是<strong>它仍然是处于<code>paused</code>状态</strong>的。接着我点击了系统的<code>back</code>按钮返回，响应的是上面的<strong>Gmail</strong>（因为它被视为topmost）。然后我又点击了下面的<strong>ApkParserDemo</strong>，这时它从<code>paused</code>状态变成了<code>resumed</code>状态。而上面的<strong>Gmail</strong>进入了 <code>paused</code>状态。</p>\n<p>注意，这两个App对于用户都是<strong>始终可见</strong>的，当它们处于<code>paused</code>状态时，也将比那些后台的处于<strong>不可见的</strong>App得到更高系统优先级。这个优先级怎么体现呢？两个App进入分屏模式后，一定有一个处于resume/topmost状态，假如我一直按<code>back</code>返回，当这个topmost状态App的task返回栈已经为空时，那么系统将把另外一个可见的App恢复为全屏模式，这就是我的理解。</p>\n<p>那么这种<code>可见的pause</code>的状态将带来什么影响呢？引用下官方说法是：</p>\n<blockquote>\n<p>在分屏模式中，一个App可以在对用户可见的状态下进入<code>paused</code>状态，所以你的App在处理业务时，应该知道自己什么时候应该真正的<code>暂停</code>。例如一个视频播放器，如果进入了分屏模式，就不应该在<code>onPaused()</code>回调中暂停视频播放，而应该在<code>onStop()</code>回调中才暂停视频，然后在<code>onStart</code>回调中恢复视频播放。关于如果知道自己进入了分屏模式，在<code>Android N</code>的Activity类中，增加了一个<code>void onMultiWindowChanged(boolean inMultiWindow)</code>回调，所以我们可以在这个回调知道App是不是进入了分屏模式。</p>\n</blockquote>\n<p>当App进入分屏模式后，将会触发Activity的<code>onConfigurationChanged()</code>，这与以前我们在处理App从<code>横竖屏切换</code>时的方法一样，不同于的是这里是宽/高有所改变，而<code>横竖屏切换</code>是宽高互换。至于如何处理，可以参考官方文档<a href=\"http://developer.android.com/intl/zh-cn/guide/topics/resources/runtime-changes.html\" target=\"_blank\" rel=\"noopener\">处理运行时变更</a>。我们最好处理好这种运行时状态的改变，否则我们的Activity将被重新创建，即以新的宽高尺寸重新<code>onCreate()</code>一遍。</p>\n<p>注意，如果用户重新调整窗口的大小，系统在<strong>必要的时候</strong>也可能触发<code>onConfigurationChanged()</code>。当App的窗口被用户拖动，其尺寸改变后界面的还没有绘制完成时，系统将用App主题中的<code>windowBackground</code>属性指定的背景来暂时填充这些区域。</p>\n<h1 id=\"如何设置App的分屏模式\"><a href=\"#如何设置App的分屏模式\" class=\"headerlink\" title=\"如何设置App的分屏模式\"></a>如何设置App的分屏模式</h1><p>说了一堆分屏的操作方法、生命周期，那么作为开发者，怎样才能让App进入<code>分屏</code>模式呢？有下面这几个属性。</p>\n<h2 id=\"android-resizeableActivity\"><a href=\"#android-resizeableActivity\" class=\"headerlink\" title=\"android:resizeableActivity\"></a>android:resizeableActivity</h2><p>如果你适配到了<code>Android N</code>，即<code>build.gradle</code>是这样的：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">android</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compileSdkVersion</span> <span class=\"string\">'android-N'</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">'24.0.0 rc1'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        <span class=\"attribute\">applicationId</span> <span class=\"string\">\"com.example.noughtchen.andndemo\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"string\">'N'</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"string\">'N'</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么直接在<code>AndroidManifest.xml</code>中的<code>&lt;application&gt;</code>或者<code>&lt;activity&gt;</code>标签下设置新的属性<code>android:resizeableActivity=&quot;true&quot;</code>。</p>\n<p>设置了这个属性后，你的App/Activity就可以进入<code>分屏模式</code>或者<code>自由模式</code>了。</p>\n<p>如果这个属性被设为<code>false</code>，那么你的App将无法进入分屏模式，如果你在打开这个App时，长按右下角的小方块，App将仍然处于全屏模式，系统会弹出Toast提示你无法进入分屏模式。这个属性在你<strong>target</strong>到<code>Android N</code>后，<code>android:resizeableActivity</code>的默认值就是<code>true</code>。</p>\n<blockquote>\n<p>注意：假如你<strong>没有适配到Android N</strong>（<code>targetSDKVersion &lt; Android N</code>），打包App时的<code>compileSDKVersion &lt; Android N</code>，你的App也是可以支持分屏的！！！！原因在于：如果你的App<strong>没有</strong> 设置 <strong><code>仅允许Activity竖屏/横屏</code></strong>，即没有设置类型<strong><code>android:screenOrientation=&quot;XXX&quot;</code>属性</strong>时，运行Android N系统的设备还是 <strong>可以</strong> 将你的App <strong>分屏！！</strong> 但是这时候系统是不保证运行时的稳定性的，在进入分屏模式时，系统首先也会弹出Toast来提示你说明这个风险。</p>\n</blockquote>\n<p>所以其实我们在视频里看到那么多系统自带的App都是可以分屏浏览，原因就在于此。<strong>这些App其实也并没有全部适配到Android N</strong>。我不是骗你，不信你用<code>ApkParser</code>打开前面分屏过Gmail App的xml文件看看！</p>\n<p><img src=\"/content/images/gmail-xml.png\" alt=\"Gmail-xml\"></p>\n<h2 id=\"android-supportsPictureInPicture\"><a href=\"#android-supportsPictureInPicture\" class=\"headerlink\" title=\"android:supportsPictureInPicture\"></a>android:supportsPictureInPicture</h2><p>这里不多说，Activity标签下，添加<code>android:supportsPictureInPicture=&quot;true&quot;</code>即可。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:resizeableActivity</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:supportsPictureInPicture</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme.NoActionBar\"</span>&gt;</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Layout-attributes\"><a href=\"#Layout-attributes\" class=\"headerlink\" title=\"Layout attributes\"></a>Layout attributes</h2><p>在Android N中，我们可以向<code>manifest</code>文件中添加<code>layout</code>节点，并设置一些新增加的属性，通过这些属性来设置分屏模式的一些行为，如最小尺寸等。</p>\n<ul>\n<li>android:defaultWidth</li>\n<li>android:defaultHeight</li>\n<li>android:gravity</li>\n<li>android:minimalSize</li>\n</ul>\n<p>我们可以给一个<code>Activity</code>增加一个<code>layout</code>子节点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:resizeableActivity</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:supportsPictureInPicture</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme.NoActionBar\"</span>&gt;</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">android:defaultHeight</span>=<span class=\"string\">\"500dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:defaultWidth</span>=<span class=\"string\">\"600dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"top|end\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:minimalSize</span>=<span class=\"string\">\"450dp\"</span> /&gt;</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>下一篇<a href=\"http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-下篇/\">Android N App分屏模式完全解析（下）</a>将介绍一下分屏模式下运行的App将有哪些行为回调以及应该怎么处理等。</p>\n<hr>\n<p>ps：封面图片来自于谷歌官网</p>\n","site":{"data":{}},"excerpt":"<p>上手了Android N Preview，第一个不能错过的新特性就是App分屏的支持。Android7.0原生系统就可以支持两个App横屏并排或者竖屏上下摆放了。第二个新特性就是在Android TV上，原生系统也可以支持App实现画中画，用户可以一边看视频一边操作其他的应用。</p>\n<p>其实早先在国内部分厂商以及鹅厂的微信App就已经支持在大尺寸手机上进行分屏浏览。也有一些视频播放器，如MoboPlayer就已经实现了按下Home键回到首页时以迷你播放器的形式进行播放。这种体验非常棒，我猜测一般是通过WindowManager来添加悬浮播放器界面的。但是这次是原生系统增加了对这种特性的支持，相信我们会有更多理由为用户的体验做出更多新的尝试。</p>\n<p>下面介绍一下我参考<a href=\"http://developer.android.com/intl/zh-cn/preview/features/multi-window.html#running\" target=\"_blank\" rel=\"noopener\">multi-window-support</a>对App分屏模式进行的实践。</p>\n<p>首先引用一下官方的说法：</p>\n<blockquote>\n<p>如果你使用Android N Preview SDK来构建你的App，你可以给添加App一些分屏浏览的配置。例如设置Activity的最小尺寸，也可以禁止自己的App进入分屏模式，保证你的App只能在全屏模式下展示。</p>\n</blockquote>","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Android N允许用户一次在屏幕中使用两个App，例如将屏幕一分为二，左边浏览网页，右边查看邮件。具体的体验取决于你的设备。</p>\n<ul>\n<li>手持设备中，用户可以左右并排/上下摆放两个App来使用。用户还可以左右/上下拖拽中间的那个小白线来改变两个App的尺寸。</li>\n</ul>\n<p><img src=\"/content/images/split-screen.png\" alt=\"split-screen\"></p>\n<ul>\n<li><p>在运行Android N的Nexus Player上，App可以实现画中画模式，允许用户使用一个App浏览内容的同时，在另一个App上操作。</p>\n</li>\n<li><p>大尺寸设备的厂商甚至可以实现自由模式，这样就可以使得用户可以完全自由地改变界面的尺寸。这又是与分屏更为不同一种体验。</p>\n</li>\n</ul>\n<p>用户是如何操作来进入分屏模式的呢：</p>\n<ol>\n<li>点击右下角的方块，进入任务管理器，长按一个App的标题栏，将其拖入屏幕的高亮区域，这个App金进入了分屏模式。然后在任务管理器中选择另一个App，单击它使得这个App也进入分屏模式。</li>\n<li>打开一个App，然后长按右下角的方块，此时已经打开的这个App将进入分屏模式。然后在屏幕上的任务管理器中选择另外一个App，单击它使得这个App也进入分屏模式。</li>\n<li>最新发现：下拉通知栏，长按右上角的设置图标，将开启隐藏设置功能<code>“系统界面调谐器”</code>，进入设置界面，最下方有系统界面调谐器选项，进入后选择<code>“Other”-&gt;“启用分屏上滑手势”</code>，就可以从任务管理器上上滑进入分屏模式了。具体操作是<code>当一个App已经处于全屏模式时，用手指从右下角的小方块向上滑动</code>。这个设置将来在正式版可能有变化，所以还是不要太依赖。</li>\n</ol>\n<p>用户还可以在这两个App之间拖动数据，例如将一个App的Activity上的文件拖动到另外一个App的Activity中去。具体的实现下面会介绍，谷歌官方也有<a href=\"http://developer.android.com/intl/zh-cn/guide/topics/ui/drag-drop.html\" target=\"_blank\" rel=\"noopener\">拖拽相关的教程</a>。</p>\n<h1 id=\"分屏模式的生命周期\"><a href=\"#分屏模式的生命周期\" class=\"headerlink\" title=\"分屏模式的生命周期\"></a>分屏模式的生命周期</h1><p>首先要说明的一点是，分屏模式没有改变Activity的生命周期。</p>\n<p>官方说法是：</p>\n<blockquote>\n<p>在分屏模式下，用户最近操作、激活过的Activity将被系统视为<code>topmost</code>。而其他的Activity都属于<code>paused</code>状态，即使它是一个对用户可见的Activity。但是这些可见的处于<code>paused</code>状态的Activity将比那些不可见的处于<code>paused</code>状态的Activity得到更高优先级的响应。当用户在一个可见的<code>paused</code>状态的Activity上操作时，它将得到恢复<code>resumed</code>状态，并被系统视为<code>topmost</code>。而之前那个那个处于<code>topmpst</code>的Activity将变成<code>paused</code>状态。</p>\n</blockquote>\n<p>怎么理解这段话，看下图：</p>\n<p><img src=\"/content/images/two-apps.png\" alt=\"two-app\"></p>\n<p>其实就是说处于分屏模式下的两个Ap各自处于生命周期的什么状态。上图中我打开了两个App，上面的是一个Gmail App，下面这个是一个Demo App（<a href=\"https://github.com/jaredrummler/APKParser\" target=\"_blank\" rel=\"noopener\">ApkParser</a>先感谢作者的分享~）是个开源应用，能够解析Apk，后面会用到它）。现在这两个App都是进入了<code>分屏模式</code>，我们还可以拖动中间这条白线来调整两个App占用的大小。</p>\n<p>我点击了Gmail，浏览了一封邮件，那么此时<strong>Gmail</strong>就被系统视为<code>topmost</code>状态，它是处于<code>resumed</code>状态的，而下面的<strong>ApkPaserDemo</strong>虽然对用户可见，但是<strong>它仍然是处于<code>paused</code>状态</strong>的。接着我点击了系统的<code>back</code>按钮返回，响应的是上面的<strong>Gmail</strong>（因为它被视为topmost）。然后我又点击了下面的<strong>ApkParserDemo</strong>，这时它从<code>paused</code>状态变成了<code>resumed</code>状态。而上面的<strong>Gmail</strong>进入了 <code>paused</code>状态。</p>\n<p>注意，这两个App对于用户都是<strong>始终可见</strong>的，当它们处于<code>paused</code>状态时，也将比那些后台的处于<strong>不可见的</strong>App得到更高系统优先级。这个优先级怎么体现呢？两个App进入分屏模式后，一定有一个处于resume/topmost状态，假如我一直按<code>back</code>返回，当这个topmost状态App的task返回栈已经为空时，那么系统将把另外一个可见的App恢复为全屏模式，这就是我的理解。</p>\n<p>那么这种<code>可见的pause</code>的状态将带来什么影响呢？引用下官方说法是：</p>\n<blockquote>\n<p>在分屏模式中，一个App可以在对用户可见的状态下进入<code>paused</code>状态，所以你的App在处理业务时，应该知道自己什么时候应该真正的<code>暂停</code>。例如一个视频播放器，如果进入了分屏模式，就不应该在<code>onPaused()</code>回调中暂停视频播放，而应该在<code>onStop()</code>回调中才暂停视频，然后在<code>onStart</code>回调中恢复视频播放。关于如果知道自己进入了分屏模式，在<code>Android N</code>的Activity类中，增加了一个<code>void onMultiWindowChanged(boolean inMultiWindow)</code>回调，所以我们可以在这个回调知道App是不是进入了分屏模式。</p>\n</blockquote>\n<p>当App进入分屏模式后，将会触发Activity的<code>onConfigurationChanged()</code>，这与以前我们在处理App从<code>横竖屏切换</code>时的方法一样，不同于的是这里是宽/高有所改变，而<code>横竖屏切换</code>是宽高互换。至于如何处理，可以参考官方文档<a href=\"http://developer.android.com/intl/zh-cn/guide/topics/resources/runtime-changes.html\" target=\"_blank\" rel=\"noopener\">处理运行时变更</a>。我们最好处理好这种运行时状态的改变，否则我们的Activity将被重新创建，即以新的宽高尺寸重新<code>onCreate()</code>一遍。</p>\n<p>注意，如果用户重新调整窗口的大小，系统在<strong>必要的时候</strong>也可能触发<code>onConfigurationChanged()</code>。当App的窗口被用户拖动，其尺寸改变后界面的还没有绘制完成时，系统将用App主题中的<code>windowBackground</code>属性指定的背景来暂时填充这些区域。</p>\n<h1 id=\"如何设置App的分屏模式\"><a href=\"#如何设置App的分屏模式\" class=\"headerlink\" title=\"如何设置App的分屏模式\"></a>如何设置App的分屏模式</h1><p>说了一堆分屏的操作方法、生命周期，那么作为开发者，怎样才能让App进入<code>分屏</code>模式呢？有下面这几个属性。</p>\n<h2 id=\"android-resizeableActivity\"><a href=\"#android-resizeableActivity\" class=\"headerlink\" title=\"android:resizeableActivity\"></a>android:resizeableActivity</h2><p>如果你适配到了<code>Android N</code>，即<code>build.gradle</code>是这样的：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">android</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compileSdkVersion</span> <span class=\"string\">'android-N'</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">'24.0.0 rc1'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        <span class=\"attribute\">applicationId</span> <span class=\"string\">\"com.example.noughtchen.andndemo\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"string\">'N'</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"string\">'N'</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么直接在<code>AndroidManifest.xml</code>中的<code>&lt;application&gt;</code>或者<code>&lt;activity&gt;</code>标签下设置新的属性<code>android:resizeableActivity=&quot;true&quot;</code>。</p>\n<p>设置了这个属性后，你的App/Activity就可以进入<code>分屏模式</code>或者<code>自由模式</code>了。</p>\n<p>如果这个属性被设为<code>false</code>，那么你的App将无法进入分屏模式，如果你在打开这个App时，长按右下角的小方块，App将仍然处于全屏模式，系统会弹出Toast提示你无法进入分屏模式。这个属性在你<strong>target</strong>到<code>Android N</code>后，<code>android:resizeableActivity</code>的默认值就是<code>true</code>。</p>\n<blockquote>\n<p>注意：假如你<strong>没有适配到Android N</strong>（<code>targetSDKVersion &lt; Android N</code>），打包App时的<code>compileSDKVersion &lt; Android N</code>，你的App也是可以支持分屏的！！！！原因在于：如果你的App<strong>没有</strong> 设置 <strong><code>仅允许Activity竖屏/横屏</code></strong>，即没有设置类型<strong><code>android:screenOrientation=&quot;XXX&quot;</code>属性</strong>时，运行Android N系统的设备还是 <strong>可以</strong> 将你的App <strong>分屏！！</strong> 但是这时候系统是不保证运行时的稳定性的，在进入分屏模式时，系统首先也会弹出Toast来提示你说明这个风险。</p>\n</blockquote>\n<p>所以其实我们在视频里看到那么多系统自带的App都是可以分屏浏览，原因就在于此。<strong>这些App其实也并没有全部适配到Android N</strong>。我不是骗你，不信你用<code>ApkParser</code>打开前面分屏过Gmail App的xml文件看看！</p>\n<p><img src=\"/content/images/gmail-xml.png\" alt=\"Gmail-xml\"></p>\n<h2 id=\"android-supportsPictureInPicture\"><a href=\"#android-supportsPictureInPicture\" class=\"headerlink\" title=\"android:supportsPictureInPicture\"></a>android:supportsPictureInPicture</h2><p>这里不多说，Activity标签下，添加<code>android:supportsPictureInPicture=&quot;true&quot;</code>即可。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:resizeableActivity</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:supportsPictureInPicture</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme.NoActionBar\"</span>&gt;</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Layout-attributes\"><a href=\"#Layout-attributes\" class=\"headerlink\" title=\"Layout attributes\"></a>Layout attributes</h2><p>在Android N中，我们可以向<code>manifest</code>文件中添加<code>layout</code>节点，并设置一些新增加的属性，通过这些属性来设置分屏模式的一些行为，如最小尺寸等。</p>\n<ul>\n<li>android:defaultWidth</li>\n<li>android:defaultHeight</li>\n<li>android:gravity</li>\n<li>android:minimalSize</li>\n</ul>\n<p>我们可以给一个<code>Activity</code>增加一个<code>layout</code>子节点：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:resizeableActivity</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:supportsPictureInPicture</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme.NoActionBar\"</span>&gt;</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">android:defaultHeight</span>=<span class=\"string\">\"500dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:defaultWidth</span>=<span class=\"string\">\"600dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"top|end\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:minimalSize</span>=<span class=\"string\">\"450dp\"</span> /&gt;</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>下一篇<a href=\"http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-下篇/\">Android N App分屏模式完全解析（下）</a>将介绍一下分屏模式下运行的App将有哪些行为回调以及应该怎么处理等。</p>\n<hr>\n<p>ps：封面图片来自于谷歌官网</p>"},{"layout":"post","title":"Android N App分屏模式完全解析（下）","date":"2016-03-12T02:00:00.000Z","_content":"\n在[上篇](http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/)中，介绍了什么是App分屏模式，以及如何设置我们的App来进入分屏模式。这次我们看一下，作为开发者，我们应该如何让自己的App进入分屏模式，当App进入分屏模式时，我们注意哪些问题。\n\n简单地说，我认为除了保证分屏时App功能、性能正常以外，我们需要重点学习 ***如何在分屏模式下打开新的Activity*** 以及 ***如何实现跨App/Activity的拖拽功能***。\n\n<!-- more -->\n\n# 用分屏模式运行你的App\n\nAndroid N中新增了一些方法来支持App的分屏模式。同时在分屏模式下，也禁用了App一些特性。\n\n## 分屏模式下被禁用的特性\n\n- 自定义[系统UI](http://developer.android.com/training/system-ui/index.html)，例如分屏模式下无法隐藏系统的状态栏。\n- 无法根据屏幕方向来旋转App的界面，也就是说`android:screenOrientation`属性会被系统忽略。\n\n## 分屏模式的通知回调、查询App是否处于分屏状态\n\n最新的[Android N SDK](http://developer.android.com/preview/setup-sdk.html#docs-dl)中，`Activity`类中增加了下面的方法。\n\n- inMultiWindow()：返回值为boolean，调用此方法可以知道App是否处于分屏模式。\n- inPictureInPicture()：返回值为boolean，调用此方法可以知道App是否处于画中画模式。\n\n> 注意：`画中画模式`其实是一个**特殊的**`分屏模式`，如果`mActivity.inPictureInPicture()`返回`true`，那么`mActivity.inMultiWindow()`一定也是返回`true`。\n\n- onMultiWindowChanged(boolean inMultiWindow)：当Activity进入或者退出分屏模式时，系统会回调这个方法来通知开发者。回调的参数`inMultiWindow`为boolean类型，如果`inMultiWindow`为true，表示Activity进入分屏模式；如果`inMultiWindow`为false，表示退出分屏模式。\n- onPictureInPictureChanged(boolean inPictureInPicture)：当Activity进入画中画模式时，系统会回调这个方法。回调参数`inPictureInPicture`为`true`时，表示进入了画中画模式；`inPictureInPicture`为`false`时，表示退出了画中画模式。\n\n`Fragment`类中，同样增加了以上支持分屏模式的方法，例如`Fragment.inMultiWindow()`。\n\n## 如何进入画中画模式\n\n调用`Activity`类的`enterPictureInPicture()`方法，可以使得我们的App进入画中画模式。如果运行的设备不支持画中画模式，调用这个方法将不会有任何效果。更多画中画模式的资料，请参考[picture-in-picture](http://developer.android.com/intl/zh-cn/preview/features/picture-in-picture.html)。\n\n## 在分屏模式下打开新的Activity\n\n当你打开一个新的Activity时，只需要给Intent添加`Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT`，系统将***尝试***将它设置为与当前的Activity共同以分屏的模式显示在屏幕上。\n\n**注意：**这里只是尝试，但这不一定是100%生效的，前一篇博客里也说过，假如新打开的Activity的`android:resizeableActivity`属性设置为`false`，就会禁止分屏浏览这个Activity。所以系统只是尝试去以分屏模式打开一个新的Activity，如果条件不满足，将不会生效！此外，我实际用`Android N Preview SDK`实践的时候发现这个`FLAG`实际得值是`FLAG_ACTIVITY_LAUNCH_ADJACENT`，并非是`FLAG_ACTIVITY_LAUNCH_TO_ADJACENT`。\n\n当满足下面的条件，系统会让这两个Activity进入分屏模式：\n\n- 当前Activity已经进入到分屏模式。\n- 新打开的Activity支持分屏浏览（即**android:resizeableActivity=true**）。\n\n此时，给新打开的Activity，设置`                intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK);\n`才会有效果。\n\n![two-acts](/content/images/two-acts.png)\n\n建议参考官方的Sample：[MultiWindow Playground Sample](https://github.com/googlesamples/android-MultiWindowPlayground)\n\n那么为何还需要添加`FLAG_ACTIVITY_NEW_TASK`？看一下官方解释：\n\n> 注意：在同一个Activity返回栈中，打开一个新的Activity时，这个Activity将会继承上一个Activity所有和`分屏模式`有关的属性。如果你想要在一个独立的窗口以分屏模式打开一个新的Activity，那么必须新建一个Activity返回栈。\n\n此外，如果你的设备支持`自由模式`（官方名字叫**freeform**，暂且就这么翻译它，其实我认为这算也是一种尺寸更自由的分屏模式，上一篇博客里提到过如果设备厂商支持用户可以自由改变Activity的尺寸，那么就相当于支持`自由模式`，这将比普通的分屏模式更加自由），打开一个Activity时，还可通过`ActivityOptions.setLaunchBounds()`来指定新的Activity的尺寸和在屏幕中的位置。同样，这个方法也需要你的Activity已经处于分屏模式时，调用它才会生效。\n\n## 支持拖拽\n\n在[上一篇](http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/)博客里也提到过，现在我们可以实现在两个分屏模式的Activity之间拖动内容了。Android N Preview SDK中，`View`已经增加支持Activity之间拖动的API。具体的类和方法，可以参考[N Preview SDK Reference](http://developer.android.com/preview/setup-sdk.html#docs-dl)，主要用到下面几个新的接口：\n\n- View.startDragAndDrop()：[View.startDrag()](http://developer.android.com/intl/zh-cn/reference/android/view/View.html#startDrag(android.content.ClipData,%20android.view.View.DragShadowBuilder,%20java.lang.Object,%20int)) 的替代方法，需要传递`View.DRAG_FLAG_GLOBAL`来实现跨Activity拖拽。如果需要将URI权限传递给接收方Activity，还可以根据需要设置`View.DRAG_FLAG_GLOBAL_URI_READ`或者`View.DRAG_FLAG_GLOBAL_URI_WRITE`。\n- View.cancelDragAndDrop()：由拖拽的发起方调用，取消当前进行中的拖拽。\n- View.updateDragShadow()：由拖拽的发起方调用，可以给当前进行的拖拽设置阴影。\n- android.view.DropPermissions：接收方App所得到的权限列表。\n- Activity.requestDropPermissions()：传递URI权限时，需要调用这个方法。传递的内容存储在[DragEvent](http://developer.android.com/reference/android/view/DragEvent.html)中的[ClipData](http://developer.android.com/reference/android/content/ClipData.html)里。返回值为前面的`android.view.DropPermissions`。\n\n下面是我自己写的一个demo，实现了在分屏模式下，把一个Activity中ImageView中保存的内容到另外一个Activity中进行显示。实际应用中，可以还可以传递图片的url或者Bitmap对象。\n\n![drag-drop](/content/images/drag-drop.png)\n\n上图是一个最基本的例子，实现了把MainActivity中的图片保存的内容，拖拽到SecondActivity中。实现步骤如下：\n\n在MainActivity中，发起拖拽。\n\n```\n// 1.首先我们在分屏模式下，打开自己App中的SecondActivity\nfindViewById(R.id.launch_second_activity).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent intent = new Intent(MainActivity.this, SecondActivity.class);\n                intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK);\n                startActivity(intent);\n            }\n        });\n        \n// 2.然后我们在MainActivity中发出拖拽事件\nimageView = (ImageView) findViewById(R.id.img);\n        /** 拖拽的发送方Activity和ImageView */\n        imageView.setTag(\"I'm a ImageView from MainActivity\");\n        imageView.setOnTouchListener(new View.OnTouchListener() {\n\n            public boolean onTouch(View view, MotionEvent motionEvent) {\n                if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {\n                    /** 构造一个ClipData，将需要传递的数据放在里面 */\n                    ClipData.Item item = new ClipData.Item((CharSequence) view.getTag());\n                    String[] mimeTypes = {ClipDescription.MIMETYPE_TEXT_PLAIN};\n                    ClipData dragData = new ClipData(view.getTag().toString(), mimeTypes, item);\n                    View.DragShadowBuilder shadow = new View.DragShadowBuilder(imageView);\n                    /** startDragAndDrop是Android N SDK中的新方法，替代了以前的startDrag，flag需要设置为DRAG_FLAG_GLOBAL */\n                    view.startDragAndDrop(dragData, shadow, null, View.DRAG_FLAG_GLOBAL);\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        });\n```\n\n在`SecondActivity`中，接收这个拖拽的结果，在`ACTION_DROP`事件中，把结果显示出来。\n\n```\ndropedText = (TextView) findViewById(R.id.text_drop);\n        dropedText.setOnDragListener(new View.OnDragListener() {\n            @Override\n            public boolean onDrag(View view, DragEvent dragEvent) {\n                switch (dragEvent.getAction()) {\n                    case DragEvent.ACTION_DRAG_STARTED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_STARTED\");\n                        break;\n\n                    case DragEvent.ACTION_DRAG_ENTERED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_ENTERED\");\n                        break;\n\n                    case DragEvent.ACTION_DRAG_EXITED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_EXITED\");\n                        break;\n\n                    case DragEvent.ACTION_DRAG_LOCATION:\n                        break;\n\n                    case DragEvent.ACTION_DRAG_ENDED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_ENDED\");\n                        break;\n\n                    case DragEvent.ACTION_DROP:\n                        Log.d(TAG, \"ACTION_DROP event\");\n                        /** 3.在这里显示接收到的结果 */\n                        dropedText.setText(dragEvent.getClipData().getItemAt(0).getText());\n                        break;\n\n                    default:\n                        break;\n                }\n\n                return true;\n            }\n        });\n```\n这里实现的关键在新增加的`startDragAndDrop`方法，看下官方的API文档：\n\n![start-drag](/content/images/start-drag.png)\n\n清楚地提到了，`发出的DragEvent能够被所有可见的View对象接收到`，所以在分屏模式下，SecondActivity可以监听View的onDrag事件，于是我们监听它！\n\n接着，我们看下`DragEvent.ACTION_DROP`事件发生的条件：\n\n![drop-event](/content/images/drop-event.png)\n\n当被拖拽的View的阴影进入到接收方View的坐标区域，如果此时用户松手，那么接收方View就可以接收到这个Drop事件。一目了然，我们通过拖拽ImageView到图上的灰色区域，松手，便可以触发`DragEvent.ACTION_DROP`，把数据传到SecondActivity中了。\n\n其实还有更复杂的一些情况，需要调用`requestDropPermissions`，后续我再进一步实践一下。\n\n这个demo的地址在[这里](https://github.com/unclechen/AndroidN-DragAndDropDemo)，先分享出来，后面我再接着完善它。\n\n# 在分屏模式下测试你的App\n\n无论你是否将自己的App适配到了Android N，或者是支持分屏模式，都应该找个Android N的设备，来测试一下自己的App在分屏模式下会变成什么样。\n\n## 设置你的测试设备\n\n如果你有一台运行Android N的设备，它是默认支持分屏模式的。\n\n## 如果你的App不是用Android N Preview SDK打包的\n\n如果你的App是用`低于Android N Preview SDK`打包的，且你的Activity支持`横竖屏切换`。那么当用户在尝试使用分屏模式时，系统会强制将你的App进入分屏模式。（我在第一篇博客里提到过这个，Android N Preview的介绍视频中，很多Google家的App都可以进入分屏模式，但是打开它们的xml一看，其实`targetSDKVersion = 23`）\n\n因此，如果你的App/Activity支持横竖屏切换，那么你应该尝试一下让自己的App分屏，看看当系统强制改变你的App尺寸时，用户是否还可以接受这种体验。如果你的App/Activity不支持横竖屏切换，那么你可以确认一下，看看当尝试进入分屏时，你的App是不是仍然能够保持全屏模式。\n\n## 如果你给App设置了支持分屏模式\n\n如果你使用了`Android N Preview SDK`来开发自己的App，那么应该按照下面的要点检查一下自己的App。\n\n- 启动App，长按系统导航栏右下角的小方块（Google官方把这个叫做**Overview Button**），确保你的App可以进入分屏模式，且尺寸改变后仍然能正常工作。\n- 启动任务管理器（即单击右下角的小方块），然后长按你App的标题栏，将它拖动到屏幕上的高亮区域。确保你的App可以进入分屏模式，且尺寸改变后仍然能正常工作。\n\n这两点在[上一篇博客](http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/)中介绍过，让自己的App进入分屏模式有三种方法。第三种方法，就是在打开自己的App时，用手指从右下角的小方块向上滑动，这样也可以使得正在浏览的App进入分屏模式。这种方法目前属于实验性功能，正式版不一定保留。\n\n- 当你的App进入分屏后，通过拖动两个App中间的分栏上面的小白线，从而改变App的尺寸，观察App中各个UI元素是否正常显示。\n- 如果你给自己的App/Activity设置了**最小尺寸**，可以尝试在改变App尺寸时，低于这个最小尺寸，观察App是不是会回到设定好的最小尺寸。\n- 在进行上面几项测试时，请同时验证自己的App功能和性能是否正常，并注意一下自己的App在更新UI时是否花费了太长的时间。\n\n这几项测试，其实主要强调的是，我们的App可以顺利的进入/退出分屏模式，且改变App的尺寸时，UI依然可以也非常顺滑。\n\n这里我想多说一句，如果进入了分屏模式，要注意下App弹出的对话框，因为屏幕被两个App分成两块之后，对话框也是可以弹出两个的。这时对话框上的UI元素可能就会变得比较小了，如果我们的代码是写死的大小，例如对话框是一个WebView，就需要特别注意了，搞不好显示出来就缺了一块了，这里需要我们做好适配。\n\n### 测试清单\n\n关于功能、性能方面测试，还可以按照下面的操作来进行。\n\n- 让App进入，再退出分屏模式，确保此时App功能正常。\n- 让App进入分屏模式，激活屏幕上的另外一个App，让自己的App进入`可见、paused`状态。举了例子来讲，如果你的App是一个视频播放器，那么当用户点击了屏幕上另外一个App时，你的App不应该停止播放视频，即使此时你的Activity/Fragment已经接到了`onPaused()`回调。\n- 让App进入分屏模式，拖动分栏上的小白线，改变App的尺寸。请在竖屏（两个App一上一下布局）和横屏（两个App一左一右布局）模式下分别进行改变尺寸的操作。确保App不会崩溃，各项功能正常，且UI的刷新没有花费太多时间。\n- 在短时间内、多次、迅速地改变App尺寸，确保App没有崩溃，且没有发生内存泄露。关于内存使用方面的更详细注意事项，请参考[Investigating Your RAM Usage](http://developer.android.com/tools/debugging/debugging-memory.html)。\n- 在不同的窗口设置的情况下，正常使用App，确保App功能正常，文字仍然可读，其他的UI元素也没有变得太小，用户仍然可以舒适地操作App。\n\n这几项测试，其实主要是说当App在分屏模式下运行时，仍然可以保持性能的稳定，不会Crash也不会OOM。\n\n\n## 如果你给App设置了禁止分屏模式\n\n如果你给App/Activity设置了`android:resizableActivity=\"false\"`，你应该试试当用户在Android N的设备上，尝试分屏浏览你的App时，它是否仍然能保持全屏模式。\n\n以上就是参考Google最新的[multi-window](http://developer.android.com/intl/zh-cn/preview/features/multi-window.html)进行的实践，总结下，我认为有3点比较重要：\n\n1. 如何让自己的App/Activity顺利的进入和退出分屏模式，可以参考[处理运行时改变](http://developer.android.com/intl/zh-cn/guide/topics/resources/runtime-changes.html)这一章。\n2. 如何在分屏模式下打开新的Activity，可以参考Google官方的[MultiWindow Playground Sample](https://github.com/googlesamples/android-MultiWindowPlayground)。\n3. 如何实现跨App/Activity的拖拽功能，可以参考[Drag and Drop](http://developer.android.com/intl/zh-cn/guide/topics/ui/drag-drop.html)这一章。\n\n关于App分屏模式的学习就到这里了，欢迎大家一起交流。我们还发挥更多的想象力，比如是否可以利用跨应用拖拽实现更方便操作，更好的用户体验。\n\n\n\n\n\n\n\n\n\n","source":"_posts/Android N App分屏模式完全解析-下篇.markdown","raw":"---\nlayout: post\ntitle: Android N App分屏模式完全解析（下）\ndate: '2016-03-12 10:00:00'\ntags:\n  - Android7.x\n  - Android\n  - 适配\ncategories: \n  - 技术\n---\n\n在[上篇](http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/)中，介绍了什么是App分屏模式，以及如何设置我们的App来进入分屏模式。这次我们看一下，作为开发者，我们应该如何让自己的App进入分屏模式，当App进入分屏模式时，我们注意哪些问题。\n\n简单地说，我认为除了保证分屏时App功能、性能正常以外，我们需要重点学习 ***如何在分屏模式下打开新的Activity*** 以及 ***如何实现跨App/Activity的拖拽功能***。\n\n<!-- more -->\n\n# 用分屏模式运行你的App\n\nAndroid N中新增了一些方法来支持App的分屏模式。同时在分屏模式下，也禁用了App一些特性。\n\n## 分屏模式下被禁用的特性\n\n- 自定义[系统UI](http://developer.android.com/training/system-ui/index.html)，例如分屏模式下无法隐藏系统的状态栏。\n- 无法根据屏幕方向来旋转App的界面，也就是说`android:screenOrientation`属性会被系统忽略。\n\n## 分屏模式的通知回调、查询App是否处于分屏状态\n\n最新的[Android N SDK](http://developer.android.com/preview/setup-sdk.html#docs-dl)中，`Activity`类中增加了下面的方法。\n\n- inMultiWindow()：返回值为boolean，调用此方法可以知道App是否处于分屏模式。\n- inPictureInPicture()：返回值为boolean，调用此方法可以知道App是否处于画中画模式。\n\n> 注意：`画中画模式`其实是一个**特殊的**`分屏模式`，如果`mActivity.inPictureInPicture()`返回`true`，那么`mActivity.inMultiWindow()`一定也是返回`true`。\n\n- onMultiWindowChanged(boolean inMultiWindow)：当Activity进入或者退出分屏模式时，系统会回调这个方法来通知开发者。回调的参数`inMultiWindow`为boolean类型，如果`inMultiWindow`为true，表示Activity进入分屏模式；如果`inMultiWindow`为false，表示退出分屏模式。\n- onPictureInPictureChanged(boolean inPictureInPicture)：当Activity进入画中画模式时，系统会回调这个方法。回调参数`inPictureInPicture`为`true`时，表示进入了画中画模式；`inPictureInPicture`为`false`时，表示退出了画中画模式。\n\n`Fragment`类中，同样增加了以上支持分屏模式的方法，例如`Fragment.inMultiWindow()`。\n\n## 如何进入画中画模式\n\n调用`Activity`类的`enterPictureInPicture()`方法，可以使得我们的App进入画中画模式。如果运行的设备不支持画中画模式，调用这个方法将不会有任何效果。更多画中画模式的资料，请参考[picture-in-picture](http://developer.android.com/intl/zh-cn/preview/features/picture-in-picture.html)。\n\n## 在分屏模式下打开新的Activity\n\n当你打开一个新的Activity时，只需要给Intent添加`Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT`，系统将***尝试***将它设置为与当前的Activity共同以分屏的模式显示在屏幕上。\n\n**注意：**这里只是尝试，但这不一定是100%生效的，前一篇博客里也说过，假如新打开的Activity的`android:resizeableActivity`属性设置为`false`，就会禁止分屏浏览这个Activity。所以系统只是尝试去以分屏模式打开一个新的Activity，如果条件不满足，将不会生效！此外，我实际用`Android N Preview SDK`实践的时候发现这个`FLAG`实际得值是`FLAG_ACTIVITY_LAUNCH_ADJACENT`，并非是`FLAG_ACTIVITY_LAUNCH_TO_ADJACENT`。\n\n当满足下面的条件，系统会让这两个Activity进入分屏模式：\n\n- 当前Activity已经进入到分屏模式。\n- 新打开的Activity支持分屏浏览（即**android:resizeableActivity=true**）。\n\n此时，给新打开的Activity，设置`                intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK);\n`才会有效果。\n\n![two-acts](/content/images/two-acts.png)\n\n建议参考官方的Sample：[MultiWindow Playground Sample](https://github.com/googlesamples/android-MultiWindowPlayground)\n\n那么为何还需要添加`FLAG_ACTIVITY_NEW_TASK`？看一下官方解释：\n\n> 注意：在同一个Activity返回栈中，打开一个新的Activity时，这个Activity将会继承上一个Activity所有和`分屏模式`有关的属性。如果你想要在一个独立的窗口以分屏模式打开一个新的Activity，那么必须新建一个Activity返回栈。\n\n此外，如果你的设备支持`自由模式`（官方名字叫**freeform**，暂且就这么翻译它，其实我认为这算也是一种尺寸更自由的分屏模式，上一篇博客里提到过如果设备厂商支持用户可以自由改变Activity的尺寸，那么就相当于支持`自由模式`，这将比普通的分屏模式更加自由），打开一个Activity时，还可通过`ActivityOptions.setLaunchBounds()`来指定新的Activity的尺寸和在屏幕中的位置。同样，这个方法也需要你的Activity已经处于分屏模式时，调用它才会生效。\n\n## 支持拖拽\n\n在[上一篇](http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/)博客里也提到过，现在我们可以实现在两个分屏模式的Activity之间拖动内容了。Android N Preview SDK中，`View`已经增加支持Activity之间拖动的API。具体的类和方法，可以参考[N Preview SDK Reference](http://developer.android.com/preview/setup-sdk.html#docs-dl)，主要用到下面几个新的接口：\n\n- View.startDragAndDrop()：[View.startDrag()](http://developer.android.com/intl/zh-cn/reference/android/view/View.html#startDrag(android.content.ClipData,%20android.view.View.DragShadowBuilder,%20java.lang.Object,%20int)) 的替代方法，需要传递`View.DRAG_FLAG_GLOBAL`来实现跨Activity拖拽。如果需要将URI权限传递给接收方Activity，还可以根据需要设置`View.DRAG_FLAG_GLOBAL_URI_READ`或者`View.DRAG_FLAG_GLOBAL_URI_WRITE`。\n- View.cancelDragAndDrop()：由拖拽的发起方调用，取消当前进行中的拖拽。\n- View.updateDragShadow()：由拖拽的发起方调用，可以给当前进行的拖拽设置阴影。\n- android.view.DropPermissions：接收方App所得到的权限列表。\n- Activity.requestDropPermissions()：传递URI权限时，需要调用这个方法。传递的内容存储在[DragEvent](http://developer.android.com/reference/android/view/DragEvent.html)中的[ClipData](http://developer.android.com/reference/android/content/ClipData.html)里。返回值为前面的`android.view.DropPermissions`。\n\n下面是我自己写的一个demo，实现了在分屏模式下，把一个Activity中ImageView中保存的内容到另外一个Activity中进行显示。实际应用中，可以还可以传递图片的url或者Bitmap对象。\n\n![drag-drop](/content/images/drag-drop.png)\n\n上图是一个最基本的例子，实现了把MainActivity中的图片保存的内容，拖拽到SecondActivity中。实现步骤如下：\n\n在MainActivity中，发起拖拽。\n\n```\n// 1.首先我们在分屏模式下，打开自己App中的SecondActivity\nfindViewById(R.id.launch_second_activity).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Intent intent = new Intent(MainActivity.this, SecondActivity.class);\n                intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK);\n                startActivity(intent);\n            }\n        });\n        \n// 2.然后我们在MainActivity中发出拖拽事件\nimageView = (ImageView) findViewById(R.id.img);\n        /** 拖拽的发送方Activity和ImageView */\n        imageView.setTag(\"I'm a ImageView from MainActivity\");\n        imageView.setOnTouchListener(new View.OnTouchListener() {\n\n            public boolean onTouch(View view, MotionEvent motionEvent) {\n                if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {\n                    /** 构造一个ClipData，将需要传递的数据放在里面 */\n                    ClipData.Item item = new ClipData.Item((CharSequence) view.getTag());\n                    String[] mimeTypes = {ClipDescription.MIMETYPE_TEXT_PLAIN};\n                    ClipData dragData = new ClipData(view.getTag().toString(), mimeTypes, item);\n                    View.DragShadowBuilder shadow = new View.DragShadowBuilder(imageView);\n                    /** startDragAndDrop是Android N SDK中的新方法，替代了以前的startDrag，flag需要设置为DRAG_FLAG_GLOBAL */\n                    view.startDragAndDrop(dragData, shadow, null, View.DRAG_FLAG_GLOBAL);\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        });\n```\n\n在`SecondActivity`中，接收这个拖拽的结果，在`ACTION_DROP`事件中，把结果显示出来。\n\n```\ndropedText = (TextView) findViewById(R.id.text_drop);\n        dropedText.setOnDragListener(new View.OnDragListener() {\n            @Override\n            public boolean onDrag(View view, DragEvent dragEvent) {\n                switch (dragEvent.getAction()) {\n                    case DragEvent.ACTION_DRAG_STARTED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_STARTED\");\n                        break;\n\n                    case DragEvent.ACTION_DRAG_ENTERED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_ENTERED\");\n                        break;\n\n                    case DragEvent.ACTION_DRAG_EXITED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_EXITED\");\n                        break;\n\n                    case DragEvent.ACTION_DRAG_LOCATION:\n                        break;\n\n                    case DragEvent.ACTION_DRAG_ENDED:\n                        Log.d(TAG, \"Action is DragEvent.ACTION_DRAG_ENDED\");\n                        break;\n\n                    case DragEvent.ACTION_DROP:\n                        Log.d(TAG, \"ACTION_DROP event\");\n                        /** 3.在这里显示接收到的结果 */\n                        dropedText.setText(dragEvent.getClipData().getItemAt(0).getText());\n                        break;\n\n                    default:\n                        break;\n                }\n\n                return true;\n            }\n        });\n```\n这里实现的关键在新增加的`startDragAndDrop`方法，看下官方的API文档：\n\n![start-drag](/content/images/start-drag.png)\n\n清楚地提到了，`发出的DragEvent能够被所有可见的View对象接收到`，所以在分屏模式下，SecondActivity可以监听View的onDrag事件，于是我们监听它！\n\n接着，我们看下`DragEvent.ACTION_DROP`事件发生的条件：\n\n![drop-event](/content/images/drop-event.png)\n\n当被拖拽的View的阴影进入到接收方View的坐标区域，如果此时用户松手，那么接收方View就可以接收到这个Drop事件。一目了然，我们通过拖拽ImageView到图上的灰色区域，松手，便可以触发`DragEvent.ACTION_DROP`，把数据传到SecondActivity中了。\n\n其实还有更复杂的一些情况，需要调用`requestDropPermissions`，后续我再进一步实践一下。\n\n这个demo的地址在[这里](https://github.com/unclechen/AndroidN-DragAndDropDemo)，先分享出来，后面我再接着完善它。\n\n# 在分屏模式下测试你的App\n\n无论你是否将自己的App适配到了Android N，或者是支持分屏模式，都应该找个Android N的设备，来测试一下自己的App在分屏模式下会变成什么样。\n\n## 设置你的测试设备\n\n如果你有一台运行Android N的设备，它是默认支持分屏模式的。\n\n## 如果你的App不是用Android N Preview SDK打包的\n\n如果你的App是用`低于Android N Preview SDK`打包的，且你的Activity支持`横竖屏切换`。那么当用户在尝试使用分屏模式时，系统会强制将你的App进入分屏模式。（我在第一篇博客里提到过这个，Android N Preview的介绍视频中，很多Google家的App都可以进入分屏模式，但是打开它们的xml一看，其实`targetSDKVersion = 23`）\n\n因此，如果你的App/Activity支持横竖屏切换，那么你应该尝试一下让自己的App分屏，看看当系统强制改变你的App尺寸时，用户是否还可以接受这种体验。如果你的App/Activity不支持横竖屏切换，那么你可以确认一下，看看当尝试进入分屏时，你的App是不是仍然能够保持全屏模式。\n\n## 如果你给App设置了支持分屏模式\n\n如果你使用了`Android N Preview SDK`来开发自己的App，那么应该按照下面的要点检查一下自己的App。\n\n- 启动App，长按系统导航栏右下角的小方块（Google官方把这个叫做**Overview Button**），确保你的App可以进入分屏模式，且尺寸改变后仍然能正常工作。\n- 启动任务管理器（即单击右下角的小方块），然后长按你App的标题栏，将它拖动到屏幕上的高亮区域。确保你的App可以进入分屏模式，且尺寸改变后仍然能正常工作。\n\n这两点在[上一篇博客](http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/)中介绍过，让自己的App进入分屏模式有三种方法。第三种方法，就是在打开自己的App时，用手指从右下角的小方块向上滑动，这样也可以使得正在浏览的App进入分屏模式。这种方法目前属于实验性功能，正式版不一定保留。\n\n- 当你的App进入分屏后，通过拖动两个App中间的分栏上面的小白线，从而改变App的尺寸，观察App中各个UI元素是否正常显示。\n- 如果你给自己的App/Activity设置了**最小尺寸**，可以尝试在改变App尺寸时，低于这个最小尺寸，观察App是不是会回到设定好的最小尺寸。\n- 在进行上面几项测试时，请同时验证自己的App功能和性能是否正常，并注意一下自己的App在更新UI时是否花费了太长的时间。\n\n这几项测试，其实主要强调的是，我们的App可以顺利的进入/退出分屏模式，且改变App的尺寸时，UI依然可以也非常顺滑。\n\n这里我想多说一句，如果进入了分屏模式，要注意下App弹出的对话框，因为屏幕被两个App分成两块之后，对话框也是可以弹出两个的。这时对话框上的UI元素可能就会变得比较小了，如果我们的代码是写死的大小，例如对话框是一个WebView，就需要特别注意了，搞不好显示出来就缺了一块了，这里需要我们做好适配。\n\n### 测试清单\n\n关于功能、性能方面测试，还可以按照下面的操作来进行。\n\n- 让App进入，再退出分屏模式，确保此时App功能正常。\n- 让App进入分屏模式，激活屏幕上的另外一个App，让自己的App进入`可见、paused`状态。举了例子来讲，如果你的App是一个视频播放器，那么当用户点击了屏幕上另外一个App时，你的App不应该停止播放视频，即使此时你的Activity/Fragment已经接到了`onPaused()`回调。\n- 让App进入分屏模式，拖动分栏上的小白线，改变App的尺寸。请在竖屏（两个App一上一下布局）和横屏（两个App一左一右布局）模式下分别进行改变尺寸的操作。确保App不会崩溃，各项功能正常，且UI的刷新没有花费太多时间。\n- 在短时间内、多次、迅速地改变App尺寸，确保App没有崩溃，且没有发生内存泄露。关于内存使用方面的更详细注意事项，请参考[Investigating Your RAM Usage](http://developer.android.com/tools/debugging/debugging-memory.html)。\n- 在不同的窗口设置的情况下，正常使用App，确保App功能正常，文字仍然可读，其他的UI元素也没有变得太小，用户仍然可以舒适地操作App。\n\n这几项测试，其实主要是说当App在分屏模式下运行时，仍然可以保持性能的稳定，不会Crash也不会OOM。\n\n\n## 如果你给App设置了禁止分屏模式\n\n如果你给App/Activity设置了`android:resizableActivity=\"false\"`，你应该试试当用户在Android N的设备上，尝试分屏浏览你的App时，它是否仍然能保持全屏模式。\n\n以上就是参考Google最新的[multi-window](http://developer.android.com/intl/zh-cn/preview/features/multi-window.html)进行的实践，总结下，我认为有3点比较重要：\n\n1. 如何让自己的App/Activity顺利的进入和退出分屏模式，可以参考[处理运行时改变](http://developer.android.com/intl/zh-cn/guide/topics/resources/runtime-changes.html)这一章。\n2. 如何在分屏模式下打开新的Activity，可以参考Google官方的[MultiWindow Playground Sample](https://github.com/googlesamples/android-MultiWindowPlayground)。\n3. 如何实现跨App/Activity的拖拽功能，可以参考[Drag and Drop](http://developer.android.com/intl/zh-cn/guide/topics/ui/drag-drop.html)这一章。\n\n关于App分屏模式的学习就到这里了，欢迎大家一起交流。我们还发挥更多的想象力，比如是否可以利用跨应用拖拽实现更方便操作，更好的用户体验。\n\n\n\n\n\n\n\n\n\n","slug":"Android N App分屏模式完全解析-下篇","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8dk0002mtsxzso5bqpe","content":"<p>在<a href=\"http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/\">上篇</a>中，介绍了什么是App分屏模式，以及如何设置我们的App来进入分屏模式。这次我们看一下，作为开发者，我们应该如何让自己的App进入分屏模式，当App进入分屏模式时，我们注意哪些问题。</p>\n<p>简单地说，我认为除了保证分屏时App功能、性能正常以外，我们需要重点学习 <strong><em>如何在分屏模式下打开新的Activity</em></strong> 以及 <strong><em>如何实现跨App/Activity的拖拽功能</em></strong>。</p>\n<a id=\"more\"></a>\n<h1 id=\"用分屏模式运行你的App\"><a href=\"#用分屏模式运行你的App\" class=\"headerlink\" title=\"用分屏模式运行你的App\"></a>用分屏模式运行你的App</h1><p>Android N中新增了一些方法来支持App的分屏模式。同时在分屏模式下，也禁用了App一些特性。</p>\n<h2 id=\"分屏模式下被禁用的特性\"><a href=\"#分屏模式下被禁用的特性\" class=\"headerlink\" title=\"分屏模式下被禁用的特性\"></a>分屏模式下被禁用的特性</h2><ul>\n<li>自定义<a href=\"http://developer.android.com/training/system-ui/index.html\" target=\"_blank\" rel=\"noopener\">系统UI</a>，例如分屏模式下无法隐藏系统的状态栏。</li>\n<li>无法根据屏幕方向来旋转App的界面，也就是说<code>android:screenOrientation</code>属性会被系统忽略。</li>\n</ul>\n<h2 id=\"分屏模式的通知回调、查询App是否处于分屏状态\"><a href=\"#分屏模式的通知回调、查询App是否处于分屏状态\" class=\"headerlink\" title=\"分屏模式的通知回调、查询App是否处于分屏状态\"></a>分屏模式的通知回调、查询App是否处于分屏状态</h2><p>最新的<a href=\"http://developer.android.com/preview/setup-sdk.html#docs-dl\" target=\"_blank\" rel=\"noopener\">Android N SDK</a>中，<code>Activity</code>类中增加了下面的方法。</p>\n<ul>\n<li>inMultiWindow()：返回值为boolean，调用此方法可以知道App是否处于分屏模式。</li>\n<li>inPictureInPicture()：返回值为boolean，调用此方法可以知道App是否处于画中画模式。</li>\n</ul>\n<blockquote>\n<p>注意：<code>画中画模式</code>其实是一个<strong>特殊的</strong><code>分屏模式</code>，如果<code>mActivity.inPictureInPicture()</code>返回<code>true</code>，那么<code>mActivity.inMultiWindow()</code>一定也是返回<code>true</code>。</p>\n</blockquote>\n<ul>\n<li>onMultiWindowChanged(boolean inMultiWindow)：当Activity进入或者退出分屏模式时，系统会回调这个方法来通知开发者。回调的参数<code>inMultiWindow</code>为boolean类型，如果<code>inMultiWindow</code>为true，表示Activity进入分屏模式；如果<code>inMultiWindow</code>为false，表示退出分屏模式。</li>\n<li>onPictureInPictureChanged(boolean inPictureInPicture)：当Activity进入画中画模式时，系统会回调这个方法。回调参数<code>inPictureInPicture</code>为<code>true</code>时，表示进入了画中画模式；<code>inPictureInPicture</code>为<code>false</code>时，表示退出了画中画模式。</li>\n</ul>\n<p><code>Fragment</code>类中，同样增加了以上支持分屏模式的方法，例如<code>Fragment.inMultiWindow()</code>。</p>\n<h2 id=\"如何进入画中画模式\"><a href=\"#如何进入画中画模式\" class=\"headerlink\" title=\"如何进入画中画模式\"></a>如何进入画中画模式</h2><p>调用<code>Activity</code>类的<code>enterPictureInPicture()</code>方法，可以使得我们的App进入画中画模式。如果运行的设备不支持画中画模式，调用这个方法将不会有任何效果。更多画中画模式的资料，请参考<a href=\"http://developer.android.com/intl/zh-cn/preview/features/picture-in-picture.html\" target=\"_blank\" rel=\"noopener\">picture-in-picture</a>。</p>\n<h2 id=\"在分屏模式下打开新的Activity\"><a href=\"#在分屏模式下打开新的Activity\" class=\"headerlink\" title=\"在分屏模式下打开新的Activity\"></a>在分屏模式下打开新的Activity</h2><p>当你打开一个新的Activity时，只需要给Intent添加<code>Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT</code>，系统将<strong><em>尝试</em></strong>将它设置为与当前的Activity共同以分屏的模式显示在屏幕上。</p>\n<p><strong>注意：</strong>这里只是尝试，但这不一定是100%生效的，前一篇博客里也说过，假如新打开的Activity的<code>android:resizeableActivity</code>属性设置为<code>false</code>，就会禁止分屏浏览这个Activity。所以系统只是尝试去以分屏模式打开一个新的Activity，如果条件不满足，将不会生效！此外，我实际用<code>Android N Preview SDK</code>实践的时候发现这个<code>FLAG</code>实际得值是<code>FLAG_ACTIVITY_LAUNCH_ADJACENT</code>，并非是<code>FLAG_ACTIVITY_LAUNCH_TO_ADJACENT</code>。</p>\n<p>当满足下面的条件，系统会让这两个Activity进入分屏模式：</p>\n<ul>\n<li>当前Activity已经进入到分屏模式。</li>\n<li>新打开的Activity支持分屏浏览（即<strong>android:resizeableActivity=true</strong>）。</li>\n</ul>\n<p>此时，给新打开的Activity，设置<code>intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK);</code>才会有效果。</p>\n<p><img src=\"/content/images/two-acts.png\" alt=\"two-acts\"></p>\n<p>建议参考官方的Sample：<a href=\"https://github.com/googlesamples/android-MultiWindowPlayground\" target=\"_blank\" rel=\"noopener\">MultiWindow Playground Sample</a></p>\n<p>那么为何还需要添加<code>FLAG_ACTIVITY_NEW_TASK</code>？看一下官方解释：</p>\n<blockquote>\n<p>注意：在同一个Activity返回栈中，打开一个新的Activity时，这个Activity将会继承上一个Activity所有和<code>分屏模式</code>有关的属性。如果你想要在一个独立的窗口以分屏模式打开一个新的Activity，那么必须新建一个Activity返回栈。</p>\n</blockquote>\n<p>此外，如果你的设备支持<code>自由模式</code>（官方名字叫<strong>freeform</strong>，暂且就这么翻译它，其实我认为这算也是一种尺寸更自由的分屏模式，上一篇博客里提到过如果设备厂商支持用户可以自由改变Activity的尺寸，那么就相当于支持<code>自由模式</code>，这将比普通的分屏模式更加自由），打开一个Activity时，还可通过<code>ActivityOptions.setLaunchBounds()</code>来指定新的Activity的尺寸和在屏幕中的位置。同样，这个方法也需要你的Activity已经处于分屏模式时，调用它才会生效。</p>\n<h2 id=\"支持拖拽\"><a href=\"#支持拖拽\" class=\"headerlink\" title=\"支持拖拽\"></a>支持拖拽</h2><p>在<a href=\"http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/\">上一篇</a>博客里也提到过，现在我们可以实现在两个分屏模式的Activity之间拖动内容了。Android N Preview SDK中，<code>View</code>已经增加支持Activity之间拖动的API。具体的类和方法，可以参考<a href=\"http://developer.android.com/preview/setup-sdk.html#docs-dl\" target=\"_blank\" rel=\"noopener\">N Preview SDK Reference</a>，主要用到下面几个新的接口：</p>\n<ul>\n<li>View.startDragAndDrop()：<a href=\"http://developer.android.com/intl/zh-cn/reference/android/view/View.html#startDrag(android.content.ClipData,%20android.view.View.DragShadowBuilder,%20java.lang.Object,%20int\" target=\"_blank\" rel=\"noopener\">View.startDrag()</a>) 的替代方法，需要传递<code>View.DRAG_FLAG_GLOBAL</code>来实现跨Activity拖拽。如果需要将URI权限传递给接收方Activity，还可以根据需要设置<code>View.DRAG_FLAG_GLOBAL_URI_READ</code>或者<code>View.DRAG_FLAG_GLOBAL_URI_WRITE</code>。</li>\n<li>View.cancelDragAndDrop()：由拖拽的发起方调用，取消当前进行中的拖拽。</li>\n<li>View.updateDragShadow()：由拖拽的发起方调用，可以给当前进行的拖拽设置阴影。</li>\n<li>android.view.DropPermissions：接收方App所得到的权限列表。</li>\n<li>Activity.requestDropPermissions()：传递URI权限时，需要调用这个方法。传递的内容存储在<a href=\"http://developer.android.com/reference/android/view/DragEvent.html\" target=\"_blank\" rel=\"noopener\">DragEvent</a>中的<a href=\"http://developer.android.com/reference/android/content/ClipData.html\" target=\"_blank\" rel=\"noopener\">ClipData</a>里。返回值为前面的<code>android.view.DropPermissions</code>。</li>\n</ul>\n<p>下面是我自己写的一个demo，实现了在分屏模式下，把一个Activity中ImageView中保存的内容到另外一个Activity中进行显示。实际应用中，可以还可以传递图片的url或者Bitmap对象。</p>\n<p><img src=\"/content/images/drag-drop.png\" alt=\"drag-drop\"></p>\n<p>上图是一个最基本的例子，实现了把MainActivity中的图片保存的内容，拖拽到SecondActivity中。实现步骤如下：</p>\n<p>在MainActivity中，发起拖拽。</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.首先我们在分屏模式下，打开自己App中的SecondActivity</span></span><br><span class=\"line\">findViewById(<span class=\"keyword\">R</span>.id.launch_second_activity).setOnClickListener(<span class=\"keyword\">new</span> <span class=\"keyword\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(<span class=\"keyword\">View</span> <span class=\"keyword\">view</span>) &#123;</span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.this, SecondActivity.<span class=\"keyword\">class</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">                intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK)<span class=\"comment\">;</span></span><br><span class=\"line\">                startActivity(intent)<span class=\"comment\">;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">// 2.然后我们在MainActivity中发出拖拽事件</span></span><br><span class=\"line\">imageView = (ImageView) findViewById(<span class=\"keyword\">R</span>.id.img)<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"comment\">/** 拖拽的发送方Activity和ImageView */</span></span><br><span class=\"line\">        imageView.setTag(<span class=\"string\">\"I'm a ImageView from MainActivity\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        imageView.setOnTouchListener(<span class=\"keyword\">new</span> <span class=\"keyword\">View</span>.OnTouchListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            public boolean onTouch(<span class=\"keyword\">View</span> <span class=\"keyword\">view</span>, MotionEvent motionEvent) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (motionEvent.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 构造一个ClipData，将需要传递的数据放在里面 */</span></span><br><span class=\"line\">                    ClipData.Item item = <span class=\"keyword\">new</span> ClipData.Item((CharSequence) <span class=\"keyword\">view</span>.getTag())<span class=\"comment\">;</span></span><br><span class=\"line\">                    String[] mimeTypes = &#123;ClipDescription.MIMETYPE_TEXT_PLAIN&#125;<span class=\"comment\">;</span></span><br><span class=\"line\">                    ClipData dragData = <span class=\"keyword\">new</span> ClipData(<span class=\"keyword\">view</span>.getTag().toString(), mimeTypes, item)<span class=\"comment\">;</span></span><br><span class=\"line\">                    <span class=\"keyword\">View</span>.DragShadowBuilder shadow = <span class=\"keyword\">new</span> <span class=\"keyword\">View</span>.DragShadowBuilder(imageView)<span class=\"comment\">;</span></span><br><span class=\"line\">                    <span class=\"comment\">/** startDragAndDrop是Android N SDK中的新方法，替代了以前的startDrag，flag需要设置为DRAG_FLAG_GLOBAL */</span></span><br><span class=\"line\">                    <span class=\"keyword\">view</span>.startDragAndDrop(dragData, shadow, null, <span class=\"keyword\">View</span>.DRAG_FLAG_GLOBAL)<span class=\"comment\">;</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> true<span class=\"comment\">;</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> false<span class=\"comment\">;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>在<code>SecondActivity</code>中，接收这个拖拽的结果，在<code>ACTION_DROP</code>事件中，把结果显示出来。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dropedText = (TextView) findViewById(R.id.text_drop);</span><br><span class=\"line\">        dropedText.setOnDragListener(<span class=\"keyword\">new</span> View.OnDragListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> onDrag(View view, DragEvent dragEvent) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (dragEvent.getAction()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.<span class=\"string\">ACTION_DRAG_STARTED:</span></span><br><span class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_STARTED\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.<span class=\"string\">ACTION_DRAG_ENTERED:</span></span><br><span class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_ENTERED\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.<span class=\"string\">ACTION_DRAG_EXITED:</span></span><br><span class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_EXITED\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.<span class=\"string\">ACTION_DRAG_LOCATION:</span></span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.<span class=\"string\">ACTION_DRAG_ENDED:</span></span><br><span class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_ENDED\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.<span class=\"string\">ACTION_DROP:</span></span><br><span class=\"line\">                        Log.d(TAG, <span class=\"string\">\"ACTION_DROP event\"</span>);</span><br><span class=\"line\">                        <span class=\"comment\">/** 3.在这里显示接收到的结果 */</span></span><br><span class=\"line\">                        dropedText.setText(dragEvent.getClipData().getItemAt(<span class=\"number\">0</span>).getText());</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">                    default:</span></span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<p>这里实现的关键在新增加的<code>startDragAndDrop</code>方法，看下官方的API文档：</p>\n<p><img src=\"/content/images/start-drag.png\" alt=\"start-drag\"></p>\n<p>清楚地提到了，<code>发出的DragEvent能够被所有可见的View对象接收到</code>，所以在分屏模式下，SecondActivity可以监听View的onDrag事件，于是我们监听它！</p>\n<p>接着，我们看下<code>DragEvent.ACTION_DROP</code>事件发生的条件：</p>\n<p><img src=\"/content/images/drop-event.png\" alt=\"drop-event\"></p>\n<p>当被拖拽的View的阴影进入到接收方View的坐标区域，如果此时用户松手，那么接收方View就可以接收到这个Drop事件。一目了然，我们通过拖拽ImageView到图上的灰色区域，松手，便可以触发<code>DragEvent.ACTION_DROP</code>，把数据传到SecondActivity中了。</p>\n<p>其实还有更复杂的一些情况，需要调用<code>requestDropPermissions</code>，后续我再进一步实践一下。</p>\n<p>这个demo的地址在<a href=\"https://github.com/unclechen/AndroidN-DragAndDropDemo\" target=\"_blank\" rel=\"noopener\">这里</a>，先分享出来，后面我再接着完善它。</p>\n<h1 id=\"在分屏模式下测试你的App\"><a href=\"#在分屏模式下测试你的App\" class=\"headerlink\" title=\"在分屏模式下测试你的App\"></a>在分屏模式下测试你的App</h1><p>无论你是否将自己的App适配到了Android N，或者是支持分屏模式，都应该找个Android N的设备，来测试一下自己的App在分屏模式下会变成什么样。</p>\n<h2 id=\"设置你的测试设备\"><a href=\"#设置你的测试设备\" class=\"headerlink\" title=\"设置你的测试设备\"></a>设置你的测试设备</h2><p>如果你有一台运行Android N的设备，它是默认支持分屏模式的。</p>\n<h2 id=\"如果你的App不是用Android-N-Preview-SDK打包的\"><a href=\"#如果你的App不是用Android-N-Preview-SDK打包的\" class=\"headerlink\" title=\"如果你的App不是用Android N Preview SDK打包的\"></a>如果你的App不是用Android N Preview SDK打包的</h2><p>如果你的App是用<code>低于Android N Preview SDK</code>打包的，且你的Activity支持<code>横竖屏切换</code>。那么当用户在尝试使用分屏模式时，系统会强制将你的App进入分屏模式。（我在第一篇博客里提到过这个，Android N Preview的介绍视频中，很多Google家的App都可以进入分屏模式，但是打开它们的xml一看，其实<code>targetSDKVersion = 23</code>）</p>\n<p>因此，如果你的App/Activity支持横竖屏切换，那么你应该尝试一下让自己的App分屏，看看当系统强制改变你的App尺寸时，用户是否还可以接受这种体验。如果你的App/Activity不支持横竖屏切换，那么你可以确认一下，看看当尝试进入分屏时，你的App是不是仍然能够保持全屏模式。</p>\n<h2 id=\"如果你给App设置了支持分屏模式\"><a href=\"#如果你给App设置了支持分屏模式\" class=\"headerlink\" title=\"如果你给App设置了支持分屏模式\"></a>如果你给App设置了支持分屏模式</h2><p>如果你使用了<code>Android N Preview SDK</code>来开发自己的App，那么应该按照下面的要点检查一下自己的App。</p>\n<ul>\n<li>启动App，长按系统导航栏右下角的小方块（Google官方把这个叫做<strong>Overview Button</strong>），确保你的App可以进入分屏模式，且尺寸改变后仍然能正常工作。</li>\n<li>启动任务管理器（即单击右下角的小方块），然后长按你App的标题栏，将它拖动到屏幕上的高亮区域。确保你的App可以进入分屏模式，且尺寸改变后仍然能正常工作。</li>\n</ul>\n<p>这两点在<a href=\"http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/\">上一篇博客</a>中介绍过，让自己的App进入分屏模式有三种方法。第三种方法，就是在打开自己的App时，用手指从右下角的小方块向上滑动，这样也可以使得正在浏览的App进入分屏模式。这种方法目前属于实验性功能，正式版不一定保留。</p>\n<ul>\n<li>当你的App进入分屏后，通过拖动两个App中间的分栏上面的小白线，从而改变App的尺寸，观察App中各个UI元素是否正常显示。</li>\n<li>如果你给自己的App/Activity设置了<strong>最小尺寸</strong>，可以尝试在改变App尺寸时，低于这个最小尺寸，观察App是不是会回到设定好的最小尺寸。</li>\n<li>在进行上面几项测试时，请同时验证自己的App功能和性能是否正常，并注意一下自己的App在更新UI时是否花费了太长的时间。</li>\n</ul>\n<p>这几项测试，其实主要强调的是，我们的App可以顺利的进入/退出分屏模式，且改变App的尺寸时，UI依然可以也非常顺滑。</p>\n<p>这里我想多说一句，如果进入了分屏模式，要注意下App弹出的对话框，因为屏幕被两个App分成两块之后，对话框也是可以弹出两个的。这时对话框上的UI元素可能就会变得比较小了，如果我们的代码是写死的大小，例如对话框是一个WebView，就需要特别注意了，搞不好显示出来就缺了一块了，这里需要我们做好适配。</p>\n<h3 id=\"测试清单\"><a href=\"#测试清单\" class=\"headerlink\" title=\"测试清单\"></a>测试清单</h3><p>关于功能、性能方面测试，还可以按照下面的操作来进行。</p>\n<ul>\n<li>让App进入，再退出分屏模式，确保此时App功能正常。</li>\n<li>让App进入分屏模式，激活屏幕上的另外一个App，让自己的App进入<code>可见、paused</code>状态。举了例子来讲，如果你的App是一个视频播放器，那么当用户点击了屏幕上另外一个App时，你的App不应该停止播放视频，即使此时你的Activity/Fragment已经接到了<code>onPaused()</code>回调。</li>\n<li>让App进入分屏模式，拖动分栏上的小白线，改变App的尺寸。请在竖屏（两个App一上一下布局）和横屏（两个App一左一右布局）模式下分别进行改变尺寸的操作。确保App不会崩溃，各项功能正常，且UI的刷新没有花费太多时间。</li>\n<li>在短时间内、多次、迅速地改变App尺寸，确保App没有崩溃，且没有发生内存泄露。关于内存使用方面的更详细注意事项，请参考<a href=\"http://developer.android.com/tools/debugging/debugging-memory.html\" target=\"_blank\" rel=\"noopener\">Investigating Your RAM Usage</a>。</li>\n<li>在不同的窗口设置的情况下，正常使用App，确保App功能正常，文字仍然可读，其他的UI元素也没有变得太小，用户仍然可以舒适地操作App。</li>\n</ul>\n<p>这几项测试，其实主要是说当App在分屏模式下运行时，仍然可以保持性能的稳定，不会Crash也不会OOM。</p>\n<h2 id=\"如果你给App设置了禁止分屏模式\"><a href=\"#如果你给App设置了禁止分屏模式\" class=\"headerlink\" title=\"如果你给App设置了禁止分屏模式\"></a>如果你给App设置了禁止分屏模式</h2><p>如果你给App/Activity设置了<code>android:resizableActivity=&quot;false&quot;</code>，你应该试试当用户在Android N的设备上，尝试分屏浏览你的App时，它是否仍然能保持全屏模式。</p>\n<p>以上就是参考Google最新的<a href=\"http://developer.android.com/intl/zh-cn/preview/features/multi-window.html\" target=\"_blank\" rel=\"noopener\">multi-window</a>进行的实践，总结下，我认为有3点比较重要：</p>\n<ol>\n<li>如何让自己的App/Activity顺利的进入和退出分屏模式，可以参考<a href=\"http://developer.android.com/intl/zh-cn/guide/topics/resources/runtime-changes.html\" target=\"_blank\" rel=\"noopener\">处理运行时改变</a>这一章。</li>\n<li>如何在分屏模式下打开新的Activity，可以参考Google官方的<a href=\"https://github.com/googlesamples/android-MultiWindowPlayground\" target=\"_blank\" rel=\"noopener\">MultiWindow Playground Sample</a>。</li>\n<li>如何实现跨App/Activity的拖拽功能，可以参考<a href=\"http://developer.android.com/intl/zh-cn/guide/topics/ui/drag-drop.html\" target=\"_blank\" rel=\"noopener\">Drag and Drop</a>这一章。</li>\n</ol>\n<p>关于App分屏模式的学习就到这里了，欢迎大家一起交流。我们还发挥更多的想象力，比如是否可以利用跨应用拖拽实现更方便操作，更好的用户体验。</p>\n","site":{"data":{}},"excerpt":"<p>在<a href=\"http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/\">上篇</a>中，介绍了什么是App分屏模式，以及如何设置我们的App来进入分屏模式。这次我们看一下，作为开发者，我们应该如何让自己的App进入分屏模式，当App进入分屏模式时，我们注意哪些问题。</p>\n<p>简单地说，我认为除了保证分屏时App功能、性能正常以外，我们需要重点学习 <strong><em>如何在分屏模式下打开新的Activity</em></strong> 以及 <strong><em>如何实现跨App/Activity的拖拽功能</em></strong>。</p>","more":"<h1 id=\"用分屏模式运行你的App\"><a href=\"#用分屏模式运行你的App\" class=\"headerlink\" title=\"用分屏模式运行你的App\"></a>用分屏模式运行你的App</h1><p>Android N中新增了一些方法来支持App的分屏模式。同时在分屏模式下，也禁用了App一些特性。</p>\n<h2 id=\"分屏模式下被禁用的特性\"><a href=\"#分屏模式下被禁用的特性\" class=\"headerlink\" title=\"分屏模式下被禁用的特性\"></a>分屏模式下被禁用的特性</h2><ul>\n<li>自定义<a href=\"http://developer.android.com/training/system-ui/index.html\" target=\"_blank\" rel=\"noopener\">系统UI</a>，例如分屏模式下无法隐藏系统的状态栏。</li>\n<li>无法根据屏幕方向来旋转App的界面，也就是说<code>android:screenOrientation</code>属性会被系统忽略。</li>\n</ul>\n<h2 id=\"分屏模式的通知回调、查询App是否处于分屏状态\"><a href=\"#分屏模式的通知回调、查询App是否处于分屏状态\" class=\"headerlink\" title=\"分屏模式的通知回调、查询App是否处于分屏状态\"></a>分屏模式的通知回调、查询App是否处于分屏状态</h2><p>最新的<a href=\"http://developer.android.com/preview/setup-sdk.html#docs-dl\" target=\"_blank\" rel=\"noopener\">Android N SDK</a>中，<code>Activity</code>类中增加了下面的方法。</p>\n<ul>\n<li>inMultiWindow()：返回值为boolean，调用此方法可以知道App是否处于分屏模式。</li>\n<li>inPictureInPicture()：返回值为boolean，调用此方法可以知道App是否处于画中画模式。</li>\n</ul>\n<blockquote>\n<p>注意：<code>画中画模式</code>其实是一个<strong>特殊的</strong><code>分屏模式</code>，如果<code>mActivity.inPictureInPicture()</code>返回<code>true</code>，那么<code>mActivity.inMultiWindow()</code>一定也是返回<code>true</code>。</p>\n</blockquote>\n<ul>\n<li>onMultiWindowChanged(boolean inMultiWindow)：当Activity进入或者退出分屏模式时，系统会回调这个方法来通知开发者。回调的参数<code>inMultiWindow</code>为boolean类型，如果<code>inMultiWindow</code>为true，表示Activity进入分屏模式；如果<code>inMultiWindow</code>为false，表示退出分屏模式。</li>\n<li>onPictureInPictureChanged(boolean inPictureInPicture)：当Activity进入画中画模式时，系统会回调这个方法。回调参数<code>inPictureInPicture</code>为<code>true</code>时，表示进入了画中画模式；<code>inPictureInPicture</code>为<code>false</code>时，表示退出了画中画模式。</li>\n</ul>\n<p><code>Fragment</code>类中，同样增加了以上支持分屏模式的方法，例如<code>Fragment.inMultiWindow()</code>。</p>\n<h2 id=\"如何进入画中画模式\"><a href=\"#如何进入画中画模式\" class=\"headerlink\" title=\"如何进入画中画模式\"></a>如何进入画中画模式</h2><p>调用<code>Activity</code>类的<code>enterPictureInPicture()</code>方法，可以使得我们的App进入画中画模式。如果运行的设备不支持画中画模式，调用这个方法将不会有任何效果。更多画中画模式的资料，请参考<a href=\"http://developer.android.com/intl/zh-cn/preview/features/picture-in-picture.html\" target=\"_blank\" rel=\"noopener\">picture-in-picture</a>。</p>\n<h2 id=\"在分屏模式下打开新的Activity\"><a href=\"#在分屏模式下打开新的Activity\" class=\"headerlink\" title=\"在分屏模式下打开新的Activity\"></a>在分屏模式下打开新的Activity</h2><p>当你打开一个新的Activity时，只需要给Intent添加<code>Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT</code>，系统将<strong><em>尝试</em></strong>将它设置为与当前的Activity共同以分屏的模式显示在屏幕上。</p>\n<p><strong>注意：</strong>这里只是尝试，但这不一定是100%生效的，前一篇博客里也说过，假如新打开的Activity的<code>android:resizeableActivity</code>属性设置为<code>false</code>，就会禁止分屏浏览这个Activity。所以系统只是尝试去以分屏模式打开一个新的Activity，如果条件不满足，将不会生效！此外，我实际用<code>Android N Preview SDK</code>实践的时候发现这个<code>FLAG</code>实际得值是<code>FLAG_ACTIVITY_LAUNCH_ADJACENT</code>，并非是<code>FLAG_ACTIVITY_LAUNCH_TO_ADJACENT</code>。</p>\n<p>当满足下面的条件，系统会让这两个Activity进入分屏模式：</p>\n<ul>\n<li>当前Activity已经进入到分屏模式。</li>\n<li>新打开的Activity支持分屏浏览（即<strong>android:resizeableActivity=true</strong>）。</li>\n</ul>\n<p>此时，给新打开的Activity，设置<code>intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK);</code>才会有效果。</p>\n<p><img src=\"/content/images/two-acts.png\" alt=\"two-acts\"></p>\n<p>建议参考官方的Sample：<a href=\"https://github.com/googlesamples/android-MultiWindowPlayground\" target=\"_blank\" rel=\"noopener\">MultiWindow Playground Sample</a></p>\n<p>那么为何还需要添加<code>FLAG_ACTIVITY_NEW_TASK</code>？看一下官方解释：</p>\n<blockquote>\n<p>注意：在同一个Activity返回栈中，打开一个新的Activity时，这个Activity将会继承上一个Activity所有和<code>分屏模式</code>有关的属性。如果你想要在一个独立的窗口以分屏模式打开一个新的Activity，那么必须新建一个Activity返回栈。</p>\n</blockquote>\n<p>此外，如果你的设备支持<code>自由模式</code>（官方名字叫<strong>freeform</strong>，暂且就这么翻译它，其实我认为这算也是一种尺寸更自由的分屏模式，上一篇博客里提到过如果设备厂商支持用户可以自由改变Activity的尺寸，那么就相当于支持<code>自由模式</code>，这将比普通的分屏模式更加自由），打开一个Activity时，还可通过<code>ActivityOptions.setLaunchBounds()</code>来指定新的Activity的尺寸和在屏幕中的位置。同样，这个方法也需要你的Activity已经处于分屏模式时，调用它才会生效。</p>\n<h2 id=\"支持拖拽\"><a href=\"#支持拖拽\" class=\"headerlink\" title=\"支持拖拽\"></a>支持拖拽</h2><p>在<a href=\"http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/\">上一篇</a>博客里也提到过，现在我们可以实现在两个分屏模式的Activity之间拖动内容了。Android N Preview SDK中，<code>View</code>已经增加支持Activity之间拖动的API。具体的类和方法，可以参考<a href=\"http://developer.android.com/preview/setup-sdk.html#docs-dl\" target=\"_blank\" rel=\"noopener\">N Preview SDK Reference</a>，主要用到下面几个新的接口：</p>\n<ul>\n<li>View.startDragAndDrop()：<a href=\"http://developer.android.com/intl/zh-cn/reference/android/view/View.html#startDrag(android.content.ClipData,%20android.view.View.DragShadowBuilder,%20java.lang.Object,%20int\" target=\"_blank\" rel=\"noopener\">View.startDrag()</a>) 的替代方法，需要传递<code>View.DRAG_FLAG_GLOBAL</code>来实现跨Activity拖拽。如果需要将URI权限传递给接收方Activity，还可以根据需要设置<code>View.DRAG_FLAG_GLOBAL_URI_READ</code>或者<code>View.DRAG_FLAG_GLOBAL_URI_WRITE</code>。</li>\n<li>View.cancelDragAndDrop()：由拖拽的发起方调用，取消当前进行中的拖拽。</li>\n<li>View.updateDragShadow()：由拖拽的发起方调用，可以给当前进行的拖拽设置阴影。</li>\n<li>android.view.DropPermissions：接收方App所得到的权限列表。</li>\n<li>Activity.requestDropPermissions()：传递URI权限时，需要调用这个方法。传递的内容存储在<a href=\"http://developer.android.com/reference/android/view/DragEvent.html\" target=\"_blank\" rel=\"noopener\">DragEvent</a>中的<a href=\"http://developer.android.com/reference/android/content/ClipData.html\" target=\"_blank\" rel=\"noopener\">ClipData</a>里。返回值为前面的<code>android.view.DropPermissions</code>。</li>\n</ul>\n<p>下面是我自己写的一个demo，实现了在分屏模式下，把一个Activity中ImageView中保存的内容到另外一个Activity中进行显示。实际应用中，可以还可以传递图片的url或者Bitmap对象。</p>\n<p><img src=\"/content/images/drag-drop.png\" alt=\"drag-drop\"></p>\n<p>上图是一个最基本的例子，实现了把MainActivity中的图片保存的内容，拖拽到SecondActivity中。实现步骤如下：</p>\n<p>在MainActivity中，发起拖拽。</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.首先我们在分屏模式下，打开自己App中的SecondActivity</span></span><br><span class=\"line\">findViewById(<span class=\"keyword\">R</span>.id.launch_second_activity).setOnClickListener(<span class=\"keyword\">new</span> <span class=\"keyword\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(<span class=\"keyword\">View</span> <span class=\"keyword\">view</span>) &#123;</span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.this, SecondActivity.<span class=\"keyword\">class</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">                intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK)<span class=\"comment\">;</span></span><br><span class=\"line\">                startActivity(intent)<span class=\"comment\">;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">// 2.然后我们在MainActivity中发出拖拽事件</span></span><br><span class=\"line\">imageView = (ImageView) findViewById(<span class=\"keyword\">R</span>.id.img)<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"comment\">/** 拖拽的发送方Activity和ImageView */</span></span><br><span class=\"line\">        imageView.setTag(<span class=\"string\">\"I'm a ImageView from MainActivity\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">        imageView.setOnTouchListener(<span class=\"keyword\">new</span> <span class=\"keyword\">View</span>.OnTouchListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            public boolean onTouch(<span class=\"keyword\">View</span> <span class=\"keyword\">view</span>, MotionEvent motionEvent) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (motionEvent.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 构造一个ClipData，将需要传递的数据放在里面 */</span></span><br><span class=\"line\">                    ClipData.Item item = <span class=\"keyword\">new</span> ClipData.Item((CharSequence) <span class=\"keyword\">view</span>.getTag())<span class=\"comment\">;</span></span><br><span class=\"line\">                    String[] mimeTypes = &#123;ClipDescription.MIMETYPE_TEXT_PLAIN&#125;<span class=\"comment\">;</span></span><br><span class=\"line\">                    ClipData dragData = <span class=\"keyword\">new</span> ClipData(<span class=\"keyword\">view</span>.getTag().toString(), mimeTypes, item)<span class=\"comment\">;</span></span><br><span class=\"line\">                    <span class=\"keyword\">View</span>.DragShadowBuilder shadow = <span class=\"keyword\">new</span> <span class=\"keyword\">View</span>.DragShadowBuilder(imageView)<span class=\"comment\">;</span></span><br><span class=\"line\">                    <span class=\"comment\">/** startDragAndDrop是Android N SDK中的新方法，替代了以前的startDrag，flag需要设置为DRAG_FLAG_GLOBAL */</span></span><br><span class=\"line\">                    <span class=\"keyword\">view</span>.startDragAndDrop(dragData, shadow, null, <span class=\"keyword\">View</span>.DRAG_FLAG_GLOBAL)<span class=\"comment\">;</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> true<span class=\"comment\">;</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> false<span class=\"comment\">;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>在<code>SecondActivity</code>中，接收这个拖拽的结果，在<code>ACTION_DROP</code>事件中，把结果显示出来。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dropedText = (TextView) findViewById(R.id.text_drop);</span><br><span class=\"line\">        dropedText.setOnDragListener(<span class=\"keyword\">new</span> View.OnDragListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> onDrag(View view, DragEvent dragEvent) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (dragEvent.getAction()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.<span class=\"string\">ACTION_DRAG_STARTED:</span></span><br><span class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_STARTED\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.<span class=\"string\">ACTION_DRAG_ENTERED:</span></span><br><span class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_ENTERED\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.<span class=\"string\">ACTION_DRAG_EXITED:</span></span><br><span class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_EXITED\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.<span class=\"string\">ACTION_DRAG_LOCATION:</span></span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.<span class=\"string\">ACTION_DRAG_ENDED:</span></span><br><span class=\"line\">                        Log.d(TAG, <span class=\"string\">\"Action is DragEvent.ACTION_DRAG_ENDED\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> DragEvent.<span class=\"string\">ACTION_DROP:</span></span><br><span class=\"line\">                        Log.d(TAG, <span class=\"string\">\"ACTION_DROP event\"</span>);</span><br><span class=\"line\">                        <span class=\"comment\">/** 3.在这里显示接收到的结果 */</span></span><br><span class=\"line\">                        dropedText.setText(dragEvent.getClipData().getItemAt(<span class=\"number\">0</span>).getText());</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">                    default:</span></span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<p>这里实现的关键在新增加的<code>startDragAndDrop</code>方法，看下官方的API文档：</p>\n<p><img src=\"/content/images/start-drag.png\" alt=\"start-drag\"></p>\n<p>清楚地提到了，<code>发出的DragEvent能够被所有可见的View对象接收到</code>，所以在分屏模式下，SecondActivity可以监听View的onDrag事件，于是我们监听它！</p>\n<p>接着，我们看下<code>DragEvent.ACTION_DROP</code>事件发生的条件：</p>\n<p><img src=\"/content/images/drop-event.png\" alt=\"drop-event\"></p>\n<p>当被拖拽的View的阴影进入到接收方View的坐标区域，如果此时用户松手，那么接收方View就可以接收到这个Drop事件。一目了然，我们通过拖拽ImageView到图上的灰色区域，松手，便可以触发<code>DragEvent.ACTION_DROP</code>，把数据传到SecondActivity中了。</p>\n<p>其实还有更复杂的一些情况，需要调用<code>requestDropPermissions</code>，后续我再进一步实践一下。</p>\n<p>这个demo的地址在<a href=\"https://github.com/unclechen/AndroidN-DragAndDropDemo\" target=\"_blank\" rel=\"noopener\">这里</a>，先分享出来，后面我再接着完善它。</p>\n<h1 id=\"在分屏模式下测试你的App\"><a href=\"#在分屏模式下测试你的App\" class=\"headerlink\" title=\"在分屏模式下测试你的App\"></a>在分屏模式下测试你的App</h1><p>无论你是否将自己的App适配到了Android N，或者是支持分屏模式，都应该找个Android N的设备，来测试一下自己的App在分屏模式下会变成什么样。</p>\n<h2 id=\"设置你的测试设备\"><a href=\"#设置你的测试设备\" class=\"headerlink\" title=\"设置你的测试设备\"></a>设置你的测试设备</h2><p>如果你有一台运行Android N的设备，它是默认支持分屏模式的。</p>\n<h2 id=\"如果你的App不是用Android-N-Preview-SDK打包的\"><a href=\"#如果你的App不是用Android-N-Preview-SDK打包的\" class=\"headerlink\" title=\"如果你的App不是用Android N Preview SDK打包的\"></a>如果你的App不是用Android N Preview SDK打包的</h2><p>如果你的App是用<code>低于Android N Preview SDK</code>打包的，且你的Activity支持<code>横竖屏切换</code>。那么当用户在尝试使用分屏模式时，系统会强制将你的App进入分屏模式。（我在第一篇博客里提到过这个，Android N Preview的介绍视频中，很多Google家的App都可以进入分屏模式，但是打开它们的xml一看，其实<code>targetSDKVersion = 23</code>）</p>\n<p>因此，如果你的App/Activity支持横竖屏切换，那么你应该尝试一下让自己的App分屏，看看当系统强制改变你的App尺寸时，用户是否还可以接受这种体验。如果你的App/Activity不支持横竖屏切换，那么你可以确认一下，看看当尝试进入分屏时，你的App是不是仍然能够保持全屏模式。</p>\n<h2 id=\"如果你给App设置了支持分屏模式\"><a href=\"#如果你给App设置了支持分屏模式\" class=\"headerlink\" title=\"如果你给App设置了支持分屏模式\"></a>如果你给App设置了支持分屏模式</h2><p>如果你使用了<code>Android N Preview SDK</code>来开发自己的App，那么应该按照下面的要点检查一下自己的App。</p>\n<ul>\n<li>启动App，长按系统导航栏右下角的小方块（Google官方把这个叫做<strong>Overview Button</strong>），确保你的App可以进入分屏模式，且尺寸改变后仍然能正常工作。</li>\n<li>启动任务管理器（即单击右下角的小方块），然后长按你App的标题栏，将它拖动到屏幕上的高亮区域。确保你的App可以进入分屏模式，且尺寸改变后仍然能正常工作。</li>\n</ul>\n<p>这两点在<a href=\"http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/\">上一篇博客</a>中介绍过，让自己的App进入分屏模式有三种方法。第三种方法，就是在打开自己的App时，用手指从右下角的小方块向上滑动，这样也可以使得正在浏览的App进入分屏模式。这种方法目前属于实验性功能，正式版不一定保留。</p>\n<ul>\n<li>当你的App进入分屏后，通过拖动两个App中间的分栏上面的小白线，从而改变App的尺寸，观察App中各个UI元素是否正常显示。</li>\n<li>如果你给自己的App/Activity设置了<strong>最小尺寸</strong>，可以尝试在改变App尺寸时，低于这个最小尺寸，观察App是不是会回到设定好的最小尺寸。</li>\n<li>在进行上面几项测试时，请同时验证自己的App功能和性能是否正常，并注意一下自己的App在更新UI时是否花费了太长的时间。</li>\n</ul>\n<p>这几项测试，其实主要强调的是，我们的App可以顺利的进入/退出分屏模式，且改变App的尺寸时，UI依然可以也非常顺滑。</p>\n<p>这里我想多说一句，如果进入了分屏模式，要注意下App弹出的对话框，因为屏幕被两个App分成两块之后，对话框也是可以弹出两个的。这时对话框上的UI元素可能就会变得比较小了，如果我们的代码是写死的大小，例如对话框是一个WebView，就需要特别注意了，搞不好显示出来就缺了一块了，这里需要我们做好适配。</p>\n<h3 id=\"测试清单\"><a href=\"#测试清单\" class=\"headerlink\" title=\"测试清单\"></a>测试清单</h3><p>关于功能、性能方面测试，还可以按照下面的操作来进行。</p>\n<ul>\n<li>让App进入，再退出分屏模式，确保此时App功能正常。</li>\n<li>让App进入分屏模式，激活屏幕上的另外一个App，让自己的App进入<code>可见、paused</code>状态。举了例子来讲，如果你的App是一个视频播放器，那么当用户点击了屏幕上另外一个App时，你的App不应该停止播放视频，即使此时你的Activity/Fragment已经接到了<code>onPaused()</code>回调。</li>\n<li>让App进入分屏模式，拖动分栏上的小白线，改变App的尺寸。请在竖屏（两个App一上一下布局）和横屏（两个App一左一右布局）模式下分别进行改变尺寸的操作。确保App不会崩溃，各项功能正常，且UI的刷新没有花费太多时间。</li>\n<li>在短时间内、多次、迅速地改变App尺寸，确保App没有崩溃，且没有发生内存泄露。关于内存使用方面的更详细注意事项，请参考<a href=\"http://developer.android.com/tools/debugging/debugging-memory.html\" target=\"_blank\" rel=\"noopener\">Investigating Your RAM Usage</a>。</li>\n<li>在不同的窗口设置的情况下，正常使用App，确保App功能正常，文字仍然可读，其他的UI元素也没有变得太小，用户仍然可以舒适地操作App。</li>\n</ul>\n<p>这几项测试，其实主要是说当App在分屏模式下运行时，仍然可以保持性能的稳定，不会Crash也不会OOM。</p>\n<h2 id=\"如果你给App设置了禁止分屏模式\"><a href=\"#如果你给App设置了禁止分屏模式\" class=\"headerlink\" title=\"如果你给App设置了禁止分屏模式\"></a>如果你给App设置了禁止分屏模式</h2><p>如果你给App/Activity设置了<code>android:resizableActivity=&quot;false&quot;</code>，你应该试试当用户在Android N的设备上，尝试分屏浏览你的App时，它是否仍然能保持全屏模式。</p>\n<p>以上就是参考Google最新的<a href=\"http://developer.android.com/intl/zh-cn/preview/features/multi-window.html\" target=\"_blank\" rel=\"noopener\">multi-window</a>进行的实践，总结下，我认为有3点比较重要：</p>\n<ol>\n<li>如何让自己的App/Activity顺利的进入和退出分屏模式，可以参考<a href=\"http://developer.android.com/intl/zh-cn/guide/topics/resources/runtime-changes.html\" target=\"_blank\" rel=\"noopener\">处理运行时改变</a>这一章。</li>\n<li>如何在分屏模式下打开新的Activity，可以参考Google官方的<a href=\"https://github.com/googlesamples/android-MultiWindowPlayground\" target=\"_blank\" rel=\"noopener\">MultiWindow Playground Sample</a>。</li>\n<li>如何实现跨App/Activity的拖拽功能，可以参考<a href=\"http://developer.android.com/intl/zh-cn/guide/topics/ui/drag-drop.html\" target=\"_blank\" rel=\"noopener\">Drag and Drop</a>这一章。</li>\n</ol>\n<p>关于App分屏模式的学习就到这里了，欢迎大家一起交流。我们还发挥更多的想象力，比如是否可以利用跨应用拖拽实现更方便操作，更好的用户体验。</p>"},{"layout":"post","title":"Android N安装方法及上手体验","date":"2016-03-10T00:00:00.000Z","_content":"\n今天早上一睁眼，手机上就收到几条Android N的新闻，瞅了一眼发现手里的Nexus6可以安装beta版，于是迫不及待的开始看怎么安装了。直接看[官网](http://developer.android.com/intl/zh-cn/preview/download.html#device-preview)，一共三种安装方式：\n\n- 在真机上直接安装，通过OTA的方式升级\n- 在真机上用Android N的系统镜像安装\n- 使用模拟器\n\n# 1.真机安装\n简单方便，[Android Beta Program](https://www.google.com/android/beta?pli=1)官网注册你的设备，然后。我是把手机插在电脑上的，登录我的Google账号以后，就检测出我的设备了，然后再点击下图中的`ENROLL DEVICE`（由于我已经点击过了，所以现在显示的是`UNENROLL DEVICE`），手机秒秒地就收到官方的推送！爽就一个字，点击进入下载，850.6M。\n\n![enroll-device](/content/images/enroll-device.png)\n\n下载完成后直接重启安装，大概需要5分钟。然后我手机上哪些应用喜欢自己后台一顿乱跑的就全部暴露出来了，可能是因为适配的原因很多应用都开始各种崩溃。首先是猎豹清理大师，接着是虾米音乐啊，淘宝啊，这些的，甚至有的SDK都开始不停地弹出对话框和Toast，“阿里百川XXXX”，真的是要哭了，我连关闭弹窗时间都来不及啊。。。。\n\n<!-- more -->\n\n# 2.下载系统镜像，线刷\n其实我觉得有设备的同学，通过OTA是最好的。但是如果你没有翻墙的梯子，那可能就只能线刷了。下载地址在[这里](http://developer.android.com/intl/zh-cn/preview/download.html#device-preview)。如果有好心搬运到墙内，大家才可以下载。。\n\n支持的机型为：\n\n![android-n-devices](/content/images/android-n-devices.png)\n\n下面开始刷机，官方的步骤在这里[Factory Images for Nexus Devices](https://developers.google.com/android/nexus/images#instructions)。\n\n## 2.1首先下载最新的`Fastboot`工具\n\n**获取途径有两种：**\n\n- 编译好的[Android Open Source Project](https://source.android.com/)\n- Android SDK下面的`platform-tools/`目录，记得打开你的`SDK Manager`下载最新的Android SDK Platform-tools，具体版本可以看看**模拟器**部分。\n\n下载好了`Fastboot`工具以后，把它添加到系统的环境变量，这样下面我们要用的`flash-all`脚本才能在命令行中找到它。例如我的`fastboot`在`/Users/noughtchen/Library/Android/sdk/platform-tools/fastboot`下。\n\n> 注意：刷机会删除掉手机上已有的所有用户数据，请备份好自己个人数据如手机上的照片。\n\n**由于需要unlock bootloader来刷机，请先确保`开发者选项`中的`OEM unlocking`是选中状态。**\n\n## 2.2下面正式进入刷机\n\n- 1.下载合适的系统镜像，下载列表在[这里](http://developer.android.com/intl/zh-cn/preview/download.html#device-preview)。然后解压到你的硬盘上。\n- 2.使用USB把手机连接到电脑上。\n- 3.以`fastboot`模式启动你的手机的bootloader，有两种方式：\n\t- adb工具: 保持手机开机，命令行中执行：`adb reboot bootloader`\n\t- 使用手机的组合键：关机，然后使用同时按下`音量-`、`音量+`和`电源键`（**这是nexus5的组合键，其他机器请自行确认是哪几个组合**），来启动你的手机。\n\t\n- 4.使用命令行unlock手机的`bootloader`，`fastboot flashing unlock`（如果是旧设备，则命令行为`fastboot oem unlock`，**具体是哪个命令，请根据自己的手机搜索一下吧**），此时，你的设备应该会弹出一个确认提示框，提示说会删除所有的数据。\n- 5.打开一个终端，使用命令行进入到你最开始解压的镜像目录。\n- 6.执行**`flash-all`**脚本，开始安装镜像。\n\n当这个脚本执行完成后，你的设备会重启。为了安全起见，你需要lock住bootloader，这分两步：\n- 1.重新以`fastboot`启动你的设备，参考上面的第3步。\n- 2.执行`fastboot flashing lock`（如果是旧设备，则命令行为`fastboot oem lock`，**这里和上面的unlock是刚好相反的，请自己根据手机输入对应的命令**）。\n\n在一些设备上，Lock bootloader也会删除数据。如果你想要再次刷机，那么就得按照上面的步骤重新再fastboot启动设备，然后unlock bootloader。 \n\n**刷机有风险，操作需谨慎!!!**建议动手能力比较强的同学可以试试，我也只是把官网的步骤翻译解释了一下，手机变砖了不要来找我。。。\n\n# 3.模拟器\n这个简单，低成本，无风险。。其实我觉得没有设备的同学，通过这个也是可以体验一下。\n\n操作之前，你需要下载最新的`Android N Preview SDK`，并新建一个虚拟机。\n\n- 1.安装最新的SDK和build-tools，这里我就不说了。安装完成后，需要有`Android SDK Built-Tools 24.0 0 rc1`和`Platform-Tools 24.0.0 rc1`和`SDK Tools 25.0.9`（如果你不安装SDK Tools25.0.9，就无法运行Android N的x86_64的系统镜像）。\n\n- 2.新建一个虚拟机。在Android Studio中打开`Tool-Android-AVD Manager`，点击`Create Virtual Device`，选择一个设备（建议选择Nexus 5X, Nexus 6P, Nexus 9其中一个）。然后选择下一步，需要注意一点的是，虚拟机只支持x86的Android N系统镜像。好了，你可以一直点击下一步知道这个新的虚拟机创建完成，然后启动它吧。为了获得最佳的体验，建议安装`Android Studio 2.1 Preview`，因为Android Studio2.0开始，虚拟机的速度得到了几十倍的提升。\n\n> 注意: 如果你现在使用的是Android Studio 2.0 Beta, 它有个已知的bug，是无法用Android N Preview的镜像来创建虚拟机的, 所以你需要安装Android Studio 2.1 preview 来新建虚拟机。\n\n> For more information about creating virtual devices, see [Managing Virtual Devices](http://developer.android.com/tools/devices/index.html).\n\n# 4.上手体验\n\n不说别的，今天发现一个一个特别好的Android网站[DROIDLIFE](http://www.droid-life.com)，推荐给大家，这里面有Android相关的新闻视频等等，非常的棒。今天他们已经出了一个视频，介绍了Android 7.0的新特性了，例如设置菜单、通知栏、分屏等等，iOS去年就出了画中画特性，但是只能在iPad上用，Android 7.0在手机上也支持应用分屏的哟，赶紧体验一下吧。[heres-everything-new-in-android-n-developer-preview](http://www.droid-life.com/2016/03/09/heres-everything-new-in-android-n-developer-preview/)，最后奉上一张我自己体验的效果图。\n\n![first-experience](/content/images/first-experience.png)\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Android N安装方法及上手体验.markdown","raw":"---\nlayout: post\ntitle: Android N安装方法及上手体验\ndate: '2016-03-10'\nphoto: '/content/images/cover/android-n.png'\ntags:\n  - Android7.x\n  - Android\n  - 适配\ncategories: \n  - 技术\n---\n\n今天早上一睁眼，手机上就收到几条Android N的新闻，瞅了一眼发现手里的Nexus6可以安装beta版，于是迫不及待的开始看怎么安装了。直接看[官网](http://developer.android.com/intl/zh-cn/preview/download.html#device-preview)，一共三种安装方式：\n\n- 在真机上直接安装，通过OTA的方式升级\n- 在真机上用Android N的系统镜像安装\n- 使用模拟器\n\n# 1.真机安装\n简单方便，[Android Beta Program](https://www.google.com/android/beta?pli=1)官网注册你的设备，然后。我是把手机插在电脑上的，登录我的Google账号以后，就检测出我的设备了，然后再点击下图中的`ENROLL DEVICE`（由于我已经点击过了，所以现在显示的是`UNENROLL DEVICE`），手机秒秒地就收到官方的推送！爽就一个字，点击进入下载，850.6M。\n\n![enroll-device](/content/images/enroll-device.png)\n\n下载完成后直接重启安装，大概需要5分钟。然后我手机上哪些应用喜欢自己后台一顿乱跑的就全部暴露出来了，可能是因为适配的原因很多应用都开始各种崩溃。首先是猎豹清理大师，接着是虾米音乐啊，淘宝啊，这些的，甚至有的SDK都开始不停地弹出对话框和Toast，“阿里百川XXXX”，真的是要哭了，我连关闭弹窗时间都来不及啊。。。。\n\n<!-- more -->\n\n# 2.下载系统镜像，线刷\n其实我觉得有设备的同学，通过OTA是最好的。但是如果你没有翻墙的梯子，那可能就只能线刷了。下载地址在[这里](http://developer.android.com/intl/zh-cn/preview/download.html#device-preview)。如果有好心搬运到墙内，大家才可以下载。。\n\n支持的机型为：\n\n![android-n-devices](/content/images/android-n-devices.png)\n\n下面开始刷机，官方的步骤在这里[Factory Images for Nexus Devices](https://developers.google.com/android/nexus/images#instructions)。\n\n## 2.1首先下载最新的`Fastboot`工具\n\n**获取途径有两种：**\n\n- 编译好的[Android Open Source Project](https://source.android.com/)\n- Android SDK下面的`platform-tools/`目录，记得打开你的`SDK Manager`下载最新的Android SDK Platform-tools，具体版本可以看看**模拟器**部分。\n\n下载好了`Fastboot`工具以后，把它添加到系统的环境变量，这样下面我们要用的`flash-all`脚本才能在命令行中找到它。例如我的`fastboot`在`/Users/noughtchen/Library/Android/sdk/platform-tools/fastboot`下。\n\n> 注意：刷机会删除掉手机上已有的所有用户数据，请备份好自己个人数据如手机上的照片。\n\n**由于需要unlock bootloader来刷机，请先确保`开发者选项`中的`OEM unlocking`是选中状态。**\n\n## 2.2下面正式进入刷机\n\n- 1.下载合适的系统镜像，下载列表在[这里](http://developer.android.com/intl/zh-cn/preview/download.html#device-preview)。然后解压到你的硬盘上。\n- 2.使用USB把手机连接到电脑上。\n- 3.以`fastboot`模式启动你的手机的bootloader，有两种方式：\n\t- adb工具: 保持手机开机，命令行中执行：`adb reboot bootloader`\n\t- 使用手机的组合键：关机，然后使用同时按下`音量-`、`音量+`和`电源键`（**这是nexus5的组合键，其他机器请自行确认是哪几个组合**），来启动你的手机。\n\t\n- 4.使用命令行unlock手机的`bootloader`，`fastboot flashing unlock`（如果是旧设备，则命令行为`fastboot oem unlock`，**具体是哪个命令，请根据自己的手机搜索一下吧**），此时，你的设备应该会弹出一个确认提示框，提示说会删除所有的数据。\n- 5.打开一个终端，使用命令行进入到你最开始解压的镜像目录。\n- 6.执行**`flash-all`**脚本，开始安装镜像。\n\n当这个脚本执行完成后，你的设备会重启。为了安全起见，你需要lock住bootloader，这分两步：\n- 1.重新以`fastboot`启动你的设备，参考上面的第3步。\n- 2.执行`fastboot flashing lock`（如果是旧设备，则命令行为`fastboot oem lock`，**这里和上面的unlock是刚好相反的，请自己根据手机输入对应的命令**）。\n\n在一些设备上，Lock bootloader也会删除数据。如果你想要再次刷机，那么就得按照上面的步骤重新再fastboot启动设备，然后unlock bootloader。 \n\n**刷机有风险，操作需谨慎!!!**建议动手能力比较强的同学可以试试，我也只是把官网的步骤翻译解释了一下，手机变砖了不要来找我。。。\n\n# 3.模拟器\n这个简单，低成本，无风险。。其实我觉得没有设备的同学，通过这个也是可以体验一下。\n\n操作之前，你需要下载最新的`Android N Preview SDK`，并新建一个虚拟机。\n\n- 1.安装最新的SDK和build-tools，这里我就不说了。安装完成后，需要有`Android SDK Built-Tools 24.0 0 rc1`和`Platform-Tools 24.0.0 rc1`和`SDK Tools 25.0.9`（如果你不安装SDK Tools25.0.9，就无法运行Android N的x86_64的系统镜像）。\n\n- 2.新建一个虚拟机。在Android Studio中打开`Tool-Android-AVD Manager`，点击`Create Virtual Device`，选择一个设备（建议选择Nexus 5X, Nexus 6P, Nexus 9其中一个）。然后选择下一步，需要注意一点的是，虚拟机只支持x86的Android N系统镜像。好了，你可以一直点击下一步知道这个新的虚拟机创建完成，然后启动它吧。为了获得最佳的体验，建议安装`Android Studio 2.1 Preview`，因为Android Studio2.0开始，虚拟机的速度得到了几十倍的提升。\n\n> 注意: 如果你现在使用的是Android Studio 2.0 Beta, 它有个已知的bug，是无法用Android N Preview的镜像来创建虚拟机的, 所以你需要安装Android Studio 2.1 preview 来新建虚拟机。\n\n> For more information about creating virtual devices, see [Managing Virtual Devices](http://developer.android.com/tools/devices/index.html).\n\n# 4.上手体验\n\n不说别的，今天发现一个一个特别好的Android网站[DROIDLIFE](http://www.droid-life.com)，推荐给大家，这里面有Android相关的新闻视频等等，非常的棒。今天他们已经出了一个视频，介绍了Android 7.0的新特性了，例如设置菜单、通知栏、分屏等等，iOS去年就出了画中画特性，但是只能在iPad上用，Android 7.0在手机上也支持应用分屏的哟，赶紧体验一下吧。[heres-everything-new-in-android-n-developer-preview](http://www.droid-life.com/2016/03/09/heres-everything-new-in-android-n-developer-preview/)，最后奉上一张我自己体验的效果图。\n\n![first-experience](/content/images/first-experience.png)\n\n\n\n\n\n\n\n\n\n\n","slug":"Android N安装方法及上手体验","published":1,"updated":"2018-05-13T07:13:37.000Z","photos":["/content/images/cover/android-n.png"],"comments":1,"link":"","_id":"cjh4tf8do0006mtsxgp5oimbg","content":"<p>今天早上一睁眼，手机上就收到几条Android N的新闻，瞅了一眼发现手里的Nexus6可以安装beta版，于是迫不及待的开始看怎么安装了。直接看<a href=\"http://developer.android.com/intl/zh-cn/preview/download.html#device-preview\" target=\"_blank\" rel=\"noopener\">官网</a>，一共三种安装方式：</p>\n<ul>\n<li>在真机上直接安装，通过OTA的方式升级</li>\n<li>在真机上用Android N的系统镜像安装</li>\n<li>使用模拟器</li>\n</ul>\n<h1 id=\"1-真机安装\"><a href=\"#1-真机安装\" class=\"headerlink\" title=\"1.真机安装\"></a>1.真机安装</h1><p>简单方便，<a href=\"https://www.google.com/android/beta?pli=1\" target=\"_blank\" rel=\"noopener\">Android Beta Program</a>官网注册你的设备，然后。我是把手机插在电脑上的，登录我的Google账号以后，就检测出我的设备了，然后再点击下图中的<code>ENROLL DEVICE</code>（由于我已经点击过了，所以现在显示的是<code>UNENROLL DEVICE</code>），手机秒秒地就收到官方的推送！爽就一个字，点击进入下载，850.6M。</p>\n<p><img src=\"/content/images/enroll-device.png\" alt=\"enroll-device\"></p>\n<p>下载完成后直接重启安装，大概需要5分钟。然后我手机上哪些应用喜欢自己后台一顿乱跑的就全部暴露出来了，可能是因为适配的原因很多应用都开始各种崩溃。首先是猎豹清理大师，接着是虾米音乐啊，淘宝啊，这些的，甚至有的SDK都开始不停地弹出对话框和Toast，“阿里百川XXXX”，真的是要哭了，我连关闭弹窗时间都来不及啊。。。。</p>\n<a id=\"more\"></a>\n<h1 id=\"2-下载系统镜像，线刷\"><a href=\"#2-下载系统镜像，线刷\" class=\"headerlink\" title=\"2.下载系统镜像，线刷\"></a>2.下载系统镜像，线刷</h1><p>其实我觉得有设备的同学，通过OTA是最好的。但是如果你没有翻墙的梯子，那可能就只能线刷了。下载地址在<a href=\"http://developer.android.com/intl/zh-cn/preview/download.html#device-preview\" target=\"_blank\" rel=\"noopener\">这里</a>。如果有好心搬运到墙内，大家才可以下载。。</p>\n<p>支持的机型为：</p>\n<p><img src=\"/content/images/android-n-devices.png\" alt=\"android-n-devices\"></p>\n<p>下面开始刷机，官方的步骤在这里<a href=\"https://developers.google.com/android/nexus/images#instructions\" target=\"_blank\" rel=\"noopener\">Factory Images for Nexus Devices</a>。</p>\n<h2 id=\"2-1首先下载最新的Fastboot工具\"><a href=\"#2-1首先下载最新的Fastboot工具\" class=\"headerlink\" title=\"2.1首先下载最新的Fastboot工具\"></a>2.1首先下载最新的<code>Fastboot</code>工具</h2><p><strong>获取途径有两种：</strong></p>\n<ul>\n<li>编译好的<a href=\"https://source.android.com/\" target=\"_blank\" rel=\"noopener\">Android Open Source Project</a></li>\n<li>Android SDK下面的<code>platform-tools/</code>目录，记得打开你的<code>SDK Manager</code>下载最新的Android SDK Platform-tools，具体版本可以看看<strong>模拟器</strong>部分。</li>\n</ul>\n<p>下载好了<code>Fastboot</code>工具以后，把它添加到系统的环境变量，这样下面我们要用的<code>flash-all</code>脚本才能在命令行中找到它。例如我的<code>fastboot</code>在<code>/Users/noughtchen/Library/Android/sdk/platform-tools/fastboot</code>下。</p>\n<blockquote>\n<p>注意：刷机会删除掉手机上已有的所有用户数据，请备份好自己个人数据如手机上的照片。</p>\n</blockquote>\n<p><strong>由于需要unlock bootloader来刷机，请先确保<code>开发者选项</code>中的<code>OEM unlocking</code>是选中状态。</strong></p>\n<h2 id=\"2-2下面正式进入刷机\"><a href=\"#2-2下面正式进入刷机\" class=\"headerlink\" title=\"2.2下面正式进入刷机\"></a>2.2下面正式进入刷机</h2><ul>\n<li>1.下载合适的系统镜像，下载列表在<a href=\"http://developer.android.com/intl/zh-cn/preview/download.html#device-preview\" target=\"_blank\" rel=\"noopener\">这里</a>。然后解压到你的硬盘上。</li>\n<li>2.使用USB把手机连接到电脑上。</li>\n<li><p>3.以<code>fastboot</code>模式启动你的手机的bootloader，有两种方式：</p>\n<ul>\n<li>adb工具: 保持手机开机，命令行中执行：<code>adb reboot bootloader</code></li>\n<li>使用手机的组合键：关机，然后使用同时按下<code>音量-</code>、<code>音量+</code>和<code>电源键</code>（<strong>这是nexus5的组合键，其他机器请自行确认是哪几个组合</strong>），来启动你的手机。</li>\n</ul>\n</li>\n<li><p>4.使用命令行unlock手机的<code>bootloader</code>，<code>fastboot flashing unlock</code>（如果是旧设备，则命令行为<code>fastboot oem unlock</code>，<strong>具体是哪个命令，请根据自己的手机搜索一下吧</strong>），此时，你的设备应该会弹出一个确认提示框，提示说会删除所有的数据。</p>\n</li>\n<li>5.打开一个终端，使用命令行进入到你最开始解压的镜像目录。</li>\n<li>6.执行<strong><code>flash-all</code></strong>脚本，开始安装镜像。</li>\n</ul>\n<p>当这个脚本执行完成后，你的设备会重启。为了安全起见，你需要lock住bootloader，这分两步：</p>\n<ul>\n<li>1.重新以<code>fastboot</code>启动你的设备，参考上面的第3步。</li>\n<li>2.执行<code>fastboot flashing lock</code>（如果是旧设备，则命令行为<code>fastboot oem lock</code>，<strong>这里和上面的unlock是刚好相反的，请自己根据手机输入对应的命令</strong>）。</li>\n</ul>\n<p>在一些设备上，Lock bootloader也会删除数据。如果你想要再次刷机，那么就得按照上面的步骤重新再fastboot启动设备，然后unlock bootloader。 </p>\n<p><strong>刷机有风险，操作需谨慎!!!</strong>建议动手能力比较强的同学可以试试，我也只是把官网的步骤翻译解释了一下，手机变砖了不要来找我。。。</p>\n<h1 id=\"3-模拟器\"><a href=\"#3-模拟器\" class=\"headerlink\" title=\"3.模拟器\"></a>3.模拟器</h1><p>这个简单，低成本，无风险。。其实我觉得没有设备的同学，通过这个也是可以体验一下。</p>\n<p>操作之前，你需要下载最新的<code>Android N Preview SDK</code>，并新建一个虚拟机。</p>\n<ul>\n<li><p>1.安装最新的SDK和build-tools，这里我就不说了。安装完成后，需要有<code>Android SDK Built-Tools 24.0 0 rc1</code>和<code>Platform-Tools 24.0.0 rc1</code>和<code>SDK Tools 25.0.9</code>（如果你不安装SDK Tools25.0.9，就无法运行Android N的x86_64的系统镜像）。</p>\n</li>\n<li><p>2.新建一个虚拟机。在Android Studio中打开<code>Tool-Android-AVD Manager</code>，点击<code>Create Virtual Device</code>，选择一个设备（建议选择Nexus 5X, Nexus 6P, Nexus 9其中一个）。然后选择下一步，需要注意一点的是，虚拟机只支持x86的Android N系统镜像。好了，你可以一直点击下一步知道这个新的虚拟机创建完成，然后启动它吧。为了获得最佳的体验，建议安装<code>Android Studio 2.1 Preview</code>，因为Android Studio2.0开始，虚拟机的速度得到了几十倍的提升。</p>\n</li>\n</ul>\n<blockquote>\n<p>注意: 如果你现在使用的是Android Studio 2.0 Beta, 它有个已知的bug，是无法用Android N Preview的镜像来创建虚拟机的, 所以你需要安装Android Studio 2.1 preview 来新建虚拟机。</p>\n<p>For more information about creating virtual devices, see <a href=\"http://developer.android.com/tools/devices/index.html\" target=\"_blank\" rel=\"noopener\">Managing Virtual Devices</a>.</p>\n</blockquote>\n<h1 id=\"4-上手体验\"><a href=\"#4-上手体验\" class=\"headerlink\" title=\"4.上手体验\"></a>4.上手体验</h1><p>不说别的，今天发现一个一个特别好的Android网站<a href=\"http://www.droid-life.com\" target=\"_blank\" rel=\"noopener\">DROIDLIFE</a>，推荐给大家，这里面有Android相关的新闻视频等等，非常的棒。今天他们已经出了一个视频，介绍了Android 7.0的新特性了，例如设置菜单、通知栏、分屏等等，iOS去年就出了画中画特性，但是只能在iPad上用，Android 7.0在手机上也支持应用分屏的哟，赶紧体验一下吧。<a href=\"http://www.droid-life.com/2016/03/09/heres-everything-new-in-android-n-developer-preview/\" target=\"_blank\" rel=\"noopener\">heres-everything-new-in-android-n-developer-preview</a>，最后奉上一张我自己体验的效果图。</p>\n<p><img src=\"/content/images/first-experience.png\" alt=\"first-experience\"></p>\n","site":{"data":{}},"excerpt":"<p>今天早上一睁眼，手机上就收到几条Android N的新闻，瞅了一眼发现手里的Nexus6可以安装beta版，于是迫不及待的开始看怎么安装了。直接看<a href=\"http://developer.android.com/intl/zh-cn/preview/download.html#device-preview\" target=\"_blank\" rel=\"noopener\">官网</a>，一共三种安装方式：</p>\n<ul>\n<li>在真机上直接安装，通过OTA的方式升级</li>\n<li>在真机上用Android N的系统镜像安装</li>\n<li>使用模拟器</li>\n</ul>\n<h1 id=\"1-真机安装\"><a href=\"#1-真机安装\" class=\"headerlink\" title=\"1.真机安装\"></a>1.真机安装</h1><p>简单方便，<a href=\"https://www.google.com/android/beta?pli=1\" target=\"_blank\" rel=\"noopener\">Android Beta Program</a>官网注册你的设备，然后。我是把手机插在电脑上的，登录我的Google账号以后，就检测出我的设备了，然后再点击下图中的<code>ENROLL DEVICE</code>（由于我已经点击过了，所以现在显示的是<code>UNENROLL DEVICE</code>），手机秒秒地就收到官方的推送！爽就一个字，点击进入下载，850.6M。</p>\n<p><img src=\"/content/images/enroll-device.png\" alt=\"enroll-device\"></p>\n<p>下载完成后直接重启安装，大概需要5分钟。然后我手机上哪些应用喜欢自己后台一顿乱跑的就全部暴露出来了，可能是因为适配的原因很多应用都开始各种崩溃。首先是猎豹清理大师，接着是虾米音乐啊，淘宝啊，这些的，甚至有的SDK都开始不停地弹出对话框和Toast，“阿里百川XXXX”，真的是要哭了，我连关闭弹窗时间都来不及啊。。。。</p>","more":"<h1 id=\"2-下载系统镜像，线刷\"><a href=\"#2-下载系统镜像，线刷\" class=\"headerlink\" title=\"2.下载系统镜像，线刷\"></a>2.下载系统镜像，线刷</h1><p>其实我觉得有设备的同学，通过OTA是最好的。但是如果你没有翻墙的梯子，那可能就只能线刷了。下载地址在<a href=\"http://developer.android.com/intl/zh-cn/preview/download.html#device-preview\" target=\"_blank\" rel=\"noopener\">这里</a>。如果有好心搬运到墙内，大家才可以下载。。</p>\n<p>支持的机型为：</p>\n<p><img src=\"/content/images/android-n-devices.png\" alt=\"android-n-devices\"></p>\n<p>下面开始刷机，官方的步骤在这里<a href=\"https://developers.google.com/android/nexus/images#instructions\" target=\"_blank\" rel=\"noopener\">Factory Images for Nexus Devices</a>。</p>\n<h2 id=\"2-1首先下载最新的Fastboot工具\"><a href=\"#2-1首先下载最新的Fastboot工具\" class=\"headerlink\" title=\"2.1首先下载最新的Fastboot工具\"></a>2.1首先下载最新的<code>Fastboot</code>工具</h2><p><strong>获取途径有两种：</strong></p>\n<ul>\n<li>编译好的<a href=\"https://source.android.com/\" target=\"_blank\" rel=\"noopener\">Android Open Source Project</a></li>\n<li>Android SDK下面的<code>platform-tools/</code>目录，记得打开你的<code>SDK Manager</code>下载最新的Android SDK Platform-tools，具体版本可以看看<strong>模拟器</strong>部分。</li>\n</ul>\n<p>下载好了<code>Fastboot</code>工具以后，把它添加到系统的环境变量，这样下面我们要用的<code>flash-all</code>脚本才能在命令行中找到它。例如我的<code>fastboot</code>在<code>/Users/noughtchen/Library/Android/sdk/platform-tools/fastboot</code>下。</p>\n<blockquote>\n<p>注意：刷机会删除掉手机上已有的所有用户数据，请备份好自己个人数据如手机上的照片。</p>\n</blockquote>\n<p><strong>由于需要unlock bootloader来刷机，请先确保<code>开发者选项</code>中的<code>OEM unlocking</code>是选中状态。</strong></p>\n<h2 id=\"2-2下面正式进入刷机\"><a href=\"#2-2下面正式进入刷机\" class=\"headerlink\" title=\"2.2下面正式进入刷机\"></a>2.2下面正式进入刷机</h2><ul>\n<li>1.下载合适的系统镜像，下载列表在<a href=\"http://developer.android.com/intl/zh-cn/preview/download.html#device-preview\" target=\"_blank\" rel=\"noopener\">这里</a>。然后解压到你的硬盘上。</li>\n<li>2.使用USB把手机连接到电脑上。</li>\n<li><p>3.以<code>fastboot</code>模式启动你的手机的bootloader，有两种方式：</p>\n<ul>\n<li>adb工具: 保持手机开机，命令行中执行：<code>adb reboot bootloader</code></li>\n<li>使用手机的组合键：关机，然后使用同时按下<code>音量-</code>、<code>音量+</code>和<code>电源键</code>（<strong>这是nexus5的组合键，其他机器请自行确认是哪几个组合</strong>），来启动你的手机。</li>\n</ul>\n</li>\n<li><p>4.使用命令行unlock手机的<code>bootloader</code>，<code>fastboot flashing unlock</code>（如果是旧设备，则命令行为<code>fastboot oem unlock</code>，<strong>具体是哪个命令，请根据自己的手机搜索一下吧</strong>），此时，你的设备应该会弹出一个确认提示框，提示说会删除所有的数据。</p>\n</li>\n<li>5.打开一个终端，使用命令行进入到你最开始解压的镜像目录。</li>\n<li>6.执行<strong><code>flash-all</code></strong>脚本，开始安装镜像。</li>\n</ul>\n<p>当这个脚本执行完成后，你的设备会重启。为了安全起见，你需要lock住bootloader，这分两步：</p>\n<ul>\n<li>1.重新以<code>fastboot</code>启动你的设备，参考上面的第3步。</li>\n<li>2.执行<code>fastboot flashing lock</code>（如果是旧设备，则命令行为<code>fastboot oem lock</code>，<strong>这里和上面的unlock是刚好相反的，请自己根据手机输入对应的命令</strong>）。</li>\n</ul>\n<p>在一些设备上，Lock bootloader也会删除数据。如果你想要再次刷机，那么就得按照上面的步骤重新再fastboot启动设备，然后unlock bootloader。 </p>\n<p><strong>刷机有风险，操作需谨慎!!!</strong>建议动手能力比较强的同学可以试试，我也只是把官网的步骤翻译解释了一下，手机变砖了不要来找我。。。</p>\n<h1 id=\"3-模拟器\"><a href=\"#3-模拟器\" class=\"headerlink\" title=\"3.模拟器\"></a>3.模拟器</h1><p>这个简单，低成本，无风险。。其实我觉得没有设备的同学，通过这个也是可以体验一下。</p>\n<p>操作之前，你需要下载最新的<code>Android N Preview SDK</code>，并新建一个虚拟机。</p>\n<ul>\n<li><p>1.安装最新的SDK和build-tools，这里我就不说了。安装完成后，需要有<code>Android SDK Built-Tools 24.0 0 rc1</code>和<code>Platform-Tools 24.0.0 rc1</code>和<code>SDK Tools 25.0.9</code>（如果你不安装SDK Tools25.0.9，就无法运行Android N的x86_64的系统镜像）。</p>\n</li>\n<li><p>2.新建一个虚拟机。在Android Studio中打开<code>Tool-Android-AVD Manager</code>，点击<code>Create Virtual Device</code>，选择一个设备（建议选择Nexus 5X, Nexus 6P, Nexus 9其中一个）。然后选择下一步，需要注意一点的是，虚拟机只支持x86的Android N系统镜像。好了，你可以一直点击下一步知道这个新的虚拟机创建完成，然后启动它吧。为了获得最佳的体验，建议安装<code>Android Studio 2.1 Preview</code>，因为Android Studio2.0开始，虚拟机的速度得到了几十倍的提升。</p>\n</li>\n</ul>\n<blockquote>\n<p>注意: 如果你现在使用的是Android Studio 2.0 Beta, 它有个已知的bug，是无法用Android N Preview的镜像来创建虚拟机的, 所以你需要安装Android Studio 2.1 preview 来新建虚拟机。</p>\n<p>For more information about creating virtual devices, see <a href=\"http://developer.android.com/tools/devices/index.html\" target=\"_blank\" rel=\"noopener\">Managing Virtual Devices</a>.</p>\n</blockquote>\n<h1 id=\"4-上手体验\"><a href=\"#4-上手体验\" class=\"headerlink\" title=\"4.上手体验\"></a>4.上手体验</h1><p>不说别的，今天发现一个一个特别好的Android网站<a href=\"http://www.droid-life.com\" target=\"_blank\" rel=\"noopener\">DROIDLIFE</a>，推荐给大家，这里面有Android相关的新闻视频等等，非常的棒。今天他们已经出了一个视频，介绍了Android 7.0的新特性了，例如设置菜单、通知栏、分屏等等，iOS去年就出了画中画特性，但是只能在iPad上用，Android 7.0在手机上也支持应用分屏的哟，赶紧体验一下吧。<a href=\"http://www.droid-life.com/2016/03/09/heres-everything-new-in-android-n-developer-preview/\" target=\"_blank\" rel=\"noopener\">heres-everything-new-in-android-n-developer-preview</a>，最后奉上一张我自己体验的效果图。</p>\n<p><img src=\"/content/images/first-experience.png\" alt=\"first-experience\"></p>"},{"layout":"post","date":"2015-10-22T00:00:00.000Z","title":"Android Studio Gradle实践之多渠道自动化打包+版本号管理","_content":"\n上次介绍了[Android Studio的安装、配置和基本使用](http://unclechen.github.io/2015/06/01/Android%20Studio%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/)。这次讲一下Android Studio用到的打包工具Gradle。[Gradle](http://gradle.org/)是一种构建项目的框架，兼容Maven、Ant，为Java项目提供了很多插件去实现打包功能。废话不多说，下面直接进入实战。当我写这篇博客的时候，Android Studio的版本已经更新到了**1.4**，比上一篇博客的版本又更新了。\n\n<!-- more -->\n\n# Android Studio工程build.gradle脚本介绍\n\n在进行多渠道打包之前，先介绍一下Android Studio工程中的gradle脚本长什么样。打开Android Studio，新建一个Project，这里我给它命名为Hello Gradle，一路点击下一步，最后Android Studio自动为我们建立的如下图的这个工程。\n\n![hello AS](/content/images/create-a-project.png)\n\n按照上篇博客中介绍的，我们推荐大家采用Android结构的视图来查看项目结构。展开Gradle Scripts我们可以看到里面有两个`build.gradle`文件和一个`settings.gradle`文件。其中的`build.gradle(Project: HelloGradle)`文件是我们整个工程的build文件，而`build.gradle(Module: app)`文件是我们工程下的一个Module的build文件。前面我们就说过Android Studio采用单工程多Module结构，一个工程可以理解为Eclipse下的一个Workspace，一个Module可以理解为Eclipse下的Project。当我们用Android Studio建立一个默认的工程时，它自动为我们建立了一个名字为`app`默认的Module。\n\n所以我们可以知道，一个Android Studio工程会有一个`工程级别的build.gradle`文件，同时有N个Module，就还会有N个`Module级别的build.gradle`文件。\n\n## 工程目录下的build.gradle(Project: HelloGradle)文件\n\n接着我们先看下这个工程级别的build.gradle文件。\n\n```\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.3.0'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\n```\n\n这个文件里的buildscript闭包中为我们定义了工程用到的repository地址，默认为我们加上了jcenter，并添加了版本号为1.3.0的Android Gradle插件。关于闭包，由于gradle是基于Groovy语言编写的，而闭包是里面的一个概念，可以理解为最小的代码执行块。关于jcenter，可以理解为一个兼容Maven中央仓库的东西，是Google为Android建立的。\n\n最下面还有一个task clean，**task**是gradle脚本中用到最多的东西了。Gradle实际上是一个容器，实现真正的功能的都是Gradle的插件Plugin，而Plugin中又定义了各式各样的Task，这一个个的Task是执行任务的基本单元。\n\n这里一看就知道是一个delete类型的task，意思是在我们执行打包脚本前做一个清理工作，把项目输出文件夹中的文件先全部清理干净。\n\n## Module目录下的build.gradle(Module: app)文件\n\n接着看app Module下的build.gradle文件。\n\n```\napply plugin: 'com.android.application'\n```\n\n第一行`apply plugin: 'com.android.application'`：指的是在这个脚本中应用**Android Application**插件。前面我们说到了Gradle中真正起作用的是插件，每个插件中可以定义各种各样的Task，当然还可以有一些Property属性，如果你以前是用Ant打包的，那么对属性一定不会陌生吧。\n\n```\nandroid {\n    compileSdkVersion 22\n    buildToolsVersion \"23.0.1\"\n\n    defaultConfig {\n        applicationId \"com.nought.hellogradle\"\n        minSdkVersion 14\n        targetSdkVersion 22\n        versionCode 1\n        versionName \"1.0\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n```\n\n接着看android闭包，里面首先定义了我们这个Module使用的**compileSdkVersion**和**buildToolsVersion**，这两个属性大家肯定知道，一个是用来编译代码的sdk版本，一个是用来打包apk的build-tools版本。\n\n再看里面的defaultConfig，又定义了几个属性。依次有**applicationId**，代表着你的包名，以前我们都是在AndroidManifest.xml文件中通过`package=\"com.nought.hellogradle\"`指定应用程序的包名，现在我们可以在gradle打包脚本中指定它，后面你会发现我们结合 **buildTypes** 和 **productFlavors** ，还可以动态的改变它，有点神奇了吧！ **minSdkVersion** 指的是你的应用程序兼容的最低Android系统版本； **targetSdkVersion** 指的是你的应用程序希望运行的Android系统版本；**versionCode** 是你的代码构建编号，一般我们每打一次包就将它增加1；**versionName** 则是你对外发布时，用户看到的应用程序版本号，一般我们都用“点分三个数字”来命名，例如`1.0.0`。\n\n接着看下 **buildTypes** ，这里面默认只定义了 **release** 类型，其实还可以定 **debug** 类型以及你自己定义的例如 **internal** 国内类型、**external** 国外类型等等。以前在每一个type中，可以分别配置不同的选项，例如可以 **配置不同的包名、是否混淆** 等等，目前的默认release类型中配置了混淆文件，`minifyEnabled false`指的是不混淆代码，下面这行 `proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'` 指定的是你的混淆配置文件。这里就不详细介绍了，马上我们就会看一下多渠道打包，实践一下大家就清楚了。\n\n```\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:22.2.1'\n    compile 'com.android.support:design:22.2.1'\n}\n```\n\n最后，我们看dependencies闭包，这里指的是我们的工程依赖的库，以往在Eclipse中开发，我们常常通过jar包，以及添加library的形式来添加依赖，现在方便了，在gradle脚本里，一行代码通通搞定！真是简单啊！dependencies闭包下，有几种基本的语法。\n\n- 1：`compile fileTree(dir: 'libs', include: ['*.jar'])`,指的是依赖libs下面所有的jar包，你还可以指定具体的每一个jar包，而不是采用`*.jar`通配符匹配的方式，例如`compile files('libs/文件名.jar')`；\n\n- 2：`compile 'com.android.support:appcompat-v7:22.2.1'`，这种语法是通过包名：工程名：版本号的形式来依赖的，\n\n- 3：`testCompile 'junit:junit:4.12'`，指的是测试时才会用到的依赖，这里一看就知道是指做单元测试时依赖junit。\n\n好了，上面介绍了Android Studio默认生成的基本的Gradle打包脚本的结构。下面我们在实践中学习，怎么修改这个脚本，来实现自己的各种需求，例如多渠道自动化打包等等。\n\n# 多渠道打包实践\n\n多渠道指的是你的应用程序可以发布到不同的应用市场，被不同的用户从各个市场下载以后，你可以监测到每一个用户安装的这个应用程序是来自哪个市场的。实现的方法有很多，主要是通过在安装包中的放置一个标志位来区分不同的渠道包。\n\n## 多渠道打包实现思路\n\n### 思路1：AndroidManifest.xml占位符与productFlavor结合\n\n比较常见的友盟移动统计sdk中使用的方案，这种方案是 **通过`build.gradle`脚本中的`productFlavor`** 来实现的。首先在AndroidManifest.xml文件的 **`application`** 标签里指定一个 **meta-data** ，然后Umeng SDK会读取这个标签中value传到Umeng的后台，这样就可以让开发者监测到自己的应用程序渠道分布情况了。\n\n```\n<meta-data android:name=\"UMENG_CHANNEL\" android:value=\"${UMENG_CHANNEL}\"></meta-data>\n```\n\n其实`meta-data`元素可以作为子元素，被包含在 `activity`,`application`,`service`和`receiver`标签中，但是不同位置下的 `meta-data` 读取方法不一样，我们这里就以在`application`中放置占位符为例。\n\n### 思路2：一次打包，动态替换渠道标识符\n\n在[美团的技术博客](http://tech.meituan.com/mt-apk-packaging.html)上还分享过 **另外一种实现思路** ：就是在打包完apk之后，再拆包替换掉其中一个文件，或者替换文件中的标识符，实现不同渠道市场的打包。因为apk实际上也是一种zip文件，里面有Android定义的一些文件组织结构，比如可以在assert目录下塞一个文件，命名为version之类的，再动态改变其中的内容。这种思路和官方的`buildTypes + productFlavor`方式有所不同。因为这种思路只需要执行一次打包任务，剩下的操作是拆开apk，替换文件。可想而知这种速度比较快，如果你有很多个渠道包要打的话，这种思路能提高很多速度，据说100个渠道包大概只要2分钟。而普通的`buildTypes + productFlavor`方式，我打了4个渠道包也花费了几十秒。可见如果有很多渠道包要出，建议采用美团的这种思路。\n\n\n## 多渠道打包实现步骤\n\n### 1. 在AndroidManifest.xml的`application`标签下定义UMENG_CHANNEL占位符。\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.nought.hellogradle\" >\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\" >\n\n        <meta-data android:name=\"UMENG_CHANNEL\" android:value=\"${UMENG_CHANNEL}\"></meta-data>\n\n        <activity\n            android:name=\".MainActivity\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/AppTheme.NoActionBar\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\n### 2. 修改app目录下的build.gradle脚本，在`android`闭包中添加 **`productFlavors`** 属性，配置替换占位符的渠道标识。\n\n```\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 22\n    buildToolsVersion \"23.0.1\"\n\n    defaultConfig {\n        applicationId \"com.nought.hellogradle\"\n        minSdkVersion 14\n        targetSdkVersion 22\n        versionCode 1\n        versionName \"1.0\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n    productFlavors {\n        GooglePlay {\n            manifestPlaceholders = [UMENG_CHANNEL: \"GooglePlay\"]\n        }\n        Baidu {\n            manifestPlaceholders = [UMENG_CHANNEL: \"Baidu\"]\n        }\n        Wandoujia {\n            manifestPlaceholders = [UMENG_CHANNEL: \"Wandoujia\"]\n        }\n        Xiaomi {\n            manifestPlaceholders = [UMENG_CHANNEL: \"Xiaomi\"]\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:22.2.1'\n    compile 'com.android.support:design:22.2.1'\n}\n\n```\n\n### 3. 打开Android Studio自带的命令行工具，运行`gradle build`命令，就可以在 **`app/build/outputs/apk/`** 目录下看到生成渠道包apk文件。注意：输出的apk文件是在app Module下的build目录中，不是工程根目录下的build目录。\n\n![hello AS](/content/images/apk-outputs.png)\n\n我们可以看到在 **`app/build/outputs/apk/`** 中，生成的带有渠道标识的apk文件有12个，这时因为 **buildTypes** 与 **productFlavors** 两两组合，2*4=8，Android Studio默认必须有 **release** 和 **debug** 这两种Type。此外，由于buildTypes中还可以定义 **`zipAlignEnabled true`** ，意思是混淆后的zip优化，该值默认为true，因此每个渠道还多了一个 **`app-渠道标识-debug-unaligned.apk`** 文件。\n\n## 小结：\n\n运行`gradle build`命令时，终端里会显示当前正在执行的task，里面有很多我们熟悉的任务，例如dex、javaCompile这些。前面我们说过，gradle脚本会以钩子的形式，执行一系列的tasks，最终构建出我们所需要的程序安装包。感兴趣的同学可以执行一下 **`gradle tasks`** 命令，这个命令可以查看当前工程下所有的tasks，后面我也将结合这些tasks，实践一下jar包的构建。\n \n![hello AS](/content/images/open-terminal.png)\n\n## PS：渠道包修改包名\n \n如果你想修改不同的渠道包的包名，可以在你的 **productFlavors** 指定不同的 **applicationId ** 即可。在build.gradle文件中，输入的时候你就发现自动补全已经提示你，还有很多其他的属性可以配置了，感兴趣的同学不妨试试。\n\n## PPS：渠道包改应用名称\n\n如果你还想给不同的渠道指定不同的应用名字，例如想要在Xiaomi市场上叫做 **“HelloGradle-小米专供版”** , 那么你可以新建 `app/src/Xiaomi/res/values/strings.xml` 的文件，里面填写 `<string name=\"app_name\">HelloGradle-小米专供版</string>`，这样打包出来的小米渠道包，应用程序的名称就改变成**“HelloGradle-小米专供版”** 了。\n\n## PPPS：单独打包某一个渠道\n\n运行 **`gradle build`** 会一次性打包出所有的渠道包，花费的时间还是很长的。如果只想打一个渠道的渠道包话应该怎么做？以百度为例，可以在命令行中执行  **`gradle assembleBaidu`** ，我是怎么找到 `assembleBaidu` 这个任务名字的？前面提到过的，运行 `gradle tasks`，你就会发现所有的tasks列表，找到build类的tasks，就看到了！其实Android Studio里面，这些全部都有界面操作的，大家看下代码编辑窗口的右边栏，是不是有一个Gradle的按钮，点击一下展开它，然后点击面板左上角的刷新按钮，就可以将所有的tasks列出来了，和执行命令行的效果是一样的。定制化打包的需求还有很多，同学们可以自己尝试尝试，记得分享出来给大家啊！\n\n![hello AS](/content/images/aB.png)\n\n***\n\n# 版本号管理实践\n\n版本号管理，在实际的业务中有很重要的作用，因为有的时候我们需要在做新版本特性的时候对旧版本做一些兼容处理，即使旧版本不能享受新版本功能，但是也不能影响到旧版本上已有功能的稳定运行。例如，新版本的应用程序支持视频播放，而旧版本的应用无法支持，那么可以在后台做控制，只针对新版本的应用返回视频数据，而旧版本不需要返回视频数据。\n\n一般版本号都会用 **`major.minor.patch`** 表示，例如 **`1.0.0`** 这样的形式。第一个数字major表示主版本号，第二个数字minor表示副版本号，第三个数字patch表示小版本号或者叫补丁号。当然也不一定要强制用三个数字来表示，直接用  **`major.minor`** 也是可以的，但是一旦你的应用程序版本号按照一个规则进行管理后，如果后台有逻辑依赖这个版本号，那么就不应该随意进行修改，一定要保持一致。\n\n做Android开发的同学都熟悉 **versionCode** 和 **versionName** 这两个与版本管理相关的属性。以前用Eclipse开发项目时，都是在 `AndroidManifest.xml`文件中定义，如下所示。\n\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.nought.hellogradle\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\" >\n```\n\n但是在Android Studio中，这两个属性已经被放在Module下的`build.gradle`中，一般是在`android`闭包的`defaultConfig`中，如下所示。\n\n```\nandroid {\n\t...\n\n    defaultConfig {\n        applicationId \"com.nought.hellogradle\"\n        minSdkVersion 14\n        targetSdkVersion 22\n        versionCode 1\n        versionName \"1.0\"\n    }\n\n\t...\n\n}\n```\n\n正是由于放到了gradle脚本中，而 **gradle脚本中可以写groovy代码和java代码** ，使得动态改变这两个属性变得更加方便了。关于 **versionCode** ，是一个整数，每build一次工程，我们都会将它增加1，因此可见应用程序的`versionCode`越大，其版本越新。而 **versionName** 是一个字符串，通常我们用这个来告诉用户，他们正在使用的应用程序版本名是多少，至于这个`versionName`每次打包怎么增加，就由你的自己来定义了，但是请记住，遵循这个规则不要改变，否则它就没有什么意义了。\n\n下面介绍一种版本号管理的思路，还是以前面的工程为例，这里为了简便，我把多渠道打包的代码注释掉了，先实现版本号自增。\n\n## versionCode版本号自增实现步骤\n\n### 1. 在app目录下新建一个文本类型的文件 `version.properties`，在文件中添加：\n\n```\nbuild.number=1\n```\n\n这里简单提一下 **properties** ，在gradle脚本中，我们可以定义各种 **`name=value`** ，然后通过读取属性的方式load进来，在脚本中使用。\n\n### 2. 在app目录的build.gradle文件中，定义一个getVersionCode方法。\n\n```\ndef getVersionCode() {\n    def versionFile = file('version.properties')\n\n    if (versionFile.exists()) {\n        def Properties versionProps = new Properties()\n        versionProps.load(new FileInputStream(versionFile))\n        def versionCode = versionProps['build.number'].toInteger()\n        println('Current version code is ' + versionCode.toString())\n        return versionCode\n    } else {\n        throw new GradleException(\"Could not find version.properties!\")\n    }\n}\n```\n\n\n### 3. 修改build.gradle中的defaultConfig闭包，将versionCode的属性赋值改为通过getVersionCode方法获取。\n\n```\nandroid {\n\t...\n\n\tdef currentVersionCode = getVersionCode()\n\n    defaultConfig {\n        applicationId \"com.nought.hellogradle\"\n        minSdkVersion 14\n        targetSdkVersion 22\n        versionCode currentVersionCode\n        versionName \"1.0\"\n    }\n\n\t...\n\n}\n```\n\n### 4. 再定义一个updateVersionCode方法。\n\n```\ndef updateVersionCode() {\n    def runTasks = gradle.startParameter.taskNames\n\n    if (!('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks)) {\n        return\n    }\n\n    def File versionFile = file('version.properties')\n\n    if (versionFile.exists()) {\n        def Properties versionProps = new Properties()\n        versionProps.load(new FileInputStream(versionFile))\n        def currentVersionCode = versionProps['build.number'].toInteger()\n        currentVersionCode++\n        versionProps['build.number'] = currentVersionCode.toString()\n        versionProps.store(versionFile.newWriter(), null)\n        println('Updated version code to ' + currentVersionCode.toString())\n    } else {\n        throw new GradleException(\"Could not find version.properties!\")\n    }\n}\n```\n\n可以看到这个方法中，首先获取了本地build任务中所有的任务名字，前面说过build任务实际上是个钩子，里面会去依赖很多其他的任务，例如`assemble`、`assembleRelease`及其驼峰式缩写`aR`。这里我们约定为只要执行过`assemble`任务，就将`versionCode`加1。当然你可以根据需要改成其他的条件。\n\n### 5. 给assembleRelease任务依赖，使得release版本构建成功后，versionCode增加1，并写入`version.properties`文件。\n\n```\nassembleRelease {}.doLast {\n    updateVersionCode()\n}\n```\n\n### 6. 打开Android Studio自带的命令行，运行`cd app`进入app目录，接着运行 `gradle assembleRelease`。\n\n**记得一定要进入`app`目录以后，再build。** 当打包成功以后，versionCode增加了1，并保存在`version.properties`文件中。打开文件看下，果然变成了2，gradle还在第一行添加了修改时间。\n\n```\n#Fri Oct 23 17:34:28 CST 2015\nbuild.number=2\n```\n\n### 小结：\n\n说了很多，直接把完整的build.gradle脚本贴出来吧。\n\n```\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 22\n    buildToolsVersion \"23.0.1\"\n\n    def currentVersionCode = getVersionCode()\n\n    defaultConfig {\n        applicationId \"com.nought.hellogradle\"\n        minSdkVersion 14\n        targetSdkVersion 22\n        versionCode currentVersionCode\n        versionName \"1.0\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:22.2.1'\n    compile 'com.android.support:design:22.2.1'\n}\n\nassembleRelease {}.doLast {\n    updateVersionCode()\n}\n\ndef getVersionCode() {\n    def versionFile = file('version.properties')\n\n    if (versionFile.exists()) {\n        def Properties versionProps = new Properties()\n        versionProps.load(new FileInputStream(versionFile))\n        def versionCode = versionProps['build.number'].toInteger()\n        println('Current version code is ' + versionCode.toString())\n        return versionCode\n    } else {\n        throw new GradleException(\"Could not find version.properties!\")\n    }\n}\n\ndef updateVersionCode() {\n    def runTasks = gradle.startParameter.taskNames\n\n    if (!('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks)) {\n        return\n    }\n\n    def File versionFile = file('version.properties')\n\n    if (versionFile.exists()) {\n        def Properties versionProps = new Properties()\n        versionProps.load(new FileInputStream(versionFile))\n        def currentVersionCode = versionProps['build.number'].toInteger()\n        currentVersionCode++\n        versionProps['build.number'] = currentVersionCode.toString()\n        versionProps.store(versionFile.newWriter(), null)\n        println('Updated version code to ' + currentVersionCode.toString())\n    } else {\n        throw new GradleException(\"Could not find version.properties!\")\n    }\n}\n\n```\n\n如果想验证的话，我们可以在代码里读取一下应用程序的`versionCode`，并显示出来，这里就不演示了哈。其实我这里只是演示了一下gradle中实现一个小需求的方式，大家还可以根据需要写出各种各样的脚本。例如我工作中会将versionCode替换到代码里的某一个常量，实现方式是通过gradle脚本读取java源码文件，并通过正则表达式替换的。Gradle是用Groovy语言写的，兼容Java语法，因此我觉得特别适合Android程序员，大家也看到了上面定义的两个方法，实际上和Java语言差别不大，大家多参考一下官方的教程就会了。\n\n## versionName怎么实现自增？\n\n前面我们在`app`模块的目录下添加了一个`version.properties`文件，里面以`name=value`的形式定义了`build.number=1`，那么我们也可以添加两行`version.major=1`，`version.minor=0`，然后在gradle脚本中以属性的方式读取，语法和前面读取`build.number`是一样的，至于major和minor号怎么增加，每个人有自己的约定规则，我这里就不演示了。\n\n## PS：现成的版本号管理插件\n\n后来我发现github上还有很多现成的插件可以用，里面已经内置了丰富的版本号管理功能。例如[packer](https://github.com/mcxiaoke/gradle-packer-plugin)插件，这个插件默认可以为我们实现版本号自增，apk输出文件按照版本号命名等等，感兴趣的同学也可以去看一下。\n\n实际上使用Gradle有非常好扩展性，前面说了它只是一个容器，真正实现功能的是插件，而插件里实现功能的是一个一个的任务Task。我们可以自己写一些Gradle Task，并进一步封装成Gradle Plugin，apply到自己项目中。\n\n下面我还会介绍一下如何使用[Gradle打包jar包+Log开关自动关闭](http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/)，而不是apk文件，并在打包时实现关闭Log开关，打包完成后恢复Log开关。\n\n最后奉上这篇博客和下一篇博客的示例工程代码，链接[https://github.com/unclechen/HelloGradle](https://github.com/unclechen/HelloGradle)。\n\n\n","source":"_posts/Android Studio Gradle实践之多渠道自动化打包+版本号管理.markdown","raw":"---\nlayout: post\ndate: '2015-10-22'\ntitle: Android Studio Gradle实践之多渠道自动化打包+版本号管理\ntags:\n  - Android\n  - 打包\n  - gradle\ncategories: \n  - 技术\n---\n\n上次介绍了[Android Studio的安装、配置和基本使用](http://unclechen.github.io/2015/06/01/Android%20Studio%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/)。这次讲一下Android Studio用到的打包工具Gradle。[Gradle](http://gradle.org/)是一种构建项目的框架，兼容Maven、Ant，为Java项目提供了很多插件去实现打包功能。废话不多说，下面直接进入实战。当我写这篇博客的时候，Android Studio的版本已经更新到了**1.4**，比上一篇博客的版本又更新了。\n\n<!-- more -->\n\n# Android Studio工程build.gradle脚本介绍\n\n在进行多渠道打包之前，先介绍一下Android Studio工程中的gradle脚本长什么样。打开Android Studio，新建一个Project，这里我给它命名为Hello Gradle，一路点击下一步，最后Android Studio自动为我们建立的如下图的这个工程。\n\n![hello AS](/content/images/create-a-project.png)\n\n按照上篇博客中介绍的，我们推荐大家采用Android结构的视图来查看项目结构。展开Gradle Scripts我们可以看到里面有两个`build.gradle`文件和一个`settings.gradle`文件。其中的`build.gradle(Project: HelloGradle)`文件是我们整个工程的build文件，而`build.gradle(Module: app)`文件是我们工程下的一个Module的build文件。前面我们就说过Android Studio采用单工程多Module结构，一个工程可以理解为Eclipse下的一个Workspace，一个Module可以理解为Eclipse下的Project。当我们用Android Studio建立一个默认的工程时，它自动为我们建立了一个名字为`app`默认的Module。\n\n所以我们可以知道，一个Android Studio工程会有一个`工程级别的build.gradle`文件，同时有N个Module，就还会有N个`Module级别的build.gradle`文件。\n\n## 工程目录下的build.gradle(Project: HelloGradle)文件\n\n接着我们先看下这个工程级别的build.gradle文件。\n\n```\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.3.0'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\n```\n\n这个文件里的buildscript闭包中为我们定义了工程用到的repository地址，默认为我们加上了jcenter，并添加了版本号为1.3.0的Android Gradle插件。关于闭包，由于gradle是基于Groovy语言编写的，而闭包是里面的一个概念，可以理解为最小的代码执行块。关于jcenter，可以理解为一个兼容Maven中央仓库的东西，是Google为Android建立的。\n\n最下面还有一个task clean，**task**是gradle脚本中用到最多的东西了。Gradle实际上是一个容器，实现真正的功能的都是Gradle的插件Plugin，而Plugin中又定义了各式各样的Task，这一个个的Task是执行任务的基本单元。\n\n这里一看就知道是一个delete类型的task，意思是在我们执行打包脚本前做一个清理工作，把项目输出文件夹中的文件先全部清理干净。\n\n## Module目录下的build.gradle(Module: app)文件\n\n接着看app Module下的build.gradle文件。\n\n```\napply plugin: 'com.android.application'\n```\n\n第一行`apply plugin: 'com.android.application'`：指的是在这个脚本中应用**Android Application**插件。前面我们说到了Gradle中真正起作用的是插件，每个插件中可以定义各种各样的Task，当然还可以有一些Property属性，如果你以前是用Ant打包的，那么对属性一定不会陌生吧。\n\n```\nandroid {\n    compileSdkVersion 22\n    buildToolsVersion \"23.0.1\"\n\n    defaultConfig {\n        applicationId \"com.nought.hellogradle\"\n        minSdkVersion 14\n        targetSdkVersion 22\n        versionCode 1\n        versionName \"1.0\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n```\n\n接着看android闭包，里面首先定义了我们这个Module使用的**compileSdkVersion**和**buildToolsVersion**，这两个属性大家肯定知道，一个是用来编译代码的sdk版本，一个是用来打包apk的build-tools版本。\n\n再看里面的defaultConfig，又定义了几个属性。依次有**applicationId**，代表着你的包名，以前我们都是在AndroidManifest.xml文件中通过`package=\"com.nought.hellogradle\"`指定应用程序的包名，现在我们可以在gradle打包脚本中指定它，后面你会发现我们结合 **buildTypes** 和 **productFlavors** ，还可以动态的改变它，有点神奇了吧！ **minSdkVersion** 指的是你的应用程序兼容的最低Android系统版本； **targetSdkVersion** 指的是你的应用程序希望运行的Android系统版本；**versionCode** 是你的代码构建编号，一般我们每打一次包就将它增加1；**versionName** 则是你对外发布时，用户看到的应用程序版本号，一般我们都用“点分三个数字”来命名，例如`1.0.0`。\n\n接着看下 **buildTypes** ，这里面默认只定义了 **release** 类型，其实还可以定 **debug** 类型以及你自己定义的例如 **internal** 国内类型、**external** 国外类型等等。以前在每一个type中，可以分别配置不同的选项，例如可以 **配置不同的包名、是否混淆** 等等，目前的默认release类型中配置了混淆文件，`minifyEnabled false`指的是不混淆代码，下面这行 `proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'` 指定的是你的混淆配置文件。这里就不详细介绍了，马上我们就会看一下多渠道打包，实践一下大家就清楚了。\n\n```\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:22.2.1'\n    compile 'com.android.support:design:22.2.1'\n}\n```\n\n最后，我们看dependencies闭包，这里指的是我们的工程依赖的库，以往在Eclipse中开发，我们常常通过jar包，以及添加library的形式来添加依赖，现在方便了，在gradle脚本里，一行代码通通搞定！真是简单啊！dependencies闭包下，有几种基本的语法。\n\n- 1：`compile fileTree(dir: 'libs', include: ['*.jar'])`,指的是依赖libs下面所有的jar包，你还可以指定具体的每一个jar包，而不是采用`*.jar`通配符匹配的方式，例如`compile files('libs/文件名.jar')`；\n\n- 2：`compile 'com.android.support:appcompat-v7:22.2.1'`，这种语法是通过包名：工程名：版本号的形式来依赖的，\n\n- 3：`testCompile 'junit:junit:4.12'`，指的是测试时才会用到的依赖，这里一看就知道是指做单元测试时依赖junit。\n\n好了，上面介绍了Android Studio默认生成的基本的Gradle打包脚本的结构。下面我们在实践中学习，怎么修改这个脚本，来实现自己的各种需求，例如多渠道自动化打包等等。\n\n# 多渠道打包实践\n\n多渠道指的是你的应用程序可以发布到不同的应用市场，被不同的用户从各个市场下载以后，你可以监测到每一个用户安装的这个应用程序是来自哪个市场的。实现的方法有很多，主要是通过在安装包中的放置一个标志位来区分不同的渠道包。\n\n## 多渠道打包实现思路\n\n### 思路1：AndroidManifest.xml占位符与productFlavor结合\n\n比较常见的友盟移动统计sdk中使用的方案，这种方案是 **通过`build.gradle`脚本中的`productFlavor`** 来实现的。首先在AndroidManifest.xml文件的 **`application`** 标签里指定一个 **meta-data** ，然后Umeng SDK会读取这个标签中value传到Umeng的后台，这样就可以让开发者监测到自己的应用程序渠道分布情况了。\n\n```\n<meta-data android:name=\"UMENG_CHANNEL\" android:value=\"${UMENG_CHANNEL}\"></meta-data>\n```\n\n其实`meta-data`元素可以作为子元素，被包含在 `activity`,`application`,`service`和`receiver`标签中，但是不同位置下的 `meta-data` 读取方法不一样，我们这里就以在`application`中放置占位符为例。\n\n### 思路2：一次打包，动态替换渠道标识符\n\n在[美团的技术博客](http://tech.meituan.com/mt-apk-packaging.html)上还分享过 **另外一种实现思路** ：就是在打包完apk之后，再拆包替换掉其中一个文件，或者替换文件中的标识符，实现不同渠道市场的打包。因为apk实际上也是一种zip文件，里面有Android定义的一些文件组织结构，比如可以在assert目录下塞一个文件，命名为version之类的，再动态改变其中的内容。这种思路和官方的`buildTypes + productFlavor`方式有所不同。因为这种思路只需要执行一次打包任务，剩下的操作是拆开apk，替换文件。可想而知这种速度比较快，如果你有很多个渠道包要打的话，这种思路能提高很多速度，据说100个渠道包大概只要2分钟。而普通的`buildTypes + productFlavor`方式，我打了4个渠道包也花费了几十秒。可见如果有很多渠道包要出，建议采用美团的这种思路。\n\n\n## 多渠道打包实现步骤\n\n### 1. 在AndroidManifest.xml的`application`标签下定义UMENG_CHANNEL占位符。\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.nought.hellogradle\" >\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\" >\n\n        <meta-data android:name=\"UMENG_CHANNEL\" android:value=\"${UMENG_CHANNEL}\"></meta-data>\n\n        <activity\n            android:name=\".MainActivity\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/AppTheme.NoActionBar\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\n### 2. 修改app目录下的build.gradle脚本，在`android`闭包中添加 **`productFlavors`** 属性，配置替换占位符的渠道标识。\n\n```\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 22\n    buildToolsVersion \"23.0.1\"\n\n    defaultConfig {\n        applicationId \"com.nought.hellogradle\"\n        minSdkVersion 14\n        targetSdkVersion 22\n        versionCode 1\n        versionName \"1.0\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n    productFlavors {\n        GooglePlay {\n            manifestPlaceholders = [UMENG_CHANNEL: \"GooglePlay\"]\n        }\n        Baidu {\n            manifestPlaceholders = [UMENG_CHANNEL: \"Baidu\"]\n        }\n        Wandoujia {\n            manifestPlaceholders = [UMENG_CHANNEL: \"Wandoujia\"]\n        }\n        Xiaomi {\n            manifestPlaceholders = [UMENG_CHANNEL: \"Xiaomi\"]\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:22.2.1'\n    compile 'com.android.support:design:22.2.1'\n}\n\n```\n\n### 3. 打开Android Studio自带的命令行工具，运行`gradle build`命令，就可以在 **`app/build/outputs/apk/`** 目录下看到生成渠道包apk文件。注意：输出的apk文件是在app Module下的build目录中，不是工程根目录下的build目录。\n\n![hello AS](/content/images/apk-outputs.png)\n\n我们可以看到在 **`app/build/outputs/apk/`** 中，生成的带有渠道标识的apk文件有12个，这时因为 **buildTypes** 与 **productFlavors** 两两组合，2*4=8，Android Studio默认必须有 **release** 和 **debug** 这两种Type。此外，由于buildTypes中还可以定义 **`zipAlignEnabled true`** ，意思是混淆后的zip优化，该值默认为true，因此每个渠道还多了一个 **`app-渠道标识-debug-unaligned.apk`** 文件。\n\n## 小结：\n\n运行`gradle build`命令时，终端里会显示当前正在执行的task，里面有很多我们熟悉的任务，例如dex、javaCompile这些。前面我们说过，gradle脚本会以钩子的形式，执行一系列的tasks，最终构建出我们所需要的程序安装包。感兴趣的同学可以执行一下 **`gradle tasks`** 命令，这个命令可以查看当前工程下所有的tasks，后面我也将结合这些tasks，实践一下jar包的构建。\n \n![hello AS](/content/images/open-terminal.png)\n\n## PS：渠道包修改包名\n \n如果你想修改不同的渠道包的包名，可以在你的 **productFlavors** 指定不同的 **applicationId ** 即可。在build.gradle文件中，输入的时候你就发现自动补全已经提示你，还有很多其他的属性可以配置了，感兴趣的同学不妨试试。\n\n## PPS：渠道包改应用名称\n\n如果你还想给不同的渠道指定不同的应用名字，例如想要在Xiaomi市场上叫做 **“HelloGradle-小米专供版”** , 那么你可以新建 `app/src/Xiaomi/res/values/strings.xml` 的文件，里面填写 `<string name=\"app_name\">HelloGradle-小米专供版</string>`，这样打包出来的小米渠道包，应用程序的名称就改变成**“HelloGradle-小米专供版”** 了。\n\n## PPPS：单独打包某一个渠道\n\n运行 **`gradle build`** 会一次性打包出所有的渠道包，花费的时间还是很长的。如果只想打一个渠道的渠道包话应该怎么做？以百度为例，可以在命令行中执行  **`gradle assembleBaidu`** ，我是怎么找到 `assembleBaidu` 这个任务名字的？前面提到过的，运行 `gradle tasks`，你就会发现所有的tasks列表，找到build类的tasks，就看到了！其实Android Studio里面，这些全部都有界面操作的，大家看下代码编辑窗口的右边栏，是不是有一个Gradle的按钮，点击一下展开它，然后点击面板左上角的刷新按钮，就可以将所有的tasks列出来了，和执行命令行的效果是一样的。定制化打包的需求还有很多，同学们可以自己尝试尝试，记得分享出来给大家啊！\n\n![hello AS](/content/images/aB.png)\n\n***\n\n# 版本号管理实践\n\n版本号管理，在实际的业务中有很重要的作用，因为有的时候我们需要在做新版本特性的时候对旧版本做一些兼容处理，即使旧版本不能享受新版本功能，但是也不能影响到旧版本上已有功能的稳定运行。例如，新版本的应用程序支持视频播放，而旧版本的应用无法支持，那么可以在后台做控制，只针对新版本的应用返回视频数据，而旧版本不需要返回视频数据。\n\n一般版本号都会用 **`major.minor.patch`** 表示，例如 **`1.0.0`** 这样的形式。第一个数字major表示主版本号，第二个数字minor表示副版本号，第三个数字patch表示小版本号或者叫补丁号。当然也不一定要强制用三个数字来表示，直接用  **`major.minor`** 也是可以的，但是一旦你的应用程序版本号按照一个规则进行管理后，如果后台有逻辑依赖这个版本号，那么就不应该随意进行修改，一定要保持一致。\n\n做Android开发的同学都熟悉 **versionCode** 和 **versionName** 这两个与版本管理相关的属性。以前用Eclipse开发项目时，都是在 `AndroidManifest.xml`文件中定义，如下所示。\n\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.nought.hellogradle\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\" >\n```\n\n但是在Android Studio中，这两个属性已经被放在Module下的`build.gradle`中，一般是在`android`闭包的`defaultConfig`中，如下所示。\n\n```\nandroid {\n\t...\n\n    defaultConfig {\n        applicationId \"com.nought.hellogradle\"\n        minSdkVersion 14\n        targetSdkVersion 22\n        versionCode 1\n        versionName \"1.0\"\n    }\n\n\t...\n\n}\n```\n\n正是由于放到了gradle脚本中，而 **gradle脚本中可以写groovy代码和java代码** ，使得动态改变这两个属性变得更加方便了。关于 **versionCode** ，是一个整数，每build一次工程，我们都会将它增加1，因此可见应用程序的`versionCode`越大，其版本越新。而 **versionName** 是一个字符串，通常我们用这个来告诉用户，他们正在使用的应用程序版本名是多少，至于这个`versionName`每次打包怎么增加，就由你的自己来定义了，但是请记住，遵循这个规则不要改变，否则它就没有什么意义了。\n\n下面介绍一种版本号管理的思路，还是以前面的工程为例，这里为了简便，我把多渠道打包的代码注释掉了，先实现版本号自增。\n\n## versionCode版本号自增实现步骤\n\n### 1. 在app目录下新建一个文本类型的文件 `version.properties`，在文件中添加：\n\n```\nbuild.number=1\n```\n\n这里简单提一下 **properties** ，在gradle脚本中，我们可以定义各种 **`name=value`** ，然后通过读取属性的方式load进来，在脚本中使用。\n\n### 2. 在app目录的build.gradle文件中，定义一个getVersionCode方法。\n\n```\ndef getVersionCode() {\n    def versionFile = file('version.properties')\n\n    if (versionFile.exists()) {\n        def Properties versionProps = new Properties()\n        versionProps.load(new FileInputStream(versionFile))\n        def versionCode = versionProps['build.number'].toInteger()\n        println('Current version code is ' + versionCode.toString())\n        return versionCode\n    } else {\n        throw new GradleException(\"Could not find version.properties!\")\n    }\n}\n```\n\n\n### 3. 修改build.gradle中的defaultConfig闭包，将versionCode的属性赋值改为通过getVersionCode方法获取。\n\n```\nandroid {\n\t...\n\n\tdef currentVersionCode = getVersionCode()\n\n    defaultConfig {\n        applicationId \"com.nought.hellogradle\"\n        minSdkVersion 14\n        targetSdkVersion 22\n        versionCode currentVersionCode\n        versionName \"1.0\"\n    }\n\n\t...\n\n}\n```\n\n### 4. 再定义一个updateVersionCode方法。\n\n```\ndef updateVersionCode() {\n    def runTasks = gradle.startParameter.taskNames\n\n    if (!('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks)) {\n        return\n    }\n\n    def File versionFile = file('version.properties')\n\n    if (versionFile.exists()) {\n        def Properties versionProps = new Properties()\n        versionProps.load(new FileInputStream(versionFile))\n        def currentVersionCode = versionProps['build.number'].toInteger()\n        currentVersionCode++\n        versionProps['build.number'] = currentVersionCode.toString()\n        versionProps.store(versionFile.newWriter(), null)\n        println('Updated version code to ' + currentVersionCode.toString())\n    } else {\n        throw new GradleException(\"Could not find version.properties!\")\n    }\n}\n```\n\n可以看到这个方法中，首先获取了本地build任务中所有的任务名字，前面说过build任务实际上是个钩子，里面会去依赖很多其他的任务，例如`assemble`、`assembleRelease`及其驼峰式缩写`aR`。这里我们约定为只要执行过`assemble`任务，就将`versionCode`加1。当然你可以根据需要改成其他的条件。\n\n### 5. 给assembleRelease任务依赖，使得release版本构建成功后，versionCode增加1，并写入`version.properties`文件。\n\n```\nassembleRelease {}.doLast {\n    updateVersionCode()\n}\n```\n\n### 6. 打开Android Studio自带的命令行，运行`cd app`进入app目录，接着运行 `gradle assembleRelease`。\n\n**记得一定要进入`app`目录以后，再build。** 当打包成功以后，versionCode增加了1，并保存在`version.properties`文件中。打开文件看下，果然变成了2，gradle还在第一行添加了修改时间。\n\n```\n#Fri Oct 23 17:34:28 CST 2015\nbuild.number=2\n```\n\n### 小结：\n\n说了很多，直接把完整的build.gradle脚本贴出来吧。\n\n```\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 22\n    buildToolsVersion \"23.0.1\"\n\n    def currentVersionCode = getVersionCode()\n\n    defaultConfig {\n        applicationId \"com.nought.hellogradle\"\n        minSdkVersion 14\n        targetSdkVersion 22\n        versionCode currentVersionCode\n        versionName \"1.0\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:22.2.1'\n    compile 'com.android.support:design:22.2.1'\n}\n\nassembleRelease {}.doLast {\n    updateVersionCode()\n}\n\ndef getVersionCode() {\n    def versionFile = file('version.properties')\n\n    if (versionFile.exists()) {\n        def Properties versionProps = new Properties()\n        versionProps.load(new FileInputStream(versionFile))\n        def versionCode = versionProps['build.number'].toInteger()\n        println('Current version code is ' + versionCode.toString())\n        return versionCode\n    } else {\n        throw new GradleException(\"Could not find version.properties!\")\n    }\n}\n\ndef updateVersionCode() {\n    def runTasks = gradle.startParameter.taskNames\n\n    if (!('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks)) {\n        return\n    }\n\n    def File versionFile = file('version.properties')\n\n    if (versionFile.exists()) {\n        def Properties versionProps = new Properties()\n        versionProps.load(new FileInputStream(versionFile))\n        def currentVersionCode = versionProps['build.number'].toInteger()\n        currentVersionCode++\n        versionProps['build.number'] = currentVersionCode.toString()\n        versionProps.store(versionFile.newWriter(), null)\n        println('Updated version code to ' + currentVersionCode.toString())\n    } else {\n        throw new GradleException(\"Could not find version.properties!\")\n    }\n}\n\n```\n\n如果想验证的话，我们可以在代码里读取一下应用程序的`versionCode`，并显示出来，这里就不演示了哈。其实我这里只是演示了一下gradle中实现一个小需求的方式，大家还可以根据需要写出各种各样的脚本。例如我工作中会将versionCode替换到代码里的某一个常量，实现方式是通过gradle脚本读取java源码文件，并通过正则表达式替换的。Gradle是用Groovy语言写的，兼容Java语法，因此我觉得特别适合Android程序员，大家也看到了上面定义的两个方法，实际上和Java语言差别不大，大家多参考一下官方的教程就会了。\n\n## versionName怎么实现自增？\n\n前面我们在`app`模块的目录下添加了一个`version.properties`文件，里面以`name=value`的形式定义了`build.number=1`，那么我们也可以添加两行`version.major=1`，`version.minor=0`，然后在gradle脚本中以属性的方式读取，语法和前面读取`build.number`是一样的，至于major和minor号怎么增加，每个人有自己的约定规则，我这里就不演示了。\n\n## PS：现成的版本号管理插件\n\n后来我发现github上还有很多现成的插件可以用，里面已经内置了丰富的版本号管理功能。例如[packer](https://github.com/mcxiaoke/gradle-packer-plugin)插件，这个插件默认可以为我们实现版本号自增，apk输出文件按照版本号命名等等，感兴趣的同学也可以去看一下。\n\n实际上使用Gradle有非常好扩展性，前面说了它只是一个容器，真正实现功能的是插件，而插件里实现功能的是一个一个的任务Task。我们可以自己写一些Gradle Task，并进一步封装成Gradle Plugin，apply到自己项目中。\n\n下面我还会介绍一下如何使用[Gradle打包jar包+Log开关自动关闭](http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/)，而不是apk文件，并在打包时实现关闭Log开关，打包完成后恢复Log开关。\n\n最后奉上这篇博客和下一篇博客的示例工程代码，链接[https://github.com/unclechen/HelloGradle](https://github.com/unclechen/HelloGradle)。\n\n\n","slug":"Android Studio Gradle实践之多渠道自动化打包+版本号管理","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8dq0007mtsxi660t7mm","content":"<p>上次介绍了<a href=\"http://unclechen.github.io/2015/06/01/Android%20Studio%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/\">Android Studio的安装、配置和基本使用</a>。这次讲一下Android Studio用到的打包工具Gradle。<a href=\"http://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle</a>是一种构建项目的框架，兼容Maven、Ant，为Java项目提供了很多插件去实现打包功能。废话不多说，下面直接进入实战。当我写这篇博客的时候，Android Studio的版本已经更新到了<strong>1.4</strong>，比上一篇博客的版本又更新了。</p>\n<a id=\"more\"></a>\n<h1 id=\"Android-Studio工程build-gradle脚本介绍\"><a href=\"#Android-Studio工程build-gradle脚本介绍\" class=\"headerlink\" title=\"Android Studio工程build.gradle脚本介绍\"></a>Android Studio工程build.gradle脚本介绍</h1><p>在进行多渠道打包之前，先介绍一下Android Studio工程中的gradle脚本长什么样。打开Android Studio，新建一个Project，这里我给它命名为Hello Gradle，一路点击下一步，最后Android Studio自动为我们建立的如下图的这个工程。</p>\n<p><img src=\"/content/images/create-a-project.png\" alt=\"hello AS\"></p>\n<p>按照上篇博客中介绍的，我们推荐大家采用Android结构的视图来查看项目结构。展开Gradle Scripts我们可以看到里面有两个<code>build.gradle</code>文件和一个<code>settings.gradle</code>文件。其中的<code>build.gradle(Project: HelloGradle)</code>文件是我们整个工程的build文件，而<code>build.gradle(Module: app)</code>文件是我们工程下的一个Module的build文件。前面我们就说过Android Studio采用单工程多Module结构，一个工程可以理解为Eclipse下的一个Workspace，一个Module可以理解为Eclipse下的Project。当我们用Android Studio建立一个默认的工程时，它自动为我们建立了一个名字为<code>app</code>默认的Module。</p>\n<p>所以我们可以知道，一个Android Studio工程会有一个<code>工程级别的build.gradle</code>文件，同时有N个Module，就还会有N个<code>Module级别的build.gradle</code>文件。</p>\n<h2 id=\"工程目录下的build-gradle-Project-HelloGradle-文件\"><a href=\"#工程目录下的build-gradle-Project-HelloGradle-文件\" class=\"headerlink\" title=\"工程目录下的build.gradle(Project: HelloGradle)文件\"></a>工程目录下的build.gradle(Project: HelloGradle)文件</h2><p>接着我们先看下这个工程级别的build.gradle文件。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">'com.android.tools.build:gradle:1.3.0'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class=\"line\">        <span class=\"comment\">// in the individual module build.gradle files</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">allprojects</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> clean(type: <span class=\"keyword\">Delete</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> rootProject.buildDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个文件里的buildscript闭包中为我们定义了工程用到的repository地址，默认为我们加上了jcenter，并添加了版本号为1.3.0的Android Gradle插件。关于闭包，由于gradle是基于Groovy语言编写的，而闭包是里面的一个概念，可以理解为最小的代码执行块。关于jcenter，可以理解为一个兼容Maven中央仓库的东西，是Google为Android建立的。</p>\n<p>最下面还有一个task clean，<strong>task</strong>是gradle脚本中用到最多的东西了。Gradle实际上是一个容器，实现真正的功能的都是Gradle的插件Plugin，而Plugin中又定义了各式各样的Task，这一个个的Task是执行任务的基本单元。</p>\n<p>这里一看就知道是一个delete类型的task，意思是在我们执行打包脚本前做一个清理工作，把项目输出文件夹中的文件先全部清理干净。</p>\n<h2 id=\"Module目录下的build-gradle-Module-app-文件\"><a href=\"#Module目录下的build-gradle-Module-app-文件\" class=\"headerlink\" title=\"Module目录下的build.gradle(Module: app)文件\"></a>Module目录下的build.gradle(Module: app)文件</h2><p>接着看app Module下的build.gradle文件。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.android.application'</span></span><br></pre></td></tr></table></figure>\n<p>第一行<code>apply plugin: &#39;com.android.application&#39;</code>：指的是在这个脚本中应用<strong>Android Application</strong>插件。前面我们说到了Gradle中真正起作用的是插件，每个插件中可以定义各种各样的Task，当然还可以有一些Property属性，如果你以前是用Ant打包的，那么对属性一定不会陌生吧。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">android</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compileSdkVersion</span> <span class=\"number\">22</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        <span class=\"attribute\">applicationId</span> <span class=\"string\">\"com.nought.hellogradle\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">14</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        <span class=\"section\">release</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">minifyEnabled</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着看android闭包，里面首先定义了我们这个Module使用的<strong>compileSdkVersion</strong>和<strong>buildToolsVersion</strong>，这两个属性大家肯定知道，一个是用来编译代码的sdk版本，一个是用来打包apk的build-tools版本。</p>\n<p>再看里面的defaultConfig，又定义了几个属性。依次有<strong>applicationId</strong>，代表着你的包名，以前我们都是在AndroidManifest.xml文件中通过<code>package=&quot;com.nought.hellogradle&quot;</code>指定应用程序的包名，现在我们可以在gradle打包脚本中指定它，后面你会发现我们结合 <strong>buildTypes</strong> 和 <strong>productFlavors</strong> ，还可以动态的改变它，有点神奇了吧！ <strong>minSdkVersion</strong> 指的是你的应用程序兼容的最低Android系统版本； <strong>targetSdkVersion</strong> 指的是你的应用程序希望运行的Android系统版本；<strong>versionCode</strong> 是你的代码构建编号，一般我们每打一次包就将它增加1；<strong>versionName</strong> 则是你对外发布时，用户看到的应用程序版本号，一般我们都用“点分三个数字”来命名，例如<code>1.0.0</code>。</p>\n<p>接着看下 <strong>buildTypes</strong> ，这里面默认只定义了 <strong>release</strong> 类型，其实还可以定 <strong>debug</strong> 类型以及你自己定义的例如 <strong>internal</strong> 国内类型、<strong>external</strong> 国外类型等等。以前在每一个type中，可以分别配置不同的选项，例如可以 <strong>配置不同的包名、是否混淆</strong> 等等，目前的默认release类型中配置了混淆文件，<code>minifyEnabled false</code>指的是不混淆代码，下面这行 <code>proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;</code> 指定的是你的混淆配置文件。这里就不详细介绍了，马上我们就会看一下多渠道打包，实践一下大家就清楚了。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:appcompat-v7:22.2.1'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:design:22.2.1'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，我们看dependencies闭包，这里指的是我们的工程依赖的库，以往在Eclipse中开发，我们常常通过jar包，以及添加library的形式来添加依赖，现在方便了，在gradle脚本里，一行代码通通搞定！真是简单啊！dependencies闭包下，有几种基本的语法。</p>\n<ul>\n<li><p>1：<code>compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</code>,指的是依赖libs下面所有的jar包，你还可以指定具体的每一个jar包，而不是采用<code>*.jar</code>通配符匹配的方式，例如<code>compile files(&#39;libs/文件名.jar&#39;)</code>；</p>\n</li>\n<li><p>2：<code>compile &#39;com.android.support:appcompat-v7:22.2.1&#39;</code>，这种语法是通过包名：工程名：版本号的形式来依赖的，</p>\n</li>\n<li><p>3：<code>testCompile &#39;junit:junit:4.12&#39;</code>，指的是测试时才会用到的依赖，这里一看就知道是指做单元测试时依赖junit。</p>\n</li>\n</ul>\n<p>好了，上面介绍了Android Studio默认生成的基本的Gradle打包脚本的结构。下面我们在实践中学习，怎么修改这个脚本，来实现自己的各种需求，例如多渠道自动化打包等等。</p>\n<h1 id=\"多渠道打包实践\"><a href=\"#多渠道打包实践\" class=\"headerlink\" title=\"多渠道打包实践\"></a>多渠道打包实践</h1><p>多渠道指的是你的应用程序可以发布到不同的应用市场，被不同的用户从各个市场下载以后，你可以监测到每一个用户安装的这个应用程序是来自哪个市场的。实现的方法有很多，主要是通过在安装包中的放置一个标志位来区分不同的渠道包。</p>\n<h2 id=\"多渠道打包实现思路\"><a href=\"#多渠道打包实现思路\" class=\"headerlink\" title=\"多渠道打包实现思路\"></a>多渠道打包实现思路</h2><h3 id=\"思路1：AndroidManifest-xml占位符与productFlavor结合\"><a href=\"#思路1：AndroidManifest-xml占位符与productFlavor结合\" class=\"headerlink\" title=\"思路1：AndroidManifest.xml占位符与productFlavor结合\"></a>思路1：AndroidManifest.xml占位符与productFlavor结合</h3><p>比较常见的友盟移动统计sdk中使用的方案，这种方案是 <strong>通过<code>build.gradle</code>脚本中的<code>productFlavor</code></strong> 来实现的。首先在AndroidManifest.xml文件的 <strong><code>application</code></strong> 标签里指定一个 <strong>meta-data</strong> ，然后Umeng SDK会读取这个标签中value传到Umeng的后台，这样就可以让开发者监测到自己的应用程序渠道分布情况了。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta-data android:<span class=\"attribute\">name</span>=<span class=\"string\">\"UMENG_CHANNEL\"</span> android:<span class=\"attribute\">value</span>=<span class=\"string\">\"<span class=\"variable\">$&#123;UMENG_CHANNEL&#125;</span>\"</span>&gt;&lt;/meta-data&gt;</span><br></pre></td></tr></table></figure>\n<p>其实<code>meta-data</code>元素可以作为子元素，被包含在 <code>activity</code>,<code>application</code>,<code>service</code>和<code>receiver</code>标签中，但是不同位置下的 <code>meta-data</code> 读取方法不一样，我们这里就以在<code>application</code>中放置占位符为例。</p>\n<h3 id=\"思路2：一次打包，动态替换渠道标识符\"><a href=\"#思路2：一次打包，动态替换渠道标识符\" class=\"headerlink\" title=\"思路2：一次打包，动态替换渠道标识符\"></a>思路2：一次打包，动态替换渠道标识符</h3><p>在<a href=\"http://tech.meituan.com/mt-apk-packaging.html\" target=\"_blank\" rel=\"noopener\">美团的技术博客</a>上还分享过 <strong>另外一种实现思路</strong> ：就是在打包完apk之后，再拆包替换掉其中一个文件，或者替换文件中的标识符，实现不同渠道市场的打包。因为apk实际上也是一种zip文件，里面有Android定义的一些文件组织结构，比如可以在assert目录下塞一个文件，命名为version之类的，再动态改变其中的内容。这种思路和官方的<code>buildTypes + productFlavor</code>方式有所不同。因为这种思路只需要执行一次打包任务，剩下的操作是拆开apk，替换文件。可想而知这种速度比较快，如果你有很多个渠道包要打的话，这种思路能提高很多速度，据说100个渠道包大概只要2分钟。而普通的<code>buildTypes + productFlavor</code>方式，我打了4个渠道包也花费了几十秒。可见如果有很多渠道包要出，建议采用美团的这种思路。</p>\n<h2 id=\"多渠道打包实现步骤\"><a href=\"#多渠道打包实现步骤\" class=\"headerlink\" title=\"多渠道打包实现步骤\"></a>多渠道打包实现步骤</h2><h3 id=\"1-在AndroidManifest-xml的application标签下定义UMENG-CHANNEL占位符。\"><a href=\"#1-在AndroidManifest-xml的application标签下定义UMENG-CHANNEL占位符。\" class=\"headerlink\" title=\"1. 在AndroidManifest.xml的application标签下定义UMENG_CHANNEL占位符。\"></a>1. 在AndroidManifest.xml的<code>application</code>标签下定义UMENG_CHANNEL占位符。</h3><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span></span><br><span class=\"line\"><span class=\"xml\">    package=\"com.nought.hellogradle\" &gt;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></span></span><br><span class=\"line\"><span class=\"xml\">        android:allowBackup=\"true\"</span></span><br><span class=\"line\"><span class=\"xml\">        android:icon=\"@mipmap/ic_launcher\"</span></span><br><span class=\"line\"><span class=\"xml\">        android:label=\"@string/app_name\"</span></span><br><span class=\"line\"><span class=\"xml\">        android:supportsRtl=\"true\"</span></span><br><span class=\"line\"><span class=\"xml\">        android:theme=\"@style/AppTheme\" &gt;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">meta-data</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"UMENG_CHANNEL\"</span> <span class=\"attr\">android:value</span>=<span class=\"string\">\"$</span></span></span><span class=\"template-variable\">&#123;UMENG_CHANNEL&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">meta-data</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span></span><br><span class=\"line\"><span class=\"xml\">            android:name=\".MainActivity\"</span></span><br><span class=\"line\"><span class=\"xml\">            android:label=\"@string/app_name\"</span></span><br><span class=\"line\"><span class=\"xml\">            android:theme=\"@style/AppTheme.NoActionBar\" &gt;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-修改app目录下的build-gradle脚本，在android闭包中添加-productFlavors-属性，配置替换占位符的渠道标识。\"><a href=\"#2-修改app目录下的build-gradle脚本，在android闭包中添加-productFlavors-属性，配置替换占位符的渠道标识。\" class=\"headerlink\" title=\"2. 修改app目录下的build.gradle脚本，在android闭包中添加 productFlavors 属性，配置替换占位符的渠道标识。\"></a>2. 修改app目录下的build.gradle脚本，在<code>android</code>闭包中添加 <strong><code>productFlavors</code></strong> 属性，配置替换占位符的渠道标识。</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">apply</span> plugin: <span class=\"string\">'com.android.application'</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compileSdkVersion</span> <span class=\"number\">22</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        <span class=\"attribute\">applicationId</span> <span class=\"string\">\"com.nought.hellogradle\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">14</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        <span class=\"section\">release</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">minifyEnabled</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    productFlavors &#123;</span><br><span class=\"line\">        <span class=\"section\">GooglePlay</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">manifestPlaceholders</span> = [UMENG_CHANNEL: <span class=\"string\">\"GooglePlay\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Baidu &#123;</span><br><span class=\"line\">            <span class=\"attribute\">manifestPlaceholders</span> = [UMENG_CHANNEL: <span class=\"string\">\"Baidu\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Wandoujia &#123;</span><br><span class=\"line\">            <span class=\"attribute\">manifestPlaceholders</span> = [UMENG_CHANNEL: <span class=\"string\">\"Wandoujia\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Xiaomi &#123;</span><br><span class=\"line\">            <span class=\"attribute\">manifestPlaceholders</span> = [UMENG_CHANNEL: <span class=\"string\">\"Xiaomi\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compile</span> fileTree(dir: <span class=\"string\">'libs'</span>, include: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">    compile <span class=\"string\">'com.android.support:appcompat-v7:22.2.1'</span></span><br><span class=\"line\">    compile <span class=\"string\">'com.android.support:design:22.2.1'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-打开Android-Studio自带的命令行工具，运行gradle-build命令，就可以在-app-build-outputs-apk-目录下看到生成渠道包apk文件。注意：输出的apk文件是在app-Module下的build目录中，不是工程根目录下的build目录。\"><a href=\"#3-打开Android-Studio自带的命令行工具，运行gradle-build命令，就可以在-app-build-outputs-apk-目录下看到生成渠道包apk文件。注意：输出的apk文件是在app-Module下的build目录中，不是工程根目录下的build目录。\" class=\"headerlink\" title=\"3. 打开Android Studio自带的命令行工具，运行gradle build命令，就可以在 app/build/outputs/apk/ 目录下看到生成渠道包apk文件。注意：输出的apk文件是在app Module下的build目录中，不是工程根目录下的build目录。\"></a>3. 打开Android Studio自带的命令行工具，运行<code>gradle build</code>命令，就可以在 <strong><code>app/build/outputs/apk/</code></strong> 目录下看到生成渠道包apk文件。注意：输出的apk文件是在app Module下的build目录中，不是工程根目录下的build目录。</h3><p><img src=\"/content/images/apk-outputs.png\" alt=\"hello AS\"></p>\n<p>我们可以看到在 <strong><code>app/build/outputs/apk/</code></strong> 中，生成的带有渠道标识的apk文件有12个，这时因为 <strong>buildTypes</strong> 与 <strong>productFlavors</strong> 两两组合，2<em>4=8，Android Studio默认必须有 <strong>release</strong> 和 <strong>debug</strong> 这两种Type。此外，由于buildTypes中还可以定义 <strong><code>zipAlignEnabled true</code></strong> ，意思是混淆后的zip优化，该值默认为true，因此每个渠道还多了一个 <em>*<code>app-渠道标识-debug-unaligned.apk</code></em></em> 文件。</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><p>运行<code>gradle build</code>命令时，终端里会显示当前正在执行的task，里面有很多我们熟悉的任务，例如dex、javaCompile这些。前面我们说过，gradle脚本会以钩子的形式，执行一系列的tasks，最终构建出我们所需要的程序安装包。感兴趣的同学可以执行一下 <strong><code>gradle tasks</code></strong> 命令，这个命令可以查看当前工程下所有的tasks，后面我也将结合这些tasks，实践一下jar包的构建。</p>\n<p><img src=\"/content/images/open-terminal.png\" alt=\"hello AS\"></p>\n<h2 id=\"PS：渠道包修改包名\"><a href=\"#PS：渠道包修改包名\" class=\"headerlink\" title=\"PS：渠道包修改包名\"></a>PS：渠道包修改包名</h2><p>如果你想修改不同的渠道包的包名，可以在你的 <strong>productFlavors</strong> 指定不同的 <strong>applicationId </strong> 即可。在build.gradle文件中，输入的时候你就发现自动补全已经提示你，还有很多其他的属性可以配置了，感兴趣的同学不妨试试。</p>\n<h2 id=\"PPS：渠道包改应用名称\"><a href=\"#PPS：渠道包改应用名称\" class=\"headerlink\" title=\"PPS：渠道包改应用名称\"></a>PPS：渠道包改应用名称</h2><p>如果你还想给不同的渠道指定不同的应用名字，例如想要在Xiaomi市场上叫做 <strong>“HelloGradle-小米专供版”</strong> , 那么你可以新建 <code>app/src/Xiaomi/res/values/strings.xml</code> 的文件，里面填写 <code>&lt;string name=&quot;app_name&quot;&gt;HelloGradle-小米专供版&lt;/string&gt;</code>，这样打包出来的小米渠道包，应用程序的名称就改变成<strong>“HelloGradle-小米专供版”</strong> 了。</p>\n<h2 id=\"PPPS：单独打包某一个渠道\"><a href=\"#PPPS：单独打包某一个渠道\" class=\"headerlink\" title=\"PPPS：单独打包某一个渠道\"></a>PPPS：单独打包某一个渠道</h2><p>运行 <strong><code>gradle build</code></strong> 会一次性打包出所有的渠道包，花费的时间还是很长的。如果只想打一个渠道的渠道包话应该怎么做？以百度为例，可以在命令行中执行  <strong><code>gradle assembleBaidu</code></strong> ，我是怎么找到 <code>assembleBaidu</code> 这个任务名字的？前面提到过的，运行 <code>gradle tasks</code>，你就会发现所有的tasks列表，找到build类的tasks，就看到了！其实Android Studio里面，这些全部都有界面操作的，大家看下代码编辑窗口的右边栏，是不是有一个Gradle的按钮，点击一下展开它，然后点击面板左上角的刷新按钮，就可以将所有的tasks列出来了，和执行命令行的效果是一样的。定制化打包的需求还有很多，同学们可以自己尝试尝试，记得分享出来给大家啊！</p>\n<p><img src=\"/content/images/aB.png\" alt=\"hello AS\"></p>\n<hr>\n<h1 id=\"版本号管理实践\"><a href=\"#版本号管理实践\" class=\"headerlink\" title=\"版本号管理实践\"></a>版本号管理实践</h1><p>版本号管理，在实际的业务中有很重要的作用，因为有的时候我们需要在做新版本特性的时候对旧版本做一些兼容处理，即使旧版本不能享受新版本功能，但是也不能影响到旧版本上已有功能的稳定运行。例如，新版本的应用程序支持视频播放，而旧版本的应用无法支持，那么可以在后台做控制，只针对新版本的应用返回视频数据，而旧版本不需要返回视频数据。</p>\n<p>一般版本号都会用 <strong><code>major.minor.patch</code></strong> 表示，例如 <strong><code>1.0.0</code></strong> 这样的形式。第一个数字major表示主版本号，第二个数字minor表示副版本号，第三个数字patch表示小版本号或者叫补丁号。当然也不一定要强制用三个数字来表示，直接用  <strong><code>major.minor</code></strong> 也是可以的，但是一旦你的应用程序版本号按照一个规则进行管理后，如果后台有逻辑依赖这个版本号，那么就不应该随意进行修改，一定要保持一致。</p>\n<p>做Android开发的同学都熟悉 <strong>versionCode</strong> 和 <strong>versionName</strong> 这两个与版本管理相关的属性。以前用Eclipse开发项目时，都是在 <code>AndroidManifest.xml</code>文件中定义，如下所示。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;manifest xmlns:<span class=\"attribute\">android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    <span class=\"attribute\">package</span>=<span class=\"string\">\"com.nought.hellogradle\"</span></span><br><span class=\"line\">    android:<span class=\"attribute\">versionCode</span>=<span class=\"string\">\"1\"</span></span><br><span class=\"line\">    android:<span class=\"attribute\">versionName</span>=<span class=\"string\">\"1.0\"</span> &gt;</span><br></pre></td></tr></table></figure>\n<p>但是在Android Studio中，这两个属性已经被放在Module下的<code>build.gradle</code>中，一般是在<code>android</code>闭包的<code>defaultConfig</code>中，如下所示。</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">\t<span class=\"string\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"com.nought.hellogradle\"</span></span><br><span class=\"line\">        minSdkVersion 14</span><br><span class=\"line\">        targetSdkVersion 22</span><br><span class=\"line\">        <span class=\"keyword\">version</span>Code 1</span><br><span class=\"line\">        <span class=\"keyword\">version</span>Name <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正是由于放到了gradle脚本中，而 <strong>gradle脚本中可以写groovy代码和java代码</strong> ，使得动态改变这两个属性变得更加方便了。关于 <strong>versionCode</strong> ，是一个整数，每build一次工程，我们都会将它增加1，因此可见应用程序的<code>versionCode</code>越大，其版本越新。而 <strong>versionName</strong> 是一个字符串，通常我们用这个来告诉用户，他们正在使用的应用程序版本名是多少，至于这个<code>versionName</code>每次打包怎么增加，就由你的自己来定义了，但是请记住，遵循这个规则不要改变，否则它就没有什么意义了。</p>\n<p>下面介绍一种版本号管理的思路，还是以前面的工程为例，这里为了简便，我把多渠道打包的代码注释掉了，先实现版本号自增。</p>\n<h2 id=\"versionCode版本号自增实现步骤\"><a href=\"#versionCode版本号自增实现步骤\" class=\"headerlink\" title=\"versionCode版本号自增实现步骤\"></a>versionCode版本号自增实现步骤</h2><h3 id=\"1-在app目录下新建一个文本类型的文件-version-properties，在文件中添加：\"><a href=\"#1-在app目录下新建一个文本类型的文件-version-properties，在文件中添加：\" class=\"headerlink\" title=\"1. 在app目录下新建一个文本类型的文件 version.properties，在文件中添加：\"></a>1. 在app目录下新建一个文本类型的文件 <code>version.properties</code>，在文件中添加：</h3><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">build</span>.<span class=\"keyword\">number</span>=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>这里简单提一下 <strong>properties</strong> ，在gradle脚本中，我们可以定义各种 <strong><code>name=value</code></strong> ，然后通过读取属性的方式load进来，在脚本中使用。</p>\n<h3 id=\"2-在app目录的build-gradle文件中，定义一个getVersionCode方法。\"><a href=\"#2-在app目录的build-gradle文件中，定义一个getVersionCode方法。\" class=\"headerlink\" title=\"2. 在app目录的build.gradle文件中，定义一个getVersionCode方法。\"></a>2. 在app目录的build.gradle文件中，定义一个getVersionCode方法。</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getVersionCode</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">versionFile</span> </span>= file(<span class=\"symbol\">'version</span>.properties')</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (versionFile.exists()) &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Properties</span> <span class=\"title\">versionProps</span> </span>= <span class=\"keyword\">new</span> <span class=\"type\">Properties</span>()</span><br><span class=\"line\">        versionProps.load(<span class=\"keyword\">new</span> <span class=\"type\">FileInputStream</span>(versionFile))</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">versionCode</span> </span>= versionProps[<span class=\"symbol\">'build</span>.number'].toInteger()</span><br><span class=\"line\">        println(<span class=\"symbol\">'Current</span> version code is ' + versionCode.toString())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> versionCode</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">GradleException</span>(<span class=\"string\">\"Could not find version.properties!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改build-gradle中的defaultConfig闭包，将versionCode的属性赋值改为通过getVersionCode方法获取。\"><a href=\"#3-修改build-gradle中的defaultConfig闭包，将versionCode的属性赋值改为通过getVersionCode方法获取。\" class=\"headerlink\" title=\"3. 修改build.gradle中的defaultConfig闭包，将versionCode的属性赋值改为通过getVersionCode方法获取。\"></a>3. 修改build.gradle中的defaultConfig闭包，将versionCode的属性赋值改为通过getVersionCode方法获取。</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">\t<span class=\"string\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tdef currentVersionCode = getVersionCode<span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"com.nought.hellogradle\"</span></span><br><span class=\"line\">        minSdkVersion 14</span><br><span class=\"line\">        targetSdkVersion 22</span><br><span class=\"line\">        <span class=\"keyword\">version</span>Code currentVersionCode</span><br><span class=\"line\">        <span class=\"keyword\">version</span>Name <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-再定义一个updateVersionCode方法。\"><a href=\"#4-再定义一个updateVersionCode方法。\" class=\"headerlink\" title=\"4. 再定义一个updateVersionCode方法。\"></a>4. 再定义一个updateVersionCode方法。</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateVersionCode</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTasks</span> = <span class=\"title\">gradle</span>.<span class=\"title\">startParameter</span>.<span class=\"title\">taskNames</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"string\">'assemble'</span> <span class=\"keyword\">in</span> runTasks <span class=\"params\">||</span> <span class=\"string\">'assembleRelease'</span> <span class=\"keyword\">in</span> runTasks <span class=\"params\">||</span> <span class=\"string\">'aR'</span> <span class=\"keyword\">in</span> runTasks)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">File</span> <span class=\"title\">versionFile</span> = <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">'version.properties'</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (versionFile.exists()) &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Properties</span> <span class=\"title\">versionProps</span> = <span class=\"title\">new</span> <span class=\"title\">Properties</span><span class=\"params\">()</span></span></span><br><span class=\"line\">        versionProps.load(new FileInputStream(versionFile))</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">currentVersionCode</span> = <span class=\"title\">versionProps</span>['<span class=\"title\">build</span>.<span class=\"title\">number</span>'].<span class=\"title\">toInteger</span><span class=\"params\">()</span></span></span><br><span class=\"line\">        currentVersionCode++</span><br><span class=\"line\">        versionProps[<span class=\"string\">'build.number'</span>] = currentVersionCode.toString()</span><br><span class=\"line\">        versionProps.store(versionFile.newWriter(), null)</span><br><span class=\"line\">        println(<span class=\"string\">'Updated version code to '</span> + currentVersionCode.toString())</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        throw new GradleException(<span class=\"string\">\"Could not find version.properties!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到这个方法中，首先获取了本地build任务中所有的任务名字，前面说过build任务实际上是个钩子，里面会去依赖很多其他的任务，例如<code>assemble</code>、<code>assembleRelease</code>及其驼峰式缩写<code>aR</code>。这里我们约定为只要执行过<code>assemble</code>任务，就将<code>versionCode</code>加1。当然你可以根据需要改成其他的条件。</p>\n<h3 id=\"5-给assembleRelease任务依赖，使得release版本构建成功后，versionCode增加1，并写入version-properties文件。\"><a href=\"#5-给assembleRelease任务依赖，使得release版本构建成功后，versionCode增加1，并写入version-properties文件。\" class=\"headerlink\" title=\"5. 给assembleRelease任务依赖，使得release版本构建成功后，versionCode增加1，并写入version.properties文件。\"></a>5. 给assembleRelease任务依赖，使得release版本构建成功后，versionCode增加1，并写入<code>version.properties</code>文件。</h3><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">assembleRelease </span>&#123;&#125;.<span class=\"class\">doLast </span>&#123;</span><br><span class=\"line\">    updateVersionCode()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-打开Android-Studio自带的命令行，运行cd-app进入app目录，接着运行-gradle-assembleRelease。\"><a href=\"#6-打开Android-Studio自带的命令行，运行cd-app进入app目录，接着运行-gradle-assembleRelease。\" class=\"headerlink\" title=\"6. 打开Android Studio自带的命令行，运行cd app进入app目录，接着运行 gradle assembleRelease。\"></a>6. 打开Android Studio自带的命令行，运行<code>cd app</code>进入app目录，接着运行 <code>gradle assembleRelease</code>。</h3><p><strong>记得一定要进入<code>app</code>目录以后，再build。</strong> 当打包成功以后，versionCode增加了1，并保存在<code>version.properties</code>文件中。打开文件看下，果然变成了2，gradle还在第一行添加了修改时间。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Fri Oct 23 17:34:28 CST 2015</span></span><br><span class=\"line\">build.<span class=\"attribute\">number</span>=2</span><br></pre></td></tr></table></figure>\n<h3 id=\"小结：-1\"><a href=\"#小结：-1\" class=\"headerlink\" title=\"小结：\"></a>小结：</h3><p>说了很多，直接把完整的build.gradle脚本贴出来吧。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'com.android.application'</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> currentVersionCode = getVersionCode()</span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"com.nought.hellogradle\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">14</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">        versionCode currentVersionCode</span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled <span class=\"keyword\">false</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:appcompat-v7:22.2.1'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:design:22.2.1'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">assembleRelease &#123;&#125;.<span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">    updateVersionCode()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> getVersionCode() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> versionFile = <span class=\"keyword\">file</span>(<span class=\"string\">'version.properties'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (versionFile.exists()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> Properties versionProps = <span class=\"keyword\">new</span> Properties()</span><br><span class=\"line\">        versionProps.load(<span class=\"keyword\">new</span> FileInputStream(versionFile))</span><br><span class=\"line\">        <span class=\"keyword\">def</span> versionCode = versionProps[<span class=\"string\">'build.number'</span>].<span class=\"keyword\">toInteger</span>()</span><br><span class=\"line\">        <span class=\"keyword\">println</span>(<span class=\"string\">'Current version code is '</span> + versionCode.toString())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> versionCode</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> GradleException(<span class=\"string\">\"Could not find version.properties!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> updateVersionCode() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> runTasks = gradle.startParameter.taskNames</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"string\">'assemble'</span> in runTasks || <span class=\"string\">'assembleRelease'</span> in runTasks || <span class=\"string\">'aR'</span> in runTasks)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"keyword\">File</span> versionFile = <span class=\"keyword\">file</span>(<span class=\"string\">'version.properties'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (versionFile.exists()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> Properties versionProps = <span class=\"keyword\">new</span> Properties()</span><br><span class=\"line\">        versionProps.load(<span class=\"keyword\">new</span> FileInputStream(versionFile))</span><br><span class=\"line\">        <span class=\"keyword\">def</span> currentVersionCode = versionProps[<span class=\"string\">'build.number'</span>].<span class=\"keyword\">toInteger</span>()</span><br><span class=\"line\">        currentVersionCode++</span><br><span class=\"line\">        versionProps[<span class=\"string\">'build.number'</span>] = currentVersionCode.toString()</span><br><span class=\"line\">        versionProps.store(versionFile.<span class=\"keyword\">newWriter</span>(), <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">println</span>(<span class=\"string\">'Updated version code to '</span> + currentVersionCode.toString())</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> GradleException(<span class=\"string\">\"Could not find version.properties!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想验证的话，我们可以在代码里读取一下应用程序的<code>versionCode</code>，并显示出来，这里就不演示了哈。其实我这里只是演示了一下gradle中实现一个小需求的方式，大家还可以根据需要写出各种各样的脚本。例如我工作中会将versionCode替换到代码里的某一个常量，实现方式是通过gradle脚本读取java源码文件，并通过正则表达式替换的。Gradle是用Groovy语言写的，兼容Java语法，因此我觉得特别适合Android程序员，大家也看到了上面定义的两个方法，实际上和Java语言差别不大，大家多参考一下官方的教程就会了。</p>\n<h2 id=\"versionName怎么实现自增？\"><a href=\"#versionName怎么实现自增？\" class=\"headerlink\" title=\"versionName怎么实现自增？\"></a>versionName怎么实现自增？</h2><p>前面我们在<code>app</code>模块的目录下添加了一个<code>version.properties</code>文件，里面以<code>name=value</code>的形式定义了<code>build.number=1</code>，那么我们也可以添加两行<code>version.major=1</code>，<code>version.minor=0</code>，然后在gradle脚本中以属性的方式读取，语法和前面读取<code>build.number</code>是一样的，至于major和minor号怎么增加，每个人有自己的约定规则，我这里就不演示了。</p>\n<h2 id=\"PS：现成的版本号管理插件\"><a href=\"#PS：现成的版本号管理插件\" class=\"headerlink\" title=\"PS：现成的版本号管理插件\"></a>PS：现成的版本号管理插件</h2><p>后来我发现github上还有很多现成的插件可以用，里面已经内置了丰富的版本号管理功能。例如<a href=\"https://github.com/mcxiaoke/gradle-packer-plugin\" target=\"_blank\" rel=\"noopener\">packer</a>插件，这个插件默认可以为我们实现版本号自增，apk输出文件按照版本号命名等等，感兴趣的同学也可以去看一下。</p>\n<p>实际上使用Gradle有非常好扩展性，前面说了它只是一个容器，真正实现功能的是插件，而插件里实现功能的是一个一个的任务Task。我们可以自己写一些Gradle Task，并进一步封装成Gradle Plugin，apply到自己项目中。</p>\n<p>下面我还会介绍一下如何使用<a href=\"http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/\">Gradle打包jar包+Log开关自动关闭</a>，而不是apk文件，并在打包时实现关闭Log开关，打包完成后恢复Log开关。</p>\n<p>最后奉上这篇博客和下一篇博客的示例工程代码，链接<a href=\"https://github.com/unclechen/HelloGradle\" target=\"_blank\" rel=\"noopener\">https://github.com/unclechen/HelloGradle</a>。</p>\n","site":{"data":{}},"excerpt":"<p>上次介绍了<a href=\"http://unclechen.github.io/2015/06/01/Android%20Studio%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/\">Android Studio的安装、配置和基本使用</a>。这次讲一下Android Studio用到的打包工具Gradle。<a href=\"http://gradle.org/\" target=\"_blank\" rel=\"noopener\">Gradle</a>是一种构建项目的框架，兼容Maven、Ant，为Java项目提供了很多插件去实现打包功能。废话不多说，下面直接进入实战。当我写这篇博客的时候，Android Studio的版本已经更新到了<strong>1.4</strong>，比上一篇博客的版本又更新了。</p>","more":"<h1 id=\"Android-Studio工程build-gradle脚本介绍\"><a href=\"#Android-Studio工程build-gradle脚本介绍\" class=\"headerlink\" title=\"Android Studio工程build.gradle脚本介绍\"></a>Android Studio工程build.gradle脚本介绍</h1><p>在进行多渠道打包之前，先介绍一下Android Studio工程中的gradle脚本长什么样。打开Android Studio，新建一个Project，这里我给它命名为Hello Gradle，一路点击下一步，最后Android Studio自动为我们建立的如下图的这个工程。</p>\n<p><img src=\"/content/images/create-a-project.png\" alt=\"hello AS\"></p>\n<p>按照上篇博客中介绍的，我们推荐大家采用Android结构的视图来查看项目结构。展开Gradle Scripts我们可以看到里面有两个<code>build.gradle</code>文件和一个<code>settings.gradle</code>文件。其中的<code>build.gradle(Project: HelloGradle)</code>文件是我们整个工程的build文件，而<code>build.gradle(Module: app)</code>文件是我们工程下的一个Module的build文件。前面我们就说过Android Studio采用单工程多Module结构，一个工程可以理解为Eclipse下的一个Workspace，一个Module可以理解为Eclipse下的Project。当我们用Android Studio建立一个默认的工程时，它自动为我们建立了一个名字为<code>app</code>默认的Module。</p>\n<p>所以我们可以知道，一个Android Studio工程会有一个<code>工程级别的build.gradle</code>文件，同时有N个Module，就还会有N个<code>Module级别的build.gradle</code>文件。</p>\n<h2 id=\"工程目录下的build-gradle-Project-HelloGradle-文件\"><a href=\"#工程目录下的build-gradle-Project-HelloGradle-文件\" class=\"headerlink\" title=\"工程目录下的build.gradle(Project: HelloGradle)文件\"></a>工程目录下的build.gradle(Project: HelloGradle)文件</h2><p>接着我们先看下这个工程级别的build.gradle文件。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">'com.android.tools.build:gradle:1.3.0'</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class=\"line\">        <span class=\"comment\">// in the individual module build.gradle files</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">allprojects</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> clean(type: <span class=\"keyword\">Delete</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> rootProject.buildDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个文件里的buildscript闭包中为我们定义了工程用到的repository地址，默认为我们加上了jcenter，并添加了版本号为1.3.0的Android Gradle插件。关于闭包，由于gradle是基于Groovy语言编写的，而闭包是里面的一个概念，可以理解为最小的代码执行块。关于jcenter，可以理解为一个兼容Maven中央仓库的东西，是Google为Android建立的。</p>\n<p>最下面还有一个task clean，<strong>task</strong>是gradle脚本中用到最多的东西了。Gradle实际上是一个容器，实现真正的功能的都是Gradle的插件Plugin，而Plugin中又定义了各式各样的Task，这一个个的Task是执行任务的基本单元。</p>\n<p>这里一看就知道是一个delete类型的task，意思是在我们执行打包脚本前做一个清理工作，把项目输出文件夹中的文件先全部清理干净。</p>\n<h2 id=\"Module目录下的build-gradle-Module-app-文件\"><a href=\"#Module目录下的build-gradle-Module-app-文件\" class=\"headerlink\" title=\"Module目录下的build.gradle(Module: app)文件\"></a>Module目录下的build.gradle(Module: app)文件</h2><p>接着看app Module下的build.gradle文件。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.android.application'</span></span><br></pre></td></tr></table></figure>\n<p>第一行<code>apply plugin: &#39;com.android.application&#39;</code>：指的是在这个脚本中应用<strong>Android Application</strong>插件。前面我们说到了Gradle中真正起作用的是插件，每个插件中可以定义各种各样的Task，当然还可以有一些Property属性，如果你以前是用Ant打包的，那么对属性一定不会陌生吧。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">android</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compileSdkVersion</span> <span class=\"number\">22</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        <span class=\"attribute\">applicationId</span> <span class=\"string\">\"com.nought.hellogradle\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">14</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        <span class=\"section\">release</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">minifyEnabled</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着看android闭包，里面首先定义了我们这个Module使用的<strong>compileSdkVersion</strong>和<strong>buildToolsVersion</strong>，这两个属性大家肯定知道，一个是用来编译代码的sdk版本，一个是用来打包apk的build-tools版本。</p>\n<p>再看里面的defaultConfig，又定义了几个属性。依次有<strong>applicationId</strong>，代表着你的包名，以前我们都是在AndroidManifest.xml文件中通过<code>package=&quot;com.nought.hellogradle&quot;</code>指定应用程序的包名，现在我们可以在gradle打包脚本中指定它，后面你会发现我们结合 <strong>buildTypes</strong> 和 <strong>productFlavors</strong> ，还可以动态的改变它，有点神奇了吧！ <strong>minSdkVersion</strong> 指的是你的应用程序兼容的最低Android系统版本； <strong>targetSdkVersion</strong> 指的是你的应用程序希望运行的Android系统版本；<strong>versionCode</strong> 是你的代码构建编号，一般我们每打一次包就将它增加1；<strong>versionName</strong> 则是你对外发布时，用户看到的应用程序版本号，一般我们都用“点分三个数字”来命名，例如<code>1.0.0</code>。</p>\n<p>接着看下 <strong>buildTypes</strong> ，这里面默认只定义了 <strong>release</strong> 类型，其实还可以定 <strong>debug</strong> 类型以及你自己定义的例如 <strong>internal</strong> 国内类型、<strong>external</strong> 国外类型等等。以前在每一个type中，可以分别配置不同的选项，例如可以 <strong>配置不同的包名、是否混淆</strong> 等等，目前的默认release类型中配置了混淆文件，<code>minifyEnabled false</code>指的是不混淆代码，下面这行 <code>proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;</code> 指定的是你的混淆配置文件。这里就不详细介绍了，马上我们就会看一下多渠道打包，实践一下大家就清楚了。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:appcompat-v7:22.2.1'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:design:22.2.1'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，我们看dependencies闭包，这里指的是我们的工程依赖的库，以往在Eclipse中开发，我们常常通过jar包，以及添加library的形式来添加依赖，现在方便了，在gradle脚本里，一行代码通通搞定！真是简单啊！dependencies闭包下，有几种基本的语法。</p>\n<ul>\n<li><p>1：<code>compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</code>,指的是依赖libs下面所有的jar包，你还可以指定具体的每一个jar包，而不是采用<code>*.jar</code>通配符匹配的方式，例如<code>compile files(&#39;libs/文件名.jar&#39;)</code>；</p>\n</li>\n<li><p>2：<code>compile &#39;com.android.support:appcompat-v7:22.2.1&#39;</code>，这种语法是通过包名：工程名：版本号的形式来依赖的，</p>\n</li>\n<li><p>3：<code>testCompile &#39;junit:junit:4.12&#39;</code>，指的是测试时才会用到的依赖，这里一看就知道是指做单元测试时依赖junit。</p>\n</li>\n</ul>\n<p>好了，上面介绍了Android Studio默认生成的基本的Gradle打包脚本的结构。下面我们在实践中学习，怎么修改这个脚本，来实现自己的各种需求，例如多渠道自动化打包等等。</p>\n<h1 id=\"多渠道打包实践\"><a href=\"#多渠道打包实践\" class=\"headerlink\" title=\"多渠道打包实践\"></a>多渠道打包实践</h1><p>多渠道指的是你的应用程序可以发布到不同的应用市场，被不同的用户从各个市场下载以后，你可以监测到每一个用户安装的这个应用程序是来自哪个市场的。实现的方法有很多，主要是通过在安装包中的放置一个标志位来区分不同的渠道包。</p>\n<h2 id=\"多渠道打包实现思路\"><a href=\"#多渠道打包实现思路\" class=\"headerlink\" title=\"多渠道打包实现思路\"></a>多渠道打包实现思路</h2><h3 id=\"思路1：AndroidManifest-xml占位符与productFlavor结合\"><a href=\"#思路1：AndroidManifest-xml占位符与productFlavor结合\" class=\"headerlink\" title=\"思路1：AndroidManifest.xml占位符与productFlavor结合\"></a>思路1：AndroidManifest.xml占位符与productFlavor结合</h3><p>比较常见的友盟移动统计sdk中使用的方案，这种方案是 <strong>通过<code>build.gradle</code>脚本中的<code>productFlavor</code></strong> 来实现的。首先在AndroidManifest.xml文件的 <strong><code>application</code></strong> 标签里指定一个 <strong>meta-data</strong> ，然后Umeng SDK会读取这个标签中value传到Umeng的后台，这样就可以让开发者监测到自己的应用程序渠道分布情况了。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta-data android:<span class=\"attribute\">name</span>=<span class=\"string\">\"UMENG_CHANNEL\"</span> android:<span class=\"attribute\">value</span>=<span class=\"string\">\"<span class=\"variable\">$&#123;UMENG_CHANNEL&#125;</span>\"</span>&gt;&lt;/meta-data&gt;</span><br></pre></td></tr></table></figure>\n<p>其实<code>meta-data</code>元素可以作为子元素，被包含在 <code>activity</code>,<code>application</code>,<code>service</code>和<code>receiver</code>标签中，但是不同位置下的 <code>meta-data</code> 读取方法不一样，我们这里就以在<code>application</code>中放置占位符为例。</p>\n<h3 id=\"思路2：一次打包，动态替换渠道标识符\"><a href=\"#思路2：一次打包，动态替换渠道标识符\" class=\"headerlink\" title=\"思路2：一次打包，动态替换渠道标识符\"></a>思路2：一次打包，动态替换渠道标识符</h3><p>在<a href=\"http://tech.meituan.com/mt-apk-packaging.html\" target=\"_blank\" rel=\"noopener\">美团的技术博客</a>上还分享过 <strong>另外一种实现思路</strong> ：就是在打包完apk之后，再拆包替换掉其中一个文件，或者替换文件中的标识符，实现不同渠道市场的打包。因为apk实际上也是一种zip文件，里面有Android定义的一些文件组织结构，比如可以在assert目录下塞一个文件，命名为version之类的，再动态改变其中的内容。这种思路和官方的<code>buildTypes + productFlavor</code>方式有所不同。因为这种思路只需要执行一次打包任务，剩下的操作是拆开apk，替换文件。可想而知这种速度比较快，如果你有很多个渠道包要打的话，这种思路能提高很多速度，据说100个渠道包大概只要2分钟。而普通的<code>buildTypes + productFlavor</code>方式，我打了4个渠道包也花费了几十秒。可见如果有很多渠道包要出，建议采用美团的这种思路。</p>\n<h2 id=\"多渠道打包实现步骤\"><a href=\"#多渠道打包实现步骤\" class=\"headerlink\" title=\"多渠道打包实现步骤\"></a>多渠道打包实现步骤</h2><h3 id=\"1-在AndroidManifest-xml的application标签下定义UMENG-CHANNEL占位符。\"><a href=\"#1-在AndroidManifest-xml的application标签下定义UMENG-CHANNEL占位符。\" class=\"headerlink\" title=\"1. 在AndroidManifest.xml的application标签下定义UMENG_CHANNEL占位符。\"></a>1. 在AndroidManifest.xml的<code>application</code>标签下定义UMENG_CHANNEL占位符。</h3><figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span></span><br><span class=\"line\"><span class=\"xml\">    package=\"com.nought.hellogradle\" &gt;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></span></span><br><span class=\"line\"><span class=\"xml\">        android:allowBackup=\"true\"</span></span><br><span class=\"line\"><span class=\"xml\">        android:icon=\"@mipmap/ic_launcher\"</span></span><br><span class=\"line\"><span class=\"xml\">        android:label=\"@string/app_name\"</span></span><br><span class=\"line\"><span class=\"xml\">        android:supportsRtl=\"true\"</span></span><br><span class=\"line\"><span class=\"xml\">        android:theme=\"@style/AppTheme\" &gt;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">meta-data</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"UMENG_CHANNEL\"</span> <span class=\"attr\">android:value</span>=<span class=\"string\">\"$</span></span></span><span class=\"template-variable\">&#123;UMENG_CHANNEL&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">meta-data</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span></span><br><span class=\"line\"><span class=\"xml\">            android:name=\".MainActivity\"</span></span><br><span class=\"line\"><span class=\"xml\">            android:label=\"@string/app_name\"</span></span><br><span class=\"line\"><span class=\"xml\">            android:theme=\"@style/AppTheme.NoActionBar\" &gt;</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-修改app目录下的build-gradle脚本，在android闭包中添加-productFlavors-属性，配置替换占位符的渠道标识。\"><a href=\"#2-修改app目录下的build-gradle脚本，在android闭包中添加-productFlavors-属性，配置替换占位符的渠道标识。\" class=\"headerlink\" title=\"2. 修改app目录下的build.gradle脚本，在android闭包中添加 productFlavors 属性，配置替换占位符的渠道标识。\"></a>2. 修改app目录下的build.gradle脚本，在<code>android</code>闭包中添加 <strong><code>productFlavors</code></strong> 属性，配置替换占位符的渠道标识。</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">apply</span> plugin: <span class=\"string\">'com.android.application'</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compileSdkVersion</span> <span class=\"number\">22</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        <span class=\"attribute\">applicationId</span> <span class=\"string\">\"com.nought.hellogradle\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">14</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        <span class=\"section\">release</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">minifyEnabled</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    productFlavors &#123;</span><br><span class=\"line\">        <span class=\"section\">GooglePlay</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">manifestPlaceholders</span> = [UMENG_CHANNEL: <span class=\"string\">\"GooglePlay\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Baidu &#123;</span><br><span class=\"line\">            <span class=\"attribute\">manifestPlaceholders</span> = [UMENG_CHANNEL: <span class=\"string\">\"Baidu\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Wandoujia &#123;</span><br><span class=\"line\">            <span class=\"attribute\">manifestPlaceholders</span> = [UMENG_CHANNEL: <span class=\"string\">\"Wandoujia\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Xiaomi &#123;</span><br><span class=\"line\">            <span class=\"attribute\">manifestPlaceholders</span> = [UMENG_CHANNEL: <span class=\"string\">\"Xiaomi\"</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compile</span> fileTree(dir: <span class=\"string\">'libs'</span>, include: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">    compile <span class=\"string\">'com.android.support:appcompat-v7:22.2.1'</span></span><br><span class=\"line\">    compile <span class=\"string\">'com.android.support:design:22.2.1'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-打开Android-Studio自带的命令行工具，运行gradle-build命令，就可以在-app-build-outputs-apk-目录下看到生成渠道包apk文件。注意：输出的apk文件是在app-Module下的build目录中，不是工程根目录下的build目录。\"><a href=\"#3-打开Android-Studio自带的命令行工具，运行gradle-build命令，就可以在-app-build-outputs-apk-目录下看到生成渠道包apk文件。注意：输出的apk文件是在app-Module下的build目录中，不是工程根目录下的build目录。\" class=\"headerlink\" title=\"3. 打开Android Studio自带的命令行工具，运行gradle build命令，就可以在 app/build/outputs/apk/ 目录下看到生成渠道包apk文件。注意：输出的apk文件是在app Module下的build目录中，不是工程根目录下的build目录。\"></a>3. 打开Android Studio自带的命令行工具，运行<code>gradle build</code>命令，就可以在 <strong><code>app/build/outputs/apk/</code></strong> 目录下看到生成渠道包apk文件。注意：输出的apk文件是在app Module下的build目录中，不是工程根目录下的build目录。</h3><p><img src=\"/content/images/apk-outputs.png\" alt=\"hello AS\"></p>\n<p>我们可以看到在 <strong><code>app/build/outputs/apk/</code></strong> 中，生成的带有渠道标识的apk文件有12个，这时因为 <strong>buildTypes</strong> 与 <strong>productFlavors</strong> 两两组合，2<em>4=8，Android Studio默认必须有 <strong>release</strong> 和 <strong>debug</strong> 这两种Type。此外，由于buildTypes中还可以定义 <strong><code>zipAlignEnabled true</code></strong> ，意思是混淆后的zip优化，该值默认为true，因此每个渠道还多了一个 <em>*<code>app-渠道标识-debug-unaligned.apk</code></em></em> 文件。</p>\n<h2 id=\"小结：\"><a href=\"#小结：\" class=\"headerlink\" title=\"小结：\"></a>小结：</h2><p>运行<code>gradle build</code>命令时，终端里会显示当前正在执行的task，里面有很多我们熟悉的任务，例如dex、javaCompile这些。前面我们说过，gradle脚本会以钩子的形式，执行一系列的tasks，最终构建出我们所需要的程序安装包。感兴趣的同学可以执行一下 <strong><code>gradle tasks</code></strong> 命令，这个命令可以查看当前工程下所有的tasks，后面我也将结合这些tasks，实践一下jar包的构建。</p>\n<p><img src=\"/content/images/open-terminal.png\" alt=\"hello AS\"></p>\n<h2 id=\"PS：渠道包修改包名\"><a href=\"#PS：渠道包修改包名\" class=\"headerlink\" title=\"PS：渠道包修改包名\"></a>PS：渠道包修改包名</h2><p>如果你想修改不同的渠道包的包名，可以在你的 <strong>productFlavors</strong> 指定不同的 <strong>applicationId </strong> 即可。在build.gradle文件中，输入的时候你就发现自动补全已经提示你，还有很多其他的属性可以配置了，感兴趣的同学不妨试试。</p>\n<h2 id=\"PPS：渠道包改应用名称\"><a href=\"#PPS：渠道包改应用名称\" class=\"headerlink\" title=\"PPS：渠道包改应用名称\"></a>PPS：渠道包改应用名称</h2><p>如果你还想给不同的渠道指定不同的应用名字，例如想要在Xiaomi市场上叫做 <strong>“HelloGradle-小米专供版”</strong> , 那么你可以新建 <code>app/src/Xiaomi/res/values/strings.xml</code> 的文件，里面填写 <code>&lt;string name=&quot;app_name&quot;&gt;HelloGradle-小米专供版&lt;/string&gt;</code>，这样打包出来的小米渠道包，应用程序的名称就改变成<strong>“HelloGradle-小米专供版”</strong> 了。</p>\n<h2 id=\"PPPS：单独打包某一个渠道\"><a href=\"#PPPS：单独打包某一个渠道\" class=\"headerlink\" title=\"PPPS：单独打包某一个渠道\"></a>PPPS：单独打包某一个渠道</h2><p>运行 <strong><code>gradle build</code></strong> 会一次性打包出所有的渠道包，花费的时间还是很长的。如果只想打一个渠道的渠道包话应该怎么做？以百度为例，可以在命令行中执行  <strong><code>gradle assembleBaidu</code></strong> ，我是怎么找到 <code>assembleBaidu</code> 这个任务名字的？前面提到过的，运行 <code>gradle tasks</code>，你就会发现所有的tasks列表，找到build类的tasks，就看到了！其实Android Studio里面，这些全部都有界面操作的，大家看下代码编辑窗口的右边栏，是不是有一个Gradle的按钮，点击一下展开它，然后点击面板左上角的刷新按钮，就可以将所有的tasks列出来了，和执行命令行的效果是一样的。定制化打包的需求还有很多，同学们可以自己尝试尝试，记得分享出来给大家啊！</p>\n<p><img src=\"/content/images/aB.png\" alt=\"hello AS\"></p>\n<hr>\n<h1 id=\"版本号管理实践\"><a href=\"#版本号管理实践\" class=\"headerlink\" title=\"版本号管理实践\"></a>版本号管理实践</h1><p>版本号管理，在实际的业务中有很重要的作用，因为有的时候我们需要在做新版本特性的时候对旧版本做一些兼容处理，即使旧版本不能享受新版本功能，但是也不能影响到旧版本上已有功能的稳定运行。例如，新版本的应用程序支持视频播放，而旧版本的应用无法支持，那么可以在后台做控制，只针对新版本的应用返回视频数据，而旧版本不需要返回视频数据。</p>\n<p>一般版本号都会用 <strong><code>major.minor.patch</code></strong> 表示，例如 <strong><code>1.0.0</code></strong> 这样的形式。第一个数字major表示主版本号，第二个数字minor表示副版本号，第三个数字patch表示小版本号或者叫补丁号。当然也不一定要强制用三个数字来表示，直接用  <strong><code>major.minor</code></strong> 也是可以的，但是一旦你的应用程序版本号按照一个规则进行管理后，如果后台有逻辑依赖这个版本号，那么就不应该随意进行修改，一定要保持一致。</p>\n<p>做Android开发的同学都熟悉 <strong>versionCode</strong> 和 <strong>versionName</strong> 这两个与版本管理相关的属性。以前用Eclipse开发项目时，都是在 <code>AndroidManifest.xml</code>文件中定义，如下所示。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;manifest xmlns:<span class=\"attribute\">android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    <span class=\"attribute\">package</span>=<span class=\"string\">\"com.nought.hellogradle\"</span></span><br><span class=\"line\">    android:<span class=\"attribute\">versionCode</span>=<span class=\"string\">\"1\"</span></span><br><span class=\"line\">    android:<span class=\"attribute\">versionName</span>=<span class=\"string\">\"1.0\"</span> &gt;</span><br></pre></td></tr></table></figure>\n<p>但是在Android Studio中，这两个属性已经被放在Module下的<code>build.gradle</code>中，一般是在<code>android</code>闭包的<code>defaultConfig</code>中，如下所示。</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">\t<span class=\"string\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"com.nought.hellogradle\"</span></span><br><span class=\"line\">        minSdkVersion 14</span><br><span class=\"line\">        targetSdkVersion 22</span><br><span class=\"line\">        <span class=\"keyword\">version</span>Code 1</span><br><span class=\"line\">        <span class=\"keyword\">version</span>Name <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正是由于放到了gradle脚本中，而 <strong>gradle脚本中可以写groovy代码和java代码</strong> ，使得动态改变这两个属性变得更加方便了。关于 <strong>versionCode</strong> ，是一个整数，每build一次工程，我们都会将它增加1，因此可见应用程序的<code>versionCode</code>越大，其版本越新。而 <strong>versionName</strong> 是一个字符串，通常我们用这个来告诉用户，他们正在使用的应用程序版本名是多少，至于这个<code>versionName</code>每次打包怎么增加，就由你的自己来定义了，但是请记住，遵循这个规则不要改变，否则它就没有什么意义了。</p>\n<p>下面介绍一种版本号管理的思路，还是以前面的工程为例，这里为了简便，我把多渠道打包的代码注释掉了，先实现版本号自增。</p>\n<h2 id=\"versionCode版本号自增实现步骤\"><a href=\"#versionCode版本号自增实现步骤\" class=\"headerlink\" title=\"versionCode版本号自增实现步骤\"></a>versionCode版本号自增实现步骤</h2><h3 id=\"1-在app目录下新建一个文本类型的文件-version-properties，在文件中添加：\"><a href=\"#1-在app目录下新建一个文本类型的文件-version-properties，在文件中添加：\" class=\"headerlink\" title=\"1. 在app目录下新建一个文本类型的文件 version.properties，在文件中添加：\"></a>1. 在app目录下新建一个文本类型的文件 <code>version.properties</code>，在文件中添加：</h3><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">build</span>.<span class=\"keyword\">number</span>=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>这里简单提一下 <strong>properties</strong> ，在gradle脚本中，我们可以定义各种 <strong><code>name=value</code></strong> ，然后通过读取属性的方式load进来，在脚本中使用。</p>\n<h3 id=\"2-在app目录的build-gradle文件中，定义一个getVersionCode方法。\"><a href=\"#2-在app目录的build-gradle文件中，定义一个getVersionCode方法。\" class=\"headerlink\" title=\"2. 在app目录的build.gradle文件中，定义一个getVersionCode方法。\"></a>2. 在app目录的build.gradle文件中，定义一个getVersionCode方法。</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getVersionCode</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">versionFile</span> </span>= file(<span class=\"symbol\">'version</span>.properties')</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (versionFile.exists()) &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Properties</span> <span class=\"title\">versionProps</span> </span>= <span class=\"keyword\">new</span> <span class=\"type\">Properties</span>()</span><br><span class=\"line\">        versionProps.load(<span class=\"keyword\">new</span> <span class=\"type\">FileInputStream</span>(versionFile))</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">versionCode</span> </span>= versionProps[<span class=\"symbol\">'build</span>.number'].toInteger()</span><br><span class=\"line\">        println(<span class=\"symbol\">'Current</span> version code is ' + versionCode.toString())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> versionCode</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">GradleException</span>(<span class=\"string\">\"Could not find version.properties!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改build-gradle中的defaultConfig闭包，将versionCode的属性赋值改为通过getVersionCode方法获取。\"><a href=\"#3-修改build-gradle中的defaultConfig闭包，将versionCode的属性赋值改为通过getVersionCode方法获取。\" class=\"headerlink\" title=\"3. 修改build.gradle中的defaultConfig闭包，将versionCode的属性赋值改为通过getVersionCode方法获取。\"></a>3. 修改build.gradle中的defaultConfig闭包，将versionCode的属性赋值改为通过getVersionCode方法获取。</h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">\t<span class=\"string\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tdef currentVersionCode = getVersionCode<span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"com.nought.hellogradle\"</span></span><br><span class=\"line\">        minSdkVersion 14</span><br><span class=\"line\">        targetSdkVersion 22</span><br><span class=\"line\">        <span class=\"keyword\">version</span>Code currentVersionCode</span><br><span class=\"line\">        <span class=\"keyword\">version</span>Name <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-再定义一个updateVersionCode方法。\"><a href=\"#4-再定义一个updateVersionCode方法。\" class=\"headerlink\" title=\"4. 再定义一个updateVersionCode方法。\"></a>4. 再定义一个updateVersionCode方法。</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateVersionCode</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runTasks</span> = <span class=\"title\">gradle</span>.<span class=\"title\">startParameter</span>.<span class=\"title\">taskNames</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"string\">'assemble'</span> <span class=\"keyword\">in</span> runTasks <span class=\"params\">||</span> <span class=\"string\">'assembleRelease'</span> <span class=\"keyword\">in</span> runTasks <span class=\"params\">||</span> <span class=\"string\">'aR'</span> <span class=\"keyword\">in</span> runTasks)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">File</span> <span class=\"title\">versionFile</span> = <span class=\"title\">file</span><span class=\"params\">(<span class=\"string\">'version.properties'</span>)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (versionFile.exists()) &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Properties</span> <span class=\"title\">versionProps</span> = <span class=\"title\">new</span> <span class=\"title\">Properties</span><span class=\"params\">()</span></span></span><br><span class=\"line\">        versionProps.load(new FileInputStream(versionFile))</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">currentVersionCode</span> = <span class=\"title\">versionProps</span>['<span class=\"title\">build</span>.<span class=\"title\">number</span>'].<span class=\"title\">toInteger</span><span class=\"params\">()</span></span></span><br><span class=\"line\">        currentVersionCode++</span><br><span class=\"line\">        versionProps[<span class=\"string\">'build.number'</span>] = currentVersionCode.toString()</span><br><span class=\"line\">        versionProps.store(versionFile.newWriter(), null)</span><br><span class=\"line\">        println(<span class=\"string\">'Updated version code to '</span> + currentVersionCode.toString())</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        throw new GradleException(<span class=\"string\">\"Could not find version.properties!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到这个方法中，首先获取了本地build任务中所有的任务名字，前面说过build任务实际上是个钩子，里面会去依赖很多其他的任务，例如<code>assemble</code>、<code>assembleRelease</code>及其驼峰式缩写<code>aR</code>。这里我们约定为只要执行过<code>assemble</code>任务，就将<code>versionCode</code>加1。当然你可以根据需要改成其他的条件。</p>\n<h3 id=\"5-给assembleRelease任务依赖，使得release版本构建成功后，versionCode增加1，并写入version-properties文件。\"><a href=\"#5-给assembleRelease任务依赖，使得release版本构建成功后，versionCode增加1，并写入version-properties文件。\" class=\"headerlink\" title=\"5. 给assembleRelease任务依赖，使得release版本构建成功后，versionCode增加1，并写入version.properties文件。\"></a>5. 给assembleRelease任务依赖，使得release版本构建成功后，versionCode增加1，并写入<code>version.properties</code>文件。</h3><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">assembleRelease </span>&#123;&#125;.<span class=\"class\">doLast </span>&#123;</span><br><span class=\"line\">    updateVersionCode()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-打开Android-Studio自带的命令行，运行cd-app进入app目录，接着运行-gradle-assembleRelease。\"><a href=\"#6-打开Android-Studio自带的命令行，运行cd-app进入app目录，接着运行-gradle-assembleRelease。\" class=\"headerlink\" title=\"6. 打开Android Studio自带的命令行，运行cd app进入app目录，接着运行 gradle assembleRelease。\"></a>6. 打开Android Studio自带的命令行，运行<code>cd app</code>进入app目录，接着运行 <code>gradle assembleRelease</code>。</h3><p><strong>记得一定要进入<code>app</code>目录以后，再build。</strong> 当打包成功以后，versionCode增加了1，并保存在<code>version.properties</code>文件中。打开文件看下，果然变成了2，gradle还在第一行添加了修改时间。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Fri Oct 23 17:34:28 CST 2015</span></span><br><span class=\"line\">build.<span class=\"attribute\">number</span>=2</span><br></pre></td></tr></table></figure>\n<h3 id=\"小结：-1\"><a href=\"#小结：-1\" class=\"headerlink\" title=\"小结：\"></a>小结：</h3><p>说了很多，直接把完整的build.gradle脚本贴出来吧。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'com.android.application'</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> currentVersionCode = getVersionCode()</span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"com.nought.hellogradle\"</span></span><br><span class=\"line\">        minSdkVersion <span class=\"number\">14</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">        versionCode currentVersionCode</span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled <span class=\"keyword\">false</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:appcompat-v7:22.2.1'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:design:22.2.1'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">assembleRelease &#123;&#125;.<span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">    updateVersionCode()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> getVersionCode() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> versionFile = <span class=\"keyword\">file</span>(<span class=\"string\">'version.properties'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (versionFile.exists()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> Properties versionProps = <span class=\"keyword\">new</span> Properties()</span><br><span class=\"line\">        versionProps.load(<span class=\"keyword\">new</span> FileInputStream(versionFile))</span><br><span class=\"line\">        <span class=\"keyword\">def</span> versionCode = versionProps[<span class=\"string\">'build.number'</span>].<span class=\"keyword\">toInteger</span>()</span><br><span class=\"line\">        <span class=\"keyword\">println</span>(<span class=\"string\">'Current version code is '</span> + versionCode.toString())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> versionCode</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> GradleException(<span class=\"string\">\"Could not find version.properties!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> updateVersionCode() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> runTasks = gradle.startParameter.taskNames</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"string\">'assemble'</span> in runTasks || <span class=\"string\">'assembleRelease'</span> in runTasks || <span class=\"string\">'aR'</span> in runTasks)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"keyword\">File</span> versionFile = <span class=\"keyword\">file</span>(<span class=\"string\">'version.properties'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (versionFile.exists()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> Properties versionProps = <span class=\"keyword\">new</span> Properties()</span><br><span class=\"line\">        versionProps.load(<span class=\"keyword\">new</span> FileInputStream(versionFile))</span><br><span class=\"line\">        <span class=\"keyword\">def</span> currentVersionCode = versionProps[<span class=\"string\">'build.number'</span>].<span class=\"keyword\">toInteger</span>()</span><br><span class=\"line\">        currentVersionCode++</span><br><span class=\"line\">        versionProps[<span class=\"string\">'build.number'</span>] = currentVersionCode.toString()</span><br><span class=\"line\">        versionProps.store(versionFile.<span class=\"keyword\">newWriter</span>(), <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">println</span>(<span class=\"string\">'Updated version code to '</span> + currentVersionCode.toString())</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> GradleException(<span class=\"string\">\"Could not find version.properties!\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想验证的话，我们可以在代码里读取一下应用程序的<code>versionCode</code>，并显示出来，这里就不演示了哈。其实我这里只是演示了一下gradle中实现一个小需求的方式，大家还可以根据需要写出各种各样的脚本。例如我工作中会将versionCode替换到代码里的某一个常量，实现方式是通过gradle脚本读取java源码文件，并通过正则表达式替换的。Gradle是用Groovy语言写的，兼容Java语法，因此我觉得特别适合Android程序员，大家也看到了上面定义的两个方法，实际上和Java语言差别不大，大家多参考一下官方的教程就会了。</p>\n<h2 id=\"versionName怎么实现自增？\"><a href=\"#versionName怎么实现自增？\" class=\"headerlink\" title=\"versionName怎么实现自增？\"></a>versionName怎么实现自增？</h2><p>前面我们在<code>app</code>模块的目录下添加了一个<code>version.properties</code>文件，里面以<code>name=value</code>的形式定义了<code>build.number=1</code>，那么我们也可以添加两行<code>version.major=1</code>，<code>version.minor=0</code>，然后在gradle脚本中以属性的方式读取，语法和前面读取<code>build.number</code>是一样的，至于major和minor号怎么增加，每个人有自己的约定规则，我这里就不演示了。</p>\n<h2 id=\"PS：现成的版本号管理插件\"><a href=\"#PS：现成的版本号管理插件\" class=\"headerlink\" title=\"PS：现成的版本号管理插件\"></a>PS：现成的版本号管理插件</h2><p>后来我发现github上还有很多现成的插件可以用，里面已经内置了丰富的版本号管理功能。例如<a href=\"https://github.com/mcxiaoke/gradle-packer-plugin\" target=\"_blank\" rel=\"noopener\">packer</a>插件，这个插件默认可以为我们实现版本号自增，apk输出文件按照版本号命名等等，感兴趣的同学也可以去看一下。</p>\n<p>实际上使用Gradle有非常好扩展性，前面说了它只是一个容器，真正实现功能的是插件，而插件里实现功能的是一个一个的任务Task。我们可以自己写一些Gradle Task，并进一步封装成Gradle Plugin，apply到自己项目中。</p>\n<p>下面我还会介绍一下如何使用<a href=\"http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/\">Gradle打包jar包+Log开关自动关闭</a>，而不是apk文件，并在打包时实现关闭Log开关，打包完成后恢复Log开关。</p>\n<p>最后奉上这篇博客和下一篇博客的示例工程代码，链接<a href=\"https://github.com/unclechen/HelloGradle\" target=\"_blank\" rel=\"noopener\">https://github.com/unclechen/HelloGradle</a>。</p>"},{"layout":"post","title":"Android Studio安装配置笔记","date":"2015-06-01T00:00:00.000Z","_content":"\n2015年5月29号凌晨，第一次翻墙看了谷歌开发者大会的直播，还特意跑到车库咖啡和一堆GDG开发者一起看的直播。现场来了一些Android、Google开发大牛，介绍了他们对于最新的Android、Google技术的体验。加上谷歌官方宣布了1.3beta版本的[Android Studio](https://developer.android.com/sdk/index.html)已经支持NDK开发，这样一来貌似Eclipse在Android开发方面的最后一个独有优势也已经失去。我想如果不是公司项目需要，我已经可以把AS作为我的Android主打开发环境了。另外据说1.3开始，gradle脚本的速度也会得到优化，因此希望在AS这个官方的平台上能够有更多优化的体验。\n\n<!-- more -->\n\n下面我还是以自己的AS 1.2.1.1 stable版的AS介绍一些我的学习经验。\n\n\n# 1. Android Studio安装配置\n\n## 1.1 下载、安装和配置\n\n首先最重要的一步！！**科学上网**！！官网[下载](https://developer.android.com/sdk/index.html)最新版的AS安装文件，Windows下对应的是exe文件，MAC下应该是一个dmg文件，安装过程很简单方便。\n\n**（1）解决Fetching android sdk component information卡住的问题**\n\n安装完成后，打开Android Studio的时候可能常常会卡在启动界面 **“Fetching android sdk component information”** 上，这是因为AS启动时会去获取SDK组件信息，然而我们现在还没有去给Android Studio的SDK组件配置代理，因为可能会非常慢，甚至没有速度。\n\n**解决办法是->** 进入刚安装的Android Studio目录，打开`bin`文件夹，找到`idea.properties`文件，用文本编辑器打开。在文件末尾添加一行：\n> disable.android.first.run =true\n\n，保存。然后在任务管理器中关闭Android Studio，重新启动即可。\n\n**（2）设置SDK、JDK目录**\n\n安装完成以后，打开AS。进入的是`Android Studio Setup Wizard`界面，如下所示。\n\n![hello AS](/content/images/helloWizard.png)\n\n这里会引导我们进行一些IDE的基本设置。包括你的Android SDK目录设置等等，这里我推荐点击`Cancel`跳过，因为我们原来在Eclipse环境下开发的时候，已经下载过Android SDK了。只需要在进入AS以后，再把SDK的目录设置为原来的SDK就好，免去下载新的sdk的麻烦，国内这个环境，就是有代理也是很慢的。跳过设置向导以后，进入AS的欢迎首页。\n\n![hello AS](/content/images/helloAS.png)\n\n接着，选择界面上`Configure->Project Defaults`，进入之后再选择`Project Structure`。到这里就可以把Android SDK和JDK的目录设置为我们之前已经有的目录了。\n\n![hello SDK](/content/images/helloSDK.png)\n\n**注意:** AS需要的JDK版本必须在1.7以上，因为AS默认使用gradle打包。\n\n\n**（3）设置主题、字体设置，网络代理**\n\n设置了SDK、JDK目录以后，我们可以再给AS做一个基本的设置，为了让这个IDE更加顺手好用。回到AS的首页，选择`Configure->Settings`，进入下面的界面。\n\n![hello Settings](/content/images/helloSettings.png)\n\n首先，在`Appearance & Behavior->Appeara`选择`Darcula`主题，字体可以调大一些。这样整个AS就变成黑色背景的主题了，看着舒服很多。\n\n然后是代理的配置，在Settings界面左侧的菜单栏中，最上面有一个搜索框，可以直接搜索各种设置选项，我们输入`proxy`，即可跳转到代理设置的界面，如图所示我把代理设置为公司的`xxx-proxy.oa.com`。这样以后我们就可以使用AS自动更新了。所以大家一定要去搞一个自己的翻墙代理。。\n\n![hello Proxy](/content/images/helloProxy.png)\n\n（4）新建一个test项目\n\n完成了上面的设置以后，我们使用AS的新建一个test项目。回到AS的欢迎主页，点击`Start a new Android Studio Project`，如下如所示设置应用的名称为`TestApplication`，选择项目目录。\n\n![hello Proxy](/content/images/helloCreatTestApplicaiton.png)\n\n然后选择Minimum SDK的版本。接着一路点`next`直到`finish`。\n\n![hello Proxy](/content/images/helloCreatTestApplicaiton2.png)\n\n进入代码编辑界面。突然发现`Code Editor`字体很小，原来是刚才设置的Appearance的字体只是IDE的字体，没有给编辑器设置字体大小，没关系，我们在菜单栏里依次选择`File->Settings`，然后搜索`font`，点击`Save AS...`，然后把字号Size由`12`改成`18`，字体Primary font改成`Consolas`，最后点击`OK`即可保存。\n\n![hello Proxy](/content/images/helloFont.png)\n\n这样，就使用AS建立了一个Test项目。\n\n**PS** ：实际操作时，并没有一次就搞定这么简单的一个新建项目，可能有的朋友会碰到像我一样的问题，就是这个新建的项目中，`Module app`的`gradle`脚本默认使用了最新的`buildToolsVersion \"23.0.0 rc\"`（因为我把SDK和buildTools都更新到最新版了，默认应该是选择最新的版本来build），因此遇到了 **`Execution failed for task ':app:compileDebugAidl': aidl is missing`** 的问题，解决办法很简单，把`Module app`的`gradle`脚本修改一下，使用22.0.1的buildTools就好了。\n\n关于AS项目结构以及gradle脚本的知识，下面有介绍。\n\n\n\n## 1.2 Android Studio项目结构\n\n\nAndroid Studio的项目结构和Eclipse下有很大不同，首先最不一样的地方是：一个窗口下只能有一个项目，类似于一个工作空间下面只有一个项目的概念。\n\n新建了一个Test项目以后，我们可以看到AS项目的结构如下所示。\n\n![hello Structure](/content/images/helloStructure.png)\n\n这是一个**Android视图**下的AS项目结构，你可以在目录下看到`app`和`gradle`两个大分类。在`app`下有我们熟悉的`manifest`，`res`，还有一个`java`文件夹，这个`java`文件夹里面就存放着java的源代码和Application的源代码，它们各自又是按照包名组织起来的。`gradle`文件夹包含了项目的gradle脚本和gradle配置文件，其中包含了两个重要的gradle脚本文件，一个是`build.gradle(Project: TestApplication)`，这个脚本代表着整个项目的gradle脚本，其中具体的语法见另外一篇博客[Android Studio Gradle打包实践之多渠道+版本号管理](http://unclechen.github.io/2015/10/22/Android%20Studio%20Gradle%E6%89%93%E5%8C%85%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%A4%9A%E6%B8%A0%E9%81%93+%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86/)。另外一个是`build.gradle(Module: app)`，这个脚本是app的gradle脚本。\n\n除了 **Android视图**下的AS结构以外，还有一种新的视图结构 **project视图** 下的AS结构，如下图所示。\n\n![hello Structure](/content/images/helloStructure2.png)\n\n这种视图下的结构和Eclipse下的结构有几分相似。在这个视图下很容看到module app目录下和project目录下分别有一个gradle脚本文件，这两个文件对于编译、打包都非常重要。\n\n关于Project和Module的概念，可以这么理解。Project类似一个workspace，因此一个Project可以包含多个Module，例如我们可以把引用的library作为一个Module放到里面来。关于Project和Module的gradle脚本，我们可以参考谷歌官方的[New Build System](http://tools.android.com/tech-docs/new-build-system)用户手册，后续我也会有一篇[gradle的总结]()出来。\n\n\n\n## 1.3 国内Android SDK升级方法\n\n做Android开发的朋友都知道，当Google被墙掉之后，真的是太不方便了，什么新的东西，好用的资源都没法及时的得到。所以我们一定需要一个代理。但是国内也有很多组织，为大家带来了很多福利，比如Android SDK，就有东软的镜像，下面介绍一下怎么设置。\n\n启动`Android SDK Manager`，在主界面上方的菜单栏里依次选择`Tools->Options`，弹出`Android SDK Manager Settings`窗口中，如下图所示。\n\n![hello SDKProxy](/content/images/helloSDKProxy.png)\n\n分别在`HTTP Proxy Server`输入`mirrors.neusoft.edu.cn`，`HTTP Proxy Port`中输入`80`。然后勾选中`Force https://... sources to be fetched using http://...`，最后点击`close`按钮关闭设置。回到`Android SDK Manager Settings`窗口以后，一般会自定刷新重新加载，如果没有自动刷新的话，可以依次手动点击菜单栏中的`Pakages->Reload`，然后就可以飞速地更新最新的Android SDK了。\n\n可以看到我已经下载了最新的Android M SDK预览版，不过我用的是公司的代理，但其实速度还没有东软这个快呢。\n\n## 1.4 Eclipse项目迁移到Android Studio\n\n最新版的AS已经支持直接导入Eclipse项目了。（不需要向像原来那样，先从Eclipse导出一个gradle script，再导入到AS中）\n\n这里有[官方的迁移教程](https://developer.android.com/sdk/installing/migrate.html)，大家还是多看官方教程，这样其实是最有效率的。\n\n导入Eclipse的项目后，AS会在项目的目录文件夹下生成一个`import-summary.txt`，这里面有导入过程的一些问题，导入进来的项目可能不一定立刻就能build，但是通过看导入报告，我们可以将有问题的地方一一修复，最后成功迁移到AS上来。相信我，我一开始的时候也是非常痛苦的，花了很多时间以后最终也就摸索出来了。StackOverflow真的是个好东西啊。\n\n## 1.5 Eclipse项目迁移到Android Studio后代码、资源文件的结构该怎么管理？\n\n有两种方案：两种方案的区别就是文件结构应该如何配置。\n\n### 方案1：直接按照Android Studio标准的结构配置\n\n在`build.gradle(Module: app)`中的android闭包中，添加 **sourceSets** 属性，并按照下面配置来写。\n\n```\nsourceSets {\n        main {\n            manifest.srcFile 'src/main/AndroidManifest.xml'\n            jniLibs.srcDirs = ['libs']\n            java.srcDirs = ['src/main/java']\n            resources.srcDirs = ['src/main/res']\n            aidl.srcDirs = ['src/main/aidl']\n            assets.srcDirs = ['src/main/assets']\n        }\n    }\n```\n\n### 方案2：不改变Eclipse原有结构，使用Android Studio + Gradle来开发。\n\n在`build.gradle(Module: app)`中的android闭包中，添加 **sourceSets** 属性，按照下面的配置来写。\n\n```\nsourceSets {\n        main {\n            manifest.srcFile 'AndroidManifest.xml'\n            jniLibs.srcDirs = ['libs']\n            java.srcDirs = ['src']\n            resources.srcDirs = ['res']\n            aidl.srcDirs = ['src']\n            assets.srcDirs = ['assets']\n        }\n    }\n```\n\n可以看到，不改变Eclipse工程结构的关键就在于，在 **sourceSets** 中，按照原来的目录结构配置源代码、资源文件的路径，在Eclipse工程结构中，AndroidManifest.xml文件，libs目录，assert目录、都是和src目录同级的。而Android Studio默认的工程结构中，这几个目录都是`src/main/`中。分清楚了这一点，其实两种结构没啥影响，怎么来都行。\n\n## 1.6 常用快捷键\n\n以下摘自[Android Studio中文论坛](http://android-studio.org/)\n\nAlt+回车 导入包,自动修正\n\nCtrl+N   查找类\n\nCtrl+Shift+N 查找文件\n\nCtrl+Alt+L  格式化代码\n\nCtrl+Alt+O 优化导入的类和包\n\nAlt+Insert 生成代码(如get,set方法,构造函数等)\n\nCtrl+E或者Alt+Shift+C  最近更改的代码\n\nCtrl+R 替换文本\n\nCtrl+F 查找文本\n\nCtrl+Shift+Space 自动补全代码\n\nCtrl+空格 代码提示\n\nCtrl+Alt+Space 类名或接口名提示\n\nCtrl+P 方法参数提示\n\nCtrl+Shift+Alt+N 查找类中的方法或变量\n\nAlt+Shift+C 对比最近修改的代码\n\nShift+F6  Refactor下的Rename\n\nCtrl+Y 删除行\n\nCtrl+D 复制行\n\nCtrl+/ 或 Ctrl+Shift+/  注释（// 或者 ）\n\nCtrl+H 显示类结构图\n\nCtrl+Q 显示注释文档\n\nAlt+F1 查找代码所在位置\n\nAlt+1 快速打开或隐藏工程面板\n\nCtrl+Alt+ left/right 返回至上次浏览的位置\n\nAlt+ left/right 切换代码视图\n\nAlt+ Up/Down 在方法间快速移动定位\n\nCtrl+Shift+Up/Down 代码向上/下移动。\n\nF2 或Shift+F2 高亮错误或警告快速定位\n\n选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。\n\nCtrl+W 选中代码，连续按会扩大选中的代码块\n\n选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。\n\nCtrl+Up/Down 光标跳转到第一行或最后一行下\n\nCtrl+B 快速打开光标处的类或方法 \n\n\n## PS ： 个人使用AS的一些体验\n\n- 1、Android Studio是官方的IDE，集成了开发Android应用和SDK所需要的所有组件。例如，集成命令行工具，logcat支持更多的操作，支持录屏，截屏等功能。\n\n- 2、AS使用gradle作为打包脚本，兼容Maven、Ant。其打包脚本的Groovy语法简洁，直接支持Java，与xml形式的Ant脚本相比，可读性更强（xml是给机器读的，不是给人阅读的）。gradle添加依赖也更加方便，直接在dependencies中添加一个compile即可。\n\n- 3、AS的“单Project下包含多个Module”结构，对于多模块（一个Module相当于一个Eclipse中的project）开发有非常好的优势，如果你是做sdk开发的，可以直接按照“library + sample”的形式，从开发library（sdk），打包library，调试demo到最后发布sdk + demo都非常方便。\n\n- 4、目前有很多开源项目和sdk都是通过aar的形式发布到Maven和jcenter，迁移到AS以后，可以在将来需要的时候将自己的sdk发布到Maven、jcenter。https://github.com/novoda/bintray-release\n\n- 5、编辑代码方面：模糊匹配非常强大，对Android和Java的语法检查也更加严谨（查找类的实现，支持弹窗中直接查看，代码之间的引用检查），自带代码分析工具，生成的report可以很清楚地看出代码中有哪里可能存在问题。\n\n- 6、AS有很多好用的插件，并且随着官方对AS的不断改进和支持，在这上面开发插件的人也越来越多，有很多好用的插件可以方便配置进来，这些插件不支持Eclipse（ADT插件已经停止更新）。\n\n\n***\n\n今年的开发者大会上我比较关注的还是Android在系统上的一些改进，以及Material Design的一些最新实践。当我打开IO大会官网看到他们用polymer写的网页时，感觉还是非常不错的。虽然我是一个比较极端的人，但是我看待Native App VS Web的问题上没有那么绝对，学技术的可以多积累点动手实践的经验，业务需要的时候再深挖。","source":"_posts/Android Studio安装配置笔记.markdown","raw":"---\nlayout: post\ntitle: Android Studio安装配置笔记\ndate: '2015-06-01'\nphoto: '/content/images/cover/helloAndroidStudioAndGradle.png'\ntags:\n  - 开发环境\n  - Android\ncategories: \n  - 技术\n---\n\n2015年5月29号凌晨，第一次翻墙看了谷歌开发者大会的直播，还特意跑到车库咖啡和一堆GDG开发者一起看的直播。现场来了一些Android、Google开发大牛，介绍了他们对于最新的Android、Google技术的体验。加上谷歌官方宣布了1.3beta版本的[Android Studio](https://developer.android.com/sdk/index.html)已经支持NDK开发，这样一来貌似Eclipse在Android开发方面的最后一个独有优势也已经失去。我想如果不是公司项目需要，我已经可以把AS作为我的Android主打开发环境了。另外据说1.3开始，gradle脚本的速度也会得到优化，因此希望在AS这个官方的平台上能够有更多优化的体验。\n\n<!-- more -->\n\n下面我还是以自己的AS 1.2.1.1 stable版的AS介绍一些我的学习经验。\n\n\n# 1. Android Studio安装配置\n\n## 1.1 下载、安装和配置\n\n首先最重要的一步！！**科学上网**！！官网[下载](https://developer.android.com/sdk/index.html)最新版的AS安装文件，Windows下对应的是exe文件，MAC下应该是一个dmg文件，安装过程很简单方便。\n\n**（1）解决Fetching android sdk component information卡住的问题**\n\n安装完成后，打开Android Studio的时候可能常常会卡在启动界面 **“Fetching android sdk component information”** 上，这是因为AS启动时会去获取SDK组件信息，然而我们现在还没有去给Android Studio的SDK组件配置代理，因为可能会非常慢，甚至没有速度。\n\n**解决办法是->** 进入刚安装的Android Studio目录，打开`bin`文件夹，找到`idea.properties`文件，用文本编辑器打开。在文件末尾添加一行：\n> disable.android.first.run =true\n\n，保存。然后在任务管理器中关闭Android Studio，重新启动即可。\n\n**（2）设置SDK、JDK目录**\n\n安装完成以后，打开AS。进入的是`Android Studio Setup Wizard`界面，如下所示。\n\n![hello AS](/content/images/helloWizard.png)\n\n这里会引导我们进行一些IDE的基本设置。包括你的Android SDK目录设置等等，这里我推荐点击`Cancel`跳过，因为我们原来在Eclipse环境下开发的时候，已经下载过Android SDK了。只需要在进入AS以后，再把SDK的目录设置为原来的SDK就好，免去下载新的sdk的麻烦，国内这个环境，就是有代理也是很慢的。跳过设置向导以后，进入AS的欢迎首页。\n\n![hello AS](/content/images/helloAS.png)\n\n接着，选择界面上`Configure->Project Defaults`，进入之后再选择`Project Structure`。到这里就可以把Android SDK和JDK的目录设置为我们之前已经有的目录了。\n\n![hello SDK](/content/images/helloSDK.png)\n\n**注意:** AS需要的JDK版本必须在1.7以上，因为AS默认使用gradle打包。\n\n\n**（3）设置主题、字体设置，网络代理**\n\n设置了SDK、JDK目录以后，我们可以再给AS做一个基本的设置，为了让这个IDE更加顺手好用。回到AS的首页，选择`Configure->Settings`，进入下面的界面。\n\n![hello Settings](/content/images/helloSettings.png)\n\n首先，在`Appearance & Behavior->Appeara`选择`Darcula`主题，字体可以调大一些。这样整个AS就变成黑色背景的主题了，看着舒服很多。\n\n然后是代理的配置，在Settings界面左侧的菜单栏中，最上面有一个搜索框，可以直接搜索各种设置选项，我们输入`proxy`，即可跳转到代理设置的界面，如图所示我把代理设置为公司的`xxx-proxy.oa.com`。这样以后我们就可以使用AS自动更新了。所以大家一定要去搞一个自己的翻墙代理。。\n\n![hello Proxy](/content/images/helloProxy.png)\n\n（4）新建一个test项目\n\n完成了上面的设置以后，我们使用AS的新建一个test项目。回到AS的欢迎主页，点击`Start a new Android Studio Project`，如下如所示设置应用的名称为`TestApplication`，选择项目目录。\n\n![hello Proxy](/content/images/helloCreatTestApplicaiton.png)\n\n然后选择Minimum SDK的版本。接着一路点`next`直到`finish`。\n\n![hello Proxy](/content/images/helloCreatTestApplicaiton2.png)\n\n进入代码编辑界面。突然发现`Code Editor`字体很小，原来是刚才设置的Appearance的字体只是IDE的字体，没有给编辑器设置字体大小，没关系，我们在菜单栏里依次选择`File->Settings`，然后搜索`font`，点击`Save AS...`，然后把字号Size由`12`改成`18`，字体Primary font改成`Consolas`，最后点击`OK`即可保存。\n\n![hello Proxy](/content/images/helloFont.png)\n\n这样，就使用AS建立了一个Test项目。\n\n**PS** ：实际操作时，并没有一次就搞定这么简单的一个新建项目，可能有的朋友会碰到像我一样的问题，就是这个新建的项目中，`Module app`的`gradle`脚本默认使用了最新的`buildToolsVersion \"23.0.0 rc\"`（因为我把SDK和buildTools都更新到最新版了，默认应该是选择最新的版本来build），因此遇到了 **`Execution failed for task ':app:compileDebugAidl': aidl is missing`** 的问题，解决办法很简单，把`Module app`的`gradle`脚本修改一下，使用22.0.1的buildTools就好了。\n\n关于AS项目结构以及gradle脚本的知识，下面有介绍。\n\n\n\n## 1.2 Android Studio项目结构\n\n\nAndroid Studio的项目结构和Eclipse下有很大不同，首先最不一样的地方是：一个窗口下只能有一个项目，类似于一个工作空间下面只有一个项目的概念。\n\n新建了一个Test项目以后，我们可以看到AS项目的结构如下所示。\n\n![hello Structure](/content/images/helloStructure.png)\n\n这是一个**Android视图**下的AS项目结构，你可以在目录下看到`app`和`gradle`两个大分类。在`app`下有我们熟悉的`manifest`，`res`，还有一个`java`文件夹，这个`java`文件夹里面就存放着java的源代码和Application的源代码，它们各自又是按照包名组织起来的。`gradle`文件夹包含了项目的gradle脚本和gradle配置文件，其中包含了两个重要的gradle脚本文件，一个是`build.gradle(Project: TestApplication)`，这个脚本代表着整个项目的gradle脚本，其中具体的语法见另外一篇博客[Android Studio Gradle打包实践之多渠道+版本号管理](http://unclechen.github.io/2015/10/22/Android%20Studio%20Gradle%E6%89%93%E5%8C%85%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%A4%9A%E6%B8%A0%E9%81%93+%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86/)。另外一个是`build.gradle(Module: app)`，这个脚本是app的gradle脚本。\n\n除了 **Android视图**下的AS结构以外，还有一种新的视图结构 **project视图** 下的AS结构，如下图所示。\n\n![hello Structure](/content/images/helloStructure2.png)\n\n这种视图下的结构和Eclipse下的结构有几分相似。在这个视图下很容看到module app目录下和project目录下分别有一个gradle脚本文件，这两个文件对于编译、打包都非常重要。\n\n关于Project和Module的概念，可以这么理解。Project类似一个workspace，因此一个Project可以包含多个Module，例如我们可以把引用的library作为一个Module放到里面来。关于Project和Module的gradle脚本，我们可以参考谷歌官方的[New Build System](http://tools.android.com/tech-docs/new-build-system)用户手册，后续我也会有一篇[gradle的总结]()出来。\n\n\n\n## 1.3 国内Android SDK升级方法\n\n做Android开发的朋友都知道，当Google被墙掉之后，真的是太不方便了，什么新的东西，好用的资源都没法及时的得到。所以我们一定需要一个代理。但是国内也有很多组织，为大家带来了很多福利，比如Android SDK，就有东软的镜像，下面介绍一下怎么设置。\n\n启动`Android SDK Manager`，在主界面上方的菜单栏里依次选择`Tools->Options`，弹出`Android SDK Manager Settings`窗口中，如下图所示。\n\n![hello SDKProxy](/content/images/helloSDKProxy.png)\n\n分别在`HTTP Proxy Server`输入`mirrors.neusoft.edu.cn`，`HTTP Proxy Port`中输入`80`。然后勾选中`Force https://... sources to be fetched using http://...`，最后点击`close`按钮关闭设置。回到`Android SDK Manager Settings`窗口以后，一般会自定刷新重新加载，如果没有自动刷新的话，可以依次手动点击菜单栏中的`Pakages->Reload`，然后就可以飞速地更新最新的Android SDK了。\n\n可以看到我已经下载了最新的Android M SDK预览版，不过我用的是公司的代理，但其实速度还没有东软这个快呢。\n\n## 1.4 Eclipse项目迁移到Android Studio\n\n最新版的AS已经支持直接导入Eclipse项目了。（不需要向像原来那样，先从Eclipse导出一个gradle script，再导入到AS中）\n\n这里有[官方的迁移教程](https://developer.android.com/sdk/installing/migrate.html)，大家还是多看官方教程，这样其实是最有效率的。\n\n导入Eclipse的项目后，AS会在项目的目录文件夹下生成一个`import-summary.txt`，这里面有导入过程的一些问题，导入进来的项目可能不一定立刻就能build，但是通过看导入报告，我们可以将有问题的地方一一修复，最后成功迁移到AS上来。相信我，我一开始的时候也是非常痛苦的，花了很多时间以后最终也就摸索出来了。StackOverflow真的是个好东西啊。\n\n## 1.5 Eclipse项目迁移到Android Studio后代码、资源文件的结构该怎么管理？\n\n有两种方案：两种方案的区别就是文件结构应该如何配置。\n\n### 方案1：直接按照Android Studio标准的结构配置\n\n在`build.gradle(Module: app)`中的android闭包中，添加 **sourceSets** 属性，并按照下面配置来写。\n\n```\nsourceSets {\n        main {\n            manifest.srcFile 'src/main/AndroidManifest.xml'\n            jniLibs.srcDirs = ['libs']\n            java.srcDirs = ['src/main/java']\n            resources.srcDirs = ['src/main/res']\n            aidl.srcDirs = ['src/main/aidl']\n            assets.srcDirs = ['src/main/assets']\n        }\n    }\n```\n\n### 方案2：不改变Eclipse原有结构，使用Android Studio + Gradle来开发。\n\n在`build.gradle(Module: app)`中的android闭包中，添加 **sourceSets** 属性，按照下面的配置来写。\n\n```\nsourceSets {\n        main {\n            manifest.srcFile 'AndroidManifest.xml'\n            jniLibs.srcDirs = ['libs']\n            java.srcDirs = ['src']\n            resources.srcDirs = ['res']\n            aidl.srcDirs = ['src']\n            assets.srcDirs = ['assets']\n        }\n    }\n```\n\n可以看到，不改变Eclipse工程结构的关键就在于，在 **sourceSets** 中，按照原来的目录结构配置源代码、资源文件的路径，在Eclipse工程结构中，AndroidManifest.xml文件，libs目录，assert目录、都是和src目录同级的。而Android Studio默认的工程结构中，这几个目录都是`src/main/`中。分清楚了这一点，其实两种结构没啥影响，怎么来都行。\n\n## 1.6 常用快捷键\n\n以下摘自[Android Studio中文论坛](http://android-studio.org/)\n\nAlt+回车 导入包,自动修正\n\nCtrl+N   查找类\n\nCtrl+Shift+N 查找文件\n\nCtrl+Alt+L  格式化代码\n\nCtrl+Alt+O 优化导入的类和包\n\nAlt+Insert 生成代码(如get,set方法,构造函数等)\n\nCtrl+E或者Alt+Shift+C  最近更改的代码\n\nCtrl+R 替换文本\n\nCtrl+F 查找文本\n\nCtrl+Shift+Space 自动补全代码\n\nCtrl+空格 代码提示\n\nCtrl+Alt+Space 类名或接口名提示\n\nCtrl+P 方法参数提示\n\nCtrl+Shift+Alt+N 查找类中的方法或变量\n\nAlt+Shift+C 对比最近修改的代码\n\nShift+F6  Refactor下的Rename\n\nCtrl+Y 删除行\n\nCtrl+D 复制行\n\nCtrl+/ 或 Ctrl+Shift+/  注释（// 或者 ）\n\nCtrl+H 显示类结构图\n\nCtrl+Q 显示注释文档\n\nAlt+F1 查找代码所在位置\n\nAlt+1 快速打开或隐藏工程面板\n\nCtrl+Alt+ left/right 返回至上次浏览的位置\n\nAlt+ left/right 切换代码视图\n\nAlt+ Up/Down 在方法间快速移动定位\n\nCtrl+Shift+Up/Down 代码向上/下移动。\n\nF2 或Shift+F2 高亮错误或警告快速定位\n\n选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。\n\nCtrl+W 选中代码，连续按会扩大选中的代码块\n\n选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。\n\nCtrl+Up/Down 光标跳转到第一行或最后一行下\n\nCtrl+B 快速打开光标处的类或方法 \n\n\n## PS ： 个人使用AS的一些体验\n\n- 1、Android Studio是官方的IDE，集成了开发Android应用和SDK所需要的所有组件。例如，集成命令行工具，logcat支持更多的操作，支持录屏，截屏等功能。\n\n- 2、AS使用gradle作为打包脚本，兼容Maven、Ant。其打包脚本的Groovy语法简洁，直接支持Java，与xml形式的Ant脚本相比，可读性更强（xml是给机器读的，不是给人阅读的）。gradle添加依赖也更加方便，直接在dependencies中添加一个compile即可。\n\n- 3、AS的“单Project下包含多个Module”结构，对于多模块（一个Module相当于一个Eclipse中的project）开发有非常好的优势，如果你是做sdk开发的，可以直接按照“library + sample”的形式，从开发library（sdk），打包library，调试demo到最后发布sdk + demo都非常方便。\n\n- 4、目前有很多开源项目和sdk都是通过aar的形式发布到Maven和jcenter，迁移到AS以后，可以在将来需要的时候将自己的sdk发布到Maven、jcenter。https://github.com/novoda/bintray-release\n\n- 5、编辑代码方面：模糊匹配非常强大，对Android和Java的语法检查也更加严谨（查找类的实现，支持弹窗中直接查看，代码之间的引用检查），自带代码分析工具，生成的report可以很清楚地看出代码中有哪里可能存在问题。\n\n- 6、AS有很多好用的插件，并且随着官方对AS的不断改进和支持，在这上面开发插件的人也越来越多，有很多好用的插件可以方便配置进来，这些插件不支持Eclipse（ADT插件已经停止更新）。\n\n\n***\n\n今年的开发者大会上我比较关注的还是Android在系统上的一些改进，以及Material Design的一些最新实践。当我打开IO大会官网看到他们用polymer写的网页时，感觉还是非常不错的。虽然我是一个比较极端的人，但是我看待Native App VS Web的问题上没有那么绝对，学技术的可以多积累点动手实践的经验，业务需要的时候再深挖。","slug":"Android Studio安装配置笔记","published":1,"updated":"2018-05-13T07:13:37.000Z","photos":["/content/images/cover/helloAndroidStudioAndGradle.png"],"comments":1,"link":"","_id":"cjh4tf8dr0008mtsxn762bd56","content":"<p>2015年5月29号凌晨，第一次翻墙看了谷歌开发者大会的直播，还特意跑到车库咖啡和一堆GDG开发者一起看的直播。现场来了一些Android、Google开发大牛，介绍了他们对于最新的Android、Google技术的体验。加上谷歌官方宣布了1.3beta版本的<a href=\"https://developer.android.com/sdk/index.html\" target=\"_blank\" rel=\"noopener\">Android Studio</a>已经支持NDK开发，这样一来貌似Eclipse在Android开发方面的最后一个独有优势也已经失去。我想如果不是公司项目需要，我已经可以把AS作为我的Android主打开发环境了。另外据说1.3开始，gradle脚本的速度也会得到优化，因此希望在AS这个官方的平台上能够有更多优化的体验。</p>\n<a id=\"more\"></a>\n<p>下面我还是以自己的AS 1.2.1.1 stable版的AS介绍一些我的学习经验。</p>\n<h1 id=\"1-Android-Studio安装配置\"><a href=\"#1-Android-Studio安装配置\" class=\"headerlink\" title=\"1. Android Studio安装配置\"></a>1. Android Studio安装配置</h1><h2 id=\"1-1-下载、安装和配置\"><a href=\"#1-1-下载、安装和配置\" class=\"headerlink\" title=\"1.1 下载、安装和配置\"></a>1.1 下载、安装和配置</h2><p>首先最重要的一步！！<strong>科学上网</strong>！！官网<a href=\"https://developer.android.com/sdk/index.html\" target=\"_blank\" rel=\"noopener\">下载</a>最新版的AS安装文件，Windows下对应的是exe文件，MAC下应该是一个dmg文件，安装过程很简单方便。</p>\n<p><strong>（1）解决Fetching android sdk component information卡住的问题</strong></p>\n<p>安装完成后，打开Android Studio的时候可能常常会卡在启动界面 <strong>“Fetching android sdk component information”</strong> 上，这是因为AS启动时会去获取SDK组件信息，然而我们现在还没有去给Android Studio的SDK组件配置代理，因为可能会非常慢，甚至没有速度。</p>\n<p><strong>解决办法是-&gt;</strong> 进入刚安装的Android Studio目录，打开<code>bin</code>文件夹，找到<code>idea.properties</code>文件，用文本编辑器打开。在文件末尾添加一行：</p>\n<blockquote>\n<p>disable.android.first.run =true</p>\n</blockquote>\n<p>，保存。然后在任务管理器中关闭Android Studio，重新启动即可。</p>\n<p><strong>（2）设置SDK、JDK目录</strong></p>\n<p>安装完成以后，打开AS。进入的是<code>Android Studio Setup Wizard</code>界面，如下所示。</p>\n<p><img src=\"/content/images/helloWizard.png\" alt=\"hello AS\"></p>\n<p>这里会引导我们进行一些IDE的基本设置。包括你的Android SDK目录设置等等，这里我推荐点击<code>Cancel</code>跳过，因为我们原来在Eclipse环境下开发的时候，已经下载过Android SDK了。只需要在进入AS以后，再把SDK的目录设置为原来的SDK就好，免去下载新的sdk的麻烦，国内这个环境，就是有代理也是很慢的。跳过设置向导以后，进入AS的欢迎首页。</p>\n<p><img src=\"/content/images/helloAS.png\" alt=\"hello AS\"></p>\n<p>接着，选择界面上<code>Configure-&gt;Project Defaults</code>，进入之后再选择<code>Project Structure</code>。到这里就可以把Android SDK和JDK的目录设置为我们之前已经有的目录了。</p>\n<p><img src=\"/content/images/helloSDK.png\" alt=\"hello SDK\"></p>\n<p><strong>注意:</strong> AS需要的JDK版本必须在1.7以上，因为AS默认使用gradle打包。</p>\n<p><strong>（3）设置主题、字体设置，网络代理</strong></p>\n<p>设置了SDK、JDK目录以后，我们可以再给AS做一个基本的设置，为了让这个IDE更加顺手好用。回到AS的首页，选择<code>Configure-&gt;Settings</code>，进入下面的界面。</p>\n<p><img src=\"/content/images/helloSettings.png\" alt=\"hello Settings\"></p>\n<p>首先，在<code>Appearance &amp; Behavior-&gt;Appeara</code>选择<code>Darcula</code>主题，字体可以调大一些。这样整个AS就变成黑色背景的主题了，看着舒服很多。</p>\n<p>然后是代理的配置，在Settings界面左侧的菜单栏中，最上面有一个搜索框，可以直接搜索各种设置选项，我们输入<code>proxy</code>，即可跳转到代理设置的界面，如图所示我把代理设置为公司的<code>xxx-proxy.oa.com</code>。这样以后我们就可以使用AS自动更新了。所以大家一定要去搞一个自己的翻墙代理。。</p>\n<p><img src=\"/content/images/helloProxy.png\" alt=\"hello Proxy\"></p>\n<p>（4）新建一个test项目</p>\n<p>完成了上面的设置以后，我们使用AS的新建一个test项目。回到AS的欢迎主页，点击<code>Start a new Android Studio Project</code>，如下如所示设置应用的名称为<code>TestApplication</code>，选择项目目录。</p>\n<p><img src=\"/content/images/helloCreatTestApplicaiton.png\" alt=\"hello Proxy\"></p>\n<p>然后选择Minimum SDK的版本。接着一路点<code>next</code>直到<code>finish</code>。</p>\n<p><img src=\"/content/images/helloCreatTestApplicaiton2.png\" alt=\"hello Proxy\"></p>\n<p>进入代码编辑界面。突然发现<code>Code Editor</code>字体很小，原来是刚才设置的Appearance的字体只是IDE的字体，没有给编辑器设置字体大小，没关系，我们在菜单栏里依次选择<code>File-&gt;Settings</code>，然后搜索<code>font</code>，点击<code>Save AS...</code>，然后把字号Size由<code>12</code>改成<code>18</code>，字体Primary font改成<code>Consolas</code>，最后点击<code>OK</code>即可保存。</p>\n<p><img src=\"/content/images/helloFont.png\" alt=\"hello Proxy\"></p>\n<p>这样，就使用AS建立了一个Test项目。</p>\n<p><strong>PS</strong> ：实际操作时，并没有一次就搞定这么简单的一个新建项目，可能有的朋友会碰到像我一样的问题，就是这个新建的项目中，<code>Module app</code>的<code>gradle</code>脚本默认使用了最新的<code>buildToolsVersion &quot;23.0.0 rc&quot;</code>（因为我把SDK和buildTools都更新到最新版了，默认应该是选择最新的版本来build），因此遇到了 <strong><code>Execution failed for task &#39;:app:compileDebugAidl&#39;: aidl is missing</code></strong> 的问题，解决办法很简单，把<code>Module app</code>的<code>gradle</code>脚本修改一下，使用22.0.1的buildTools就好了。</p>\n<p>关于AS项目结构以及gradle脚本的知识，下面有介绍。</p>\n<h2 id=\"1-2-Android-Studio项目结构\"><a href=\"#1-2-Android-Studio项目结构\" class=\"headerlink\" title=\"1.2 Android Studio项目结构\"></a>1.2 Android Studio项目结构</h2><p>Android Studio的项目结构和Eclipse下有很大不同，首先最不一样的地方是：一个窗口下只能有一个项目，类似于一个工作空间下面只有一个项目的概念。</p>\n<p>新建了一个Test项目以后，我们可以看到AS项目的结构如下所示。</p>\n<p><img src=\"/content/images/helloStructure.png\" alt=\"hello Structure\"></p>\n<p>这是一个<strong>Android视图</strong>下的AS项目结构，你可以在目录下看到<code>app</code>和<code>gradle</code>两个大分类。在<code>app</code>下有我们熟悉的<code>manifest</code>，<code>res</code>，还有一个<code>java</code>文件夹，这个<code>java</code>文件夹里面就存放着java的源代码和Application的源代码，它们各自又是按照包名组织起来的。<code>gradle</code>文件夹包含了项目的gradle脚本和gradle配置文件，其中包含了两个重要的gradle脚本文件，一个是<code>build.gradle(Project: TestApplication)</code>，这个脚本代表着整个项目的gradle脚本，其中具体的语法见另外一篇博客<a href=\"http://unclechen.github.io/2015/10/22/Android%20Studio%20Gradle%E6%89%93%E5%8C%85%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%A4%9A%E6%B8%A0%E9%81%93+%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86/\">Android Studio Gradle打包实践之多渠道+版本号管理</a>。另外一个是<code>build.gradle(Module: app)</code>，这个脚本是app的gradle脚本。</p>\n<p>除了 <strong>Android视图</strong>下的AS结构以外，还有一种新的视图结构 <strong>project视图</strong> 下的AS结构，如下图所示。</p>\n<p><img src=\"/content/images/helloStructure2.png\" alt=\"hello Structure\"></p>\n<p>这种视图下的结构和Eclipse下的结构有几分相似。在这个视图下很容看到module app目录下和project目录下分别有一个gradle脚本文件，这两个文件对于编译、打包都非常重要。</p>\n<p>关于Project和Module的概念，可以这么理解。Project类似一个workspace，因此一个Project可以包含多个Module，例如我们可以把引用的library作为一个Module放到里面来。关于Project和Module的gradle脚本，我们可以参考谷歌官方的<a href=\"http://tools.android.com/tech-docs/new-build-system\" target=\"_blank\" rel=\"noopener\">New Build System</a>用户手册，后续我也会有一篇<a href=\"\">gradle的总结</a>出来。</p>\n<h2 id=\"1-3-国内Android-SDK升级方法\"><a href=\"#1-3-国内Android-SDK升级方法\" class=\"headerlink\" title=\"1.3 国内Android SDK升级方法\"></a>1.3 国内Android SDK升级方法</h2><p>做Android开发的朋友都知道，当Google被墙掉之后，真的是太不方便了，什么新的东西，好用的资源都没法及时的得到。所以我们一定需要一个代理。但是国内也有很多组织，为大家带来了很多福利，比如Android SDK，就有东软的镜像，下面介绍一下怎么设置。</p>\n<p>启动<code>Android SDK Manager</code>，在主界面上方的菜单栏里依次选择<code>Tools-&gt;Options</code>，弹出<code>Android SDK Manager Settings</code>窗口中，如下图所示。</p>\n<p><img src=\"/content/images/helloSDKProxy.png\" alt=\"hello SDKProxy\"></p>\n<p>分别在<code>HTTP Proxy Server</code>输入<code>mirrors.neusoft.edu.cn</code>，<code>HTTP Proxy Port</code>中输入<code>80</code>。然后勾选中<code>Force https://... sources to be fetched using http://...</code>，最后点击<code>close</code>按钮关闭设置。回到<code>Android SDK Manager Settings</code>窗口以后，一般会自定刷新重新加载，如果没有自动刷新的话，可以依次手动点击菜单栏中的<code>Pakages-&gt;Reload</code>，然后就可以飞速地更新最新的Android SDK了。</p>\n<p>可以看到我已经下载了最新的Android M SDK预览版，不过我用的是公司的代理，但其实速度还没有东软这个快呢。</p>\n<h2 id=\"1-4-Eclipse项目迁移到Android-Studio\"><a href=\"#1-4-Eclipse项目迁移到Android-Studio\" class=\"headerlink\" title=\"1.4 Eclipse项目迁移到Android Studio\"></a>1.4 Eclipse项目迁移到Android Studio</h2><p>最新版的AS已经支持直接导入Eclipse项目了。（不需要向像原来那样，先从Eclipse导出一个gradle script，再导入到AS中）</p>\n<p>这里有<a href=\"https://developer.android.com/sdk/installing/migrate.html\" target=\"_blank\" rel=\"noopener\">官方的迁移教程</a>，大家还是多看官方教程，这样其实是最有效率的。</p>\n<p>导入Eclipse的项目后，AS会在项目的目录文件夹下生成一个<code>import-summary.txt</code>，这里面有导入过程的一些问题，导入进来的项目可能不一定立刻就能build，但是通过看导入报告，我们可以将有问题的地方一一修复，最后成功迁移到AS上来。相信我，我一开始的时候也是非常痛苦的，花了很多时间以后最终也就摸索出来了。StackOverflow真的是个好东西啊。</p>\n<h2 id=\"1-5-Eclipse项目迁移到Android-Studio后代码、资源文件的结构该怎么管理？\"><a href=\"#1-5-Eclipse项目迁移到Android-Studio后代码、资源文件的结构该怎么管理？\" class=\"headerlink\" title=\"1.5 Eclipse项目迁移到Android Studio后代码、资源文件的结构该怎么管理？\"></a>1.5 Eclipse项目迁移到Android Studio后代码、资源文件的结构该怎么管理？</h2><p>有两种方案：两种方案的区别就是文件结构应该如何配置。</p>\n<h3 id=\"方案1：直接按照Android-Studio标准的结构配置\"><a href=\"#方案1：直接按照Android-Studio标准的结构配置\" class=\"headerlink\" title=\"方案1：直接按照Android Studio标准的结构配置\"></a>方案1：直接按照Android Studio标准的结构配置</h3><p>在<code>build.gradle(Module: app)</code>中的android闭包中，添加 <strong>sourceSets</strong> 属性，并按照下面配置来写。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sourceSets &#123;</span><br><span class=\"line\">        main &#123;</span><br><span class=\"line\">            manifest<span class=\"selector-class\">.srcFile</span> <span class=\"string\">'src/main/AndroidManifest.xml'</span></span><br><span class=\"line\">            jniLibs<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'libs'</span>]</span><br><span class=\"line\">            java<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'src/main/java'</span>]</span><br><span class=\"line\">            resources<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'src/main/res'</span>]</span><br><span class=\"line\">            aidl<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'src/main/aidl'</span>]</span><br><span class=\"line\">            assets<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'src/main/assets'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方案2：不改变Eclipse原有结构，使用Android-Studio-Gradle来开发。\"><a href=\"#方案2：不改变Eclipse原有结构，使用Android-Studio-Gradle来开发。\" class=\"headerlink\" title=\"方案2：不改变Eclipse原有结构，使用Android Studio + Gradle来开发。\"></a>方案2：不改变Eclipse原有结构，使用Android Studio + Gradle来开发。</h3><p>在<code>build.gradle(Module: app)</code>中的android闭包中，添加 <strong>sourceSets</strong> 属性，按照下面的配置来写。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sourceSets &#123;</span><br><span class=\"line\">        main &#123;</span><br><span class=\"line\">            manifest<span class=\"selector-class\">.srcFile</span> <span class=\"string\">'AndroidManifest.xml'</span></span><br><span class=\"line\">            jniLibs<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'libs'</span>]</span><br><span class=\"line\">            java<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'src'</span>]</span><br><span class=\"line\">            resources<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'res'</span>]</span><br><span class=\"line\">            aidl<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'src'</span>]</span><br><span class=\"line\">            assets<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'assets'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，不改变Eclipse工程结构的关键就在于，在 <strong>sourceSets</strong> 中，按照原来的目录结构配置源代码、资源文件的路径，在Eclipse工程结构中，AndroidManifest.xml文件，libs目录，assert目录、都是和src目录同级的。而Android Studio默认的工程结构中，这几个目录都是<code>src/main/</code>中。分清楚了这一点，其实两种结构没啥影响，怎么来都行。</p>\n<h2 id=\"1-6-常用快捷键\"><a href=\"#1-6-常用快捷键\" class=\"headerlink\" title=\"1.6 常用快捷键\"></a>1.6 常用快捷键</h2><p>以下摘自<a href=\"http://android-studio.org/\" target=\"_blank\" rel=\"noopener\">Android Studio中文论坛</a></p>\n<p>Alt+回车 导入包,自动修正</p>\n<p>Ctrl+N   查找类</p>\n<p>Ctrl+Shift+N 查找文件</p>\n<p>Ctrl+Alt+L  格式化代码</p>\n<p>Ctrl+Alt+O 优化导入的类和包</p>\n<p>Alt+Insert 生成代码(如get,set方法,构造函数等)</p>\n<p>Ctrl+E或者Alt+Shift+C  最近更改的代码</p>\n<p>Ctrl+R 替换文本</p>\n<p>Ctrl+F 查找文本</p>\n<p>Ctrl+Shift+Space 自动补全代码</p>\n<p>Ctrl+空格 代码提示</p>\n<p>Ctrl+Alt+Space 类名或接口名提示</p>\n<p>Ctrl+P 方法参数提示</p>\n<p>Ctrl+Shift+Alt+N 查找类中的方法或变量</p>\n<p>Alt+Shift+C 对比最近修改的代码</p>\n<p>Shift+F6  Refactor下的Rename</p>\n<p>Ctrl+Y 删除行</p>\n<p>Ctrl+D 复制行</p>\n<p>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者 ）</p>\n<p>Ctrl+H 显示类结构图</p>\n<p>Ctrl+Q 显示注释文档</p>\n<p>Alt+F1 查找代码所在位置</p>\n<p>Alt+1 快速打开或隐藏工程面板</p>\n<p>Ctrl+Alt+ left/right 返回至上次浏览的位置</p>\n<p>Alt+ left/right 切换代码视图</p>\n<p>Alt+ Up/Down 在方法间快速移动定位</p>\n<p>Ctrl+Shift+Up/Down 代码向上/下移动。</p>\n<p>F2 或Shift+F2 高亮错误或警告快速定位</p>\n<p>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。</p>\n<p>Ctrl+W 选中代码，连续按会扩大选中的代码块</p>\n<p>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。</p>\n<p>Ctrl+Up/Down 光标跳转到第一行或最后一行下</p>\n<p>Ctrl+B 快速打开光标处的类或方法 </p>\n<h2 id=\"PS-：-个人使用AS的一些体验\"><a href=\"#PS-：-个人使用AS的一些体验\" class=\"headerlink\" title=\"PS ： 个人使用AS的一些体验\"></a>PS ： 个人使用AS的一些体验</h2><ul>\n<li><p>1、Android Studio是官方的IDE，集成了开发Android应用和SDK所需要的所有组件。例如，集成命令行工具，logcat支持更多的操作，支持录屏，截屏等功能。</p>\n</li>\n<li><p>2、AS使用gradle作为打包脚本，兼容Maven、Ant。其打包脚本的Groovy语法简洁，直接支持Java，与xml形式的Ant脚本相比，可读性更强（xml是给机器读的，不是给人阅读的）。gradle添加依赖也更加方便，直接在dependencies中添加一个compile即可。</p>\n</li>\n<li><p>3、AS的“单Project下包含多个Module”结构，对于多模块（一个Module相当于一个Eclipse中的project）开发有非常好的优势，如果你是做sdk开发的，可以直接按照“library + sample”的形式，从开发library（sdk），打包library，调试demo到最后发布sdk + demo都非常方便。</p>\n</li>\n<li><p>4、目前有很多开源项目和sdk都是通过aar的形式发布到Maven和jcenter，迁移到AS以后，可以在将来需要的时候将自己的sdk发布到Maven、jcenter。<a href=\"https://github.com/novoda/bintray-release\" target=\"_blank\" rel=\"noopener\">https://github.com/novoda/bintray-release</a></p>\n</li>\n<li><p>5、编辑代码方面：模糊匹配非常强大，对Android和Java的语法检查也更加严谨（查找类的实现，支持弹窗中直接查看，代码之间的引用检查），自带代码分析工具，生成的report可以很清楚地看出代码中有哪里可能存在问题。</p>\n</li>\n<li><p>6、AS有很多好用的插件，并且随着官方对AS的不断改进和支持，在这上面开发插件的人也越来越多，有很多好用的插件可以方便配置进来，这些插件不支持Eclipse（ADT插件已经停止更新）。</p>\n</li>\n</ul>\n<hr>\n<p>今年的开发者大会上我比较关注的还是Android在系统上的一些改进，以及Material Design的一些最新实践。当我打开IO大会官网看到他们用polymer写的网页时，感觉还是非常不错的。虽然我是一个比较极端的人，但是我看待Native App VS Web的问题上没有那么绝对，学技术的可以多积累点动手实践的经验，业务需要的时候再深挖。</p>\n","site":{"data":{}},"excerpt":"<p>2015年5月29号凌晨，第一次翻墙看了谷歌开发者大会的直播，还特意跑到车库咖啡和一堆GDG开发者一起看的直播。现场来了一些Android、Google开发大牛，介绍了他们对于最新的Android、Google技术的体验。加上谷歌官方宣布了1.3beta版本的<a href=\"https://developer.android.com/sdk/index.html\" target=\"_blank\" rel=\"noopener\">Android Studio</a>已经支持NDK开发，这样一来貌似Eclipse在Android开发方面的最后一个独有优势也已经失去。我想如果不是公司项目需要，我已经可以把AS作为我的Android主打开发环境了。另外据说1.3开始，gradle脚本的速度也会得到优化，因此希望在AS这个官方的平台上能够有更多优化的体验。</p>","more":"<p>下面我还是以自己的AS 1.2.1.1 stable版的AS介绍一些我的学习经验。</p>\n<h1 id=\"1-Android-Studio安装配置\"><a href=\"#1-Android-Studio安装配置\" class=\"headerlink\" title=\"1. Android Studio安装配置\"></a>1. Android Studio安装配置</h1><h2 id=\"1-1-下载、安装和配置\"><a href=\"#1-1-下载、安装和配置\" class=\"headerlink\" title=\"1.1 下载、安装和配置\"></a>1.1 下载、安装和配置</h2><p>首先最重要的一步！！<strong>科学上网</strong>！！官网<a href=\"https://developer.android.com/sdk/index.html\" target=\"_blank\" rel=\"noopener\">下载</a>最新版的AS安装文件，Windows下对应的是exe文件，MAC下应该是一个dmg文件，安装过程很简单方便。</p>\n<p><strong>（1）解决Fetching android sdk component information卡住的问题</strong></p>\n<p>安装完成后，打开Android Studio的时候可能常常会卡在启动界面 <strong>“Fetching android sdk component information”</strong> 上，这是因为AS启动时会去获取SDK组件信息，然而我们现在还没有去给Android Studio的SDK组件配置代理，因为可能会非常慢，甚至没有速度。</p>\n<p><strong>解决办法是-&gt;</strong> 进入刚安装的Android Studio目录，打开<code>bin</code>文件夹，找到<code>idea.properties</code>文件，用文本编辑器打开。在文件末尾添加一行：</p>\n<blockquote>\n<p>disable.android.first.run =true</p>\n</blockquote>\n<p>，保存。然后在任务管理器中关闭Android Studio，重新启动即可。</p>\n<p><strong>（2）设置SDK、JDK目录</strong></p>\n<p>安装完成以后，打开AS。进入的是<code>Android Studio Setup Wizard</code>界面，如下所示。</p>\n<p><img src=\"/content/images/helloWizard.png\" alt=\"hello AS\"></p>\n<p>这里会引导我们进行一些IDE的基本设置。包括你的Android SDK目录设置等等，这里我推荐点击<code>Cancel</code>跳过，因为我们原来在Eclipse环境下开发的时候，已经下载过Android SDK了。只需要在进入AS以后，再把SDK的目录设置为原来的SDK就好，免去下载新的sdk的麻烦，国内这个环境，就是有代理也是很慢的。跳过设置向导以后，进入AS的欢迎首页。</p>\n<p><img src=\"/content/images/helloAS.png\" alt=\"hello AS\"></p>\n<p>接着，选择界面上<code>Configure-&gt;Project Defaults</code>，进入之后再选择<code>Project Structure</code>。到这里就可以把Android SDK和JDK的目录设置为我们之前已经有的目录了。</p>\n<p><img src=\"/content/images/helloSDK.png\" alt=\"hello SDK\"></p>\n<p><strong>注意:</strong> AS需要的JDK版本必须在1.7以上，因为AS默认使用gradle打包。</p>\n<p><strong>（3）设置主题、字体设置，网络代理</strong></p>\n<p>设置了SDK、JDK目录以后，我们可以再给AS做一个基本的设置，为了让这个IDE更加顺手好用。回到AS的首页，选择<code>Configure-&gt;Settings</code>，进入下面的界面。</p>\n<p><img src=\"/content/images/helloSettings.png\" alt=\"hello Settings\"></p>\n<p>首先，在<code>Appearance &amp; Behavior-&gt;Appeara</code>选择<code>Darcula</code>主题，字体可以调大一些。这样整个AS就变成黑色背景的主题了，看着舒服很多。</p>\n<p>然后是代理的配置，在Settings界面左侧的菜单栏中，最上面有一个搜索框，可以直接搜索各种设置选项，我们输入<code>proxy</code>，即可跳转到代理设置的界面，如图所示我把代理设置为公司的<code>xxx-proxy.oa.com</code>。这样以后我们就可以使用AS自动更新了。所以大家一定要去搞一个自己的翻墙代理。。</p>\n<p><img src=\"/content/images/helloProxy.png\" alt=\"hello Proxy\"></p>\n<p>（4）新建一个test项目</p>\n<p>完成了上面的设置以后，我们使用AS的新建一个test项目。回到AS的欢迎主页，点击<code>Start a new Android Studio Project</code>，如下如所示设置应用的名称为<code>TestApplication</code>，选择项目目录。</p>\n<p><img src=\"/content/images/helloCreatTestApplicaiton.png\" alt=\"hello Proxy\"></p>\n<p>然后选择Minimum SDK的版本。接着一路点<code>next</code>直到<code>finish</code>。</p>\n<p><img src=\"/content/images/helloCreatTestApplicaiton2.png\" alt=\"hello Proxy\"></p>\n<p>进入代码编辑界面。突然发现<code>Code Editor</code>字体很小，原来是刚才设置的Appearance的字体只是IDE的字体，没有给编辑器设置字体大小，没关系，我们在菜单栏里依次选择<code>File-&gt;Settings</code>，然后搜索<code>font</code>，点击<code>Save AS...</code>，然后把字号Size由<code>12</code>改成<code>18</code>，字体Primary font改成<code>Consolas</code>，最后点击<code>OK</code>即可保存。</p>\n<p><img src=\"/content/images/helloFont.png\" alt=\"hello Proxy\"></p>\n<p>这样，就使用AS建立了一个Test项目。</p>\n<p><strong>PS</strong> ：实际操作时，并没有一次就搞定这么简单的一个新建项目，可能有的朋友会碰到像我一样的问题，就是这个新建的项目中，<code>Module app</code>的<code>gradle</code>脚本默认使用了最新的<code>buildToolsVersion &quot;23.0.0 rc&quot;</code>（因为我把SDK和buildTools都更新到最新版了，默认应该是选择最新的版本来build），因此遇到了 <strong><code>Execution failed for task &#39;:app:compileDebugAidl&#39;: aidl is missing</code></strong> 的问题，解决办法很简单，把<code>Module app</code>的<code>gradle</code>脚本修改一下，使用22.0.1的buildTools就好了。</p>\n<p>关于AS项目结构以及gradle脚本的知识，下面有介绍。</p>\n<h2 id=\"1-2-Android-Studio项目结构\"><a href=\"#1-2-Android-Studio项目结构\" class=\"headerlink\" title=\"1.2 Android Studio项目结构\"></a>1.2 Android Studio项目结构</h2><p>Android Studio的项目结构和Eclipse下有很大不同，首先最不一样的地方是：一个窗口下只能有一个项目，类似于一个工作空间下面只有一个项目的概念。</p>\n<p>新建了一个Test项目以后，我们可以看到AS项目的结构如下所示。</p>\n<p><img src=\"/content/images/helloStructure.png\" alt=\"hello Structure\"></p>\n<p>这是一个<strong>Android视图</strong>下的AS项目结构，你可以在目录下看到<code>app</code>和<code>gradle</code>两个大分类。在<code>app</code>下有我们熟悉的<code>manifest</code>，<code>res</code>，还有一个<code>java</code>文件夹，这个<code>java</code>文件夹里面就存放着java的源代码和Application的源代码，它们各自又是按照包名组织起来的。<code>gradle</code>文件夹包含了项目的gradle脚本和gradle配置文件，其中包含了两个重要的gradle脚本文件，一个是<code>build.gradle(Project: TestApplication)</code>，这个脚本代表着整个项目的gradle脚本，其中具体的语法见另外一篇博客<a href=\"http://unclechen.github.io/2015/10/22/Android%20Studio%20Gradle%E6%89%93%E5%8C%85%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%A4%9A%E6%B8%A0%E9%81%93+%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86/\">Android Studio Gradle打包实践之多渠道+版本号管理</a>。另外一个是<code>build.gradle(Module: app)</code>，这个脚本是app的gradle脚本。</p>\n<p>除了 <strong>Android视图</strong>下的AS结构以外，还有一种新的视图结构 <strong>project视图</strong> 下的AS结构，如下图所示。</p>\n<p><img src=\"/content/images/helloStructure2.png\" alt=\"hello Structure\"></p>\n<p>这种视图下的结构和Eclipse下的结构有几分相似。在这个视图下很容看到module app目录下和project目录下分别有一个gradle脚本文件，这两个文件对于编译、打包都非常重要。</p>\n<p>关于Project和Module的概念，可以这么理解。Project类似一个workspace，因此一个Project可以包含多个Module，例如我们可以把引用的library作为一个Module放到里面来。关于Project和Module的gradle脚本，我们可以参考谷歌官方的<a href=\"http://tools.android.com/tech-docs/new-build-system\" target=\"_blank\" rel=\"noopener\">New Build System</a>用户手册，后续我也会有一篇<a href=\"\">gradle的总结</a>出来。</p>\n<h2 id=\"1-3-国内Android-SDK升级方法\"><a href=\"#1-3-国内Android-SDK升级方法\" class=\"headerlink\" title=\"1.3 国内Android SDK升级方法\"></a>1.3 国内Android SDK升级方法</h2><p>做Android开发的朋友都知道，当Google被墙掉之后，真的是太不方便了，什么新的东西，好用的资源都没法及时的得到。所以我们一定需要一个代理。但是国内也有很多组织，为大家带来了很多福利，比如Android SDK，就有东软的镜像，下面介绍一下怎么设置。</p>\n<p>启动<code>Android SDK Manager</code>，在主界面上方的菜单栏里依次选择<code>Tools-&gt;Options</code>，弹出<code>Android SDK Manager Settings</code>窗口中，如下图所示。</p>\n<p><img src=\"/content/images/helloSDKProxy.png\" alt=\"hello SDKProxy\"></p>\n<p>分别在<code>HTTP Proxy Server</code>输入<code>mirrors.neusoft.edu.cn</code>，<code>HTTP Proxy Port</code>中输入<code>80</code>。然后勾选中<code>Force https://... sources to be fetched using http://...</code>，最后点击<code>close</code>按钮关闭设置。回到<code>Android SDK Manager Settings</code>窗口以后，一般会自定刷新重新加载，如果没有自动刷新的话，可以依次手动点击菜单栏中的<code>Pakages-&gt;Reload</code>，然后就可以飞速地更新最新的Android SDK了。</p>\n<p>可以看到我已经下载了最新的Android M SDK预览版，不过我用的是公司的代理，但其实速度还没有东软这个快呢。</p>\n<h2 id=\"1-4-Eclipse项目迁移到Android-Studio\"><a href=\"#1-4-Eclipse项目迁移到Android-Studio\" class=\"headerlink\" title=\"1.4 Eclipse项目迁移到Android Studio\"></a>1.4 Eclipse项目迁移到Android Studio</h2><p>最新版的AS已经支持直接导入Eclipse项目了。（不需要向像原来那样，先从Eclipse导出一个gradle script，再导入到AS中）</p>\n<p>这里有<a href=\"https://developer.android.com/sdk/installing/migrate.html\" target=\"_blank\" rel=\"noopener\">官方的迁移教程</a>，大家还是多看官方教程，这样其实是最有效率的。</p>\n<p>导入Eclipse的项目后，AS会在项目的目录文件夹下生成一个<code>import-summary.txt</code>，这里面有导入过程的一些问题，导入进来的项目可能不一定立刻就能build，但是通过看导入报告，我们可以将有问题的地方一一修复，最后成功迁移到AS上来。相信我，我一开始的时候也是非常痛苦的，花了很多时间以后最终也就摸索出来了。StackOverflow真的是个好东西啊。</p>\n<h2 id=\"1-5-Eclipse项目迁移到Android-Studio后代码、资源文件的结构该怎么管理？\"><a href=\"#1-5-Eclipse项目迁移到Android-Studio后代码、资源文件的结构该怎么管理？\" class=\"headerlink\" title=\"1.5 Eclipse项目迁移到Android Studio后代码、资源文件的结构该怎么管理？\"></a>1.5 Eclipse项目迁移到Android Studio后代码、资源文件的结构该怎么管理？</h2><p>有两种方案：两种方案的区别就是文件结构应该如何配置。</p>\n<h3 id=\"方案1：直接按照Android-Studio标准的结构配置\"><a href=\"#方案1：直接按照Android-Studio标准的结构配置\" class=\"headerlink\" title=\"方案1：直接按照Android Studio标准的结构配置\"></a>方案1：直接按照Android Studio标准的结构配置</h3><p>在<code>build.gradle(Module: app)</code>中的android闭包中，添加 <strong>sourceSets</strong> 属性，并按照下面配置来写。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sourceSets &#123;</span><br><span class=\"line\">        main &#123;</span><br><span class=\"line\">            manifest<span class=\"selector-class\">.srcFile</span> <span class=\"string\">'src/main/AndroidManifest.xml'</span></span><br><span class=\"line\">            jniLibs<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'libs'</span>]</span><br><span class=\"line\">            java<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'src/main/java'</span>]</span><br><span class=\"line\">            resources<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'src/main/res'</span>]</span><br><span class=\"line\">            aidl<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'src/main/aidl'</span>]</span><br><span class=\"line\">            assets<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'src/main/assets'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方案2：不改变Eclipse原有结构，使用Android-Studio-Gradle来开发。\"><a href=\"#方案2：不改变Eclipse原有结构，使用Android-Studio-Gradle来开发。\" class=\"headerlink\" title=\"方案2：不改变Eclipse原有结构，使用Android Studio + Gradle来开发。\"></a>方案2：不改变Eclipse原有结构，使用Android Studio + Gradle来开发。</h3><p>在<code>build.gradle(Module: app)</code>中的android闭包中，添加 <strong>sourceSets</strong> 属性，按照下面的配置来写。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sourceSets &#123;</span><br><span class=\"line\">        main &#123;</span><br><span class=\"line\">            manifest<span class=\"selector-class\">.srcFile</span> <span class=\"string\">'AndroidManifest.xml'</span></span><br><span class=\"line\">            jniLibs<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'libs'</span>]</span><br><span class=\"line\">            java<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'src'</span>]</span><br><span class=\"line\">            resources<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'res'</span>]</span><br><span class=\"line\">            aidl<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'src'</span>]</span><br><span class=\"line\">            assets<span class=\"selector-class\">.srcDirs</span> = [<span class=\"string\">'assets'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，不改变Eclipse工程结构的关键就在于，在 <strong>sourceSets</strong> 中，按照原来的目录结构配置源代码、资源文件的路径，在Eclipse工程结构中，AndroidManifest.xml文件，libs目录，assert目录、都是和src目录同级的。而Android Studio默认的工程结构中，这几个目录都是<code>src/main/</code>中。分清楚了这一点，其实两种结构没啥影响，怎么来都行。</p>\n<h2 id=\"1-6-常用快捷键\"><a href=\"#1-6-常用快捷键\" class=\"headerlink\" title=\"1.6 常用快捷键\"></a>1.6 常用快捷键</h2><p>以下摘自<a href=\"http://android-studio.org/\" target=\"_blank\" rel=\"noopener\">Android Studio中文论坛</a></p>\n<p>Alt+回车 导入包,自动修正</p>\n<p>Ctrl+N   查找类</p>\n<p>Ctrl+Shift+N 查找文件</p>\n<p>Ctrl+Alt+L  格式化代码</p>\n<p>Ctrl+Alt+O 优化导入的类和包</p>\n<p>Alt+Insert 生成代码(如get,set方法,构造函数等)</p>\n<p>Ctrl+E或者Alt+Shift+C  最近更改的代码</p>\n<p>Ctrl+R 替换文本</p>\n<p>Ctrl+F 查找文本</p>\n<p>Ctrl+Shift+Space 自动补全代码</p>\n<p>Ctrl+空格 代码提示</p>\n<p>Ctrl+Alt+Space 类名或接口名提示</p>\n<p>Ctrl+P 方法参数提示</p>\n<p>Ctrl+Shift+Alt+N 查找类中的方法或变量</p>\n<p>Alt+Shift+C 对比最近修改的代码</p>\n<p>Shift+F6  Refactor下的Rename</p>\n<p>Ctrl+Y 删除行</p>\n<p>Ctrl+D 复制行</p>\n<p>Ctrl+/ 或 Ctrl+Shift+/  注释（// 或者 ）</p>\n<p>Ctrl+H 显示类结构图</p>\n<p>Ctrl+Q 显示注释文档</p>\n<p>Alt+F1 查找代码所在位置</p>\n<p>Alt+1 快速打开或隐藏工程面板</p>\n<p>Ctrl+Alt+ left/right 返回至上次浏览的位置</p>\n<p>Alt+ left/right 切换代码视图</p>\n<p>Alt+ Up/Down 在方法间快速移动定位</p>\n<p>Ctrl+Shift+Up/Down 代码向上/下移动。</p>\n<p>F2 或Shift+F2 高亮错误或警告快速定位</p>\n<p>选中文本，按Ctrl+Shift+F7 ，高亮显示所有该文本，按Esc高亮消失。</p>\n<p>Ctrl+W 选中代码，连续按会扩大选中的代码块</p>\n<p>选中文本，按Alt+F3 ，逐个往下查找相同文本，并高亮显示。</p>\n<p>Ctrl+Up/Down 光标跳转到第一行或最后一行下</p>\n<p>Ctrl+B 快速打开光标处的类或方法 </p>\n<h2 id=\"PS-：-个人使用AS的一些体验\"><a href=\"#PS-：-个人使用AS的一些体验\" class=\"headerlink\" title=\"PS ： 个人使用AS的一些体验\"></a>PS ： 个人使用AS的一些体验</h2><ul>\n<li><p>1、Android Studio是官方的IDE，集成了开发Android应用和SDK所需要的所有组件。例如，集成命令行工具，logcat支持更多的操作，支持录屏，截屏等功能。</p>\n</li>\n<li><p>2、AS使用gradle作为打包脚本，兼容Maven、Ant。其打包脚本的Groovy语法简洁，直接支持Java，与xml形式的Ant脚本相比，可读性更强（xml是给机器读的，不是给人阅读的）。gradle添加依赖也更加方便，直接在dependencies中添加一个compile即可。</p>\n</li>\n<li><p>3、AS的“单Project下包含多个Module”结构，对于多模块（一个Module相当于一个Eclipse中的project）开发有非常好的优势，如果你是做sdk开发的，可以直接按照“library + sample”的形式，从开发library（sdk），打包library，调试demo到最后发布sdk + demo都非常方便。</p>\n</li>\n<li><p>4、目前有很多开源项目和sdk都是通过aar的形式发布到Maven和jcenter，迁移到AS以后，可以在将来需要的时候将自己的sdk发布到Maven、jcenter。<a href=\"https://github.com/novoda/bintray-release\" target=\"_blank\" rel=\"noopener\">https://github.com/novoda/bintray-release</a></p>\n</li>\n<li><p>5、编辑代码方面：模糊匹配非常强大，对Android和Java的语法检查也更加严谨（查找类的实现，支持弹窗中直接查看，代码之间的引用检查），自带代码分析工具，生成的report可以很清楚地看出代码中有哪里可能存在问题。</p>\n</li>\n<li><p>6、AS有很多好用的插件，并且随着官方对AS的不断改进和支持，在这上面开发插件的人也越来越多，有很多好用的插件可以方便配置进来，这些插件不支持Eclipse（ADT插件已经停止更新）。</p>\n</li>\n</ul>\n<hr>\n<p>今年的开发者大会上我比较关注的还是Android在系统上的一些改进，以及Material Design的一些最新实践。当我打开IO大会官网看到他们用polymer写的网页时，感觉还是非常不错的。虽然我是一个比较极端的人，但是我看待Native App VS Web的问题上没有那么绝对，学技术的可以多积累点动手实践的经验，业务需要的时候再深挖。</p>"},{"layout":"post","title":"Android View的可见性检查方法（上）","date":"2016-10-17T00:00:00.000Z","_content":"\n# 一、背景\n\n在Android开发中有时候会遇到需要检查一个View是不是对用户可见，比如在消息流中，根据ImageView是否在屏幕中出现了再决定加载它，或者当视频滑入屏幕被用户可见时才播放、滑出屏幕就自动停止播放等等。乍一看好像都是在ListView、RecyclerView、ScrollView这些组件里面比较需要做这件事，今天总结一下我在实际开发中是怎么处理View可见性检查的。\n\n<!-- more -->\n\n# 二、检查View是否可见的基本方法（从外部检查View）\n\n## 1 View.getVisibility()\n\n很显然，我们可以用`View.getVisibility()`来检查一个它是否处于**View.VISIBLE**状态。这是**最基本**的检查，如果连这个方法得到的返回值都是**View.INVISIBLE或者View.GONE**的话，那么它对用户肯定是不可见的。\n\n## 2. View.isShown()\n\n这个方法相当于对View的所有祖先调用getVisibility方法。看下它的实现：\n\n```\n    /**\n     * Returns the visibility of this view and all of its ancestors\n     *\n     * @return True if this view and all of its ancestors are {@link #VISIBLE}\n     */\n    public boolean isShown() {\n        View current = this;\n        //noinspection ConstantConditions\n        do {\n            if ((current.mViewFlags & VISIBILITY_MASK) != VISIBLE) {\n                return false;\n            }\n            ViewParent parent = current.mParent;\n            if (parent == null) {\n                return false; // We are not attached to the view root\n            }\n            if (!(parent instanceof View)) {\n                return true;\n            }\n            current = (View) parent;\n        } while (current != null);\n\n        return false;\n    }\n```\n\n看代码注释便知，这个方法**递归地**去检查这个View以及它的parentView的Visibility属性是不是等于**View.VISIBLE**，这样就对这个View的所有parentView做了一个检查。\n\n另外这个方法还在递归的检查过程中，检查了`parentView == null`，也就是说所有的parentView都不能为null。否则就说明这个View根本没有被`addView`过（比如使用Java代码创建界面UI时，可能会先new一个View，然后根据条件动态地把它add带一个ViewGroup中），那肯定是不可能对用户可见的，这里很好理解。\n\n## 3 View.getGlobalVisibleRect\n\n先看下什么是[Rect](https://developer.android.com/reference/android/graphics/Rect.html)：\n\n> Rect holds four integer coordinates for a rectangle. The rectangle is represented by the coordinates of its 4 edges (left, top, right bottom). \nRect代表一个矩形，这个矩形可以由它左上角坐标(left, top)、右下角坐标(right, bottom)表示。所以每一个Rect对象里面都有left, top, right bottom这4个属性。\n\n使用这个方法的代码非常简单，如下所示，直接可以得到rect对象和方法的返回值visibility：\n\n```\nRect rect = new Rect();\nboolean visibility = bottom.getGlobalVisibleRect(rect);\n```\n\n看一下该方法的注释：当这个View只要有一部分仍然在屏幕中（没有被父View遮挡，所谓的**not clipped by any of its parents**），那么将把没有被遮挡的那部分区域保存在rect对象中返回，且方法的返回值是true，即visibility=true。此时的rect是以手机屏幕作为坐标系（所谓的**global coordinates**），即原点是屏幕左上角；如果它全部被父View遮挡住了或者本身就是不可见的，返回的visibility就为false。\n\n```\n/**\n     * If some part of this view is not clipped by any of its parents, then\n     * return that area in r in global (root) coordinates. To convert r to local\n     * coordinates (without taking possible View rotations into account), offset\n     * it by -globalOffset (e.g. r.offset(-globalOffset.x, -globalOffset.y)).\n     * If the view is completely clipped or translated out, return false.\n     *\n     * @param r If true is returned, r holds the global coordinates of the\n     *        visible portion of this view.\n     * @param globalOffset If true is returned, globalOffset holds the dx,dy\n     *        between this view and its root. globalOffet may be null.\n     * @return true if r is non-empty (i.e. part of the view is visible at the\n     *         root level.\n     */\n\n```\n\n举例子看一下，先看布局：\n\n```\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                xmlns:tools=\"http://schemas.android.com/tools\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\">\n\n    <View\n        android:layout_width=\"100dp\"\n        android:layout_height=\"100dp\"\n        android:background=\"#0000ff\"\n        android:layout_marginLeft=\"-90dp\"\n        android:layout_marginTop=\"-90dp\">\n    </View>\n\n</RelativeLayout>\n```\n\n在xml中定义了一个View，给它设置负值的marginLeft和marginTop，让它只有一部分可以显示在屏幕中。可以看到这个View只有10x10dp大小可以出现在屏幕里面，但是只要有这么点大小可以在屏幕中，上面的方法的返回值就是：**visibility=true**。\n\n执行的效果如下图所示，可以看到100x100dp的蓝色矩形虽然只剩下**左上角的10x10dp蓝色小方块**可见，但是visibility仍然等于true。\n\n![self-visibility](http://ww1.sinaimg.cn/large/006y8mN6gw1f8v777610gj30go0efgm6.jpg)\n\n此时的GlobalVisibleRect的左上角(left,top)和右下角(right,bottom)分别为`(0, 280)和(36, 316)`。在这里top不为0是因为标题栏和系统状态栏已经占据了一定的屏幕高度。\n\n> tips：这里写代码时测试getGlobalVisibleRect方法时，记得要等View已经绘制完成后，再去调用View的getGlobalVisibleRect方法，否则无法得到的返回值都是0。这和获取View的宽高原理是一样的，如果View没有被绘制完成，那么View.getWidth和View.getHeight一定是等于0的。\n\n#### 关于**getGlobalVisibleRect**方法的特别说明\n\n**这个方法只能检查出这个View在手机屏幕（或者说是相对它的父View）的位置，而不能检查出与其他兄弟View的相对位置**。\n\n比如说有一个ViewGroup，下面有View1、View2这两个子View，View1和View2是平级关系。此时如果View2盖住了View1，那么用getGlobalVisibleRect方法检查View1的可见性，得到的返回值依然是true，得到的可见矩形区域rect也是没有任何变化的。也就是说**View1.getGlobalVisibleRect(rect)得到的结果与View2没有任何关系。**\n\n空说无凭，看个具体的例子，先看xml：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <View\n        android:id=\"@+id/bottom_view\"\n        android:layout_width=\"100dp\"\n        android:layout_centerInParent=\"true\"\n        android:layout_marginLeft=\"-90dp\"\n        android:layout_marginTop=\"-90dp\"\n        android:layout_height=\"100dp\"\n        android:background=\"#0000ff\">\n    </View>\n\n    <!-- 这里为了看清bottom_view, 给top_view的背景色加了一个透明度 -->\n    <View\n        android:id=\"@+id/top_view\"\n        android:layout_width=\"200dp\"\n        android:layout_height=\"200dp\"\n        android:layout_centerInParent=\"true\"\n        android:background=\"#9000ffff\">\n    </View>\n\n</RelativeLayout>\n```\n\n这个xml很简单，两个View，分别是下层的bottom_view（100x100dp，在父ViewGroup中居中），\ntop_view（200x200dp，也在父ViewGroup居中，因此可以完全盖住bottom_view）。\n\n![related-visibility](http://ww4.sinaimg.cn/large/006y8mN6gw1f8v77fhy24j30go0eqaat.jpg)\n\n我们用getGlobalVisibleRect来获取一下bottom_view的visibleRect和visibility，得到的结果是：**visibility=true，rect的左上角(left, top)和右下角(right, bottom)是(545, 1161)和(895, 1511)。**\n\n即使把top_view从xml里面删掉，我们得到visibility和rect也是一样的。\n\n所以`getGlobalVisibleRect`方法并不是万能的，因为它只能检查View和他们的ParentView之间的位置进而判它断是不是在屏幕中可见。\n\n> PS：有一次我还想到个奇葩思路，那就是把这个View的兄弟View找出来，也拿出它的GlobalVisibleRect，然后对比兄弟View和这个View的GlobalVisibleRect，看是不是有重合的地方。但是这也只能表明屏幕这一块区域内有两个View，还是无法判断到底是谁遮挡住了谁。\n\n## 4 View.getLocalVisibleRect\n\n这个方法和getGlobalVisibleRect有些类似，也可以拿到这个View在屏幕的可见区域的坐标，**唯一的区别getLocalVisibleRect(rect)获得的rect坐标系的原点是View自己的左上角，而不是屏幕左上角。**\n\n先看例子，仍然是使用上面第2个例子的代码，加上下面的代码，执行一下：\n\n```\nRect localRect = new Rect();\nboolean localVisibility = bottom.getLocalVisibleRect(localRect);\n```\n\n得到的local坐标结果是：**localVisibility=true，localRect的左上角(left, top)和右下角(right, bottom)为(0, 0)和(350, 350)**。\n\n而global坐标的结果是：**visibility=true，rect的左上角为(545, 1161)，右下角为(895,1511)。**\n\n**看下getLocalVisibleRect的源码**，原来就是先获取View的offset point（相对屏幕或者ParentView的偏移坐标），然后再去调用getGlobalVisibleRect(Rect r, Point globalOffset)方法来获取可见区域，最后再把得到的GlobalVisibleRect和Offset坐标做一个加减法，转换坐标系原点。\n\n**所以只要这个View的左上角在屏幕中，它的LocalVisibleRect的左上角坐标就一定是(0,0)，如果View的右下角在屏幕中，它的LocalVisibleRect右下角坐标就一定是(view.getWidth(), view.getHeight())。**\n\n```\npublic final boolean getLocalVisibleRect(Rect r) {\n        final Point offset = mAttachInfo != null ? mAttachInfo.mPoint : new Point();\n        if (getGlobalVisibleRect(r, offset)) {\n            r.offset(-offset.x, -offset.y); // make r local\n            return true;\n        }\n        return false;\n    }\n\n```\n\n## 5. 判断手机屏幕是否熄灭or是否解锁\n\n```\nPowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);\nboolean isScreenOn = pm.isScreenOn();\nboolean isInteractive = pm.isInteractive();\n// 可能有些版本上面isScreenOn方法隐藏了或者是deprecated了，可以尝试反射调用它，但是要记得用的时候catch异常\nMethod isScreenOnMethod = pm.getClass().getMethod(\"isScreenOn\");\nboolean isScreenOn = (Boolean) isScreenOnMethod.invoke(pm);\n```\n\n这里不深究解锁和屏幕是否熄灭的实现方法了，检查View的可见性虽然和屏幕的状态看起来没有直接关系，但是在做检查前先对屏幕的状态做一个检查也是很有必要的，如果屏幕都已经关闭了，那这个View当然是对用户不可见的。\n\n# 三、ListView、RecyclerView、ScrollView中如何检查View的可见性\n\n说实话感觉App开发中用得最多的就是各种列表啊、滚动滑动的View。在Android里面这几个可以滚动的View，都有着各自的特点。在用到上面的检测方法时，可以好好结合这几个View的特点，在它们各自的滚动过程中，更加有效的去检查View的可见性。我们可以先根据自己的业务需要，把上面提到的方法封装成一个`VisibilityCheckUtil`工具类，例如可以提供一个check方法，当View的物理面积有50%可见时，就返回true。\n\n## 1. ScrollView\n\n假设我们有一个mView在mScrollView中，我们可以监听mScrollView的滚动，在onScrollChanged中检查mView的可见性。\n\n```\nmScrollView.getViewTreeObserver().addOnScrollChangedListener(\n        new ViewTreeObserver.OnScrollChangedListener() {\n\n          @Override\n          public void onScrollChanged() {\n            // 可以先判断ScrollView中的mView是不是在屏幕中可见\n            Rect scrollBounds = new Rect();\n            mScrollView.getHitRect(scrollBounds);\n            if (!mView.getLocalVisibleRect(scrollBounds)) {\n                return;\n            }\n            \n            // 再用封装好的工具类检查可见性是否大于50%\n            if (VisibilityCheckUtil.check(mView)) {\n                // do something\n            }\n          }\n        });\n\n```\n\n## 2. ListView \n\n假设我们在mListView的第10个位置（界面上是第11个item）有一个需要检查可见性的mView。\n\n首先要监听mListView的滚动，接着在onScroll回调中，调用mListView.getFirstVisiblePosition和mListView.getLastVisiblePosition查看第10个位置是否处于可见范围，然后在调用封装好的VisibilityCheckUtil去检查mView是否可见。\n\n```\nmListView.setOnScrollListener(new OnScrollListener() {\n      @Override\n      public void onScrollStateChanged(AbsListView view, int scrollState) {\n        mScrollState = scrollState;\n      }\n\n      @Override\n      public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount,\n          int totalItemCount) {\n        if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {\n          return;\n        }\n\n        int first = mListView.getFirstVisiblePosition();\n        int last = mListView.getLastVisiblePosition();\n        // 满足3个条件：先判断ListView中的mView是不是在可见范围中，再判断是不是大于50%面积可见\n        if (10 >= first && 10 <= last && VisibilityCheckUtil.check(mView)) {\n            // do something\n        }\n      }\n    });\n```\n\n## 3. RecyclerView\n\n和上面类似，还是把mView摆放在第10个位置，检查原理和ListView类似。\n\n```\nmLinearLayoutManager = new LinearLayoutManager(this);\nmRecyclerView.setLayoutManager(mLinearLayoutManager);\nmRecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\n\n      @Override\n      public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n        super.onScrolled(recyclerView, dx, dy);\n        if (mLinearLayoutManager == null) {\n          return;\n        }\n\n        int firstVisiblePosition = mLinearLayoutManager.findFirstVisibleItemPosition();\n        int lastVisiblePosition = mLinearLayoutManager.findLastVisibleItemPosition();\n        // 同样是满足3个条件\n        if (10 >= firstVisiblePosition && 10 <= lastVisiblePosition && VisibilityCheckUtil.check(mView)) {\n          // do something\n        }\n      }\n    });\n\n```\n\n实际的开发中肯定会遇到更多的场景，我们都要先分析界面的特点，再结合前面提到的几个方法，更有效地检查View的可见性。这里最后再给大家推荐一个开源的项目——[VideoPlayerManager](https://github.com/danylovolokh/VideoPlayerManager)，里面就用到`getLocalVisibleRect`来检测View的可见面积，进而控制在ListView和RecyclerView中哪一个Item应该显示什么内容。\n\n# 四、小结\n\n本篇博客的思路，都是从View的外部去检查一个View的可见性。首先提到了一些基本的方法，然后介绍了几种常见的界面下可以怎么使用这些各种方法。\n\n如果是App开发者的话，自己写的界面自己去判断View的可见性，有上面这些方法应该就够用了。但是如果你是一个SDK开发者，给App开发者提供第三方的library时（通常是自定义View这类的库），也能够检查开发者的使用到的View，并根据可见性来自动管理一些View的操作，那就非常棒了。这时从外部去检查一个View的可见性可能就不够用了，我们可以换一个角度，从内部去检查一个View的可见性，具体内容详见[Android View的可见性检查方法-下篇](http://unclechen.github.io/2016/10/21/Android-View的可见性检查方法-下篇/)\n\n\n","source":"_posts/Android View的可见性检查方法-上篇.md","raw":"---\nlayout: post\ntitle: Android View的可见性检查方法（上）\ndate: '2016-10-17'\ntags:\n  - Android\n  - View\ncategories: \n  - 技术\n---\n\n# 一、背景\n\n在Android开发中有时候会遇到需要检查一个View是不是对用户可见，比如在消息流中，根据ImageView是否在屏幕中出现了再决定加载它，或者当视频滑入屏幕被用户可见时才播放、滑出屏幕就自动停止播放等等。乍一看好像都是在ListView、RecyclerView、ScrollView这些组件里面比较需要做这件事，今天总结一下我在实际开发中是怎么处理View可见性检查的。\n\n<!-- more -->\n\n# 二、检查View是否可见的基本方法（从外部检查View）\n\n## 1 View.getVisibility()\n\n很显然，我们可以用`View.getVisibility()`来检查一个它是否处于**View.VISIBLE**状态。这是**最基本**的检查，如果连这个方法得到的返回值都是**View.INVISIBLE或者View.GONE**的话，那么它对用户肯定是不可见的。\n\n## 2. View.isShown()\n\n这个方法相当于对View的所有祖先调用getVisibility方法。看下它的实现：\n\n```\n    /**\n     * Returns the visibility of this view and all of its ancestors\n     *\n     * @return True if this view and all of its ancestors are {@link #VISIBLE}\n     */\n    public boolean isShown() {\n        View current = this;\n        //noinspection ConstantConditions\n        do {\n            if ((current.mViewFlags & VISIBILITY_MASK) != VISIBLE) {\n                return false;\n            }\n            ViewParent parent = current.mParent;\n            if (parent == null) {\n                return false; // We are not attached to the view root\n            }\n            if (!(parent instanceof View)) {\n                return true;\n            }\n            current = (View) parent;\n        } while (current != null);\n\n        return false;\n    }\n```\n\n看代码注释便知，这个方法**递归地**去检查这个View以及它的parentView的Visibility属性是不是等于**View.VISIBLE**，这样就对这个View的所有parentView做了一个检查。\n\n另外这个方法还在递归的检查过程中，检查了`parentView == null`，也就是说所有的parentView都不能为null。否则就说明这个View根本没有被`addView`过（比如使用Java代码创建界面UI时，可能会先new一个View，然后根据条件动态地把它add带一个ViewGroup中），那肯定是不可能对用户可见的，这里很好理解。\n\n## 3 View.getGlobalVisibleRect\n\n先看下什么是[Rect](https://developer.android.com/reference/android/graphics/Rect.html)：\n\n> Rect holds four integer coordinates for a rectangle. The rectangle is represented by the coordinates of its 4 edges (left, top, right bottom). \nRect代表一个矩形，这个矩形可以由它左上角坐标(left, top)、右下角坐标(right, bottom)表示。所以每一个Rect对象里面都有left, top, right bottom这4个属性。\n\n使用这个方法的代码非常简单，如下所示，直接可以得到rect对象和方法的返回值visibility：\n\n```\nRect rect = new Rect();\nboolean visibility = bottom.getGlobalVisibleRect(rect);\n```\n\n看一下该方法的注释：当这个View只要有一部分仍然在屏幕中（没有被父View遮挡，所谓的**not clipped by any of its parents**），那么将把没有被遮挡的那部分区域保存在rect对象中返回，且方法的返回值是true，即visibility=true。此时的rect是以手机屏幕作为坐标系（所谓的**global coordinates**），即原点是屏幕左上角；如果它全部被父View遮挡住了或者本身就是不可见的，返回的visibility就为false。\n\n```\n/**\n     * If some part of this view is not clipped by any of its parents, then\n     * return that area in r in global (root) coordinates. To convert r to local\n     * coordinates (without taking possible View rotations into account), offset\n     * it by -globalOffset (e.g. r.offset(-globalOffset.x, -globalOffset.y)).\n     * If the view is completely clipped or translated out, return false.\n     *\n     * @param r If true is returned, r holds the global coordinates of the\n     *        visible portion of this view.\n     * @param globalOffset If true is returned, globalOffset holds the dx,dy\n     *        between this view and its root. globalOffet may be null.\n     * @return true if r is non-empty (i.e. part of the view is visible at the\n     *         root level.\n     */\n\n```\n\n举例子看一下，先看布局：\n\n```\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                xmlns:tools=\"http://schemas.android.com/tools\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\">\n\n    <View\n        android:layout_width=\"100dp\"\n        android:layout_height=\"100dp\"\n        android:background=\"#0000ff\"\n        android:layout_marginLeft=\"-90dp\"\n        android:layout_marginTop=\"-90dp\">\n    </View>\n\n</RelativeLayout>\n```\n\n在xml中定义了一个View，给它设置负值的marginLeft和marginTop，让它只有一部分可以显示在屏幕中。可以看到这个View只有10x10dp大小可以出现在屏幕里面，但是只要有这么点大小可以在屏幕中，上面的方法的返回值就是：**visibility=true**。\n\n执行的效果如下图所示，可以看到100x100dp的蓝色矩形虽然只剩下**左上角的10x10dp蓝色小方块**可见，但是visibility仍然等于true。\n\n![self-visibility](http://ww1.sinaimg.cn/large/006y8mN6gw1f8v777610gj30go0efgm6.jpg)\n\n此时的GlobalVisibleRect的左上角(left,top)和右下角(right,bottom)分别为`(0, 280)和(36, 316)`。在这里top不为0是因为标题栏和系统状态栏已经占据了一定的屏幕高度。\n\n> tips：这里写代码时测试getGlobalVisibleRect方法时，记得要等View已经绘制完成后，再去调用View的getGlobalVisibleRect方法，否则无法得到的返回值都是0。这和获取View的宽高原理是一样的，如果View没有被绘制完成，那么View.getWidth和View.getHeight一定是等于0的。\n\n#### 关于**getGlobalVisibleRect**方法的特别说明\n\n**这个方法只能检查出这个View在手机屏幕（或者说是相对它的父View）的位置，而不能检查出与其他兄弟View的相对位置**。\n\n比如说有一个ViewGroup，下面有View1、View2这两个子View，View1和View2是平级关系。此时如果View2盖住了View1，那么用getGlobalVisibleRect方法检查View1的可见性，得到的返回值依然是true，得到的可见矩形区域rect也是没有任何变化的。也就是说**View1.getGlobalVisibleRect(rect)得到的结果与View2没有任何关系。**\n\n空说无凭，看个具体的例子，先看xml：\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <View\n        android:id=\"@+id/bottom_view\"\n        android:layout_width=\"100dp\"\n        android:layout_centerInParent=\"true\"\n        android:layout_marginLeft=\"-90dp\"\n        android:layout_marginTop=\"-90dp\"\n        android:layout_height=\"100dp\"\n        android:background=\"#0000ff\">\n    </View>\n\n    <!-- 这里为了看清bottom_view, 给top_view的背景色加了一个透明度 -->\n    <View\n        android:id=\"@+id/top_view\"\n        android:layout_width=\"200dp\"\n        android:layout_height=\"200dp\"\n        android:layout_centerInParent=\"true\"\n        android:background=\"#9000ffff\">\n    </View>\n\n</RelativeLayout>\n```\n\n这个xml很简单，两个View，分别是下层的bottom_view（100x100dp，在父ViewGroup中居中），\ntop_view（200x200dp，也在父ViewGroup居中，因此可以完全盖住bottom_view）。\n\n![related-visibility](http://ww4.sinaimg.cn/large/006y8mN6gw1f8v77fhy24j30go0eqaat.jpg)\n\n我们用getGlobalVisibleRect来获取一下bottom_view的visibleRect和visibility，得到的结果是：**visibility=true，rect的左上角(left, top)和右下角(right, bottom)是(545, 1161)和(895, 1511)。**\n\n即使把top_view从xml里面删掉，我们得到visibility和rect也是一样的。\n\n所以`getGlobalVisibleRect`方法并不是万能的，因为它只能检查View和他们的ParentView之间的位置进而判它断是不是在屏幕中可见。\n\n> PS：有一次我还想到个奇葩思路，那就是把这个View的兄弟View找出来，也拿出它的GlobalVisibleRect，然后对比兄弟View和这个View的GlobalVisibleRect，看是不是有重合的地方。但是这也只能表明屏幕这一块区域内有两个View，还是无法判断到底是谁遮挡住了谁。\n\n## 4 View.getLocalVisibleRect\n\n这个方法和getGlobalVisibleRect有些类似，也可以拿到这个View在屏幕的可见区域的坐标，**唯一的区别getLocalVisibleRect(rect)获得的rect坐标系的原点是View自己的左上角，而不是屏幕左上角。**\n\n先看例子，仍然是使用上面第2个例子的代码，加上下面的代码，执行一下：\n\n```\nRect localRect = new Rect();\nboolean localVisibility = bottom.getLocalVisibleRect(localRect);\n```\n\n得到的local坐标结果是：**localVisibility=true，localRect的左上角(left, top)和右下角(right, bottom)为(0, 0)和(350, 350)**。\n\n而global坐标的结果是：**visibility=true，rect的左上角为(545, 1161)，右下角为(895,1511)。**\n\n**看下getLocalVisibleRect的源码**，原来就是先获取View的offset point（相对屏幕或者ParentView的偏移坐标），然后再去调用getGlobalVisibleRect(Rect r, Point globalOffset)方法来获取可见区域，最后再把得到的GlobalVisibleRect和Offset坐标做一个加减法，转换坐标系原点。\n\n**所以只要这个View的左上角在屏幕中，它的LocalVisibleRect的左上角坐标就一定是(0,0)，如果View的右下角在屏幕中，它的LocalVisibleRect右下角坐标就一定是(view.getWidth(), view.getHeight())。**\n\n```\npublic final boolean getLocalVisibleRect(Rect r) {\n        final Point offset = mAttachInfo != null ? mAttachInfo.mPoint : new Point();\n        if (getGlobalVisibleRect(r, offset)) {\n            r.offset(-offset.x, -offset.y); // make r local\n            return true;\n        }\n        return false;\n    }\n\n```\n\n## 5. 判断手机屏幕是否熄灭or是否解锁\n\n```\nPowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);\nboolean isScreenOn = pm.isScreenOn();\nboolean isInteractive = pm.isInteractive();\n// 可能有些版本上面isScreenOn方法隐藏了或者是deprecated了，可以尝试反射调用它，但是要记得用的时候catch异常\nMethod isScreenOnMethod = pm.getClass().getMethod(\"isScreenOn\");\nboolean isScreenOn = (Boolean) isScreenOnMethod.invoke(pm);\n```\n\n这里不深究解锁和屏幕是否熄灭的实现方法了，检查View的可见性虽然和屏幕的状态看起来没有直接关系，但是在做检查前先对屏幕的状态做一个检查也是很有必要的，如果屏幕都已经关闭了，那这个View当然是对用户不可见的。\n\n# 三、ListView、RecyclerView、ScrollView中如何检查View的可见性\n\n说实话感觉App开发中用得最多的就是各种列表啊、滚动滑动的View。在Android里面这几个可以滚动的View，都有着各自的特点。在用到上面的检测方法时，可以好好结合这几个View的特点，在它们各自的滚动过程中，更加有效的去检查View的可见性。我们可以先根据自己的业务需要，把上面提到的方法封装成一个`VisibilityCheckUtil`工具类，例如可以提供一个check方法，当View的物理面积有50%可见时，就返回true。\n\n## 1. ScrollView\n\n假设我们有一个mView在mScrollView中，我们可以监听mScrollView的滚动，在onScrollChanged中检查mView的可见性。\n\n```\nmScrollView.getViewTreeObserver().addOnScrollChangedListener(\n        new ViewTreeObserver.OnScrollChangedListener() {\n\n          @Override\n          public void onScrollChanged() {\n            // 可以先判断ScrollView中的mView是不是在屏幕中可见\n            Rect scrollBounds = new Rect();\n            mScrollView.getHitRect(scrollBounds);\n            if (!mView.getLocalVisibleRect(scrollBounds)) {\n                return;\n            }\n            \n            // 再用封装好的工具类检查可见性是否大于50%\n            if (VisibilityCheckUtil.check(mView)) {\n                // do something\n            }\n          }\n        });\n\n```\n\n## 2. ListView \n\n假设我们在mListView的第10个位置（界面上是第11个item）有一个需要检查可见性的mView。\n\n首先要监听mListView的滚动，接着在onScroll回调中，调用mListView.getFirstVisiblePosition和mListView.getLastVisiblePosition查看第10个位置是否处于可见范围，然后在调用封装好的VisibilityCheckUtil去检查mView是否可见。\n\n```\nmListView.setOnScrollListener(new OnScrollListener() {\n      @Override\n      public void onScrollStateChanged(AbsListView view, int scrollState) {\n        mScrollState = scrollState;\n      }\n\n      @Override\n      public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount,\n          int totalItemCount) {\n        if (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {\n          return;\n        }\n\n        int first = mListView.getFirstVisiblePosition();\n        int last = mListView.getLastVisiblePosition();\n        // 满足3个条件：先判断ListView中的mView是不是在可见范围中，再判断是不是大于50%面积可见\n        if (10 >= first && 10 <= last && VisibilityCheckUtil.check(mView)) {\n            // do something\n        }\n      }\n    });\n```\n\n## 3. RecyclerView\n\n和上面类似，还是把mView摆放在第10个位置，检查原理和ListView类似。\n\n```\nmLinearLayoutManager = new LinearLayoutManager(this);\nmRecyclerView.setLayoutManager(mLinearLayoutManager);\nmRecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\n\n      @Override\n      public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n        super.onScrolled(recyclerView, dx, dy);\n        if (mLinearLayoutManager == null) {\n          return;\n        }\n\n        int firstVisiblePosition = mLinearLayoutManager.findFirstVisibleItemPosition();\n        int lastVisiblePosition = mLinearLayoutManager.findLastVisibleItemPosition();\n        // 同样是满足3个条件\n        if (10 >= firstVisiblePosition && 10 <= lastVisiblePosition && VisibilityCheckUtil.check(mView)) {\n          // do something\n        }\n      }\n    });\n\n```\n\n实际的开发中肯定会遇到更多的场景，我们都要先分析界面的特点，再结合前面提到的几个方法，更有效地检查View的可见性。这里最后再给大家推荐一个开源的项目——[VideoPlayerManager](https://github.com/danylovolokh/VideoPlayerManager)，里面就用到`getLocalVisibleRect`来检测View的可见面积，进而控制在ListView和RecyclerView中哪一个Item应该显示什么内容。\n\n# 四、小结\n\n本篇博客的思路，都是从View的外部去检查一个View的可见性。首先提到了一些基本的方法，然后介绍了几种常见的界面下可以怎么使用这些各种方法。\n\n如果是App开发者的话，自己写的界面自己去判断View的可见性，有上面这些方法应该就够用了。但是如果你是一个SDK开发者，给App开发者提供第三方的library时（通常是自定义View这类的库），也能够检查开发者的使用到的View，并根据可见性来自动管理一些View的操作，那就非常棒了。这时从外部去检查一个View的可见性可能就不够用了，我们可以换一个角度，从内部去检查一个View的可见性，具体内容详见[Android View的可见性检查方法-下篇](http://unclechen.github.io/2016/10/21/Android-View的可见性检查方法-下篇/)\n\n\n","slug":"Android View的可见性检查方法-上篇","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8du000bmtsx8lel0lmm","content":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>在Android开发中有时候会遇到需要检查一个View是不是对用户可见，比如在消息流中，根据ImageView是否在屏幕中出现了再决定加载它，或者当视频滑入屏幕被用户可见时才播放、滑出屏幕就自动停止播放等等。乍一看好像都是在ListView、RecyclerView、ScrollView这些组件里面比较需要做这件事，今天总结一下我在实际开发中是怎么处理View可见性检查的。</p>\n<a id=\"more\"></a>\n<h1 id=\"二、检查View是否可见的基本方法（从外部检查View）\"><a href=\"#二、检查View是否可见的基本方法（从外部检查View）\" class=\"headerlink\" title=\"二、检查View是否可见的基本方法（从外部检查View）\"></a>二、检查View是否可见的基本方法（从外部检查View）</h1><h2 id=\"1-View-getVisibility\"><a href=\"#1-View-getVisibility\" class=\"headerlink\" title=\"1 View.getVisibility()\"></a>1 View.getVisibility()</h2><p>很显然，我们可以用<code>View.getVisibility()</code>来检查一个它是否处于<strong>View.VISIBLE</strong>状态。这是<strong>最基本</strong>的检查，如果连这个方法得到的返回值都是<strong>View.INVISIBLE或者View.GONE</strong>的话，那么它对用户肯定是不可见的。</p>\n<h2 id=\"2-View-isShown\"><a href=\"#2-View-isShown\" class=\"headerlink\" title=\"2. View.isShown()\"></a>2. View.isShown()</h2><p>这个方法相当于对View的所有祖先调用getVisibility方法。看下它的实现：</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the visibility of this view and all of its ancestors</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> True if this view and all of its ancestors are &#123;<span class=\"doctag\">@link</span> #VISIBLE&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> isShown() &#123;</span><br><span class=\"line\">    View current = this;</span><br><span class=\"line\">    <span class=\"comment\">//noinspection ConstantConditions</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((current.mViewFlags &amp; VISIBILITY_MASK) != VISIBLE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ViewParent <span class=\"keyword\">parent</span> = current.mParent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">parent</span> == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// We are not attached to the view root</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"keyword\">parent</span> <span class=\"keyword\">instanceof</span> View)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        current = (View) <span class=\"keyword\">parent</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看代码注释便知，这个方法<strong>递归地</strong>去检查这个View以及它的parentView的Visibility属性是不是等于<strong>View.VISIBLE</strong>，这样就对这个View的所有parentView做了一个检查。</p>\n<p>另外这个方法还在递归的检查过程中，检查了<code>parentView == null</code>，也就是说所有的parentView都不能为null。否则就说明这个View根本没有被<code>addView</code>过（比如使用Java代码创建界面UI时，可能会先new一个View，然后根据条件动态地把它add带一个ViewGroup中），那肯定是不可能对用户可见的，这里很好理解。</p>\n<h2 id=\"3-View-getGlobalVisibleRect\"><a href=\"#3-View-getGlobalVisibleRect\" class=\"headerlink\" title=\"3 View.getGlobalVisibleRect\"></a>3 View.getGlobalVisibleRect</h2><p>先看下什么是<a href=\"https://developer.android.com/reference/android/graphics/Rect.html\" target=\"_blank\" rel=\"noopener\">Rect</a>：</p>\n<blockquote>\n<p>Rect holds four integer coordinates for a rectangle. The rectangle is represented by the coordinates of its 4 edges (left, top, right bottom).<br>Rect代表一个矩形，这个矩形可以由它左上角坐标(left, top)、右下角坐标(right, bottom)表示。所以每一个Rect对象里面都有left, top, right bottom这4个属性。</p>\n</blockquote>\n<p>使用这个方法的代码非常简单，如下所示，直接可以得到rect对象和方法的返回值visibility：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rect <span class=\"built_in\">rect</span> = <span class=\"keyword\">new</span> Rect();</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> visibility = bottom.getGlobalVisibleRect(<span class=\"built_in\">rect</span>);</span><br></pre></td></tr></table></figure>\n<p>看一下该方法的注释：当这个View只要有一部分仍然在屏幕中（没有被父View遮挡，所谓的<strong>not clipped by any of its parents</strong>），那么将把没有被遮挡的那部分区域保存在rect对象中返回，且方法的返回值是true，即visibility=true。此时的rect是以手机屏幕作为坐标系（所谓的<strong>global coordinates</strong>），即原点是屏幕左上角；如果它全部被父View遮挡住了或者本身就是不可见的，返回的visibility就为false。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * If <span class=\"keyword\">some</span> part <span class=\"keyword\">of</span> this view <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> clipped <span class=\"keyword\">by</span> any <span class=\"keyword\">of</span> <span class=\"keyword\">its</span> parents, <span class=\"keyword\">then</span></span><br><span class=\"line\">     * <span class=\"literal\">return</span> <span class=\"keyword\">that</span> area <span class=\"keyword\">in</span> r <span class=\"keyword\">in</span> <span class=\"keyword\">global</span> (root) coordinates. To convert r <span class=\"keyword\">to</span> <span class=\"keyword\">local</span></span><br><span class=\"line\">     * coordinates (<span class=\"keyword\">without</span> taking possible View rotations <span class=\"keyword\">into</span> account), <span class=\"built_in\">offset</span></span><br><span class=\"line\">     * <span class=\"keyword\">it</span> <span class=\"keyword\">by</span> -globalOffset (e.g. r.<span class=\"built_in\">offset</span>(-globalOffset.x, -globalOffset.y)).</span><br><span class=\"line\">     * If <span class=\"keyword\">the</span> view <span class=\"keyword\">is</span> completely clipped <span class=\"keyword\">or</span> translated out, <span class=\"literal\">return</span> <span class=\"literal\">false</span>.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param r If <span class=\"literal\">true</span> <span class=\"keyword\">is</span> returned, r holds <span class=\"keyword\">the</span> <span class=\"keyword\">global</span> coordinates <span class=\"keyword\">of</span> <span class=\"keyword\">the</span></span><br><span class=\"line\">     *        visible portion <span class=\"keyword\">of</span> this view.</span><br><span class=\"line\">     * @param globalOffset If <span class=\"literal\">true</span> <span class=\"keyword\">is</span> returned, globalOffset holds <span class=\"keyword\">the</span> dx,dy</span><br><span class=\"line\">     *        <span class=\"keyword\">between</span> this view <span class=\"keyword\">and</span> <span class=\"keyword\">its</span> root. globalOffet may be null.</span><br><span class=\"line\">     * @<span class=\"literal\">return</span> <span class=\"literal\">true</span> <span class=\"keyword\">if</span> r <span class=\"keyword\">is</span> non-empty (i.e. part <span class=\"keyword\">of</span> <span class=\"keyword\">the</span> view <span class=\"keyword\">is</span> visible <span class=\"keyword\">at</span> <span class=\"keyword\">the</span></span><br><span class=\"line\">     *         root level.</span><br><span class=\"line\">     */</span><br></pre></td></tr></table></figure>\n<p>举例子看一下，先看布局：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">View</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#0000ff\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginLeft</span>=<span class=\"string\">\"-90dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"-90dp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在xml中定义了一个View，给它设置负值的marginLeft和marginTop，让它只有一部分可以显示在屏幕中。可以看到这个View只有10x10dp大小可以出现在屏幕里面，但是只要有这么点大小可以在屏幕中，上面的方法的返回值就是：<strong>visibility=true</strong>。</p>\n<p>执行的效果如下图所示，可以看到100x100dp的蓝色矩形虽然只剩下<strong>左上角的10x10dp蓝色小方块</strong>可见，但是visibility仍然等于true。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006y8mN6gw1f8v777610gj30go0efgm6.jpg\" alt=\"self-visibility\"></p>\n<p>此时的GlobalVisibleRect的左上角(left,top)和右下角(right,bottom)分别为<code>(0, 280)和(36, 316)</code>。在这里top不为0是因为标题栏和系统状态栏已经占据了一定的屏幕高度。</p>\n<blockquote>\n<p>tips：这里写代码时测试getGlobalVisibleRect方法时，记得要等View已经绘制完成后，再去调用View的getGlobalVisibleRect方法，否则无法得到的返回值都是0。这和获取View的宽高原理是一样的，如果View没有被绘制完成，那么View.getWidth和View.getHeight一定是等于0的。</p>\n</blockquote>\n<h4 id=\"关于getGlobalVisibleRect方法的特别说明\"><a href=\"#关于getGlobalVisibleRect方法的特别说明\" class=\"headerlink\" title=\"关于getGlobalVisibleRect方法的特别说明\"></a>关于<strong>getGlobalVisibleRect</strong>方法的特别说明</h4><p><strong>这个方法只能检查出这个View在手机屏幕（或者说是相对它的父View）的位置，而不能检查出与其他兄弟View的相对位置</strong>。</p>\n<p>比如说有一个ViewGroup，下面有View1、View2这两个子View，View1和View2是平级关系。此时如果View2盖住了View1，那么用getGlobalVisibleRect方法检查View1的可见性，得到的返回值依然是true，得到的可见矩形区域rect也是没有任何变化的。也就是说<strong>View1.getGlobalVisibleRect(rect)得到的结果与View2没有任何关系。</strong></p>\n<p>空说无凭，看个具体的例子，先看xml：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">View</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/bottom_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginLeft</span>=<span class=\"string\">\"-90dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"-90dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#0000ff\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 这里为了看清bottom_view, 给top_view的背景色加了一个透明度 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">View</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/top_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#9000ffff\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个xml很简单，两个View，分别是下层的bottom_view（100x100dp，在父ViewGroup中居中），<br>top_view（200x200dp，也在父ViewGroup居中，因此可以完全盖住bottom_view）。</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/006y8mN6gw1f8v77fhy24j30go0eqaat.jpg\" alt=\"related-visibility\"></p>\n<p>我们用getGlobalVisibleRect来获取一下bottom_view的visibleRect和visibility，得到的结果是：<strong>visibility=true，rect的左上角(left, top)和右下角(right, bottom)是(545, 1161)和(895, 1511)。</strong></p>\n<p>即使把top_view从xml里面删掉，我们得到visibility和rect也是一样的。</p>\n<p>所以<code>getGlobalVisibleRect</code>方法并不是万能的，因为它只能检查View和他们的ParentView之间的位置进而判它断是不是在屏幕中可见。</p>\n<blockquote>\n<p>PS：有一次我还想到个奇葩思路，那就是把这个View的兄弟View找出来，也拿出它的GlobalVisibleRect，然后对比兄弟View和这个View的GlobalVisibleRect，看是不是有重合的地方。但是这也只能表明屏幕这一块区域内有两个View，还是无法判断到底是谁遮挡住了谁。</p>\n</blockquote>\n<h2 id=\"4-View-getLocalVisibleRect\"><a href=\"#4-View-getLocalVisibleRect\" class=\"headerlink\" title=\"4 View.getLocalVisibleRect\"></a>4 View.getLocalVisibleRect</h2><p>这个方法和getGlobalVisibleRect有些类似，也可以拿到这个View在屏幕的可见区域的坐标，<strong>唯一的区别getLocalVisibleRect(rect)获得的rect坐标系的原点是View自己的左上角，而不是屏幕左上角。</strong></p>\n<p>先看例子，仍然是使用上面第2个例子的代码，加上下面的代码，执行一下：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Rect localRect</span> = new Rect();</span><br><span class=\"line\"><span class=\"attribute\">boolean localVisibility</span> = bottom.getLocalVisibleRect(localRect);</span><br></pre></td></tr></table></figure>\n<p>得到的local坐标结果是：<strong>localVisibility=true，localRect的左上角(left, top)和右下角(right, bottom)为(0, 0)和(350, 350)</strong>。</p>\n<p>而global坐标的结果是：<strong>visibility=true，rect的左上角为(545, 1161)，右下角为(895,1511)。</strong></p>\n<p><strong>看下getLocalVisibleRect的源码</strong>，原来就是先获取View的offset point（相对屏幕或者ParentView的偏移坐标），然后再去调用getGlobalVisibleRect(Rect r, Point globalOffset)方法来获取可见区域，最后再把得到的GlobalVisibleRect和Offset坐标做一个加减法，转换坐标系原点。</p>\n<p><strong>所以只要这个View的左上角在屏幕中，它的LocalVisibleRect的左上角坐标就一定是(0,0)，如果View的右下角在屏幕中，它的LocalVisibleRect右下角坐标就一定是(view.getWidth(), view.getHeight())。</strong></p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">getLocalVisibleRect</span><span class=\"params\">(Rect r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Point offset = mAttachInfo != <span class=\"keyword\">null</span> ? mAttachInfo.mPoint : <span class=\"keyword\">new</span> Point();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getGlobalVisibleRect(r, offset)) &#123;</span><br><span class=\"line\">            r.offset(-offset.x, -offset.y); <span class=\"comment\">// make r local</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-判断手机屏幕是否熄灭or是否解锁\"><a href=\"#5-判断手机屏幕是否熄灭or是否解锁\" class=\"headerlink\" title=\"5. 判断手机屏幕是否熄灭or是否解锁\"></a>5. 判断手机屏幕是否熄灭or是否解锁</h2><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);</span><br><span class=\"line\">boolean isScreenOn = pm.isScreenOn();</span><br><span class=\"line\">boolean isInteractive = pm.isInteractive();</span><br><span class=\"line\"><span class=\"comment\">// 可能有些版本上面isScreenOn方法隐藏了或者是deprecated了，可以尝试反射调用它，但是要记得用的时候catch异常</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">isScreenOnMethod</span> = <span class=\"title\">pm</span>.<span class=\"title\">getClass</span><span class=\"params\">()</span>.<span class=\"title\">getMethod</span><span class=\"params\">(\"isScreenOn\")</span>;</span></span><br><span class=\"line\">boolean isScreenOn = (Boolean) isScreenOnMethod.invoke(pm);</span><br></pre></td></tr></table></figure>\n<p>这里不深究解锁和屏幕是否熄灭的实现方法了，检查View的可见性虽然和屏幕的状态看起来没有直接关系，但是在做检查前先对屏幕的状态做一个检查也是很有必要的，如果屏幕都已经关闭了，那这个View当然是对用户不可见的。</p>\n<h1 id=\"三、ListView、RecyclerView、ScrollView中如何检查View的可见性\"><a href=\"#三、ListView、RecyclerView、ScrollView中如何检查View的可见性\" class=\"headerlink\" title=\"三、ListView、RecyclerView、ScrollView中如何检查View的可见性\"></a>三、ListView、RecyclerView、ScrollView中如何检查View的可见性</h1><p>说实话感觉App开发中用得最多的就是各种列表啊、滚动滑动的View。在Android里面这几个可以滚动的View，都有着各自的特点。在用到上面的检测方法时，可以好好结合这几个View的特点，在它们各自的滚动过程中，更加有效的去检查View的可见性。我们可以先根据自己的业务需要，把上面提到的方法封装成一个<code>VisibilityCheckUtil</code>工具类，例如可以提供一个check方法，当View的物理面积有50%可见时，就返回true。</p>\n<h2 id=\"1-ScrollView\"><a href=\"#1-ScrollView\" class=\"headerlink\" title=\"1. ScrollView\"></a>1. ScrollView</h2><p>假设我们有一个mView在mScrollView中，我们可以监听mScrollView的滚动，在onScrollChanged中检查mView的可见性。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mScrollView.getViewTreeObserver().addOnScrollChangedListener(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ViewTreeObserver.OnScrollChangedListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScrollChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可以先判断ScrollView中的mView是不是在屏幕中可见</span></span><br><span class=\"line\">            Rect scrollBounds = <span class=\"keyword\">new</span> Rect();</span><br><span class=\"line\">            mScrollView.getHitRect(scrollBounds);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mView.getLocalVisibleRect(scrollBounds)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 再用封装好的工具类检查可见性是否大于50%</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (VisibilityCheckUtil.check(mView)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// do something</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-ListView\"><a href=\"#2-ListView\" class=\"headerlink\" title=\"2. ListView\"></a>2. ListView</h2><p>假设我们在mListView的第10个位置（界面上是第11个item）有一个需要检查可见性的mView。</p>\n<p>首先要监听mListView的滚动，接着在onScroll回调中，调用mListView.getFirstVisiblePosition和mListView.getLastVisiblePosition查看第10个位置是否处于可见范围，然后在调用封装好的VisibilityCheckUtil去检查mView是否可见。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mListView.setOnScrollListener(<span class=\"keyword\">new</span> OnScrollListener() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(AbsListView view, <span class=\"keyword\">int</span> scrollState)</span> </span>&#123;</span><br><span class=\"line\">        mScrollState = scrollState;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onScroll(AbsListView view, <span class=\"keyword\">int</span> firstVisibleItem, <span class=\"keyword\">int</span> visibleItemCount,</span><br><span class=\"line\">          <span class=\"keyword\">int</span> totalItemCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> first = mListView.getFirstVisiblePosition();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> last = mListView.getLastVisiblePosition();</span><br><span class=\"line\">        <span class=\"comment\">// 满足3个条件：先判断ListView中的mView是不是在可见范围中，再判断是不是大于50%面积可见</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">10</span> &gt;= first &amp;&amp; <span class=\"number\">10</span> &lt;= last &amp;&amp; VisibilityCheckUtil.check(mView)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// do something</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-RecyclerView\"><a href=\"#3-RecyclerView\" class=\"headerlink\" title=\"3. RecyclerView\"></a>3. RecyclerView</h2><p>和上面类似，还是把mView摆放在第10个位置，检查原理和ListView类似。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mLinearLayoutManager = <span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">mRecyclerView.setLayoutManager(mLinearLayoutManager);</span><br><span class=\"line\">mRecyclerView.addOnScrollListener(<span class=\"keyword\">new</span> RecyclerView.OnScrollListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScrolled</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onScrolled(recyclerView, dx, dy);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mLinearLayoutManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> firstVisiblePosition = mLinearLayoutManager.findFirstVisibleItemPosition();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lastVisiblePosition = mLinearLayoutManager.findLastVisibleItemPosition();</span><br><span class=\"line\">        <span class=\"comment\">// 同样是满足3个条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">10</span> &gt;= firstVisiblePosition &amp;&amp; <span class=\"number\">10</span> &lt;= lastVisiblePosition &amp;&amp; VisibilityCheckUtil.check(mView)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// do something</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>实际的开发中肯定会遇到更多的场景，我们都要先分析界面的特点，再结合前面提到的几个方法，更有效地检查View的可见性。这里最后再给大家推荐一个开源的项目——<a href=\"https://github.com/danylovolokh/VideoPlayerManager\" target=\"_blank\" rel=\"noopener\">VideoPlayerManager</a>，里面就用到<code>getLocalVisibleRect</code>来检测View的可见面积，进而控制在ListView和RecyclerView中哪一个Item应该显示什么内容。</p>\n<h1 id=\"四、小结\"><a href=\"#四、小结\" class=\"headerlink\" title=\"四、小结\"></a>四、小结</h1><p>本篇博客的思路，都是从View的外部去检查一个View的可见性。首先提到了一些基本的方法，然后介绍了几种常见的界面下可以怎么使用这些各种方法。</p>\n<p>如果是App开发者的话，自己写的界面自己去判断View的可见性，有上面这些方法应该就够用了。但是如果你是一个SDK开发者，给App开发者提供第三方的library时（通常是自定义View这类的库），也能够检查开发者的使用到的View，并根据可见性来自动管理一些View的操作，那就非常棒了。这时从外部去检查一个View的可见性可能就不够用了，我们可以换一个角度，从内部去检查一个View的可见性，具体内容详见<a href=\"http://unclechen.github.io/2016/10/21/Android-View的可见性检查方法-下篇/\">Android View的可见性检查方法-下篇</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>在Android开发中有时候会遇到需要检查一个View是不是对用户可见，比如在消息流中，根据ImageView是否在屏幕中出现了再决定加载它，或者当视频滑入屏幕被用户可见时才播放、滑出屏幕就自动停止播放等等。乍一看好像都是在ListView、RecyclerView、ScrollView这些组件里面比较需要做这件事，今天总结一下我在实际开发中是怎么处理View可见性检查的。</p>","more":"<h1 id=\"二、检查View是否可见的基本方法（从外部检查View）\"><a href=\"#二、检查View是否可见的基本方法（从外部检查View）\" class=\"headerlink\" title=\"二、检查View是否可见的基本方法（从外部检查View）\"></a>二、检查View是否可见的基本方法（从外部检查View）</h1><h2 id=\"1-View-getVisibility\"><a href=\"#1-View-getVisibility\" class=\"headerlink\" title=\"1 View.getVisibility()\"></a>1 View.getVisibility()</h2><p>很显然，我们可以用<code>View.getVisibility()</code>来检查一个它是否处于<strong>View.VISIBLE</strong>状态。这是<strong>最基本</strong>的检查，如果连这个方法得到的返回值都是<strong>View.INVISIBLE或者View.GONE</strong>的话，那么它对用户肯定是不可见的。</p>\n<h2 id=\"2-View-isShown\"><a href=\"#2-View-isShown\" class=\"headerlink\" title=\"2. View.isShown()\"></a>2. View.isShown()</h2><p>这个方法相当于对View的所有祖先调用getVisibility方法。看下它的实现：</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the visibility of this view and all of its ancestors</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> True if this view and all of its ancestors are &#123;<span class=\"doctag\">@link</span> #VISIBLE&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> isShown() &#123;</span><br><span class=\"line\">    View current = this;</span><br><span class=\"line\">    <span class=\"comment\">//noinspection ConstantConditions</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((current.mViewFlags &amp; VISIBILITY_MASK) != VISIBLE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ViewParent <span class=\"keyword\">parent</span> = current.mParent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">parent</span> == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// We are not attached to the view root</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"keyword\">parent</span> <span class=\"keyword\">instanceof</span> View)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        current = (View) <span class=\"keyword\">parent</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看代码注释便知，这个方法<strong>递归地</strong>去检查这个View以及它的parentView的Visibility属性是不是等于<strong>View.VISIBLE</strong>，这样就对这个View的所有parentView做了一个检查。</p>\n<p>另外这个方法还在递归的检查过程中，检查了<code>parentView == null</code>，也就是说所有的parentView都不能为null。否则就说明这个View根本没有被<code>addView</code>过（比如使用Java代码创建界面UI时，可能会先new一个View，然后根据条件动态地把它add带一个ViewGroup中），那肯定是不可能对用户可见的，这里很好理解。</p>\n<h2 id=\"3-View-getGlobalVisibleRect\"><a href=\"#3-View-getGlobalVisibleRect\" class=\"headerlink\" title=\"3 View.getGlobalVisibleRect\"></a>3 View.getGlobalVisibleRect</h2><p>先看下什么是<a href=\"https://developer.android.com/reference/android/graphics/Rect.html\" target=\"_blank\" rel=\"noopener\">Rect</a>：</p>\n<blockquote>\n<p>Rect holds four integer coordinates for a rectangle. The rectangle is represented by the coordinates of its 4 edges (left, top, right bottom).<br>Rect代表一个矩形，这个矩形可以由它左上角坐标(left, top)、右下角坐标(right, bottom)表示。所以每一个Rect对象里面都有left, top, right bottom这4个属性。</p>\n</blockquote>\n<p>使用这个方法的代码非常简单，如下所示，直接可以得到rect对象和方法的返回值visibility：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rect <span class=\"built_in\">rect</span> = <span class=\"keyword\">new</span> Rect();</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> visibility = bottom.getGlobalVisibleRect(<span class=\"built_in\">rect</span>);</span><br></pre></td></tr></table></figure>\n<p>看一下该方法的注释：当这个View只要有一部分仍然在屏幕中（没有被父View遮挡，所谓的<strong>not clipped by any of its parents</strong>），那么将把没有被遮挡的那部分区域保存在rect对象中返回，且方法的返回值是true，即visibility=true。此时的rect是以手机屏幕作为坐标系（所谓的<strong>global coordinates</strong>），即原点是屏幕左上角；如果它全部被父View遮挡住了或者本身就是不可见的，返回的visibility就为false。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">     * If <span class=\"keyword\">some</span> part <span class=\"keyword\">of</span> this view <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> clipped <span class=\"keyword\">by</span> any <span class=\"keyword\">of</span> <span class=\"keyword\">its</span> parents, <span class=\"keyword\">then</span></span><br><span class=\"line\">     * <span class=\"literal\">return</span> <span class=\"keyword\">that</span> area <span class=\"keyword\">in</span> r <span class=\"keyword\">in</span> <span class=\"keyword\">global</span> (root) coordinates. To convert r <span class=\"keyword\">to</span> <span class=\"keyword\">local</span></span><br><span class=\"line\">     * coordinates (<span class=\"keyword\">without</span> taking possible View rotations <span class=\"keyword\">into</span> account), <span class=\"built_in\">offset</span></span><br><span class=\"line\">     * <span class=\"keyword\">it</span> <span class=\"keyword\">by</span> -globalOffset (e.g. r.<span class=\"built_in\">offset</span>(-globalOffset.x, -globalOffset.y)).</span><br><span class=\"line\">     * If <span class=\"keyword\">the</span> view <span class=\"keyword\">is</span> completely clipped <span class=\"keyword\">or</span> translated out, <span class=\"literal\">return</span> <span class=\"literal\">false</span>.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param r If <span class=\"literal\">true</span> <span class=\"keyword\">is</span> returned, r holds <span class=\"keyword\">the</span> <span class=\"keyword\">global</span> coordinates <span class=\"keyword\">of</span> <span class=\"keyword\">the</span></span><br><span class=\"line\">     *        visible portion <span class=\"keyword\">of</span> this view.</span><br><span class=\"line\">     * @param globalOffset If <span class=\"literal\">true</span> <span class=\"keyword\">is</span> returned, globalOffset holds <span class=\"keyword\">the</span> dx,dy</span><br><span class=\"line\">     *        <span class=\"keyword\">between</span> this view <span class=\"keyword\">and</span> <span class=\"keyword\">its</span> root. globalOffet may be null.</span><br><span class=\"line\">     * @<span class=\"literal\">return</span> <span class=\"literal\">true</span> <span class=\"keyword\">if</span> r <span class=\"keyword\">is</span> non-empty (i.e. part <span class=\"keyword\">of</span> <span class=\"keyword\">the</span> view <span class=\"keyword\">is</span> visible <span class=\"keyword\">at</span> <span class=\"keyword\">the</span></span><br><span class=\"line\">     *         root level.</span><br><span class=\"line\">     */</span><br></pre></td></tr></table></figure>\n<p>举例子看一下，先看布局：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">View</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#0000ff\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginLeft</span>=<span class=\"string\">\"-90dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"-90dp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在xml中定义了一个View，给它设置负值的marginLeft和marginTop，让它只有一部分可以显示在屏幕中。可以看到这个View只有10x10dp大小可以出现在屏幕里面，但是只要有这么点大小可以在屏幕中，上面的方法的返回值就是：<strong>visibility=true</strong>。</p>\n<p>执行的效果如下图所示，可以看到100x100dp的蓝色矩形虽然只剩下<strong>左上角的10x10dp蓝色小方块</strong>可见，但是visibility仍然等于true。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006y8mN6gw1f8v777610gj30go0efgm6.jpg\" alt=\"self-visibility\"></p>\n<p>此时的GlobalVisibleRect的左上角(left,top)和右下角(right,bottom)分别为<code>(0, 280)和(36, 316)</code>。在这里top不为0是因为标题栏和系统状态栏已经占据了一定的屏幕高度。</p>\n<blockquote>\n<p>tips：这里写代码时测试getGlobalVisibleRect方法时，记得要等View已经绘制完成后，再去调用View的getGlobalVisibleRect方法，否则无法得到的返回值都是0。这和获取View的宽高原理是一样的，如果View没有被绘制完成，那么View.getWidth和View.getHeight一定是等于0的。</p>\n</blockquote>\n<h4 id=\"关于getGlobalVisibleRect方法的特别说明\"><a href=\"#关于getGlobalVisibleRect方法的特别说明\" class=\"headerlink\" title=\"关于getGlobalVisibleRect方法的特别说明\"></a>关于<strong>getGlobalVisibleRect</strong>方法的特别说明</h4><p><strong>这个方法只能检查出这个View在手机屏幕（或者说是相对它的父View）的位置，而不能检查出与其他兄弟View的相对位置</strong>。</p>\n<p>比如说有一个ViewGroup，下面有View1、View2这两个子View，View1和View2是平级关系。此时如果View2盖住了View1，那么用getGlobalVisibleRect方法检查View1的可见性，得到的返回值依然是true，得到的可见矩形区域rect也是没有任何变化的。也就是说<strong>View1.getGlobalVisibleRect(rect)得到的结果与View2没有任何关系。</strong></p>\n<p>空说无凭，看个具体的例子，先看xml：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"utf-8\"</span><span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">View</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/bottom_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginLeft</span>=<span class=\"string\">\"-90dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"-90dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#0000ff\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 这里为了看清bottom_view, 给top_view的背景色加了一个透明度 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">View</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/top_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerInParent</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#9000ffff\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个xml很简单，两个View，分别是下层的bottom_view（100x100dp，在父ViewGroup中居中），<br>top_view（200x200dp，也在父ViewGroup居中，因此可以完全盖住bottom_view）。</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/006y8mN6gw1f8v77fhy24j30go0eqaat.jpg\" alt=\"related-visibility\"></p>\n<p>我们用getGlobalVisibleRect来获取一下bottom_view的visibleRect和visibility，得到的结果是：<strong>visibility=true，rect的左上角(left, top)和右下角(right, bottom)是(545, 1161)和(895, 1511)。</strong></p>\n<p>即使把top_view从xml里面删掉，我们得到visibility和rect也是一样的。</p>\n<p>所以<code>getGlobalVisibleRect</code>方法并不是万能的，因为它只能检查View和他们的ParentView之间的位置进而判它断是不是在屏幕中可见。</p>\n<blockquote>\n<p>PS：有一次我还想到个奇葩思路，那就是把这个View的兄弟View找出来，也拿出它的GlobalVisibleRect，然后对比兄弟View和这个View的GlobalVisibleRect，看是不是有重合的地方。但是这也只能表明屏幕这一块区域内有两个View，还是无法判断到底是谁遮挡住了谁。</p>\n</blockquote>\n<h2 id=\"4-View-getLocalVisibleRect\"><a href=\"#4-View-getLocalVisibleRect\" class=\"headerlink\" title=\"4 View.getLocalVisibleRect\"></a>4 View.getLocalVisibleRect</h2><p>这个方法和getGlobalVisibleRect有些类似，也可以拿到这个View在屏幕的可见区域的坐标，<strong>唯一的区别getLocalVisibleRect(rect)获得的rect坐标系的原点是View自己的左上角，而不是屏幕左上角。</strong></p>\n<p>先看例子，仍然是使用上面第2个例子的代码，加上下面的代码，执行一下：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Rect localRect</span> = new Rect();</span><br><span class=\"line\"><span class=\"attribute\">boolean localVisibility</span> = bottom.getLocalVisibleRect(localRect);</span><br></pre></td></tr></table></figure>\n<p>得到的local坐标结果是：<strong>localVisibility=true，localRect的左上角(left, top)和右下角(right, bottom)为(0, 0)和(350, 350)</strong>。</p>\n<p>而global坐标的结果是：<strong>visibility=true，rect的左上角为(545, 1161)，右下角为(895,1511)。</strong></p>\n<p><strong>看下getLocalVisibleRect的源码</strong>，原来就是先获取View的offset point（相对屏幕或者ParentView的偏移坐标），然后再去调用getGlobalVisibleRect(Rect r, Point globalOffset)方法来获取可见区域，最后再把得到的GlobalVisibleRect和Offset坐标做一个加减法，转换坐标系原点。</p>\n<p><strong>所以只要这个View的左上角在屏幕中，它的LocalVisibleRect的左上角坐标就一定是(0,0)，如果View的右下角在屏幕中，它的LocalVisibleRect右下角坐标就一定是(view.getWidth(), view.getHeight())。</strong></p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">getLocalVisibleRect</span><span class=\"params\">(Rect r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Point offset = mAttachInfo != <span class=\"keyword\">null</span> ? mAttachInfo.mPoint : <span class=\"keyword\">new</span> Point();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getGlobalVisibleRect(r, offset)) &#123;</span><br><span class=\"line\">            r.offset(-offset.x, -offset.y); <span class=\"comment\">// make r local</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-判断手机屏幕是否熄灭or是否解锁\"><a href=\"#5-判断手机屏幕是否熄灭or是否解锁\" class=\"headerlink\" title=\"5. 判断手机屏幕是否熄灭or是否解锁\"></a>5. 判断手机屏幕是否熄灭or是否解锁</h2><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);</span><br><span class=\"line\">boolean isScreenOn = pm.isScreenOn();</span><br><span class=\"line\">boolean isInteractive = pm.isInteractive();</span><br><span class=\"line\"><span class=\"comment\">// 可能有些版本上面isScreenOn方法隐藏了或者是deprecated了，可以尝试反射调用它，但是要记得用的时候catch异常</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">Method</span> <span class=\"title\">isScreenOnMethod</span> = <span class=\"title\">pm</span>.<span class=\"title\">getClass</span><span class=\"params\">()</span>.<span class=\"title\">getMethod</span><span class=\"params\">(\"isScreenOn\")</span>;</span></span><br><span class=\"line\">boolean isScreenOn = (Boolean) isScreenOnMethod.invoke(pm);</span><br></pre></td></tr></table></figure>\n<p>这里不深究解锁和屏幕是否熄灭的实现方法了，检查View的可见性虽然和屏幕的状态看起来没有直接关系，但是在做检查前先对屏幕的状态做一个检查也是很有必要的，如果屏幕都已经关闭了，那这个View当然是对用户不可见的。</p>\n<h1 id=\"三、ListView、RecyclerView、ScrollView中如何检查View的可见性\"><a href=\"#三、ListView、RecyclerView、ScrollView中如何检查View的可见性\" class=\"headerlink\" title=\"三、ListView、RecyclerView、ScrollView中如何检查View的可见性\"></a>三、ListView、RecyclerView、ScrollView中如何检查View的可见性</h1><p>说实话感觉App开发中用得最多的就是各种列表啊、滚动滑动的View。在Android里面这几个可以滚动的View，都有着各自的特点。在用到上面的检测方法时，可以好好结合这几个View的特点，在它们各自的滚动过程中，更加有效的去检查View的可见性。我们可以先根据自己的业务需要，把上面提到的方法封装成一个<code>VisibilityCheckUtil</code>工具类，例如可以提供一个check方法，当View的物理面积有50%可见时，就返回true。</p>\n<h2 id=\"1-ScrollView\"><a href=\"#1-ScrollView\" class=\"headerlink\" title=\"1. ScrollView\"></a>1. ScrollView</h2><p>假设我们有一个mView在mScrollView中，我们可以监听mScrollView的滚动，在onScrollChanged中检查mView的可见性。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mScrollView.getViewTreeObserver().addOnScrollChangedListener(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ViewTreeObserver.OnScrollChangedListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScrollChanged</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可以先判断ScrollView中的mView是不是在屏幕中可见</span></span><br><span class=\"line\">            Rect scrollBounds = <span class=\"keyword\">new</span> Rect();</span><br><span class=\"line\">            mScrollView.getHitRect(scrollBounds);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mView.getLocalVisibleRect(scrollBounds)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 再用封装好的工具类检查可见性是否大于50%</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (VisibilityCheckUtil.check(mView)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// do something</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-ListView\"><a href=\"#2-ListView\" class=\"headerlink\" title=\"2. ListView\"></a>2. ListView</h2><p>假设我们在mListView的第10个位置（界面上是第11个item）有一个需要检查可见性的mView。</p>\n<p>首先要监听mListView的滚动，接着在onScroll回调中，调用mListView.getFirstVisiblePosition和mListView.getLastVisiblePosition查看第10个位置是否处于可见范围，然后在调用封装好的VisibilityCheckUtil去检查mView是否可见。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mListView.setOnScrollListener(<span class=\"keyword\">new</span> OnScrollListener() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(AbsListView view, <span class=\"keyword\">int</span> scrollState)</span> </span>&#123;</span><br><span class=\"line\">        mScrollState = scrollState;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onScroll(AbsListView view, <span class=\"keyword\">int</span> firstVisibleItem, <span class=\"keyword\">int</span> visibleItemCount,</span><br><span class=\"line\">          <span class=\"keyword\">int</span> totalItemCount) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> first = mListView.getFirstVisiblePosition();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> last = mListView.getLastVisiblePosition();</span><br><span class=\"line\">        <span class=\"comment\">// 满足3个条件：先判断ListView中的mView是不是在可见范围中，再判断是不是大于50%面积可见</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">10</span> &gt;= first &amp;&amp; <span class=\"number\">10</span> &lt;= last &amp;&amp; VisibilityCheckUtil.check(mView)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// do something</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-RecyclerView\"><a href=\"#3-RecyclerView\" class=\"headerlink\" title=\"3. RecyclerView\"></a>3. RecyclerView</h2><p>和上面类似，还是把mView摆放在第10个位置，检查原理和ListView类似。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mLinearLayoutManager = <span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">mRecyclerView.setLayoutManager(mLinearLayoutManager);</span><br><span class=\"line\">mRecyclerView.addOnScrollListener(<span class=\"keyword\">new</span> RecyclerView.OnScrollListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onScrolled</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onScrolled(recyclerView, dx, dy);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mLinearLayoutManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> firstVisiblePosition = mLinearLayoutManager.findFirstVisibleItemPosition();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lastVisiblePosition = mLinearLayoutManager.findLastVisibleItemPosition();</span><br><span class=\"line\">        <span class=\"comment\">// 同样是满足3个条件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">10</span> &gt;= firstVisiblePosition &amp;&amp; <span class=\"number\">10</span> &lt;= lastVisiblePosition &amp;&amp; VisibilityCheckUtil.check(mView)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// do something</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>实际的开发中肯定会遇到更多的场景，我们都要先分析界面的特点，再结合前面提到的几个方法，更有效地检查View的可见性。这里最后再给大家推荐一个开源的项目——<a href=\"https://github.com/danylovolokh/VideoPlayerManager\" target=\"_blank\" rel=\"noopener\">VideoPlayerManager</a>，里面就用到<code>getLocalVisibleRect</code>来检测View的可见面积，进而控制在ListView和RecyclerView中哪一个Item应该显示什么内容。</p>\n<h1 id=\"四、小结\"><a href=\"#四、小结\" class=\"headerlink\" title=\"四、小结\"></a>四、小结</h1><p>本篇博客的思路，都是从View的外部去检查一个View的可见性。首先提到了一些基本的方法，然后介绍了几种常见的界面下可以怎么使用这些各种方法。</p>\n<p>如果是App开发者的话，自己写的界面自己去判断View的可见性，有上面这些方法应该就够用了。但是如果你是一个SDK开发者，给App开发者提供第三方的library时（通常是自定义View这类的库），也能够检查开发者的使用到的View，并根据可见性来自动管理一些View的操作，那就非常棒了。这时从外部去检查一个View的可见性可能就不够用了，我们可以换一个角度，从内部去检查一个View的可见性，具体内容详见<a href=\"http://unclechen.github.io/2016/10/21/Android-View的可见性检查方法-下篇/\">Android View的可见性检查方法-下篇</a></p>"},{"layout":"post","title":"Android WebView调用JS","date":"2015-11-26T00:00:00.000Z","_content":"\n个人认为Android的WebView一直是一个比较难搞的东西，因为它需要和很多的Web开发打交道，如果以前没接触过Web相关的开发就会觉得有些不爽，但是现在越来越多的应用都是Hybrid的模式，HTML5定稿一年多，感觉也挺火，这也是以做内容为主的App非常需要的技术，所以还得多学学。\n\n从Android4.4开始，WebView底层的实现从原来的Webkit变成了chromium，从而实现了对HTML5更好的支持，并且也和Chrome浏览器的一些特征越来越像。接触过WebView开发应该对`WebView.setWebContentsDebuggingEnabled(true)`不会陌生，正是从4.4开始的改变才使得WebView的调试变得更加方便。\n\n只是用来展示一个网页内容还好，如果要通过WebView执行JS脚本来和Native代码做一些通信，就要小心可能会踩到各种坑了。例如onclick事件没用，用onTap又会触发两次，4.4以上只能用loadUrl的方法执行一行js代码，还有可能会被转码，API17以上需要给Java方法添加注解，API17以下又要换一种方法保证安全性等等。在这里记录一下我自己的学习心得和踩过的坑。\n\n<!-- more -->\n\n# Java与JS互相调用\n\n在Android开发里面，我们说的WebView与JS互相调用，通常就是指用Java写的Native代码与JS的互相调用。所以下面我都会说Java调用JS，JS调用Java。而不是说WebView调用JS，JS调用WebView了。\n\n## 1.Java调用JS\n\n* 首先在JS中定义好即将提供给Native的方法`function javaCallJS()`\n* 然后在Java代码里，通过`WebView.loadUrl(\"javascript:javaCallJS()\"); `就可以调用JS的方法了。\n\n\n## 2.JS调用Java\n\n### 方法1:addJavascriptInterface：\n* 首先在Java里定义一个类`WebAppInterface`，然后在Java中通过`WebView.addJavascriptInterface(new WebAppInterface(), \"Android\");  `就可以在JS中创建这个类的实例`Android`对象了\n* 然后在JS中可以直接使用`Android`对象和它的方法，这样就实现了JS调用Java。\n\n### 方法2:iframe + CustomWebViewClient：\n* 在JS代码动态添加一个iframe，将其src属性设置为JS需要传给Java的参数（例如`bridge://uncle.nought.com?arg=xxx`）。\n* 在Java代码中，定义一个`CustomWebViewClient extends WebViewClient`，然后`mWebView.setWebViewClient(new CustomWebViewClient())`。\n* 在Java代码中的`CustomWebViewClient`中，重写`shouldOverrideUrlLoading(WebView view, String url)`方法，自己处理`url`参数，并`return true`。\n* 这时JS代码就可以把参数通过url传递给Java，Java拿到参数去执行相应的工作了。如果JS需要返回值，那么通过Java调用JS代码的形式把返回值返回给JS。\n\n\n## 方法小结\n\n### Java调用JS的代码\n其实比较简单，就是通过`WebView.loadUrl(\"javascript:javaCallJS()\")`loadUrl的形式。这里啰嗦一句，从Android4.4开始，由于chromium内核对安全性检查更加严格，所以并不是传入的所有JS代码，都能够通过loadUrl来执行它。详情可以看一下这里[https://code.google.com/p/android/issues/detail?id=69969](https://code.google.com/p/android/issues/detail?id=69969)，简单来说就是4.4以上的WebView在loadUrl时会给我们的参数做一个escape，因此参数就变了，很有可能变得JS不认识，无法执行了。所以这时候需要用到`WebView.evaluateJavascript(java.lang.String, android.webkit.ValueCallback<java.lang.String>)`这个方法。后面我再详细举个例子来说明这个问题。\n\n### JS调用Java的方法1：**addJavascriptInterface**\n这种方法是比较简单的。在WebView官方的文档里面有介绍如何结合WebView来进行WebApp的开发[http://developer.android.com/intl/zh-cn/guide/webapps/webview.html#AddingWebView](http://developer.android.com/intl/zh-cn/guide/webapps/webview.html#AddingWebView)。\n\n这里要再特别严肃地啰嗦一句！由于4.2（API<17）版本之前的WebView，在执行`WebView.addJavascriptInterface(Object obj, String interfaceName) `时存在一个漏洞，该漏洞的原因是在向JS中注入一个Java对象的时候，并没有对注册的这个Java类的方法调用做限制。导致JS代码里面可以利用发射机制，调用未注册的其他Java类。例如：\n\n```\n// Java里面注册了injectedObj对象以后\nmWebView.addJavascriptInterface(this, \"injectedObj\");\n\n// JS中可以去反射调用短信程序来进行恶意扣费\n<script>\n\tvar objSmsManager = injectedObj.getClass().forName(\"android.telephony.SmsManager\").getMethod(\"getDefault\",null).invoke(null,null);\n\tobjSmsManager.sendTextMessage(\"10086\",null,\"this message is sent by JS when webview is loading\", null, null);\n</script>\n\n// 这段摘自http://jaq.alibaba.com/blog.htm?id=48\n```\n\n可想而知，要是一个 **健康** 的网页被挂马之后，嵌入了这样的JS脚本，那么用户的手机来访问这个页面的时候就完蛋了，有兴趣的同学可以研究一下乌云的这个介绍[http://drops.wooyun.org/papers/548](http://drops.wooyun.org/papers/548)。Android4.2以后，修复了这个漏洞，但是要求我们在执行`WebView.addJavascriptInterface(Object obj, String interfaceName)`时，这个Object里面需要暴露给JS调用的方法，都需要加上注解`@JavascriptInterface`。\n\n那么4.2以下的系统该怎么办？？用下面的方法吧！\n\n### JS调用Java的方法2： **iframe + WebViewClient**\n这是一种比较Trick的方式。js在执行的过程中去给整个dom添加一个iframe，并将这个iframe设置为`display:none`。然后通过这个iframe去load一个url，触发WebViewClient的shouldOverrideUrlLoading()，然后在这里面，我们可以决定如何处理JS传递过来的参数。由于这个url我们是自己来解析和处理的，不打算交给WebView去直接load，所以我们其实可以自己定义一个协议，例如`bridge://uncle.nought.com?arg1=x&arg2=y`。然后在WebView的WebViewClient里面拿到这个`nought://`开头的url后，我们自己写Java代码处理arg等参数。\n\n说到这里，我们首先要了解一下WebViewClient，它决定了我们的WebView加载一条Url时的行为。如果你自定义一个CustomWebViewClient继承自WebViewClient，并重写里面的shouldOverrideUrlLoading()方法，然后把CustomWebViewClient的一个实例set给了你的WebView。那么就可以在shouldOverrideUrlLoading方法中将WebView里面本来将要load的url拦截下来，并决定是否由开发者自己的Java代码处理它。那么怎么才能自行处理这个url，而不是让WebView去自动load呢？我们看看官方文档[http://developer.android.com/intl/zh-cn/guide/webapps/webview.html](http://developer.android.com/intl/zh-cn/guide/webapps/webview.html)，总得来说是下面这样的：\n\n* CustomWebViewClient的shouldOverrideUrlLoading返回true，表示由Java处理url，WebView不用管。\n* CustomWebViewClient的shouldOverrideUrlLoading返回false，表示Java不管这个url，由WebView自己处理url（一般还会再添加一行代码`webView.loadUrl(url)`）。\n\n可能你还会觉得白白添加iframe进来不好吧，那么不加也是可以的。只要你能让当前WebView去加载一个url就可以了，所以这样`window.location.href='bridge://uncle.nought.com?arg=xxx'`都是可以的！并没有任何问题！\n\n# Java和JS互相调用实践\n\n先上个图，在这个demo里面，左边是一个WebView，右边是一个TextView。然后实现点击左边Web页面的按钮，传递参数给Java，并在TextView里面显示出来。点击右边的按钮，传递参数给JS，并在WebView里面显示出来。\n\n![hello-webview-js-demo](/content/images/hello-webview-js-demo.png)\n\n上面提到了两种JS调用Java的方法，所以在左边的WebView里面也设置两个按钮来演示这两种不同的方法。\n\n## 1.Java调用JS\n\n### 第一步：提供JS给Java调用的方法\n\n首先在我们的assets目录下放一个`hello.html`文件，方便WebView去加载。然后在JS代码添加一个给Java调用的方法：\n\n```\n<script type=\"text/javascript\">\n\t// JS提供给Java调用的方法\n\tfunction javaCallJS(arg) {\n\t\tdocument.getElementById(\"hello\").innerHTML += (\"<br/>\" + arg);\n\t}\n</script>\n```\n\n### 第二步：在Java代码中调用\n\n非常简单，直接在Java代码里调用刚才的JS Function。\n\n```\nmBtnJavaCallJs.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                /**\n                 * 注意参数的传递需要符合JS的语法，用单引号或者反斜杠转义\n                 */\n                String js = \"javascript:javaCallJS(\\\"Java called JS.\\\")\";\n                mWebView.loadUrl(js);\n            }\n        });\n```\n这样就实现了Java在WebView里面打印了“Java called JS.”。\n\n## JS调用Java\n\n由于 **addJavascriptInterface** 的方法比较简单，大家可以直接看看代码示例。下面介绍一下第二种方法：\n\n### 第一步：JS里面添加一个iframe来触发loadUrl\n\n```\n<script type=\"text/javascript\">\n\t// JS提供给Java调用的方法\n\tfunction javaCallJS(arg) {\n\t\tdocument.getElementById(\"hello\").innerHTML += (\"<br/>\" + arg);\n\t}\n\n\t/* \n\t *  JS通过创建一个不可见的iframe来调用Java\n\t */\n\tfunction jsCallJavaByIframe(arg) {\n\t\t//创建iframe\n\t\tvar iframe = document.createElement('iframe');\n\t\tiframe.id = \"hello-iframe\"\n\t\tiframe.style.display = 'none';\n\t\tiframe.src = \"bridge://uncle.nought.com?arg=\" + arg; // 把iframe的src设为要传递给Java的参数\n\t\tdocument.body.appendChild(iframe);\n\t}\n</script>\n```\n\n### 第二步：自定义一个WebViewClient\n\n```\npublic class HelloWebViewClient extends WebViewClient {\n    private static final String TAG = HelloWebViewClient.class.getSimpleName();\n    private static final String PREFIX = \"bridge://uncle.nought.com\";\n    private static final Pattern ARG_PATTERN = Pattern.compile(PREFIX + \"\\\\?arg=(.*)\");\n\n    private MainActivity.TextViewChanger mTextViewChanger;\n\n    public HelloWebViewClient(MainActivity.TextViewChanger textViewChanger) {\n        mTextViewChanger = textViewChanger;\n    }\n\n    @Override\n    public boolean shouldOverrideUrlLoading(WebView view, String url) {\n        Log.d(TAG, \"Get params from JS: \" + url);\n        parseJSParams(url);\n        return true;\n    }\n\n    private void parseJSParams(String url) {\n        // 解析自定义参数\n        if (url.startsWith(PREFIX)) {\n            Matcher matcher = ARG_PATTERN.matcher(url);\n            if (matcher.matches()) {\n                mTextViewChanger.changeText(matcher.group(1));\n            }\n        }\n    }\n}\n```\n\n### 第三步：异步刷新UI\n\n```\nprivate TextViewChanger mTextChanger = new TextViewChanger() {\n        @Override\n        public void changeText(final String arg) {\n            /**\n             * 官方说明文档：\n             * Note: The object that is bound to your JavaScript runs in another thread and not in the thread\n             * in which it was constructed.\n             *\n             * mWebAppInterface虽然是在UI线程创建的，但是bind到JS以后就是在另一条线程中运行的，因此刷新UI的时候需要注意\n             */\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    if (mTextView != null) {\n                        mTextView.append(\"\\n\" + arg);\n                    }\n                }\n            });\n        }\n    };\n```\n\n最后奉上[完整代码](https://github.com/unclechen/HelloWebViewJS)。\n\n这里只是一个demo示例，在生产环境里面，我们肯定是需要针对自己的项目定制一个Java和JS通信的 **bridge** 框架，传递参数的时候也可以用JSON处理，对url的协议解析也应该做一个检查。\n\nGithub上面也有不少开源的 **WebView&JSBridge** 。我随便搜了一下，就看到了这个[https://github.com/pedant/safe-java-js-webview-bridge](https://github.com/pedant/safe-java-js-webview-bridge)，实现的思路貌似是差不多的。另外iOS也有不少类似的框架，[https://github.com/marcuswestin/WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)这个项目有4000+的star，可见iOS上面的WebApp需求还是非常多的，因为它不像Android一样可以用DexClassLoader去做热更新，通过WebApp的形式来动态更新App对iOS的意义非常大。\n\n# 遇到的坑\n\n## 1.HTML5的LocalStorage\n\nLocal Storage是h5里面常用到的一个缓存，如果加载的页面中用js去调用Local Storage的话，很容易出现`\"Uncaught TypeError: Cannot read property 'getItem' of null\", source: http://xxx.js`，原因就是没有开启WebView的h5缓存功能。于是上stackoverflow上搜了一下，加上下面这句：\n\n```\nmWebView..getSettings().setDomStorageEnabled(true);\n```\n\n就好了。\n\n待补充。。。前面说到4.4开始有些JS代码得用evaluateJavascript来执行。blabla。。\n\n# PS\n\n手头看到了篇WebView文章，[Android 4.4 中 WebView 使用注意事项](https://github.com/cundong/blog/blob/master/Android%204.4%20%E4%B8%AD%20WebView%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md)，可参考参考。\n\n\n\n\n\n","source":"_posts/Android WebView调用JS.markdown","raw":"---\nlayout: post\ntitle: Android WebView调用JS\ndate: '2015-11-26'\ntags:\n  - Android\n  - WebView\ncategories: \n  - 技术\n---\n\n个人认为Android的WebView一直是一个比较难搞的东西，因为它需要和很多的Web开发打交道，如果以前没接触过Web相关的开发就会觉得有些不爽，但是现在越来越多的应用都是Hybrid的模式，HTML5定稿一年多，感觉也挺火，这也是以做内容为主的App非常需要的技术，所以还得多学学。\n\n从Android4.4开始，WebView底层的实现从原来的Webkit变成了chromium，从而实现了对HTML5更好的支持，并且也和Chrome浏览器的一些特征越来越像。接触过WebView开发应该对`WebView.setWebContentsDebuggingEnabled(true)`不会陌生，正是从4.4开始的改变才使得WebView的调试变得更加方便。\n\n只是用来展示一个网页内容还好，如果要通过WebView执行JS脚本来和Native代码做一些通信，就要小心可能会踩到各种坑了。例如onclick事件没用，用onTap又会触发两次，4.4以上只能用loadUrl的方法执行一行js代码，还有可能会被转码，API17以上需要给Java方法添加注解，API17以下又要换一种方法保证安全性等等。在这里记录一下我自己的学习心得和踩过的坑。\n\n<!-- more -->\n\n# Java与JS互相调用\n\n在Android开发里面，我们说的WebView与JS互相调用，通常就是指用Java写的Native代码与JS的互相调用。所以下面我都会说Java调用JS，JS调用Java。而不是说WebView调用JS，JS调用WebView了。\n\n## 1.Java调用JS\n\n* 首先在JS中定义好即将提供给Native的方法`function javaCallJS()`\n* 然后在Java代码里，通过`WebView.loadUrl(\"javascript:javaCallJS()\"); `就可以调用JS的方法了。\n\n\n## 2.JS调用Java\n\n### 方法1:addJavascriptInterface：\n* 首先在Java里定义一个类`WebAppInterface`，然后在Java中通过`WebView.addJavascriptInterface(new WebAppInterface(), \"Android\");  `就可以在JS中创建这个类的实例`Android`对象了\n* 然后在JS中可以直接使用`Android`对象和它的方法，这样就实现了JS调用Java。\n\n### 方法2:iframe + CustomWebViewClient：\n* 在JS代码动态添加一个iframe，将其src属性设置为JS需要传给Java的参数（例如`bridge://uncle.nought.com?arg=xxx`）。\n* 在Java代码中，定义一个`CustomWebViewClient extends WebViewClient`，然后`mWebView.setWebViewClient(new CustomWebViewClient())`。\n* 在Java代码中的`CustomWebViewClient`中，重写`shouldOverrideUrlLoading(WebView view, String url)`方法，自己处理`url`参数，并`return true`。\n* 这时JS代码就可以把参数通过url传递给Java，Java拿到参数去执行相应的工作了。如果JS需要返回值，那么通过Java调用JS代码的形式把返回值返回给JS。\n\n\n## 方法小结\n\n### Java调用JS的代码\n其实比较简单，就是通过`WebView.loadUrl(\"javascript:javaCallJS()\")`loadUrl的形式。这里啰嗦一句，从Android4.4开始，由于chromium内核对安全性检查更加严格，所以并不是传入的所有JS代码，都能够通过loadUrl来执行它。详情可以看一下这里[https://code.google.com/p/android/issues/detail?id=69969](https://code.google.com/p/android/issues/detail?id=69969)，简单来说就是4.4以上的WebView在loadUrl时会给我们的参数做一个escape，因此参数就变了，很有可能变得JS不认识，无法执行了。所以这时候需要用到`WebView.evaluateJavascript(java.lang.String, android.webkit.ValueCallback<java.lang.String>)`这个方法。后面我再详细举个例子来说明这个问题。\n\n### JS调用Java的方法1：**addJavascriptInterface**\n这种方法是比较简单的。在WebView官方的文档里面有介绍如何结合WebView来进行WebApp的开发[http://developer.android.com/intl/zh-cn/guide/webapps/webview.html#AddingWebView](http://developer.android.com/intl/zh-cn/guide/webapps/webview.html#AddingWebView)。\n\n这里要再特别严肃地啰嗦一句！由于4.2（API<17）版本之前的WebView，在执行`WebView.addJavascriptInterface(Object obj, String interfaceName) `时存在一个漏洞，该漏洞的原因是在向JS中注入一个Java对象的时候，并没有对注册的这个Java类的方法调用做限制。导致JS代码里面可以利用发射机制，调用未注册的其他Java类。例如：\n\n```\n// Java里面注册了injectedObj对象以后\nmWebView.addJavascriptInterface(this, \"injectedObj\");\n\n// JS中可以去反射调用短信程序来进行恶意扣费\n<script>\n\tvar objSmsManager = injectedObj.getClass().forName(\"android.telephony.SmsManager\").getMethod(\"getDefault\",null).invoke(null,null);\n\tobjSmsManager.sendTextMessage(\"10086\",null,\"this message is sent by JS when webview is loading\", null, null);\n</script>\n\n// 这段摘自http://jaq.alibaba.com/blog.htm?id=48\n```\n\n可想而知，要是一个 **健康** 的网页被挂马之后，嵌入了这样的JS脚本，那么用户的手机来访问这个页面的时候就完蛋了，有兴趣的同学可以研究一下乌云的这个介绍[http://drops.wooyun.org/papers/548](http://drops.wooyun.org/papers/548)。Android4.2以后，修复了这个漏洞，但是要求我们在执行`WebView.addJavascriptInterface(Object obj, String interfaceName)`时，这个Object里面需要暴露给JS调用的方法，都需要加上注解`@JavascriptInterface`。\n\n那么4.2以下的系统该怎么办？？用下面的方法吧！\n\n### JS调用Java的方法2： **iframe + WebViewClient**\n这是一种比较Trick的方式。js在执行的过程中去给整个dom添加一个iframe，并将这个iframe设置为`display:none`。然后通过这个iframe去load一个url，触发WebViewClient的shouldOverrideUrlLoading()，然后在这里面，我们可以决定如何处理JS传递过来的参数。由于这个url我们是自己来解析和处理的，不打算交给WebView去直接load，所以我们其实可以自己定义一个协议，例如`bridge://uncle.nought.com?arg1=x&arg2=y`。然后在WebView的WebViewClient里面拿到这个`nought://`开头的url后，我们自己写Java代码处理arg等参数。\n\n说到这里，我们首先要了解一下WebViewClient，它决定了我们的WebView加载一条Url时的行为。如果你自定义一个CustomWebViewClient继承自WebViewClient，并重写里面的shouldOverrideUrlLoading()方法，然后把CustomWebViewClient的一个实例set给了你的WebView。那么就可以在shouldOverrideUrlLoading方法中将WebView里面本来将要load的url拦截下来，并决定是否由开发者自己的Java代码处理它。那么怎么才能自行处理这个url，而不是让WebView去自动load呢？我们看看官方文档[http://developer.android.com/intl/zh-cn/guide/webapps/webview.html](http://developer.android.com/intl/zh-cn/guide/webapps/webview.html)，总得来说是下面这样的：\n\n* CustomWebViewClient的shouldOverrideUrlLoading返回true，表示由Java处理url，WebView不用管。\n* CustomWebViewClient的shouldOverrideUrlLoading返回false，表示Java不管这个url，由WebView自己处理url（一般还会再添加一行代码`webView.loadUrl(url)`）。\n\n可能你还会觉得白白添加iframe进来不好吧，那么不加也是可以的。只要你能让当前WebView去加载一个url就可以了，所以这样`window.location.href='bridge://uncle.nought.com?arg=xxx'`都是可以的！并没有任何问题！\n\n# Java和JS互相调用实践\n\n先上个图，在这个demo里面，左边是一个WebView，右边是一个TextView。然后实现点击左边Web页面的按钮，传递参数给Java，并在TextView里面显示出来。点击右边的按钮，传递参数给JS，并在WebView里面显示出来。\n\n![hello-webview-js-demo](/content/images/hello-webview-js-demo.png)\n\n上面提到了两种JS调用Java的方法，所以在左边的WebView里面也设置两个按钮来演示这两种不同的方法。\n\n## 1.Java调用JS\n\n### 第一步：提供JS给Java调用的方法\n\n首先在我们的assets目录下放一个`hello.html`文件，方便WebView去加载。然后在JS代码添加一个给Java调用的方法：\n\n```\n<script type=\"text/javascript\">\n\t// JS提供给Java调用的方法\n\tfunction javaCallJS(arg) {\n\t\tdocument.getElementById(\"hello\").innerHTML += (\"<br/>\" + arg);\n\t}\n</script>\n```\n\n### 第二步：在Java代码中调用\n\n非常简单，直接在Java代码里调用刚才的JS Function。\n\n```\nmBtnJavaCallJs.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                /**\n                 * 注意参数的传递需要符合JS的语法，用单引号或者反斜杠转义\n                 */\n                String js = \"javascript:javaCallJS(\\\"Java called JS.\\\")\";\n                mWebView.loadUrl(js);\n            }\n        });\n```\n这样就实现了Java在WebView里面打印了“Java called JS.”。\n\n## JS调用Java\n\n由于 **addJavascriptInterface** 的方法比较简单，大家可以直接看看代码示例。下面介绍一下第二种方法：\n\n### 第一步：JS里面添加一个iframe来触发loadUrl\n\n```\n<script type=\"text/javascript\">\n\t// JS提供给Java调用的方法\n\tfunction javaCallJS(arg) {\n\t\tdocument.getElementById(\"hello\").innerHTML += (\"<br/>\" + arg);\n\t}\n\n\t/* \n\t *  JS通过创建一个不可见的iframe来调用Java\n\t */\n\tfunction jsCallJavaByIframe(arg) {\n\t\t//创建iframe\n\t\tvar iframe = document.createElement('iframe');\n\t\tiframe.id = \"hello-iframe\"\n\t\tiframe.style.display = 'none';\n\t\tiframe.src = \"bridge://uncle.nought.com?arg=\" + arg; // 把iframe的src设为要传递给Java的参数\n\t\tdocument.body.appendChild(iframe);\n\t}\n</script>\n```\n\n### 第二步：自定义一个WebViewClient\n\n```\npublic class HelloWebViewClient extends WebViewClient {\n    private static final String TAG = HelloWebViewClient.class.getSimpleName();\n    private static final String PREFIX = \"bridge://uncle.nought.com\";\n    private static final Pattern ARG_PATTERN = Pattern.compile(PREFIX + \"\\\\?arg=(.*)\");\n\n    private MainActivity.TextViewChanger mTextViewChanger;\n\n    public HelloWebViewClient(MainActivity.TextViewChanger textViewChanger) {\n        mTextViewChanger = textViewChanger;\n    }\n\n    @Override\n    public boolean shouldOverrideUrlLoading(WebView view, String url) {\n        Log.d(TAG, \"Get params from JS: \" + url);\n        parseJSParams(url);\n        return true;\n    }\n\n    private void parseJSParams(String url) {\n        // 解析自定义参数\n        if (url.startsWith(PREFIX)) {\n            Matcher matcher = ARG_PATTERN.matcher(url);\n            if (matcher.matches()) {\n                mTextViewChanger.changeText(matcher.group(1));\n            }\n        }\n    }\n}\n```\n\n### 第三步：异步刷新UI\n\n```\nprivate TextViewChanger mTextChanger = new TextViewChanger() {\n        @Override\n        public void changeText(final String arg) {\n            /**\n             * 官方说明文档：\n             * Note: The object that is bound to your JavaScript runs in another thread and not in the thread\n             * in which it was constructed.\n             *\n             * mWebAppInterface虽然是在UI线程创建的，但是bind到JS以后就是在另一条线程中运行的，因此刷新UI的时候需要注意\n             */\n            runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    if (mTextView != null) {\n                        mTextView.append(\"\\n\" + arg);\n                    }\n                }\n            });\n        }\n    };\n```\n\n最后奉上[完整代码](https://github.com/unclechen/HelloWebViewJS)。\n\n这里只是一个demo示例，在生产环境里面，我们肯定是需要针对自己的项目定制一个Java和JS通信的 **bridge** 框架，传递参数的时候也可以用JSON处理，对url的协议解析也应该做一个检查。\n\nGithub上面也有不少开源的 **WebView&JSBridge** 。我随便搜了一下，就看到了这个[https://github.com/pedant/safe-java-js-webview-bridge](https://github.com/pedant/safe-java-js-webview-bridge)，实现的思路貌似是差不多的。另外iOS也有不少类似的框架，[https://github.com/marcuswestin/WebViewJavascriptBridge](https://github.com/marcuswestin/WebViewJavascriptBridge)这个项目有4000+的star，可见iOS上面的WebApp需求还是非常多的，因为它不像Android一样可以用DexClassLoader去做热更新，通过WebApp的形式来动态更新App对iOS的意义非常大。\n\n# 遇到的坑\n\n## 1.HTML5的LocalStorage\n\nLocal Storage是h5里面常用到的一个缓存，如果加载的页面中用js去调用Local Storage的话，很容易出现`\"Uncaught TypeError: Cannot read property 'getItem' of null\", source: http://xxx.js`，原因就是没有开启WebView的h5缓存功能。于是上stackoverflow上搜了一下，加上下面这句：\n\n```\nmWebView..getSettings().setDomStorageEnabled(true);\n```\n\n就好了。\n\n待补充。。。前面说到4.4开始有些JS代码得用evaluateJavascript来执行。blabla。。\n\n# PS\n\n手头看到了篇WebView文章，[Android 4.4 中 WebView 使用注意事项](https://github.com/cundong/blog/blob/master/Android%204.4%20%E4%B8%AD%20WebView%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md)，可参考参考。\n\n\n\n\n\n","slug":"Android WebView调用JS","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8dw000cmtsxu5zswyfy","content":"<p>个人认为Android的WebView一直是一个比较难搞的东西，因为它需要和很多的Web开发打交道，如果以前没接触过Web相关的开发就会觉得有些不爽，但是现在越来越多的应用都是Hybrid的模式，HTML5定稿一年多，感觉也挺火，这也是以做内容为主的App非常需要的技术，所以还得多学学。</p>\n<p>从Android4.4开始，WebView底层的实现从原来的Webkit变成了chromium，从而实现了对HTML5更好的支持，并且也和Chrome浏览器的一些特征越来越像。接触过WebView开发应该对<code>WebView.setWebContentsDebuggingEnabled(true)</code>不会陌生，正是从4.4开始的改变才使得WebView的调试变得更加方便。</p>\n<p>只是用来展示一个网页内容还好，如果要通过WebView执行JS脚本来和Native代码做一些通信，就要小心可能会踩到各种坑了。例如onclick事件没用，用onTap又会触发两次，4.4以上只能用loadUrl的方法执行一行js代码，还有可能会被转码，API17以上需要给Java方法添加注解，API17以下又要换一种方法保证安全性等等。在这里记录一下我自己的学习心得和踩过的坑。</p>\n<a id=\"more\"></a>\n<h1 id=\"Java与JS互相调用\"><a href=\"#Java与JS互相调用\" class=\"headerlink\" title=\"Java与JS互相调用\"></a>Java与JS互相调用</h1><p>在Android开发里面，我们说的WebView与JS互相调用，通常就是指用Java写的Native代码与JS的互相调用。所以下面我都会说Java调用JS，JS调用Java。而不是说WebView调用JS，JS调用WebView了。</p>\n<h2 id=\"1-Java调用JS\"><a href=\"#1-Java调用JS\" class=\"headerlink\" title=\"1.Java调用JS\"></a>1.Java调用JS</h2><ul>\n<li>首先在JS中定义好即将提供给Native的方法<code>function javaCallJS()</code></li>\n<li>然后在Java代码里，通过<code>WebView.loadUrl(&quot;javascript:javaCallJS()&quot;);</code>就可以调用JS的方法了。</li>\n</ul>\n<h2 id=\"2-JS调用Java\"><a href=\"#2-JS调用Java\" class=\"headerlink\" title=\"2.JS调用Java\"></a>2.JS调用Java</h2><h3 id=\"方法1-addJavascriptInterface：\"><a href=\"#方法1-addJavascriptInterface：\" class=\"headerlink\" title=\"方法1:addJavascriptInterface：\"></a>方法1:addJavascriptInterface：</h3><ul>\n<li>首先在Java里定义一个类<code>WebAppInterface</code>，然后在Java中通过<code>WebView.addJavascriptInterface(new WebAppInterface(), &quot;Android&quot;);</code>就可以在JS中创建这个类的实例<code>Android</code>对象了</li>\n<li>然后在JS中可以直接使用<code>Android</code>对象和它的方法，这样就实现了JS调用Java。</li>\n</ul>\n<h3 id=\"方法2-iframe-CustomWebViewClient：\"><a href=\"#方法2-iframe-CustomWebViewClient：\" class=\"headerlink\" title=\"方法2:iframe + CustomWebViewClient：\"></a>方法2:iframe + CustomWebViewClient：</h3><ul>\n<li>在JS代码动态添加一个iframe，将其src属性设置为JS需要传给Java的参数（例如<code>bridge://uncle.nought.com?arg=xxx</code>）。</li>\n<li>在Java代码中，定义一个<code>CustomWebViewClient extends WebViewClient</code>，然后<code>mWebView.setWebViewClient(new CustomWebViewClient())</code>。</li>\n<li>在Java代码中的<code>CustomWebViewClient</code>中，重写<code>shouldOverrideUrlLoading(WebView view, String url)</code>方法，自己处理<code>url</code>参数，并<code>return true</code>。</li>\n<li>这时JS代码就可以把参数通过url传递给Java，Java拿到参数去执行相应的工作了。如果JS需要返回值，那么通过Java调用JS代码的形式把返回值返回给JS。</li>\n</ul>\n<h2 id=\"方法小结\"><a href=\"#方法小结\" class=\"headerlink\" title=\"方法小结\"></a>方法小结</h2><h3 id=\"Java调用JS的代码\"><a href=\"#Java调用JS的代码\" class=\"headerlink\" title=\"Java调用JS的代码\"></a>Java调用JS的代码</h3><p>其实比较简单，就是通过<code>WebView.loadUrl(&quot;javascript:javaCallJS()&quot;)</code>loadUrl的形式。这里啰嗦一句，从Android4.4开始，由于chromium内核对安全性检查更加严格，所以并不是传入的所有JS代码，都能够通过loadUrl来执行它。详情可以看一下这里<a href=\"https://code.google.com/p/android/issues/detail?id=69969\" target=\"_blank\" rel=\"noopener\">https://code.google.com/p/android/issues/detail?id=69969</a>，简单来说就是4.4以上的WebView在loadUrl时会给我们的参数做一个escape，因此参数就变了，很有可能变得JS不认识，无法执行了。所以这时候需要用到<code>WebView.evaluateJavascript(java.lang.String, android.webkit.ValueCallback&lt;java.lang.String&gt;)</code>这个方法。后面我再详细举个例子来说明这个问题。</p>\n<h3 id=\"JS调用Java的方法1：addJavascriptInterface\"><a href=\"#JS调用Java的方法1：addJavascriptInterface\" class=\"headerlink\" title=\"JS调用Java的方法1：addJavascriptInterface\"></a>JS调用Java的方法1：<strong>addJavascriptInterface</strong></h3><p>这种方法是比较简单的。在WebView官方的文档里面有介绍如何结合WebView来进行WebApp的开发<a href=\"http://developer.android.com/intl/zh-cn/guide/webapps/webview.html#AddingWebView\" target=\"_blank\" rel=\"noopener\">http://developer.android.com/intl/zh-cn/guide/webapps/webview.html#AddingWebView</a>。</p>\n<p>这里要再特别严肃地啰嗦一句！由于4.2（API&lt;17）版本之前的WebView，在执行<code>WebView.addJavascriptInterface(Object obj, String interfaceName)</code>时存在一个漏洞，该漏洞的原因是在向JS中注入一个Java对象的时候，并没有对注册的这个Java类的方法调用做限制。导致JS代码里面可以利用发射机制，调用未注册的其他Java类。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Java里面注册了injectedObj对象以后</span></span><br><span class=\"line\">mWebView.addJavascriptInterface(<span class=\"keyword\">this</span>, <span class=\"string\">\"injectedObj\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JS中可以去反射调用短信程序来进行恶意扣费</span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> objSmsManager = injectedObj.getClass().forName(<span class=\"string\">\"android.telephony.SmsManager\"</span>).getMethod(<span class=\"string\">\"getDefault\"</span>,<span class=\"literal\">null</span>).invoke(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">\tobjSmsManager.sendTextMessage(<span class=\"string\">\"10086\"</span>,<span class=\"literal\">null</span>,<span class=\"string\">\"this message is sent by JS when webview is loading\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 这段摘自http:/</span><span class=\"regexp\">/jaq.alibaba.com/</span>blog.htm?id=<span class=\"number\">48</span></span><br></pre></td></tr></table></figure>\n<p>可想而知，要是一个 <strong>健康</strong> 的网页被挂马之后，嵌入了这样的JS脚本，那么用户的手机来访问这个页面的时候就完蛋了，有兴趣的同学可以研究一下乌云的这个介绍<a href=\"http://drops.wooyun.org/papers/548\" target=\"_blank\" rel=\"noopener\">http://drops.wooyun.org/papers/548</a>。Android4.2以后，修复了这个漏洞，但是要求我们在执行<code>WebView.addJavascriptInterface(Object obj, String interfaceName)</code>时，这个Object里面需要暴露给JS调用的方法，都需要加上注解<code>@JavascriptInterface</code>。</p>\n<p>那么4.2以下的系统该怎么办？？用下面的方法吧！</p>\n<h3 id=\"JS调用Java的方法2：-iframe-WebViewClient\"><a href=\"#JS调用Java的方法2：-iframe-WebViewClient\" class=\"headerlink\" title=\"JS调用Java的方法2： iframe + WebViewClient\"></a>JS调用Java的方法2： <strong>iframe + WebViewClient</strong></h3><p>这是一种比较Trick的方式。js在执行的过程中去给整个dom添加一个iframe，并将这个iframe设置为<code>display:none</code>。然后通过这个iframe去load一个url，触发WebViewClient的shouldOverrideUrlLoading()，然后在这里面，我们可以决定如何处理JS传递过来的参数。由于这个url我们是自己来解析和处理的，不打算交给WebView去直接load，所以我们其实可以自己定义一个协议，例如<code>bridge://uncle.nought.com?arg1=x&amp;arg2=y</code>。然后在WebView的WebViewClient里面拿到这个<code>nought://</code>开头的url后，我们自己写Java代码处理arg等参数。</p>\n<p>说到这里，我们首先要了解一下WebViewClient，它决定了我们的WebView加载一条Url时的行为。如果你自定义一个CustomWebViewClient继承自WebViewClient，并重写里面的shouldOverrideUrlLoading()方法，然后把CustomWebViewClient的一个实例set给了你的WebView。那么就可以在shouldOverrideUrlLoading方法中将WebView里面本来将要load的url拦截下来，并决定是否由开发者自己的Java代码处理它。那么怎么才能自行处理这个url，而不是让WebView去自动load呢？我们看看官方文档<a href=\"http://developer.android.com/intl/zh-cn/guide/webapps/webview.html\" target=\"_blank\" rel=\"noopener\">http://developer.android.com/intl/zh-cn/guide/webapps/webview.html</a>，总得来说是下面这样的：</p>\n<ul>\n<li>CustomWebViewClient的shouldOverrideUrlLoading返回true，表示由Java处理url，WebView不用管。</li>\n<li>CustomWebViewClient的shouldOverrideUrlLoading返回false，表示Java不管这个url，由WebView自己处理url（一般还会再添加一行代码<code>webView.loadUrl(url)</code>）。</li>\n</ul>\n<p>可能你还会觉得白白添加iframe进来不好吧，那么不加也是可以的。只要你能让当前WebView去加载一个url就可以了，所以这样<code>window.location.href=&#39;bridge://uncle.nought.com?arg=xxx&#39;</code>都是可以的！并没有任何问题！</p>\n<h1 id=\"Java和JS互相调用实践\"><a href=\"#Java和JS互相调用实践\" class=\"headerlink\" title=\"Java和JS互相调用实践\"></a>Java和JS互相调用实践</h1><p>先上个图，在这个demo里面，左边是一个WebView，右边是一个TextView。然后实现点击左边Web页面的按钮，传递参数给Java，并在TextView里面显示出来。点击右边的按钮，传递参数给JS，并在WebView里面显示出来。</p>\n<p><img src=\"/content/images/hello-webview-js-demo.png\" alt=\"hello-webview-js-demo\"></p>\n<p>上面提到了两种JS调用Java的方法，所以在左边的WebView里面也设置两个按钮来演示这两种不同的方法。</p>\n<h2 id=\"1-Java调用JS-1\"><a href=\"#1-Java调用JS-1\" class=\"headerlink\" title=\"1.Java调用JS\"></a>1.Java调用JS</h2><h3 id=\"第一步：提供JS给Java调用的方法\"><a href=\"#第一步：提供JS给Java调用的方法\" class=\"headerlink\" title=\"第一步：提供JS给Java调用的方法\"></a>第一步：提供JS给Java调用的方法</h3><p>首先在我们的assets目录下放一个<code>hello.html</code>文件，方便WebView去加载。然后在JS代码添加一个给Java调用的方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"comment\">// JS提供给Java调用的方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">javaCallJS</span><span class=\"params\">(arg)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"hello\"</span>).innerHTML += (<span class=\"string\">\"&lt;br/&gt;\"</span> + arg);</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第二步：在Java代码中调用\"><a href=\"#第二步：在Java代码中调用\" class=\"headerlink\" title=\"第二步：在Java代码中调用\"></a>第二步：在Java代码中调用</h3><p>非常简单，直接在Java代码里调用刚才的JS Function。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mBtnJavaCallJs.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> onClick(View v) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * 注意参数的传递需要符合JS的语法，用单引号或者反斜杠转义</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"built_in\">String</span> js = <span class=\"string\">\"javascript:javaCallJS(\\\"Java called JS.\\\")\"</span>;</span><br><span class=\"line\">                mWebView.loadUrl(js);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<p>这样就实现了Java在WebView里面打印了“Java called JS.”。</p>\n<h2 id=\"JS调用Java\"><a href=\"#JS调用Java\" class=\"headerlink\" title=\"JS调用Java\"></a>JS调用Java</h2><p>由于 <strong>addJavascriptInterface</strong> 的方法比较简单，大家可以直接看看代码示例。下面介绍一下第二种方法：</p>\n<h3 id=\"第一步：JS里面添加一个iframe来触发loadUrl\"><a href=\"#第一步：JS里面添加一个iframe来触发loadUrl\" class=\"headerlink\" title=\"第一步：JS里面添加一个iframe来触发loadUrl\"></a>第一步：JS里面添加一个iframe来触发loadUrl</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"comment\">// JS提供给Java调用的方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">javaCallJS</span><span class=\"params\">(arg)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"hello\"</span>).innerHTML += (<span class=\"string\">\"&lt;br/&gt;\"</span> + arg);</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">\t/* </span></span><br><span class=\"line\"><span class=\"undefined\">\t *  JS通过创建一个不可见的iframe来调用Java</span></span><br><span class=\"line\"><span class=\"undefined\">\t */</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsCallJavaByIframe</span><span class=\"params\">(arg)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">//创建iframe</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tiframe.id = <span class=\"string\">\"hello-iframe\"</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tiframe.style.display = <span class=\"string\">'none'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tiframe.src = <span class=\"string\">\"bridge://uncle.nought.com?arg=\"</span> + arg; <span class=\"comment\">// 把iframe的src设为要传递给Java的参数</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">document</span>.body.appendChild(iframe);</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第二步：自定义一个WebViewClient\"><a href=\"#第二步：自定义一个WebViewClient\" class=\"headerlink\" title=\"第二步：自定义一个WebViewClient\"></a>第二步：自定义一个WebViewClient</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWebViewClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebViewClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = HelloWebViewClient.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PREFIX = <span class=\"string\">\"bridge://uncle.nought.com\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Pattern ARG_PATTERN = Pattern.compile(PREFIX + <span class=\"string\">\"\\\\?arg=(.*)\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MainActivity.TextViewChanger mTextViewChanger;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloWebViewClient</span><span class=\"params\">(MainActivity.TextViewChanger textViewChanger)</span> </span>&#123;</span><br><span class=\"line\">        mTextViewChanger = textViewChanger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"Get params from JS: \"</span> + url);</span><br><span class=\"line\">        parseJSParams(url);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">parseJSParams</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解析自定义参数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (url.startsWith(PREFIX)) &#123;</span><br><span class=\"line\">            Matcher matcher = ARG_PATTERN.matcher(url);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (matcher.matches()) &#123;</span><br><span class=\"line\">                mTextViewChanger.changeText(matcher.group(<span class=\"number\">1</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步：异步刷新UI\"><a href=\"#第三步：异步刷新UI\" class=\"headerlink\" title=\"第三步：异步刷新UI\"></a>第三步：异步刷新UI</h3><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> TextViewChanger mTextChanger = <span class=\"keyword\">new</span> TextViewChanger() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">changeText</span><span class=\"params\">(<span class=\"keyword\">final</span> String arg)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 官方说明文档：</span></span><br><span class=\"line\"><span class=\"comment\">             * Note: The object that is bound to your JavaScript runs in another thread and not in the thread</span></span><br><span class=\"line\"><span class=\"comment\">             * in which it was constructed.</span></span><br><span class=\"line\"><span class=\"comment\">             *</span></span><br><span class=\"line\"><span class=\"comment\">             * mWebAppInterface虽然是在UI线程创建的，但是bind到JS以后就是在另一条线程中运行的，因此刷新UI的时候需要注意</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            runOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mTextView != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        mTextView.append(<span class=\"string\">\"\\n\"</span> + arg);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>最后奉上<a href=\"https://github.com/unclechen/HelloWebViewJS\" target=\"_blank\" rel=\"noopener\">完整代码</a>。</p>\n<p>这里只是一个demo示例，在生产环境里面，我们肯定是需要针对自己的项目定制一个Java和JS通信的 <strong>bridge</strong> 框架，传递参数的时候也可以用JSON处理，对url的协议解析也应该做一个检查。</p>\n<p>Github上面也有不少开源的 <strong>WebView&amp;JSBridge</strong> 。我随便搜了一下，就看到了这个<a href=\"https://github.com/pedant/safe-java-js-webview-bridge\" target=\"_blank\" rel=\"noopener\">https://github.com/pedant/safe-java-js-webview-bridge</a>，实现的思路貌似是差不多的。另外iOS也有不少类似的框架，<a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\" target=\"_blank\" rel=\"noopener\">https://github.com/marcuswestin/WebViewJavascriptBridge</a>这个项目有4000+的star，可见iOS上面的WebApp需求还是非常多的，因为它不像Android一样可以用DexClassLoader去做热更新，通过WebApp的形式来动态更新App对iOS的意义非常大。</p>\n<h1 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h1><h2 id=\"1-HTML5的LocalStorage\"><a href=\"#1-HTML5的LocalStorage\" class=\"headerlink\" title=\"1.HTML5的LocalStorage\"></a>1.HTML5的LocalStorage</h2><p>Local Storage是h5里面常用到的一个缓存，如果加载的页面中用js去调用Local Storage的话，很容易出现<code>&quot;Uncaught TypeError: Cannot read property &#39;getItem&#39; of null&quot;, source: http://xxx.js</code>，原因就是没有开启WebView的h5缓存功能。于是上stackoverflow上搜了一下，加上下面这句：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mWebView</span>.<span class=\"selector-class\">.getSettings</span>()<span class=\"selector-class\">.setDomStorageEnabled</span>(<span class=\"selector-tag\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>就好了。</p>\n<p>待补充。。。前面说到4.4开始有些JS代码得用evaluateJavascript来执行。blabla。。</p>\n<h1 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS\"></a>PS</h1><p>手头看到了篇WebView文章，<a href=\"https://github.com/cundong/blog/blob/master/Android%204.4%20%E4%B8%AD%20WebView%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md\" target=\"_blank\" rel=\"noopener\">Android 4.4 中 WebView 使用注意事项</a>，可参考参考。</p>\n","site":{"data":{}},"excerpt":"<p>个人认为Android的WebView一直是一个比较难搞的东西，因为它需要和很多的Web开发打交道，如果以前没接触过Web相关的开发就会觉得有些不爽，但是现在越来越多的应用都是Hybrid的模式，HTML5定稿一年多，感觉也挺火，这也是以做内容为主的App非常需要的技术，所以还得多学学。</p>\n<p>从Android4.4开始，WebView底层的实现从原来的Webkit变成了chromium，从而实现了对HTML5更好的支持，并且也和Chrome浏览器的一些特征越来越像。接触过WebView开发应该对<code>WebView.setWebContentsDebuggingEnabled(true)</code>不会陌生，正是从4.4开始的改变才使得WebView的调试变得更加方便。</p>\n<p>只是用来展示一个网页内容还好，如果要通过WebView执行JS脚本来和Native代码做一些通信，就要小心可能会踩到各种坑了。例如onclick事件没用，用onTap又会触发两次，4.4以上只能用loadUrl的方法执行一行js代码，还有可能会被转码，API17以上需要给Java方法添加注解，API17以下又要换一种方法保证安全性等等。在这里记录一下我自己的学习心得和踩过的坑。</p>","more":"<h1 id=\"Java与JS互相调用\"><a href=\"#Java与JS互相调用\" class=\"headerlink\" title=\"Java与JS互相调用\"></a>Java与JS互相调用</h1><p>在Android开发里面，我们说的WebView与JS互相调用，通常就是指用Java写的Native代码与JS的互相调用。所以下面我都会说Java调用JS，JS调用Java。而不是说WebView调用JS，JS调用WebView了。</p>\n<h2 id=\"1-Java调用JS\"><a href=\"#1-Java调用JS\" class=\"headerlink\" title=\"1.Java调用JS\"></a>1.Java调用JS</h2><ul>\n<li>首先在JS中定义好即将提供给Native的方法<code>function javaCallJS()</code></li>\n<li>然后在Java代码里，通过<code>WebView.loadUrl(&quot;javascript:javaCallJS()&quot;);</code>就可以调用JS的方法了。</li>\n</ul>\n<h2 id=\"2-JS调用Java\"><a href=\"#2-JS调用Java\" class=\"headerlink\" title=\"2.JS调用Java\"></a>2.JS调用Java</h2><h3 id=\"方法1-addJavascriptInterface：\"><a href=\"#方法1-addJavascriptInterface：\" class=\"headerlink\" title=\"方法1:addJavascriptInterface：\"></a>方法1:addJavascriptInterface：</h3><ul>\n<li>首先在Java里定义一个类<code>WebAppInterface</code>，然后在Java中通过<code>WebView.addJavascriptInterface(new WebAppInterface(), &quot;Android&quot;);</code>就可以在JS中创建这个类的实例<code>Android</code>对象了</li>\n<li>然后在JS中可以直接使用<code>Android</code>对象和它的方法，这样就实现了JS调用Java。</li>\n</ul>\n<h3 id=\"方法2-iframe-CustomWebViewClient：\"><a href=\"#方法2-iframe-CustomWebViewClient：\" class=\"headerlink\" title=\"方法2:iframe + CustomWebViewClient：\"></a>方法2:iframe + CustomWebViewClient：</h3><ul>\n<li>在JS代码动态添加一个iframe，将其src属性设置为JS需要传给Java的参数（例如<code>bridge://uncle.nought.com?arg=xxx</code>）。</li>\n<li>在Java代码中，定义一个<code>CustomWebViewClient extends WebViewClient</code>，然后<code>mWebView.setWebViewClient(new CustomWebViewClient())</code>。</li>\n<li>在Java代码中的<code>CustomWebViewClient</code>中，重写<code>shouldOverrideUrlLoading(WebView view, String url)</code>方法，自己处理<code>url</code>参数，并<code>return true</code>。</li>\n<li>这时JS代码就可以把参数通过url传递给Java，Java拿到参数去执行相应的工作了。如果JS需要返回值，那么通过Java调用JS代码的形式把返回值返回给JS。</li>\n</ul>\n<h2 id=\"方法小结\"><a href=\"#方法小结\" class=\"headerlink\" title=\"方法小结\"></a>方法小结</h2><h3 id=\"Java调用JS的代码\"><a href=\"#Java调用JS的代码\" class=\"headerlink\" title=\"Java调用JS的代码\"></a>Java调用JS的代码</h3><p>其实比较简单，就是通过<code>WebView.loadUrl(&quot;javascript:javaCallJS()&quot;)</code>loadUrl的形式。这里啰嗦一句，从Android4.4开始，由于chromium内核对安全性检查更加严格，所以并不是传入的所有JS代码，都能够通过loadUrl来执行它。详情可以看一下这里<a href=\"https://code.google.com/p/android/issues/detail?id=69969\" target=\"_blank\" rel=\"noopener\">https://code.google.com/p/android/issues/detail?id=69969</a>，简单来说就是4.4以上的WebView在loadUrl时会给我们的参数做一个escape，因此参数就变了，很有可能变得JS不认识，无法执行了。所以这时候需要用到<code>WebView.evaluateJavascript(java.lang.String, android.webkit.ValueCallback&lt;java.lang.String&gt;)</code>这个方法。后面我再详细举个例子来说明这个问题。</p>\n<h3 id=\"JS调用Java的方法1：addJavascriptInterface\"><a href=\"#JS调用Java的方法1：addJavascriptInterface\" class=\"headerlink\" title=\"JS调用Java的方法1：addJavascriptInterface\"></a>JS调用Java的方法1：<strong>addJavascriptInterface</strong></h3><p>这种方法是比较简单的。在WebView官方的文档里面有介绍如何结合WebView来进行WebApp的开发<a href=\"http://developer.android.com/intl/zh-cn/guide/webapps/webview.html#AddingWebView\" target=\"_blank\" rel=\"noopener\">http://developer.android.com/intl/zh-cn/guide/webapps/webview.html#AddingWebView</a>。</p>\n<p>这里要再特别严肃地啰嗦一句！由于4.2（API&lt;17）版本之前的WebView，在执行<code>WebView.addJavascriptInterface(Object obj, String interfaceName)</code>时存在一个漏洞，该漏洞的原因是在向JS中注入一个Java对象的时候，并没有对注册的这个Java类的方法调用做限制。导致JS代码里面可以利用发射机制，调用未注册的其他Java类。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Java里面注册了injectedObj对象以后</span></span><br><span class=\"line\">mWebView.addJavascriptInterface(<span class=\"keyword\">this</span>, <span class=\"string\">\"injectedObj\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JS中可以去反射调用短信程序来进行恶意扣费</span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> objSmsManager = injectedObj.getClass().forName(<span class=\"string\">\"android.telephony.SmsManager\"</span>).getMethod(<span class=\"string\">\"getDefault\"</span>,<span class=\"literal\">null</span>).invoke(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">\tobjSmsManager.sendTextMessage(<span class=\"string\">\"10086\"</span>,<span class=\"literal\">null</span>,<span class=\"string\">\"this message is sent by JS when webview is loading\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 这段摘自http:/</span><span class=\"regexp\">/jaq.alibaba.com/</span>blog.htm?id=<span class=\"number\">48</span></span><br></pre></td></tr></table></figure>\n<p>可想而知，要是一个 <strong>健康</strong> 的网页被挂马之后，嵌入了这样的JS脚本，那么用户的手机来访问这个页面的时候就完蛋了，有兴趣的同学可以研究一下乌云的这个介绍<a href=\"http://drops.wooyun.org/papers/548\" target=\"_blank\" rel=\"noopener\">http://drops.wooyun.org/papers/548</a>。Android4.2以后，修复了这个漏洞，但是要求我们在执行<code>WebView.addJavascriptInterface(Object obj, String interfaceName)</code>时，这个Object里面需要暴露给JS调用的方法，都需要加上注解<code>@JavascriptInterface</code>。</p>\n<p>那么4.2以下的系统该怎么办？？用下面的方法吧！</p>\n<h3 id=\"JS调用Java的方法2：-iframe-WebViewClient\"><a href=\"#JS调用Java的方法2：-iframe-WebViewClient\" class=\"headerlink\" title=\"JS调用Java的方法2： iframe + WebViewClient\"></a>JS调用Java的方法2： <strong>iframe + WebViewClient</strong></h3><p>这是一种比较Trick的方式。js在执行的过程中去给整个dom添加一个iframe，并将这个iframe设置为<code>display:none</code>。然后通过这个iframe去load一个url，触发WebViewClient的shouldOverrideUrlLoading()，然后在这里面，我们可以决定如何处理JS传递过来的参数。由于这个url我们是自己来解析和处理的，不打算交给WebView去直接load，所以我们其实可以自己定义一个协议，例如<code>bridge://uncle.nought.com?arg1=x&amp;arg2=y</code>。然后在WebView的WebViewClient里面拿到这个<code>nought://</code>开头的url后，我们自己写Java代码处理arg等参数。</p>\n<p>说到这里，我们首先要了解一下WebViewClient，它决定了我们的WebView加载一条Url时的行为。如果你自定义一个CustomWebViewClient继承自WebViewClient，并重写里面的shouldOverrideUrlLoading()方法，然后把CustomWebViewClient的一个实例set给了你的WebView。那么就可以在shouldOverrideUrlLoading方法中将WebView里面本来将要load的url拦截下来，并决定是否由开发者自己的Java代码处理它。那么怎么才能自行处理这个url，而不是让WebView去自动load呢？我们看看官方文档<a href=\"http://developer.android.com/intl/zh-cn/guide/webapps/webview.html\" target=\"_blank\" rel=\"noopener\">http://developer.android.com/intl/zh-cn/guide/webapps/webview.html</a>，总得来说是下面这样的：</p>\n<ul>\n<li>CustomWebViewClient的shouldOverrideUrlLoading返回true，表示由Java处理url，WebView不用管。</li>\n<li>CustomWebViewClient的shouldOverrideUrlLoading返回false，表示Java不管这个url，由WebView自己处理url（一般还会再添加一行代码<code>webView.loadUrl(url)</code>）。</li>\n</ul>\n<p>可能你还会觉得白白添加iframe进来不好吧，那么不加也是可以的。只要你能让当前WebView去加载一个url就可以了，所以这样<code>window.location.href=&#39;bridge://uncle.nought.com?arg=xxx&#39;</code>都是可以的！并没有任何问题！</p>\n<h1 id=\"Java和JS互相调用实践\"><a href=\"#Java和JS互相调用实践\" class=\"headerlink\" title=\"Java和JS互相调用实践\"></a>Java和JS互相调用实践</h1><p>先上个图，在这个demo里面，左边是一个WebView，右边是一个TextView。然后实现点击左边Web页面的按钮，传递参数给Java，并在TextView里面显示出来。点击右边的按钮，传递参数给JS，并在WebView里面显示出来。</p>\n<p><img src=\"/content/images/hello-webview-js-demo.png\" alt=\"hello-webview-js-demo\"></p>\n<p>上面提到了两种JS调用Java的方法，所以在左边的WebView里面也设置两个按钮来演示这两种不同的方法。</p>\n<h2 id=\"1-Java调用JS-1\"><a href=\"#1-Java调用JS-1\" class=\"headerlink\" title=\"1.Java调用JS\"></a>1.Java调用JS</h2><h3 id=\"第一步：提供JS给Java调用的方法\"><a href=\"#第一步：提供JS给Java调用的方法\" class=\"headerlink\" title=\"第一步：提供JS给Java调用的方法\"></a>第一步：提供JS给Java调用的方法</h3><p>首先在我们的assets目录下放一个<code>hello.html</code>文件，方便WebView去加载。然后在JS代码添加一个给Java调用的方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"comment\">// JS提供给Java调用的方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">javaCallJS</span><span class=\"params\">(arg)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"hello\"</span>).innerHTML += (<span class=\"string\">\"&lt;br/&gt;\"</span> + arg);</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第二步：在Java代码中调用\"><a href=\"#第二步：在Java代码中调用\" class=\"headerlink\" title=\"第二步：在Java代码中调用\"></a>第二步：在Java代码中调用</h3><p>非常简单，直接在Java代码里调用刚才的JS Function。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mBtnJavaCallJs.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> onClick(View v) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * 注意参数的传递需要符合JS的语法，用单引号或者反斜杠转义</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"built_in\">String</span> js = <span class=\"string\">\"javascript:javaCallJS(\\\"Java called JS.\\\")\"</span>;</span><br><span class=\"line\">                mWebView.loadUrl(js);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<p>这样就实现了Java在WebView里面打印了“Java called JS.”。</p>\n<h2 id=\"JS调用Java\"><a href=\"#JS调用Java\" class=\"headerlink\" title=\"JS调用Java\"></a>JS调用Java</h2><p>由于 <strong>addJavascriptInterface</strong> 的方法比较简单，大家可以直接看看代码示例。下面介绍一下第二种方法：</p>\n<h3 id=\"第一步：JS里面添加一个iframe来触发loadUrl\"><a href=\"#第一步：JS里面添加一个iframe来触发loadUrl\" class=\"headerlink\" title=\"第一步：JS里面添加一个iframe来触发loadUrl\"></a>第一步：JS里面添加一个iframe来触发loadUrl</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"comment\">// JS提供给Java调用的方法</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">javaCallJS</span><span class=\"params\">(arg)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"hello\"</span>).innerHTML += (<span class=\"string\">\"&lt;br/&gt;\"</span> + arg);</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">\t/* </span></span><br><span class=\"line\"><span class=\"undefined\">\t *  JS通过创建一个不可见的iframe来调用Java</span></span><br><span class=\"line\"><span class=\"undefined\">\t */</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsCallJavaByIframe</span><span class=\"params\">(arg)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">//创建iframe</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tiframe.id = <span class=\"string\">\"hello-iframe\"</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tiframe.style.display = <span class=\"string\">'none'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\tiframe.src = <span class=\"string\">\"bridge://uncle.nought.com?arg=\"</span> + arg; <span class=\"comment\">// 把iframe的src设为要传递给Java的参数</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">document</span>.body.appendChild(iframe);</span></span><br><span class=\"line\"><span class=\"undefined\">\t&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第二步：自定义一个WebViewClient\"><a href=\"#第二步：自定义一个WebViewClient\" class=\"headerlink\" title=\"第二步：自定义一个WebViewClient\"></a>第二步：自定义一个WebViewClient</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWebViewClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebViewClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = HelloWebViewClient.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PREFIX = <span class=\"string\">\"bridge://uncle.nought.com\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Pattern ARG_PATTERN = Pattern.compile(PREFIX + <span class=\"string\">\"\\\\?arg=(.*)\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MainActivity.TextViewChanger mTextViewChanger;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloWebViewClient</span><span class=\"params\">(MainActivity.TextViewChanger textViewChanger)</span> </span>&#123;</span><br><span class=\"line\">        mTextViewChanger = textViewChanger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"Get params from JS: \"</span> + url);</span><br><span class=\"line\">        parseJSParams(url);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">parseJSParams</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解析自定义参数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (url.startsWith(PREFIX)) &#123;</span><br><span class=\"line\">            Matcher matcher = ARG_PATTERN.matcher(url);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (matcher.matches()) &#123;</span><br><span class=\"line\">                mTextViewChanger.changeText(matcher.group(<span class=\"number\">1</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步：异步刷新UI\"><a href=\"#第三步：异步刷新UI\" class=\"headerlink\" title=\"第三步：异步刷新UI\"></a>第三步：异步刷新UI</h3><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> TextViewChanger mTextChanger = <span class=\"keyword\">new</span> TextViewChanger() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">changeText</span><span class=\"params\">(<span class=\"keyword\">final</span> String arg)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 官方说明文档：</span></span><br><span class=\"line\"><span class=\"comment\">             * Note: The object that is bound to your JavaScript runs in another thread and not in the thread</span></span><br><span class=\"line\"><span class=\"comment\">             * in which it was constructed.</span></span><br><span class=\"line\"><span class=\"comment\">             *</span></span><br><span class=\"line\"><span class=\"comment\">             * mWebAppInterface虽然是在UI线程创建的，但是bind到JS以后就是在另一条线程中运行的，因此刷新UI的时候需要注意</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            runOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (mTextView != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        mTextView.append(<span class=\"string\">\"\\n\"</span> + arg);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>最后奉上<a href=\"https://github.com/unclechen/HelloWebViewJS\" target=\"_blank\" rel=\"noopener\">完整代码</a>。</p>\n<p>这里只是一个demo示例，在生产环境里面，我们肯定是需要针对自己的项目定制一个Java和JS通信的 <strong>bridge</strong> 框架，传递参数的时候也可以用JSON处理，对url的协议解析也应该做一个检查。</p>\n<p>Github上面也有不少开源的 <strong>WebView&amp;JSBridge</strong> 。我随便搜了一下，就看到了这个<a href=\"https://github.com/pedant/safe-java-js-webview-bridge\" target=\"_blank\" rel=\"noopener\">https://github.com/pedant/safe-java-js-webview-bridge</a>，实现的思路貌似是差不多的。另外iOS也有不少类似的框架，<a href=\"https://github.com/marcuswestin/WebViewJavascriptBridge\" target=\"_blank\" rel=\"noopener\">https://github.com/marcuswestin/WebViewJavascriptBridge</a>这个项目有4000+的star，可见iOS上面的WebApp需求还是非常多的，因为它不像Android一样可以用DexClassLoader去做热更新，通过WebApp的形式来动态更新App对iOS的意义非常大。</p>\n<h1 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"遇到的坑\"></a>遇到的坑</h1><h2 id=\"1-HTML5的LocalStorage\"><a href=\"#1-HTML5的LocalStorage\" class=\"headerlink\" title=\"1.HTML5的LocalStorage\"></a>1.HTML5的LocalStorage</h2><p>Local Storage是h5里面常用到的一个缓存，如果加载的页面中用js去调用Local Storage的话，很容易出现<code>&quot;Uncaught TypeError: Cannot read property &#39;getItem&#39; of null&quot;, source: http://xxx.js</code>，原因就是没有开启WebView的h5缓存功能。于是上stackoverflow上搜了一下，加上下面这句：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mWebView</span>.<span class=\"selector-class\">.getSettings</span>()<span class=\"selector-class\">.setDomStorageEnabled</span>(<span class=\"selector-tag\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>就好了。</p>\n<p>待补充。。。前面说到4.4开始有些JS代码得用evaluateJavascript来执行。blabla。。</p>\n<h1 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS\"></a>PS</h1><p>手头看到了篇WebView文章，<a href=\"https://github.com/cundong/blog/blob/master/Android%204.4%20%E4%B8%AD%20WebView%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md\" target=\"_blank\" rel=\"noopener\">Android 4.4 中 WebView 使用注意事项</a>，可参考参考。</p>"},{"layout":"post","title":"Android6.0权限适配之WRITE_EXTERNAL_STORAGE（SD卡写入）","date":"2016-03-06T00:00:00.000Z","_content":"\n前一篇博客中介绍了[Android6.0运行时权限简介](http://unclechen.github.io/2016/03/05/Android6.0运行时权限简介/)，最近遇到这么一个情况，就是一个App以前都是在SD卡根目录直接新建了一个`XXX/image/`目录，来保存图片缓存的，但是如果适配到Android6.0，我们就需要弹出对话框给用户，来申请`WRITE_EXTERNAL_STORAGE`权限，如果仅仅是缓存图片为了提高加载速度，对于一个小白用户来讲，好像并不是什么值得让他授权的理由。。。\n\n下面记录一下我是怎么处理的，其实这次处理也不能叫做Android6.0权限适配了，不过对于`WRITE_EXTERNAL_STORAGE`这个权限而言，的确有一些需要注意的地方（坑）使我们以前没有关心的。\n\n首先，App在手机上保存文件或者缓存数据时，我认为应该遵守以下几点：\n\n- 1.不要随意占用用户的内置存储。\n- 2.不要随意在SD卡上新建目录，应该放置自己应用包名对应的扩展存储目录下，卸载App时可以被自动清除。\n- 3.对占用的磁盘空间有上限，并按照一定的策略进行清除。\n\n<!-- more -->\n\n# Android下有哪些文件目录\n\n在Android系统中，根据调用的系统API接口，有3种目录可以给我们写入文件：\n\n- 1.**应用**私有存储（内置存储）\n\t- 获取方式：\n\t\t- `Context.getFileDir()`：获取内置存储下的文件目录，可以用来保存不能公开给其他应用的一些敏感数据如用户个人信息\n\t\t- `Context.getCacheDir()`：获取内置存储下的缓存目录，可以用来保存一些缓存文件如图片，当内置存储的空间不足时将系统自动被清除（然而具体多大，清除时的策略我也没查到。。）\n\t- 绝对路径：\n\t\t- `Context.getFileDir()`：`/data/data/应用包名/files/`\n\t\t- `Context.getCacheDir()`：`/data/data/应用包名/cache/`\n\t- 写权限：不需要申请\n\t\n\t这是手机的内置存储，没有root的过的手机是无法用文件管理器之类的工具查看的。而且这些数据也会随着用户卸载App而被一起删除。这两个目录其实就对应着`设置->应用->你的App->存储空间`下面的`清除数据`和`清楚缓存`，如下图所示。\n\t\n\t![app-存储空间](/content/images/app-storage.png)\n\t\n- 2.**应用**扩展存储（SD卡）\n\t- 获取方式：\n\t\t- `Context.getExternalFilesDir()`：`获取SD卡上的文件目录`\n\t\t- `Context.getExternalCacheDir()`：`获取SD卡上的缓存目录`\n\t- 绝对路径：\n\t\t - `Context.getExternalFilesDir()`：`SDCard/Android/data/应用包名/files/`\n\t\t- `Context.getExternalCacheDir()`：`SDCard/Android/data/应用包名/cache/`\n\t- 写权限：\n\t\t- API < 19：需要申请\n\t\t- API >= 19：不需要申请\n\t\t\n\t既然是SD卡上的目录，那么是可以被其他的应用读取到的，所以这个目录下，不应该存放用户的敏感信息。同上面一样的，这里的文件会随着App卸载而被删除，也可以由用户手动在设置界面里面清除。\t\n\t\n- 3.公共存储（SD卡）\n\t- 获取方式：`Environment.getExternalStorageDirectory()`\n\t- 绝对路径：`SDCard/你设置的文件夹名字/`\n\t- 写权限：需要申请\n\t\n\t如果我们的App需要存储一些公共的文件，甚至希望下载下来的文件即使在我们的App被删除之后，还可以被其他App使用，那么就可以使用这个目录。这个目录是始终需要申请SD写入权限的。\n\t\n# Android6.0下应该把文件放到哪里？\n\n有了前一节的介绍，其实很清楚了，根据最开始提到的规则，其实如果仅仅是做了简单的图片缓存工作，那么我们应该把图片缓存放到`/data/data/应用包名/cache/`或者`SDCard/Android/data/应用包名/cache/`，因为在6.0系统（`API > 23`）时，不需要申请权限就可以向这两个目录写入文件。而且`/data/data/应用包名/cache/`目录，是内置存储的应用私有缓存目录，在系统空间不够时还会被自动清除，对于图片缓存来讲也是一个不错的管理策略，不过谷歌建议我们最好还是自己实现缓存清除管理，例如用`DiskLruCache`。\n\n实际上我们可以在`API >= 19（不一定非要大于23）`时，就可以在不需要申请权限的情况下把文件放到这两个目录了。如果开发的时候足够规范，即使在`API < 19`时，我们申请到写入权限后，我们也应该手动创建和前面相同的目录，使得应用存储数据目录统一化。\n\n\n# Last，最后还有个坑！\n\n好了，是不是现在不用SD卡上创建的目录`XXX/image/`，直接改为改为`SDCard/Android/data/应用包名/cache/image/`就OK了？还真不完全是这样的。。。\n\n**？？？纳尼？？？？**\n\n通常我们开发App时会设置`targetSDKVersion=23`时，并同时**向前兼容**，还会设置`minSdkVersion=14`表示支持的最低系统版本是Android4.0(`API = 14`)。也就是说我们的`build.gradle`一般长这样：\n\n```\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n    ...\n    defaultConfig {\n        applicationId \"xxx.xxx\"\n        minSdkVersion 14\n        targetSdkVersion 23\n        versionCode 1\n        versionName \"1.0\"\n    }\n    ...\n}\n```\n\n但是前面我们说过，通过`Context.getExternalCacheDir()`接口获取应用扩展存储目录时，只有在`API >= 19`时才不需要申请权限。也就是说如果是上面这种兼容到`API 14`的应用，还是需要在`AndroidManifest.xml`中注册`WRITE_EXTERNAL_STORAGE`权限的。\n\n前一篇博客[Android6.0运行时权限简介](http://unclechen.github.io/2016/03/05/Android6.0运行时权限简介/)知道，如果在`AndroidManifest.xml`文件里注册过`WRITE_EXTERNAL_STORAGE`，当App运行在一台6.0的设备时，即使你的App全程都没有调用`requestPermissons`来申请权限，用户还是可以在**Android6.0系统上** 进入`设置->应用->你的App->权限`里面，取消`存储空间`这一个权限。记住是运行在**6.0系统的机器**上，这是关键，因为低于6.0的系统根本没有这个设置。\n\n如下图所示，只要在manifest里面注册了，就可以动态取消之！\n\n![app-权限](/content/images/app-perm-before.png)\n\n此时会发生什么？？？此时你的图片在6.0机器上也就没法缓存喽。。/(ㄒoㄒ)/~~  \n\n为啥啊？6.0机器上，我不是不需要申请权限就可以获得写入`SDCard/Android/data/应用包名/cache/`目录吗？实际测试时发现，当用户取消了权限之后，SDK接口中与`File`相关的API全部都返回空了，于是我们就没法写文件了。\n\n其实我们还需要做的是：\n\n将AndroidManifest.xml文件中的\n\n```\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n\n```\n改为\n\n```\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\nandroid:maxSdkVersion=\"18\"/>\n\n```\n\n表示只在`API <= 18`时，才申请`WRITE_EXTERNAL_STORAGE`权限。这样用户就无法在Android6.0系统的设置下面看到`存储空间`权限的开关，当然也就无法关闭它了，如下图所示。\n\n![app-权限](/content/images/app-perm-after.png)\n\n\n\n\n\n\n\n\n\n","source":"_posts/Android6.0权限适配之SD卡写入.markdown","raw":"---\nlayout: post\ntitle: Android6.0权限适配之WRITE_EXTERNAL_STORAGE（SD卡写入）\ndate: '2016-03-06'\ntags:\n  - Android\n  - 适配\n  - 权限\ncategories: \n  - 技术\n---\n\n前一篇博客中介绍了[Android6.0运行时权限简介](http://unclechen.github.io/2016/03/05/Android6.0运行时权限简介/)，最近遇到这么一个情况，就是一个App以前都是在SD卡根目录直接新建了一个`XXX/image/`目录，来保存图片缓存的，但是如果适配到Android6.0，我们就需要弹出对话框给用户，来申请`WRITE_EXTERNAL_STORAGE`权限，如果仅仅是缓存图片为了提高加载速度，对于一个小白用户来讲，好像并不是什么值得让他授权的理由。。。\n\n下面记录一下我是怎么处理的，其实这次处理也不能叫做Android6.0权限适配了，不过对于`WRITE_EXTERNAL_STORAGE`这个权限而言，的确有一些需要注意的地方（坑）使我们以前没有关心的。\n\n首先，App在手机上保存文件或者缓存数据时，我认为应该遵守以下几点：\n\n- 1.不要随意占用用户的内置存储。\n- 2.不要随意在SD卡上新建目录，应该放置自己应用包名对应的扩展存储目录下，卸载App时可以被自动清除。\n- 3.对占用的磁盘空间有上限，并按照一定的策略进行清除。\n\n<!-- more -->\n\n# Android下有哪些文件目录\n\n在Android系统中，根据调用的系统API接口，有3种目录可以给我们写入文件：\n\n- 1.**应用**私有存储（内置存储）\n\t- 获取方式：\n\t\t- `Context.getFileDir()`：获取内置存储下的文件目录，可以用来保存不能公开给其他应用的一些敏感数据如用户个人信息\n\t\t- `Context.getCacheDir()`：获取内置存储下的缓存目录，可以用来保存一些缓存文件如图片，当内置存储的空间不足时将系统自动被清除（然而具体多大，清除时的策略我也没查到。。）\n\t- 绝对路径：\n\t\t- `Context.getFileDir()`：`/data/data/应用包名/files/`\n\t\t- `Context.getCacheDir()`：`/data/data/应用包名/cache/`\n\t- 写权限：不需要申请\n\t\n\t这是手机的内置存储，没有root的过的手机是无法用文件管理器之类的工具查看的。而且这些数据也会随着用户卸载App而被一起删除。这两个目录其实就对应着`设置->应用->你的App->存储空间`下面的`清除数据`和`清楚缓存`，如下图所示。\n\t\n\t![app-存储空间](/content/images/app-storage.png)\n\t\n- 2.**应用**扩展存储（SD卡）\n\t- 获取方式：\n\t\t- `Context.getExternalFilesDir()`：`获取SD卡上的文件目录`\n\t\t- `Context.getExternalCacheDir()`：`获取SD卡上的缓存目录`\n\t- 绝对路径：\n\t\t - `Context.getExternalFilesDir()`：`SDCard/Android/data/应用包名/files/`\n\t\t- `Context.getExternalCacheDir()`：`SDCard/Android/data/应用包名/cache/`\n\t- 写权限：\n\t\t- API < 19：需要申请\n\t\t- API >= 19：不需要申请\n\t\t\n\t既然是SD卡上的目录，那么是可以被其他的应用读取到的，所以这个目录下，不应该存放用户的敏感信息。同上面一样的，这里的文件会随着App卸载而被删除，也可以由用户手动在设置界面里面清除。\t\n\t\n- 3.公共存储（SD卡）\n\t- 获取方式：`Environment.getExternalStorageDirectory()`\n\t- 绝对路径：`SDCard/你设置的文件夹名字/`\n\t- 写权限：需要申请\n\t\n\t如果我们的App需要存储一些公共的文件，甚至希望下载下来的文件即使在我们的App被删除之后，还可以被其他App使用，那么就可以使用这个目录。这个目录是始终需要申请SD写入权限的。\n\t\n# Android6.0下应该把文件放到哪里？\n\n有了前一节的介绍，其实很清楚了，根据最开始提到的规则，其实如果仅仅是做了简单的图片缓存工作，那么我们应该把图片缓存放到`/data/data/应用包名/cache/`或者`SDCard/Android/data/应用包名/cache/`，因为在6.0系统（`API > 23`）时，不需要申请权限就可以向这两个目录写入文件。而且`/data/data/应用包名/cache/`目录，是内置存储的应用私有缓存目录，在系统空间不够时还会被自动清除，对于图片缓存来讲也是一个不错的管理策略，不过谷歌建议我们最好还是自己实现缓存清除管理，例如用`DiskLruCache`。\n\n实际上我们可以在`API >= 19（不一定非要大于23）`时，就可以在不需要申请权限的情况下把文件放到这两个目录了。如果开发的时候足够规范，即使在`API < 19`时，我们申请到写入权限后，我们也应该手动创建和前面相同的目录，使得应用存储数据目录统一化。\n\n\n# Last，最后还有个坑！\n\n好了，是不是现在不用SD卡上创建的目录`XXX/image/`，直接改为改为`SDCard/Android/data/应用包名/cache/image/`就OK了？还真不完全是这样的。。。\n\n**？？？纳尼？？？？**\n\n通常我们开发App时会设置`targetSDKVersion=23`时，并同时**向前兼容**，还会设置`minSdkVersion=14`表示支持的最低系统版本是Android4.0(`API = 14`)。也就是说我们的`build.gradle`一般长这样：\n\n```\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n    ...\n    defaultConfig {\n        applicationId \"xxx.xxx\"\n        minSdkVersion 14\n        targetSdkVersion 23\n        versionCode 1\n        versionName \"1.0\"\n    }\n    ...\n}\n```\n\n但是前面我们说过，通过`Context.getExternalCacheDir()`接口获取应用扩展存储目录时，只有在`API >= 19`时才不需要申请权限。也就是说如果是上面这种兼容到`API 14`的应用，还是需要在`AndroidManifest.xml`中注册`WRITE_EXTERNAL_STORAGE`权限的。\n\n前一篇博客[Android6.0运行时权限简介](http://unclechen.github.io/2016/03/05/Android6.0运行时权限简介/)知道，如果在`AndroidManifest.xml`文件里注册过`WRITE_EXTERNAL_STORAGE`，当App运行在一台6.0的设备时，即使你的App全程都没有调用`requestPermissons`来申请权限，用户还是可以在**Android6.0系统上** 进入`设置->应用->你的App->权限`里面，取消`存储空间`这一个权限。记住是运行在**6.0系统的机器**上，这是关键，因为低于6.0的系统根本没有这个设置。\n\n如下图所示，只要在manifest里面注册了，就可以动态取消之！\n\n![app-权限](/content/images/app-perm-before.png)\n\n此时会发生什么？？？此时你的图片在6.0机器上也就没法缓存喽。。/(ㄒoㄒ)/~~  \n\n为啥啊？6.0机器上，我不是不需要申请权限就可以获得写入`SDCard/Android/data/应用包名/cache/`目录吗？实际测试时发现，当用户取消了权限之后，SDK接口中与`File`相关的API全部都返回空了，于是我们就没法写文件了。\n\n其实我们还需要做的是：\n\n将AndroidManifest.xml文件中的\n\n```\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n\n```\n改为\n\n```\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\nandroid:maxSdkVersion=\"18\"/>\n\n```\n\n表示只在`API <= 18`时，才申请`WRITE_EXTERNAL_STORAGE`权限。这样用户就无法在Android6.0系统的设置下面看到`存储空间`权限的开关，当然也就无法关闭它了，如下图所示。\n\n![app-权限](/content/images/app-perm-after.png)\n\n\n\n\n\n\n\n\n\n","slug":"Android6.0权限适配之SD卡写入","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8dy000gmtsxtm03ddtd","content":"<p>前一篇博客中介绍了<a href=\"http://unclechen.github.io/2016/03/05/Android6.0运行时权限简介/\">Android6.0运行时权限简介</a>，最近遇到这么一个情况，就是一个App以前都是在SD卡根目录直接新建了一个<code>XXX/image/</code>目录，来保存图片缓存的，但是如果适配到Android6.0，我们就需要弹出对话框给用户，来申请<code>WRITE_EXTERNAL_STORAGE</code>权限，如果仅仅是缓存图片为了提高加载速度，对于一个小白用户来讲，好像并不是什么值得让他授权的理由。。。</p>\n<p>下面记录一下我是怎么处理的，其实这次处理也不能叫做Android6.0权限适配了，不过对于<code>WRITE_EXTERNAL_STORAGE</code>这个权限而言，的确有一些需要注意的地方（坑）使我们以前没有关心的。</p>\n<p>首先，App在手机上保存文件或者缓存数据时，我认为应该遵守以下几点：</p>\n<ul>\n<li>1.不要随意占用用户的内置存储。</li>\n<li>2.不要随意在SD卡上新建目录，应该放置自己应用包名对应的扩展存储目录下，卸载App时可以被自动清除。</li>\n<li>3.对占用的磁盘空间有上限，并按照一定的策略进行清除。</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"Android下有哪些文件目录\"><a href=\"#Android下有哪些文件目录\" class=\"headerlink\" title=\"Android下有哪些文件目录\"></a>Android下有哪些文件目录</h1><p>在Android系统中，根据调用的系统API接口，有3种目录可以给我们写入文件：</p>\n<ul>\n<li><p>1.<strong>应用</strong>私有存储（内置存储）</p>\n<ul>\n<li>获取方式：<ul>\n<li><code>Context.getFileDir()</code>：获取内置存储下的文件目录，可以用来保存不能公开给其他应用的一些敏感数据如用户个人信息</li>\n<li><code>Context.getCacheDir()</code>：获取内置存储下的缓存目录，可以用来保存一些缓存文件如图片，当内置存储的空间不足时将系统自动被清除（然而具体多大，清除时的策略我也没查到。。）</li>\n</ul>\n</li>\n<li>绝对路径：<ul>\n<li><code>Context.getFileDir()</code>：<code>/data/data/应用包名/files/</code></li>\n<li><code>Context.getCacheDir()</code>：<code>/data/data/应用包名/cache/</code></li>\n</ul>\n</li>\n<li><p>写权限：不需要申请</p>\n<p>这是手机的内置存储，没有root的过的手机是无法用文件管理器之类的工具查看的。而且这些数据也会随着用户卸载App而被一起删除。这两个目录其实就对应着<code>设置-&gt;应用-&gt;你的App-&gt;存储空间</code>下面的<code>清除数据</code>和<code>清楚缓存</code>，如下图所示。</p>\n<p><img src=\"/content/images/app-storage.png\" alt=\"app-存储空间\"></p>\n</li>\n</ul>\n</li>\n<li><p>2.<strong>应用</strong>扩展存储（SD卡）</p>\n<ul>\n<li>获取方式：<ul>\n<li><code>Context.getExternalFilesDir()</code>：<code>获取SD卡上的文件目录</code></li>\n<li><code>Context.getExternalCacheDir()</code>：<code>获取SD卡上的缓存目录</code></li>\n</ul>\n</li>\n<li>绝对路径：<ul>\n<li><code>Context.getExternalFilesDir()</code>：<code>SDCard/Android/data/应用包名/files/</code><ul>\n<li><code>Context.getExternalCacheDir()</code>：<code>SDCard/Android/data/应用包名/cache/</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>写权限：</p>\n<ul>\n<li>API &lt; 19：需要申请</li>\n<li>API &gt;= 19：不需要申请</li>\n</ul>\n<p>既然是SD卡上的目录，那么是可以被其他的应用读取到的，所以这个目录下，不应该存放用户的敏感信息。同上面一样的，这里的文件会随着App卸载而被删除，也可以由用户手动在设置界面里面清除。    </p>\n</li>\n</ul>\n</li>\n<li><p>3.公共存储（SD卡）</p>\n<ul>\n<li>获取方式：<code>Environment.getExternalStorageDirectory()</code></li>\n<li>绝对路径：<code>SDCard/你设置的文件夹名字/</code></li>\n<li><p>写权限：需要申请</p>\n<p>如果我们的App需要存储一些公共的文件，甚至希望下载下来的文件即使在我们的App被删除之后，还可以被其他App使用，那么就可以使用这个目录。这个目录是始终需要申请SD写入权限的。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Android6-0下应该把文件放到哪里？\"><a href=\"#Android6-0下应该把文件放到哪里？\" class=\"headerlink\" title=\"Android6.0下应该把文件放到哪里？\"></a>Android6.0下应该把文件放到哪里？</h1><p>有了前一节的介绍，其实很清楚了，根据最开始提到的规则，其实如果仅仅是做了简单的图片缓存工作，那么我们应该把图片缓存放到<code>/data/data/应用包名/cache/</code>或者<code>SDCard/Android/data/应用包名/cache/</code>，因为在6.0系统（<code>API &gt; 23</code>）时，不需要申请权限就可以向这两个目录写入文件。而且<code>/data/data/应用包名/cache/</code>目录，是内置存储的应用私有缓存目录，在系统空间不够时还会被自动清除，对于图片缓存来讲也是一个不错的管理策略，不过谷歌建议我们最好还是自己实现缓存清除管理，例如用<code>DiskLruCache</code>。</p>\n<p>实际上我们可以在<code>API &gt;= 19（不一定非要大于23）</code>时，就可以在不需要申请权限的情况下把文件放到这两个目录了。如果开发的时候足够规范，即使在<code>API &lt; 19</code>时，我们申请到写入权限后，我们也应该手动创建和前面相同的目录，使得应用存储数据目录统一化。</p>\n<h1 id=\"Last，最后还有个坑！\"><a href=\"#Last，最后还有个坑！\" class=\"headerlink\" title=\"Last，最后还有个坑！\"></a>Last，最后还有个坑！</h1><p>好了，是不是现在不用SD卡上创建的目录<code>XXX/image/</code>，直接改为改为<code>SDCard/Android/data/应用包名/cache/image/</code>就OK了？还真不完全是这样的。。。</p>\n<p><strong>？？？纳尼？？？？</strong></p>\n<p>通常我们开发App时会设置<code>targetSDKVersion=23</code>时，并同时<strong>向前兼容</strong>，还会设置<code>minSdkVersion=14</code>表示支持的最低系统版本是Android4.0(<code>API = 14</code>)。也就是说我们的<code>build.gradle</code>一般长这样：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion 23</span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></span><br><span class=\"line\">    <span class=\"string\">...</span></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"xxx.xxx\"</span></span><br><span class=\"line\">        minSdkVersion 14</span><br><span class=\"line\">        targetSdkVersion 23</span><br><span class=\"line\">        <span class=\"keyword\">version</span>Code 1</span><br><span class=\"line\">        <span class=\"keyword\">version</span>Name <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"string\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是前面我们说过，通过<code>Context.getExternalCacheDir()</code>接口获取应用扩展存储目录时，只有在<code>API &gt;= 19</code>时才不需要申请权限。也就是说如果是上面这种兼容到<code>API 14</code>的应用，还是需要在<code>AndroidManifest.xml</code>中注册<code>WRITE_EXTERNAL_STORAGE</code>权限的。</p>\n<p>前一篇博客<a href=\"http://unclechen.github.io/2016/03/05/Android6.0运行时权限简介/\">Android6.0运行时权限简介</a>知道，如果在<code>AndroidManifest.xml</code>文件里注册过<code>WRITE_EXTERNAL_STORAGE</code>，当App运行在一台6.0的设备时，即使你的App全程都没有调用<code>requestPermissons</code>来申请权限，用户还是可以在<strong>Android6.0系统上</strong> 进入<code>设置-&gt;应用-&gt;你的App-&gt;权限</code>里面，取消<code>存储空间</code>这一个权限。记住是运行在<strong>6.0系统的机器</strong>上，这是关键，因为低于6.0的系统根本没有这个设置。</p>\n<p>如下图所示，只要在manifest里面注册了，就可以动态取消之！</p>\n<p><img src=\"/content/images/app-perm-before.png\" alt=\"app-权限\"></p>\n<p>此时会发生什么？？？此时你的图片在6.0机器上也就没法缓存喽。。/(ㄒoㄒ)/~~  </p>\n<p>为啥啊？6.0机器上，我不是不需要申请权限就可以获得写入<code>SDCard/Android/data/应用包名/cache/</code>目录吗？实际测试时发现，当用户取消了权限之后，SDK接口中与<code>File</code>相关的API全部都返回空了，于是我们就没法写文件了。</p>\n<p>其实我们还需要做的是：</p>\n<p>将AndroidManifest.xml文件中的</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:<span class=\"attribute\">name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:<span class=\"attribute\">name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span></span><br><span class=\"line\">android:<span class=\"attribute\">maxSdkVersion</span>=<span class=\"string\">\"18\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>表示只在<code>API &lt;= 18</code>时，才申请<code>WRITE_EXTERNAL_STORAGE</code>权限。这样用户就无法在Android6.0系统的设置下面看到<code>存储空间</code>权限的开关，当然也就无法关闭它了，如下图所示。</p>\n<p><img src=\"/content/images/app-perm-after.png\" alt=\"app-权限\"></p>\n","site":{"data":{}},"excerpt":"<p>前一篇博客中介绍了<a href=\"http://unclechen.github.io/2016/03/05/Android6.0运行时权限简介/\">Android6.0运行时权限简介</a>，最近遇到这么一个情况，就是一个App以前都是在SD卡根目录直接新建了一个<code>XXX/image/</code>目录，来保存图片缓存的，但是如果适配到Android6.0，我们就需要弹出对话框给用户，来申请<code>WRITE_EXTERNAL_STORAGE</code>权限，如果仅仅是缓存图片为了提高加载速度，对于一个小白用户来讲，好像并不是什么值得让他授权的理由。。。</p>\n<p>下面记录一下我是怎么处理的，其实这次处理也不能叫做Android6.0权限适配了，不过对于<code>WRITE_EXTERNAL_STORAGE</code>这个权限而言，的确有一些需要注意的地方（坑）使我们以前没有关心的。</p>\n<p>首先，App在手机上保存文件或者缓存数据时，我认为应该遵守以下几点：</p>\n<ul>\n<li>1.不要随意占用用户的内置存储。</li>\n<li>2.不要随意在SD卡上新建目录，应该放置自己应用包名对应的扩展存储目录下，卸载App时可以被自动清除。</li>\n<li>3.对占用的磁盘空间有上限，并按照一定的策略进行清除。</li>\n</ul>","more":"<h1 id=\"Android下有哪些文件目录\"><a href=\"#Android下有哪些文件目录\" class=\"headerlink\" title=\"Android下有哪些文件目录\"></a>Android下有哪些文件目录</h1><p>在Android系统中，根据调用的系统API接口，有3种目录可以给我们写入文件：</p>\n<ul>\n<li><p>1.<strong>应用</strong>私有存储（内置存储）</p>\n<ul>\n<li>获取方式：<ul>\n<li><code>Context.getFileDir()</code>：获取内置存储下的文件目录，可以用来保存不能公开给其他应用的一些敏感数据如用户个人信息</li>\n<li><code>Context.getCacheDir()</code>：获取内置存储下的缓存目录，可以用来保存一些缓存文件如图片，当内置存储的空间不足时将系统自动被清除（然而具体多大，清除时的策略我也没查到。。）</li>\n</ul>\n</li>\n<li>绝对路径：<ul>\n<li><code>Context.getFileDir()</code>：<code>/data/data/应用包名/files/</code></li>\n<li><code>Context.getCacheDir()</code>：<code>/data/data/应用包名/cache/</code></li>\n</ul>\n</li>\n<li><p>写权限：不需要申请</p>\n<p>这是手机的内置存储，没有root的过的手机是无法用文件管理器之类的工具查看的。而且这些数据也会随着用户卸载App而被一起删除。这两个目录其实就对应着<code>设置-&gt;应用-&gt;你的App-&gt;存储空间</code>下面的<code>清除数据</code>和<code>清楚缓存</code>，如下图所示。</p>\n<p><img src=\"/content/images/app-storage.png\" alt=\"app-存储空间\"></p>\n</li>\n</ul>\n</li>\n<li><p>2.<strong>应用</strong>扩展存储（SD卡）</p>\n<ul>\n<li>获取方式：<ul>\n<li><code>Context.getExternalFilesDir()</code>：<code>获取SD卡上的文件目录</code></li>\n<li><code>Context.getExternalCacheDir()</code>：<code>获取SD卡上的缓存目录</code></li>\n</ul>\n</li>\n<li>绝对路径：<ul>\n<li><code>Context.getExternalFilesDir()</code>：<code>SDCard/Android/data/应用包名/files/</code><ul>\n<li><code>Context.getExternalCacheDir()</code>：<code>SDCard/Android/data/应用包名/cache/</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>写权限：</p>\n<ul>\n<li>API &lt; 19：需要申请</li>\n<li>API &gt;= 19：不需要申请</li>\n</ul>\n<p>既然是SD卡上的目录，那么是可以被其他的应用读取到的，所以这个目录下，不应该存放用户的敏感信息。同上面一样的，这里的文件会随着App卸载而被删除，也可以由用户手动在设置界面里面清除。    </p>\n</li>\n</ul>\n</li>\n<li><p>3.公共存储（SD卡）</p>\n<ul>\n<li>获取方式：<code>Environment.getExternalStorageDirectory()</code></li>\n<li>绝对路径：<code>SDCard/你设置的文件夹名字/</code></li>\n<li><p>写权限：需要申请</p>\n<p>如果我们的App需要存储一些公共的文件，甚至希望下载下来的文件即使在我们的App被删除之后，还可以被其他App使用，那么就可以使用这个目录。这个目录是始终需要申请SD写入权限的。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Android6-0下应该把文件放到哪里？\"><a href=\"#Android6-0下应该把文件放到哪里？\" class=\"headerlink\" title=\"Android6.0下应该把文件放到哪里？\"></a>Android6.0下应该把文件放到哪里？</h1><p>有了前一节的介绍，其实很清楚了，根据最开始提到的规则，其实如果仅仅是做了简单的图片缓存工作，那么我们应该把图片缓存放到<code>/data/data/应用包名/cache/</code>或者<code>SDCard/Android/data/应用包名/cache/</code>，因为在6.0系统（<code>API &gt; 23</code>）时，不需要申请权限就可以向这两个目录写入文件。而且<code>/data/data/应用包名/cache/</code>目录，是内置存储的应用私有缓存目录，在系统空间不够时还会被自动清除，对于图片缓存来讲也是一个不错的管理策略，不过谷歌建议我们最好还是自己实现缓存清除管理，例如用<code>DiskLruCache</code>。</p>\n<p>实际上我们可以在<code>API &gt;= 19（不一定非要大于23）</code>时，就可以在不需要申请权限的情况下把文件放到这两个目录了。如果开发的时候足够规范，即使在<code>API &lt; 19</code>时，我们申请到写入权限后，我们也应该手动创建和前面相同的目录，使得应用存储数据目录统一化。</p>\n<h1 id=\"Last，最后还有个坑！\"><a href=\"#Last，最后还有个坑！\" class=\"headerlink\" title=\"Last，最后还有个坑！\"></a>Last，最后还有个坑！</h1><p>好了，是不是现在不用SD卡上创建的目录<code>XXX/image/</code>，直接改为改为<code>SDCard/Android/data/应用包名/cache/image/</code>就OK了？还真不完全是这样的。。。</p>\n<p><strong>？？？纳尼？？？？</strong></p>\n<p>通常我们开发App时会设置<code>targetSDKVersion=23</code>时，并同时<strong>向前兼容</strong>，还会设置<code>minSdkVersion=14</code>表示支持的最低系统版本是Android4.0(<code>API = 14</code>)。也就是说我们的<code>build.gradle</code>一般长这样：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion 23</span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></span><br><span class=\"line\">    <span class=\"string\">...</span></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"xxx.xxx\"</span></span><br><span class=\"line\">        minSdkVersion 14</span><br><span class=\"line\">        targetSdkVersion 23</span><br><span class=\"line\">        <span class=\"keyword\">version</span>Code 1</span><br><span class=\"line\">        <span class=\"keyword\">version</span>Name <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"string\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是前面我们说过，通过<code>Context.getExternalCacheDir()</code>接口获取应用扩展存储目录时，只有在<code>API &gt;= 19</code>时才不需要申请权限。也就是说如果是上面这种兼容到<code>API 14</code>的应用，还是需要在<code>AndroidManifest.xml</code>中注册<code>WRITE_EXTERNAL_STORAGE</code>权限的。</p>\n<p>前一篇博客<a href=\"http://unclechen.github.io/2016/03/05/Android6.0运行时权限简介/\">Android6.0运行时权限简介</a>知道，如果在<code>AndroidManifest.xml</code>文件里注册过<code>WRITE_EXTERNAL_STORAGE</code>，当App运行在一台6.0的设备时，即使你的App全程都没有调用<code>requestPermissons</code>来申请权限，用户还是可以在<strong>Android6.0系统上</strong> 进入<code>设置-&gt;应用-&gt;你的App-&gt;权限</code>里面，取消<code>存储空间</code>这一个权限。记住是运行在<strong>6.0系统的机器</strong>上，这是关键，因为低于6.0的系统根本没有这个设置。</p>\n<p>如下图所示，只要在manifest里面注册了，就可以动态取消之！</p>\n<p><img src=\"/content/images/app-perm-before.png\" alt=\"app-权限\"></p>\n<p>此时会发生什么？？？此时你的图片在6.0机器上也就没法缓存喽。。/(ㄒoㄒ)/~~  </p>\n<p>为啥啊？6.0机器上，我不是不需要申请权限就可以获得写入<code>SDCard/Android/data/应用包名/cache/</code>目录吗？实际测试时发现，当用户取消了权限之后，SDK接口中与<code>File</code>相关的API全部都返回空了，于是我们就没法写文件了。</p>\n<p>其实我们还需要做的是：</p>\n<p>将AndroidManifest.xml文件中的</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:<span class=\"attribute\">name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:<span class=\"attribute\">name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span></span><br><span class=\"line\">android:<span class=\"attribute\">maxSdkVersion</span>=<span class=\"string\">\"18\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>表示只在<code>API &lt;= 18</code>时，才申请<code>WRITE_EXTERNAL_STORAGE</code>权限。这样用户就无法在Android6.0系统的设置下面看到<code>存储空间</code>权限的开关，当然也就无法关闭它了，如下图所示。</p>\n<p><img src=\"/content/images/app-perm-after.png\" alt=\"app-权限\"></p>"},{"layout":"post","title":"Android6.0运行时权限简介","date":"2016-03-05T00:00:00.000Z","_content":"\nAndroid6.0发布距离现在快1年了，虽然它市场占有率仍在龟速上升中，但还是有一些App开发者已经在打包应用时将`targetSDKVersion`设置到了`23`，也就是说把App适配到了Android6.0。以前调用Android系统中需要声明权限的API时，只需要在`AndroidManifest.xml`文件中一次性列出来。但是如果在`build.gradle`文件里将`targetSDKVersion`设为`23`以后，除了在`AndroidManifest.xml`声明，我们还需要根据App运行时所在的手机的系统版本，在调用权限之前向用户申请授权，并在用户允许以后，才可以安全的调用对应的API。\n\n<!-- more -->\n\n简单举个例子，我的App有一个地理位置读取的功能，需要`ACCESS_COARSE_LOCATION`（粗略的地理位置信息）权限，如果Apk是以`targetSDKVersion=22`的方式进行打包的，那么在安装时用户将不得授权我的App这个权限，否则他将无法安装这个应用；如果是以`targetSDKVersion=23`的形式打包的，而且用户使用的手机是Android6.0的系统，那么在安装时我的App是没有获得读取地理位置权限的，我们需要调用系统提供的`requestPermissions`接口来申请权限。这时候你可能会说那我还设置`targetSDKVersion=23`干嘛？还不如直接用`22`打包得了。。\n\n不要高兴得太早，下面我们会说理由。因为只要用户使用的是6.0系统的手机，他是可以在安装完成以后，在手机的设置界面取消一些`dangerous`权限的。\n\n下图就是6.0系统上权限管理的界面。\n\n![app-cancel-perm](/content/images/app-cancel-perm.png)\n\n# targetSDKVersion和compileSDKVersion的作用\n\n在`build.gradle`中有这么一段：\n\n```\nandroid {\n\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n    ...\n    \n    defaultConfig {\n        ...\n        targetSdkVersion 22\n        ...\n    }\n\n```\n\n- targetSDKVersion：简单来说就代表着你的App能够适配的系统版本，意味着你的App在这个版本的手机上做了充分的**前向**兼容性处理和实际测试。其实我们写代码时都是经常干这么一件事，就是`if(Build.VERSION.SDK_INT >= 23) { ... }`，这就是兼容性处理最典型的一个例子。如果你的target设置得越高，其实调用系统提供的API时，所得到的处理也是不一样的，甚至有些新的API是只有新的系统才有的，例如前一篇博客里用到WebView的`setWebContentsDebuggingEnabled(boolean))`方法，这是Android4.4以后才可以用的一个API。\n\n- compileSdkVersion：是你SDK的版本号，也就是你在编程时引用的`android.jar`的版本。一般都会和targetSDKVersion相等，或者比targetSDKVersion高。\n\n因此，如果我们要把自己的App适配到Android6.0系统，首先要把`targetSDKVersion`和`compileSDKVersion`全部设置为`23`。\n\n\n# Android6.0运行时权限系统到底是干嘛的？\n\n介绍了targetSDKVersion和compileSDKVersion以后，我们就知道什么叫做适配到Android X.X了。那么Android6.0这个运行时权限系统和以前最大的不同就在于：将我们以前一股脑儿以`<permission>`标签方式写在`AndroidManifest.xml`文件中的权限划分成了**normal permission** 和 **dangerous permission**。\n\n- Normal Permission：你写在xml文件里，那么App安装时就会默认获得这些权限，即使是在Android6.0系统的手机上，用户也无法在安装后动态取消这些normal权限，这和以前的权限系统是一样的，不变。\n\n- Dangerous Permission：你还是得写在xml文件里，但是App安装时具体如果执行授权分以下几种情况：\n\t- `targetSDKVersion < 23` **&** `API(手机系统) < 6.0`：安装时默认获得权限，且用户无法在安装App之后取消权限。\n\t- `targetSDKVersion >= 23` **&** `API(手机系统) < 6.0`：安装时默认获得权限，且用户无法在安装App之后取消权限。\n\t- `targetSDKVersion < 23` **&** `API(手机系统) >= 6.0`：安装时默认获得权限，但是用户可以在安装App完成后动态取消授权（**取消时手机会弹出提醒，告诉用户这个是为旧版手机打造的应用，让用户谨慎操作**）。\n\t- `targetSDKVersion >= 23` **&** `API(手机系统) >= 6.0`：安装时不会获得权限，可以在运行时向用户申请权限。用户授权以后仍然可以在设置界面中取消授权。\n\t\n6.0手机上取消授权的界面如下，如果是`targetSDKVersion < 23`打包的应用，取消权限时，会：\n\n![app-权限](/content/images/app-permission.png)\n\t\n我们可以看到其实只有在6.0的机器上，打包了适配到6.0的App，才需要做一些明显的权限适配工作。但是实话说，不论是不是适配6.0系统，我们都应该在调用需要权限的接口前，检查一下是否具有具有该权限。因为我们会遇到厂商的修改过权限系统的ROM，也有可能自己忘记在xml里加上权限清单。当然这里面也会有坑，因为有时在不同厂商手机上直接调用`checkCallingOrSelfPermission`方法得到的结果并不准确。\n\n# 如果我不target到23会怎么样？\n\n很显然，如果不target到23，短期内还可以不写权限适配的代码。但是！！！前面提到了，用户仍然可以在6.0的手机上取消安装时默认赋予的dangerous权限。**那么这时候会发生什么？？？？**如果这个API原本应该返回的是对象，那么这时将返回`null`；如果这个API原本应该返回的是数字，这时就是`0`。可想而知，如果你只是对返回的`null`或者`0`做了一些不恰当的处理，App还是可能会crash的。所以这不是长久之计，尽快地处理好权限申请才是王道，这也是一种对App、对用户更负责的做法。\n\n# 如何在运行时申请权限 & 官方的权限分级列表\n\n- 关于如何适配到6.0的权限系统，网上有非常多的例子，我觉得看了这篇文章基本上就OK了，因为网上很多貌似都翻译自这篇文章，强力推荐一下：[things-you-need-to-know-about-android-m-permission](http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition)\n\n- Google官方的RuntimePermissions介绍：[runtime-permissions](https://developer.android.com/preview/features/runtime-permissions.html)\n\n- Google官方的dangerous权限及分组：[permissions: normal-dangerous](https://developer.android.com/intl/zh-cn/guide/topics/security/permissions.html#normal-dangerous)\n\n- 开源社区-权限适配组件：伟大的开源社区已经有轮子了，可以学习一下！\n\t- [PermissionHelper](https://github.com/k0shk0sh/PermissionHelper)\n\t- [PermissionsDispatcher](https://github.com/hotchemi/PermissionsDispatcher)\n\t- [PermissionGen](https://github.com/lovedise/PermissionGen)\n\t- [TedPermission](https://github.com/ParkSangGwon/TedPermission):不用自己调用checkSelfPermission(), requestPermissions(),然后再处理回调onRequestPermissionsResult(), onActivityResult()。只要一行代码，设置一个listener就可以监听授权的结果，使用起来非常简单。内部实现采用的是类似event bus的otto实现的。\n\n\n# 举个栗子（坑）：WRITE_EXTERNAL_STORGE的Android6.0适配问题\n\n见下篇博客[Android6.0权限适配之WRITE_EXTERNAL_STORAGE（SD卡写入）](http://unclechen.github.io/2016/03/06/Android6.0权限适配之SD卡写入/)\n\n\n\n\n\n","source":"_posts/Android6.0运行时权限简介.markdown","raw":"---\nlayout: post\ntitle: Android6.0运行时权限简介\ndate: '2016-03-05'\ntags:\n  - Android\n  - 适配\n  - 权限\ncategories: \n  - 技术\n---\n\nAndroid6.0发布距离现在快1年了，虽然它市场占有率仍在龟速上升中，但还是有一些App开发者已经在打包应用时将`targetSDKVersion`设置到了`23`，也就是说把App适配到了Android6.0。以前调用Android系统中需要声明权限的API时，只需要在`AndroidManifest.xml`文件中一次性列出来。但是如果在`build.gradle`文件里将`targetSDKVersion`设为`23`以后，除了在`AndroidManifest.xml`声明，我们还需要根据App运行时所在的手机的系统版本，在调用权限之前向用户申请授权，并在用户允许以后，才可以安全的调用对应的API。\n\n<!-- more -->\n\n简单举个例子，我的App有一个地理位置读取的功能，需要`ACCESS_COARSE_LOCATION`（粗略的地理位置信息）权限，如果Apk是以`targetSDKVersion=22`的方式进行打包的，那么在安装时用户将不得授权我的App这个权限，否则他将无法安装这个应用；如果是以`targetSDKVersion=23`的形式打包的，而且用户使用的手机是Android6.0的系统，那么在安装时我的App是没有获得读取地理位置权限的，我们需要调用系统提供的`requestPermissions`接口来申请权限。这时候你可能会说那我还设置`targetSDKVersion=23`干嘛？还不如直接用`22`打包得了。。\n\n不要高兴得太早，下面我们会说理由。因为只要用户使用的是6.0系统的手机，他是可以在安装完成以后，在手机的设置界面取消一些`dangerous`权限的。\n\n下图就是6.0系统上权限管理的界面。\n\n![app-cancel-perm](/content/images/app-cancel-perm.png)\n\n# targetSDKVersion和compileSDKVersion的作用\n\n在`build.gradle`中有这么一段：\n\n```\nandroid {\n\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n    ...\n    \n    defaultConfig {\n        ...\n        targetSdkVersion 22\n        ...\n    }\n\n```\n\n- targetSDKVersion：简单来说就代表着你的App能够适配的系统版本，意味着你的App在这个版本的手机上做了充分的**前向**兼容性处理和实际测试。其实我们写代码时都是经常干这么一件事，就是`if(Build.VERSION.SDK_INT >= 23) { ... }`，这就是兼容性处理最典型的一个例子。如果你的target设置得越高，其实调用系统提供的API时，所得到的处理也是不一样的，甚至有些新的API是只有新的系统才有的，例如前一篇博客里用到WebView的`setWebContentsDebuggingEnabled(boolean))`方法，这是Android4.4以后才可以用的一个API。\n\n- compileSdkVersion：是你SDK的版本号，也就是你在编程时引用的`android.jar`的版本。一般都会和targetSDKVersion相等，或者比targetSDKVersion高。\n\n因此，如果我们要把自己的App适配到Android6.0系统，首先要把`targetSDKVersion`和`compileSDKVersion`全部设置为`23`。\n\n\n# Android6.0运行时权限系统到底是干嘛的？\n\n介绍了targetSDKVersion和compileSDKVersion以后，我们就知道什么叫做适配到Android X.X了。那么Android6.0这个运行时权限系统和以前最大的不同就在于：将我们以前一股脑儿以`<permission>`标签方式写在`AndroidManifest.xml`文件中的权限划分成了**normal permission** 和 **dangerous permission**。\n\n- Normal Permission：你写在xml文件里，那么App安装时就会默认获得这些权限，即使是在Android6.0系统的手机上，用户也无法在安装后动态取消这些normal权限，这和以前的权限系统是一样的，不变。\n\n- Dangerous Permission：你还是得写在xml文件里，但是App安装时具体如果执行授权分以下几种情况：\n\t- `targetSDKVersion < 23` **&** `API(手机系统) < 6.0`：安装时默认获得权限，且用户无法在安装App之后取消权限。\n\t- `targetSDKVersion >= 23` **&** `API(手机系统) < 6.0`：安装时默认获得权限，且用户无法在安装App之后取消权限。\n\t- `targetSDKVersion < 23` **&** `API(手机系统) >= 6.0`：安装时默认获得权限，但是用户可以在安装App完成后动态取消授权（**取消时手机会弹出提醒，告诉用户这个是为旧版手机打造的应用，让用户谨慎操作**）。\n\t- `targetSDKVersion >= 23` **&** `API(手机系统) >= 6.0`：安装时不会获得权限，可以在运行时向用户申请权限。用户授权以后仍然可以在设置界面中取消授权。\n\t\n6.0手机上取消授权的界面如下，如果是`targetSDKVersion < 23`打包的应用，取消权限时，会：\n\n![app-权限](/content/images/app-permission.png)\n\t\n我们可以看到其实只有在6.0的机器上，打包了适配到6.0的App，才需要做一些明显的权限适配工作。但是实话说，不论是不是适配6.0系统，我们都应该在调用需要权限的接口前，检查一下是否具有具有该权限。因为我们会遇到厂商的修改过权限系统的ROM，也有可能自己忘记在xml里加上权限清单。当然这里面也会有坑，因为有时在不同厂商手机上直接调用`checkCallingOrSelfPermission`方法得到的结果并不准确。\n\n# 如果我不target到23会怎么样？\n\n很显然，如果不target到23，短期内还可以不写权限适配的代码。但是！！！前面提到了，用户仍然可以在6.0的手机上取消安装时默认赋予的dangerous权限。**那么这时候会发生什么？？？？**如果这个API原本应该返回的是对象，那么这时将返回`null`；如果这个API原本应该返回的是数字，这时就是`0`。可想而知，如果你只是对返回的`null`或者`0`做了一些不恰当的处理，App还是可能会crash的。所以这不是长久之计，尽快地处理好权限申请才是王道，这也是一种对App、对用户更负责的做法。\n\n# 如何在运行时申请权限 & 官方的权限分级列表\n\n- 关于如何适配到6.0的权限系统，网上有非常多的例子，我觉得看了这篇文章基本上就OK了，因为网上很多貌似都翻译自这篇文章，强力推荐一下：[things-you-need-to-know-about-android-m-permission](http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition)\n\n- Google官方的RuntimePermissions介绍：[runtime-permissions](https://developer.android.com/preview/features/runtime-permissions.html)\n\n- Google官方的dangerous权限及分组：[permissions: normal-dangerous](https://developer.android.com/intl/zh-cn/guide/topics/security/permissions.html#normal-dangerous)\n\n- 开源社区-权限适配组件：伟大的开源社区已经有轮子了，可以学习一下！\n\t- [PermissionHelper](https://github.com/k0shk0sh/PermissionHelper)\n\t- [PermissionsDispatcher](https://github.com/hotchemi/PermissionsDispatcher)\n\t- [PermissionGen](https://github.com/lovedise/PermissionGen)\n\t- [TedPermission](https://github.com/ParkSangGwon/TedPermission):不用自己调用checkSelfPermission(), requestPermissions(),然后再处理回调onRequestPermissionsResult(), onActivityResult()。只要一行代码，设置一个listener就可以监听授权的结果，使用起来非常简单。内部实现采用的是类似event bus的otto实现的。\n\n\n# 举个栗子（坑）：WRITE_EXTERNAL_STORGE的Android6.0适配问题\n\n见下篇博客[Android6.0权限适配之WRITE_EXTERNAL_STORAGE（SD卡写入）](http://unclechen.github.io/2016/03/06/Android6.0权限适配之SD卡写入/)\n\n\n\n\n\n","slug":"Android6.0运行时权限简介","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8e0000imtsxuvfr0ol9","content":"<p>Android6.0发布距离现在快1年了，虽然它市场占有率仍在龟速上升中，但还是有一些App开发者已经在打包应用时将<code>targetSDKVersion</code>设置到了<code>23</code>，也就是说把App适配到了Android6.0。以前调用Android系统中需要声明权限的API时，只需要在<code>AndroidManifest.xml</code>文件中一次性列出来。但是如果在<code>build.gradle</code>文件里将<code>targetSDKVersion</code>设为<code>23</code>以后，除了在<code>AndroidManifest.xml</code>声明，我们还需要根据App运行时所在的手机的系统版本，在调用权限之前向用户申请授权，并在用户允许以后，才可以安全的调用对应的API。</p>\n<a id=\"more\"></a>\n<p>简单举个例子，我的App有一个地理位置读取的功能，需要<code>ACCESS_COARSE_LOCATION</code>（粗略的地理位置信息）权限，如果Apk是以<code>targetSDKVersion=22</code>的方式进行打包的，那么在安装时用户将不得授权我的App这个权限，否则他将无法安装这个应用；如果是以<code>targetSDKVersion=23</code>的形式打包的，而且用户使用的手机是Android6.0的系统，那么在安装时我的App是没有获得读取地理位置权限的，我们需要调用系统提供的<code>requestPermissions</code>接口来申请权限。这时候你可能会说那我还设置<code>targetSDKVersion=23</code>干嘛？还不如直接用<code>22</code>打包得了。。</p>\n<p>不要高兴得太早，下面我们会说理由。因为只要用户使用的是6.0系统的手机，他是可以在安装完成以后，在手机的设置界面取消一些<code>dangerous</code>权限的。</p>\n<p>下图就是6.0系统上权限管理的界面。</p>\n<p><img src=\"/content/images/app-cancel-perm.png\" alt=\"app-cancel-perm\"></p>\n<h1 id=\"targetSDKVersion和compileSDKVersion的作用\"><a href=\"#targetSDKVersion和compileSDKVersion的作用\" class=\"headerlink\" title=\"targetSDKVersion和compileSDKVersion的作用\"></a>targetSDKVersion和compileSDKVersion的作用</h1><p>在<code>build.gradle</code>中有这么一段：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">23</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>targetSDKVersion：简单来说就代表着你的App能够适配的系统版本，意味着你的App在这个版本的手机上做了充分的<strong>前向</strong>兼容性处理和实际测试。其实我们写代码时都是经常干这么一件事，就是<code>if(Build.VERSION.SDK_INT &gt;= 23) { ... }</code>，这就是兼容性处理最典型的一个例子。如果你的target设置得越高，其实调用系统提供的API时，所得到的处理也是不一样的，甚至有些新的API是只有新的系统才有的，例如前一篇博客里用到WebView的<code>setWebContentsDebuggingEnabled(boolean))</code>方法，这是Android4.4以后才可以用的一个API。</p>\n</li>\n<li><p>compileSdkVersion：是你SDK的版本号，也就是你在编程时引用的<code>android.jar</code>的版本。一般都会和targetSDKVersion相等，或者比targetSDKVersion高。</p>\n</li>\n</ul>\n<p>因此，如果我们要把自己的App适配到Android6.0系统，首先要把<code>targetSDKVersion</code>和<code>compileSDKVersion</code>全部设置为<code>23</code>。</p>\n<h1 id=\"Android6-0运行时权限系统到底是干嘛的？\"><a href=\"#Android6-0运行时权限系统到底是干嘛的？\" class=\"headerlink\" title=\"Android6.0运行时权限系统到底是干嘛的？\"></a>Android6.0运行时权限系统到底是干嘛的？</h1><p>介绍了targetSDKVersion和compileSDKVersion以后，我们就知道什么叫做适配到Android X.X了。那么Android6.0这个运行时权限系统和以前最大的不同就在于：将我们以前一股脑儿以<code>&lt;permission&gt;</code>标签方式写在<code>AndroidManifest.xml</code>文件中的权限划分成了<strong>normal permission</strong> 和 <strong>dangerous permission</strong>。</p>\n<ul>\n<li><p>Normal Permission：你写在xml文件里，那么App安装时就会默认获得这些权限，即使是在Android6.0系统的手机上，用户也无法在安装后动态取消这些normal权限，这和以前的权限系统是一样的，不变。</p>\n</li>\n<li><p>Dangerous Permission：你还是得写在xml文件里，但是App安装时具体如果执行授权分以下几种情况：</p>\n<ul>\n<li><code>targetSDKVersion &lt; 23</code> <strong>&amp;</strong> <code>API(手机系统) &lt; 6.0</code>：安装时默认获得权限，且用户无法在安装App之后取消权限。</li>\n<li><code>targetSDKVersion &gt;= 23</code> <strong>&amp;</strong> <code>API(手机系统) &lt; 6.0</code>：安装时默认获得权限，且用户无法在安装App之后取消权限。</li>\n<li><code>targetSDKVersion &lt; 23</code> <strong>&amp;</strong> <code>API(手机系统) &gt;= 6.0</code>：安装时默认获得权限，但是用户可以在安装App完成后动态取消授权（<strong>取消时手机会弹出提醒，告诉用户这个是为旧版手机打造的应用，让用户谨慎操作</strong>）。</li>\n<li><code>targetSDKVersion &gt;= 23</code> <strong>&amp;</strong> <code>API(手机系统) &gt;= 6.0</code>：安装时不会获得权限，可以在运行时向用户申请权限。用户授权以后仍然可以在设置界面中取消授权。</li>\n</ul>\n</li>\n</ul>\n<p>6.0手机上取消授权的界面如下，如果是<code>targetSDKVersion &lt; 23</code>打包的应用，取消权限时，会：</p>\n<p><img src=\"/content/images/app-permission.png\" alt=\"app-权限\"></p>\n<p>我们可以看到其实只有在6.0的机器上，打包了适配到6.0的App，才需要做一些明显的权限适配工作。但是实话说，不论是不是适配6.0系统，我们都应该在调用需要权限的接口前，检查一下是否具有具有该权限。因为我们会遇到厂商的修改过权限系统的ROM，也有可能自己忘记在xml里加上权限清单。当然这里面也会有坑，因为有时在不同厂商手机上直接调用<code>checkCallingOrSelfPermission</code>方法得到的结果并不准确。</p>\n<h1 id=\"如果我不target到23会怎么样？\"><a href=\"#如果我不target到23会怎么样？\" class=\"headerlink\" title=\"如果我不target到23会怎么样？\"></a>如果我不target到23会怎么样？</h1><p>很显然，如果不target到23，短期内还可以不写权限适配的代码。但是！！！前面提到了，用户仍然可以在6.0的手机上取消安装时默认赋予的dangerous权限。<strong>那么这时候会发生什么？？？？</strong>如果这个API原本应该返回的是对象，那么这时将返回<code>null</code>；如果这个API原本应该返回的是数字，这时就是<code>0</code>。可想而知，如果你只是对返回的<code>null</code>或者<code>0</code>做了一些不恰当的处理，App还是可能会crash的。所以这不是长久之计，尽快地处理好权限申请才是王道，这也是一种对App、对用户更负责的做法。</p>\n<h1 id=\"如何在运行时申请权限-amp-官方的权限分级列表\"><a href=\"#如何在运行时申请权限-amp-官方的权限分级列表\" class=\"headerlink\" title=\"如何在运行时申请权限 &amp; 官方的权限分级列表\"></a>如何在运行时申请权限 &amp; 官方的权限分级列表</h1><ul>\n<li><p>关于如何适配到6.0的权限系统，网上有非常多的例子，我觉得看了这篇文章基本上就OK了，因为网上很多貌似都翻译自这篇文章，强力推荐一下：<a href=\"http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition\" target=\"_blank\" rel=\"noopener\">things-you-need-to-know-about-android-m-permission</a></p>\n</li>\n<li><p>Google官方的RuntimePermissions介绍：<a href=\"https://developer.android.com/preview/features/runtime-permissions.html\" target=\"_blank\" rel=\"noopener\">runtime-permissions</a></p>\n</li>\n<li><p>Google官方的dangerous权限及分组：<a href=\"https://developer.android.com/intl/zh-cn/guide/topics/security/permissions.html#normal-dangerous\" target=\"_blank\" rel=\"noopener\">permissions: normal-dangerous</a></p>\n</li>\n<li><p>开源社区-权限适配组件：伟大的开源社区已经有轮子了，可以学习一下！</p>\n<ul>\n<li><a href=\"https://github.com/k0shk0sh/PermissionHelper\" target=\"_blank\" rel=\"noopener\">PermissionHelper</a></li>\n<li><a href=\"https://github.com/hotchemi/PermissionsDispatcher\" target=\"_blank\" rel=\"noopener\">PermissionsDispatcher</a></li>\n<li><a href=\"https://github.com/lovedise/PermissionGen\" target=\"_blank\" rel=\"noopener\">PermissionGen</a></li>\n<li><a href=\"https://github.com/ParkSangGwon/TedPermission\" target=\"_blank\" rel=\"noopener\">TedPermission</a>:不用自己调用checkSelfPermission(), requestPermissions(),然后再处理回调onRequestPermissionsResult(), onActivityResult()。只要一行代码，设置一个listener就可以监听授权的结果，使用起来非常简单。内部实现采用的是类似event bus的otto实现的。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"举个栗子（坑）：WRITE-EXTERNAL-STORGE的Android6-0适配问题\"><a href=\"#举个栗子（坑）：WRITE-EXTERNAL-STORGE的Android6-0适配问题\" class=\"headerlink\" title=\"举个栗子（坑）：WRITE_EXTERNAL_STORGE的Android6.0适配问题\"></a>举个栗子（坑）：WRITE_EXTERNAL_STORGE的Android6.0适配问题</h1><p>见下篇博客<a href=\"http://unclechen.github.io/2016/03/06/Android6.0权限适配之SD卡写入/\">Android6.0权限适配之WRITE_EXTERNAL_STORAGE（SD卡写入）</a></p>\n","site":{"data":{}},"excerpt":"<p>Android6.0发布距离现在快1年了，虽然它市场占有率仍在龟速上升中，但还是有一些App开发者已经在打包应用时将<code>targetSDKVersion</code>设置到了<code>23</code>，也就是说把App适配到了Android6.0。以前调用Android系统中需要声明权限的API时，只需要在<code>AndroidManifest.xml</code>文件中一次性列出来。但是如果在<code>build.gradle</code>文件里将<code>targetSDKVersion</code>设为<code>23</code>以后，除了在<code>AndroidManifest.xml</code>声明，我们还需要根据App运行时所在的手机的系统版本，在调用权限之前向用户申请授权，并在用户允许以后，才可以安全的调用对应的API。</p>","more":"<p>简单举个例子，我的App有一个地理位置读取的功能，需要<code>ACCESS_COARSE_LOCATION</code>（粗略的地理位置信息）权限，如果Apk是以<code>targetSDKVersion=22</code>的方式进行打包的，那么在安装时用户将不得授权我的App这个权限，否则他将无法安装这个应用；如果是以<code>targetSDKVersion=23</code>的形式打包的，而且用户使用的手机是Android6.0的系统，那么在安装时我的App是没有获得读取地理位置权限的，我们需要调用系统提供的<code>requestPermissions</code>接口来申请权限。这时候你可能会说那我还设置<code>targetSDKVersion=23</code>干嘛？还不如直接用<code>22</code>打包得了。。</p>\n<p>不要高兴得太早，下面我们会说理由。因为只要用户使用的是6.0系统的手机，他是可以在安装完成以后，在手机的设置界面取消一些<code>dangerous</code>权限的。</p>\n<p>下图就是6.0系统上权限管理的界面。</p>\n<p><img src=\"/content/images/app-cancel-perm.png\" alt=\"app-cancel-perm\"></p>\n<h1 id=\"targetSDKVersion和compileSDKVersion的作用\"><a href=\"#targetSDKVersion和compileSDKVersion的作用\" class=\"headerlink\" title=\"targetSDKVersion和compileSDKVersion的作用\"></a>targetSDKVersion和compileSDKVersion的作用</h1><p>在<code>build.gradle</code>中有这么一段：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">23</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"23.0.2\"</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>targetSDKVersion：简单来说就代表着你的App能够适配的系统版本，意味着你的App在这个版本的手机上做了充分的<strong>前向</strong>兼容性处理和实际测试。其实我们写代码时都是经常干这么一件事，就是<code>if(Build.VERSION.SDK_INT &gt;= 23) { ... }</code>，这就是兼容性处理最典型的一个例子。如果你的target设置得越高，其实调用系统提供的API时，所得到的处理也是不一样的，甚至有些新的API是只有新的系统才有的，例如前一篇博客里用到WebView的<code>setWebContentsDebuggingEnabled(boolean))</code>方法，这是Android4.4以后才可以用的一个API。</p>\n</li>\n<li><p>compileSdkVersion：是你SDK的版本号，也就是你在编程时引用的<code>android.jar</code>的版本。一般都会和targetSDKVersion相等，或者比targetSDKVersion高。</p>\n</li>\n</ul>\n<p>因此，如果我们要把自己的App适配到Android6.0系统，首先要把<code>targetSDKVersion</code>和<code>compileSDKVersion</code>全部设置为<code>23</code>。</p>\n<h1 id=\"Android6-0运行时权限系统到底是干嘛的？\"><a href=\"#Android6-0运行时权限系统到底是干嘛的？\" class=\"headerlink\" title=\"Android6.0运行时权限系统到底是干嘛的？\"></a>Android6.0运行时权限系统到底是干嘛的？</h1><p>介绍了targetSDKVersion和compileSDKVersion以后，我们就知道什么叫做适配到Android X.X了。那么Android6.0这个运行时权限系统和以前最大的不同就在于：将我们以前一股脑儿以<code>&lt;permission&gt;</code>标签方式写在<code>AndroidManifest.xml</code>文件中的权限划分成了<strong>normal permission</strong> 和 <strong>dangerous permission</strong>。</p>\n<ul>\n<li><p>Normal Permission：你写在xml文件里，那么App安装时就会默认获得这些权限，即使是在Android6.0系统的手机上，用户也无法在安装后动态取消这些normal权限，这和以前的权限系统是一样的，不变。</p>\n</li>\n<li><p>Dangerous Permission：你还是得写在xml文件里，但是App安装时具体如果执行授权分以下几种情况：</p>\n<ul>\n<li><code>targetSDKVersion &lt; 23</code> <strong>&amp;</strong> <code>API(手机系统) &lt; 6.0</code>：安装时默认获得权限，且用户无法在安装App之后取消权限。</li>\n<li><code>targetSDKVersion &gt;= 23</code> <strong>&amp;</strong> <code>API(手机系统) &lt; 6.0</code>：安装时默认获得权限，且用户无法在安装App之后取消权限。</li>\n<li><code>targetSDKVersion &lt; 23</code> <strong>&amp;</strong> <code>API(手机系统) &gt;= 6.0</code>：安装时默认获得权限，但是用户可以在安装App完成后动态取消授权（<strong>取消时手机会弹出提醒，告诉用户这个是为旧版手机打造的应用，让用户谨慎操作</strong>）。</li>\n<li><code>targetSDKVersion &gt;= 23</code> <strong>&amp;</strong> <code>API(手机系统) &gt;= 6.0</code>：安装时不会获得权限，可以在运行时向用户申请权限。用户授权以后仍然可以在设置界面中取消授权。</li>\n</ul>\n</li>\n</ul>\n<p>6.0手机上取消授权的界面如下，如果是<code>targetSDKVersion &lt; 23</code>打包的应用，取消权限时，会：</p>\n<p><img src=\"/content/images/app-permission.png\" alt=\"app-权限\"></p>\n<p>我们可以看到其实只有在6.0的机器上，打包了适配到6.0的App，才需要做一些明显的权限适配工作。但是实话说，不论是不是适配6.0系统，我们都应该在调用需要权限的接口前，检查一下是否具有具有该权限。因为我们会遇到厂商的修改过权限系统的ROM，也有可能自己忘记在xml里加上权限清单。当然这里面也会有坑，因为有时在不同厂商手机上直接调用<code>checkCallingOrSelfPermission</code>方法得到的结果并不准确。</p>\n<h1 id=\"如果我不target到23会怎么样？\"><a href=\"#如果我不target到23会怎么样？\" class=\"headerlink\" title=\"如果我不target到23会怎么样？\"></a>如果我不target到23会怎么样？</h1><p>很显然，如果不target到23，短期内还可以不写权限适配的代码。但是！！！前面提到了，用户仍然可以在6.0的手机上取消安装时默认赋予的dangerous权限。<strong>那么这时候会发生什么？？？？</strong>如果这个API原本应该返回的是对象，那么这时将返回<code>null</code>；如果这个API原本应该返回的是数字，这时就是<code>0</code>。可想而知，如果你只是对返回的<code>null</code>或者<code>0</code>做了一些不恰当的处理，App还是可能会crash的。所以这不是长久之计，尽快地处理好权限申请才是王道，这也是一种对App、对用户更负责的做法。</p>\n<h1 id=\"如何在运行时申请权限-amp-官方的权限分级列表\"><a href=\"#如何在运行时申请权限-amp-官方的权限分级列表\" class=\"headerlink\" title=\"如何在运行时申请权限 &amp; 官方的权限分级列表\"></a>如何在运行时申请权限 &amp; 官方的权限分级列表</h1><ul>\n<li><p>关于如何适配到6.0的权限系统，网上有非常多的例子，我觉得看了这篇文章基本上就OK了，因为网上很多貌似都翻译自这篇文章，强力推荐一下：<a href=\"http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition\" target=\"_blank\" rel=\"noopener\">things-you-need-to-know-about-android-m-permission</a></p>\n</li>\n<li><p>Google官方的RuntimePermissions介绍：<a href=\"https://developer.android.com/preview/features/runtime-permissions.html\" target=\"_blank\" rel=\"noopener\">runtime-permissions</a></p>\n</li>\n<li><p>Google官方的dangerous权限及分组：<a href=\"https://developer.android.com/intl/zh-cn/guide/topics/security/permissions.html#normal-dangerous\" target=\"_blank\" rel=\"noopener\">permissions: normal-dangerous</a></p>\n</li>\n<li><p>开源社区-权限适配组件：伟大的开源社区已经有轮子了，可以学习一下！</p>\n<ul>\n<li><a href=\"https://github.com/k0shk0sh/PermissionHelper\" target=\"_blank\" rel=\"noopener\">PermissionHelper</a></li>\n<li><a href=\"https://github.com/hotchemi/PermissionsDispatcher\" target=\"_blank\" rel=\"noopener\">PermissionsDispatcher</a></li>\n<li><a href=\"https://github.com/lovedise/PermissionGen\" target=\"_blank\" rel=\"noopener\">PermissionGen</a></li>\n<li><a href=\"https://github.com/ParkSangGwon/TedPermission\" target=\"_blank\" rel=\"noopener\">TedPermission</a>:不用自己调用checkSelfPermission(), requestPermissions(),然后再处理回调onRequestPermissionsResult(), onActivityResult()。只要一行代码，设置一个listener就可以监听授权的结果，使用起来非常简单。内部实现采用的是类似event bus的otto实现的。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"举个栗子（坑）：WRITE-EXTERNAL-STORGE的Android6-0适配问题\"><a href=\"#举个栗子（坑）：WRITE-EXTERNAL-STORGE的Android6-0适配问题\" class=\"headerlink\" title=\"举个栗子（坑）：WRITE_EXTERNAL_STORGE的Android6.0适配问题\"></a>举个栗子（坑）：WRITE_EXTERNAL_STORGE的Android6.0适配问题</h1><p>见下篇博客<a href=\"http://unclechen.github.io/2016/03/06/Android6.0权限适配之SD卡写入/\">Android6.0权限适配之WRITE_EXTERNAL_STORAGE（SD卡写入）</a></p>"},{"layout":"post","title":"Android反编译技术总结","date":"2016-09-07T00:00:00.000Z","_content":"\n# 一、Apk反编译工具及其使用方法\n\n## 1.原理\n\n学习反编译之前，建议先学习一下Apk打包的过程，明白打包完成后的Apk里面都有什么文件，各种文件都是怎么生成的。\n\n这里有两篇AndroidWeekly中推荐过的好文章：\n\n- [浅析 Android 打包流程](http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&mid=2247483789&idx=1&sn=6aed8c7907d5bd9c8a5e7f2c2dcdac2e&scene=1&srcid=0831CCuRJsbJNuz1WxU6uUsI#wechat_redirect)\n\n- [Android构建过程分析](http://mp.weixin.qq.com/s?__biz=MzI1NjEwMTM4OA==&mid=2651232113&idx=1&sn=02f413999ab0865e23d272e69b9e6196&scene=1&srcid=0831gT4p6M0NFG5HTTeRHTUC#wechat_redirect)\n\n\nApk技术也有非常多的技术可以学习，主要都是围绕着如何减小体积，如何提高打包速度展开，这里先不多说了。下面是一张基本的Apk文件结构图。\n\n![APK文件结构](http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l2d6e4z5j20a80a0jrw.jpg)\n\n<!-- more -->\n\nApk文件本质上其实是一个zip包。直接拿解压工具解压就可以看到其中包含了什么。下面简单介绍一下Apk文件的结构。\n\n- AndroidManifest.xml：应用的全局配置文件\n- assets文件夹：原始资源文件夹，对应着Android工程的assets文件夹，一般用于存放原始的网页、音频等等，与res文件夹的区别这里不再赘述，可以参考上面介绍的两篇文章。\n- classes.dex：源代码编译成class后，转成jar，再压缩成dex文件，dex是可以直接在Android虚拟机上运行的文件。\n- lib文件夹：引用的第三方sdk的so文件。\n- META-INF文件夹：Apk签名文件。\n- res文件夹：资源文件，包括了布局、图片等等。\n- resources.arsc：记录资源文件和资源id的映射关系。\n\n上面的截图中每个文件都是一个最基本的Apk\n文件应该包含在内的。但是直接把Apk当做zip解压后的这些文件是没法直接阅读的，毕竟他们都是经过了build-tools打包工具处理过的。我们直接用文本编辑器打开这里面的Manifest文件看看。\n\n![反编译前的Manifest文件](http://ww3.sinaimg.cn/large/801b780agw1f7kzdom045j20go06sjul.jpg)\n\n**反编译Apk**的目的就是Apk拆成我们可以阅读的文件。通过反编译，我们一般想要得到里面的**AndroidManifest.xml文件**、**res文件**和**java代码**。\n\n\n## 2.Apk反编译步骤\n\n### (1) ApkTool拆包，得到AndroidManifest和res等资源文件\n\n**工具下载地址：**[https://bitbucket.org/iBotPeaches/apktool/downloads](https://bitbucket.org/iBotPeaches/apktool/downloads)\n\n**功能：**拆解Apk文件，反编译其中的资源文件，将它们反编译为可阅读的**AndroidManifest.xml文件**和**res文件**。前面讲过，直接把Apk文件当做zip解压，得到的xml资源文件，都是无法直接用文本编辑器打开阅读的，因为它们在打包时经过了build-tools的处理。\n\n**用法：**官网[https://ibotpeaches.github.io/Apktool/documentation/](https://ibotpeaches.github.io/Apktool/documentation/)有介绍，最新版本是**2.2.0**，运行环境需要**jre1.7**。\n\n这里，我演示一下用apktool来拆解Apk文件的基本方法，只需要在终端里面执行下面的命令。\n\n```\njava -jar apktool.jar d yourApkFile.apk\n// 注意`apktool.jar`是刚才下载后的jar的名称，`d`参数表示decode\n// 在这个命令后面还可以添加像`-o -s`之类的参数，例如\n// java -jar apktool.jar d yourApkFile.apk -o destiantionDir -s\n// 几个主要的参数设置方法及其含义：\n-f 如果目标文件夹已存在，强制删除现有文件夹\n-o 指定反编译的目标文件夹的名称（默认会将文件输出到以Apk文件名命名的文件夹中）\n-s 保留classes.dex文件（默认会将dex文件解码成smali文件）\n-r 保留resources.arsc文件（默认会将resources.arsc解码成具体的资源文件）\n```\n\n\n下面我们看一下`java -jar apktool.jar d yourApkFile.apk`拆解后的结果：\n\n![Apk拆包结果](http://ww1.sinaimg.cn/large/801b780agw1f7kxk0y0i9j20h00c6dgm.jpg)\n\n我们已经得到一个可以用文本编辑器打开的阅读的**AndroidManifest.xml文件、assets文件夹、res文件夹、smali文件夹**等等。original文件夹是原始的AndroidManifest.xml文件，res文件夹是反编译出来的所有资源，smali文件夹是反编译出来的代码。注意，smali文件夹下面，结构和我们的源代码的package一模一样，只不过换成了smali语言。它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言。\n\n这时，我们已经可以文本编辑器打开**AndroidManifest.xml**文件和**res下面的layout文件**了。这样，我们就可以查看到这个Apk文件的**package包名、Activity组件、程序所需要的权限、xml布局、图标**等等信息。其实我们把Apk上传到应用市场时，应用市场也会通过类似的方式解析我们的apk。\n\n\n> **note1：**其实还有一种方法，可以省去每次解包时，都要输入`java -jar apktool.jar xxx`这行命令，官网也有说明，就是将这个命令包装成shell脚本，方法见：[https://ibotpeaches.github.io/Apktool/install/](https://ibotpeaches.github.io/Apktool/install/)\n\n\n> **note2：**如果你在编译的时候，发现终端里面提示发生了**brut.android.UndefinedResObject**错误，说明你的apktool.jar版本太低了，需要去下载新版工具了。\n\n\n> **note3：**如果想要自己实现一个解析Apk文件，提取版本、权限信息的***java***服务时，可以引用`apktool.jar`中的`ApkDecoder`，调用`decode`方法来实现。可以看下图中，apktool.jar里面有解析Apk文件的实现。\n\n![apktool.jar](http://ww4.sinaimg.cn/large/801b780agw1f7kxsfcc9gj20m80f8ju0.jpg)\n\n\n\n### (2) dex2jar反编译dex文件，得到java源代码\n\n上一步中，我们得到了反编译后的资源文件，这一步我们还想看java源代码。这里要用的工具就是**dex2jar**。\n\n**工具下载地址：**[https://sourceforge.net/projects/dex2jar/](https://sourceforge.net/projects/dex2jar/)\n\n**功能：**将dex格式的文件，转换成jar文件。dex文件时Android虚拟机上面可以执行的文件，jar文件大家都是知道，其实就是java的class文件。在[官网](https://github.com/pxb1988/dex2jar)有详细介绍。\n\n**用法：**打开下载的dex2jar-2.0文件夹，里面有shell和bat脚本，进入终端，就可以在命令行使用了。\n\n```\nd2j-dex2jar classes.dex\n// 获取classes.dex文件在最前面说过，只要把Apk当做zip解压出来，里面就有dex文件了\n// 或者用apktool反编译时带上 `-s` 参数\n```\n\n运行后，可以看到**classes.dex**已经变成了**classes-dex2jar.jar**。\n\n![进入dex2jar文件夹](http://ww4.sinaimg.cn/large/801b780agw1f7kyy6qkwhj20go0e675q.jpg)\n\n\n> **note1：**第一次下载下来后，在mac里运行的时候可能会提示需要管理员的权限，这里我给这些sh脚本`chmod 777`后，即可运行它。\n\n![root执行dex2jar](http://ww1.sinaimg.cn/large/801b780agw1f7kz7zdeewj20go018t92.jpg)\n\n> **note2：**写完这一节的时候，我发现**把dex转换成jar**已经有了更好的工具**enjarify**，[https://github.com/google/enjarify](https://github.com/google/enjarify)这个工具是谷歌官方开源的用于反编译dex文件的。使用方法和dex2jar差不多，也是简单的命令行操作。这个工具的主页中也提到dex2jar已经是一个比较老的工具，在遇到混淆等等复杂的情况时，可能无法正常工作。所以这里推荐大家使用**enjarify**这个工具。\n\n\n### (3) jd-gui查看java源代码\n\n**工具下载地址：**官网[http://jd.benow.ca/](http://jd.benow.ca/)上选择自己所需要的版本。\n\n**功能：**这个工具不用多说，写java的人都知道。有时候我们自己开发一个jar包给别人用，也会用它来查看class是不是都被正确的打入到了jar内，我以前介绍的gradle自定义打包jar的博客中也提到过它。\n\n**用法：**下载后双击既可以运行这个工具，直接把上一步得到的**classes-dex2jar.jar**拖到jd-gui程序的界面上即可打开了，效果如下图所示。\n\n![classes-dex2jar.jar](http://ww3.sinaimg.cn/large/801b780agw1f7kzaffqirj20go04lmxb.jpg)\n\n### 反编译Apk步骤小结\n\n反编译一个Apk，查看它的资源文件和java代码，我们需要用到3个工具。\n\n- apktool：[https://ibotpeaches.github.io/Apktool/](https://ibotpeaches.github.io/Apktool/)\n- dex2jar：[https://github.com/pxb1988/dex2jar](https://github.com/pxb1988/dex2jar)\n- jd-gui：[http://jd.benow.ca/](http://jd.benow.ca/)\n\n反编译就是用这3个工具得到AndroidManifest.xml、res、java代码等。但是我们可以看到，如果你要对一个Apk做尽可能彻底的反编译，把它扒得干干净净，这一步一步的基本操作还是稍显麻烦。另外加固过Apk的情况可能更复杂，需要我们勤动手尝试。为了能提高效率，下面我把自己见过的一些集成工具介绍给大家，尽可能实现可以一键反编译Apk。\n\n\n# 二、自动化工具汇总（一键反编译Apk）\n\n## 1.谷歌提供的工具：[android-classyshark](http://classyshark.com/)\n\n**下载地址：**[https://github.com/google/android-classyshark/releases](https://github.com/google/android-classyshark/releases)，下载下来之后是一个可执行的jar文件，win下或者mac下都只要双击即可运行。\n\n**功能：**带有界面，一键反编译Apk工具，直接打开Apk文件，就可以看到Apk中所有的文件结构，甚至还集成了dex文件查看，java代码查看，方法数分析、导入混淆mapping文件等一系列工具。谷歌推出这个工具的目的是为了让我们开发者更清楚的了解自己的Apk中都有什么文件、混淆前后有什么变化，并方便我们进一步优化自己的Apk打包实现。下面带上几张截图，真是帅气的一笔的好工具啊！\n\n![dex文件查看](http://ww1.sinaimg.cn/large/801b780agw1f7l03o4znvj20m80e8n0f.jpg)\n\n![方法数分析](http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l21d8lm6j20p009iac1.jpg)\n\n即将到来的**Android Studio 2.2**中集成了一个叫做**APK Analyzer**的功能，这个功能不知道是不是和这个工具有关系呢，本人还没有尝试过2.2版本，有兴趣的朋友可以体验一下[preview版本](http://android-developers.blogspot.com/2016/05/android-studio-22-preview-new-ui.html)。\n\n\n## 2.Python实现的工具：[AndroidGuard](https://github.com/androguard/androguard)\n\n**下载地址：**[https://github.com/androguard/androguard/releases](https://github.com/androguard/androguard/releases)\n\n**功能：**集成了反编译资源、代码等各种文件的工具包。需要安装Python环境来运行这个工具，这个工具按照不同的反编译需求，分别写成了不同的py功能模块，还有静态分析的功能。所以如果想要用Python开发一个解析Apk文件并进行静态扫描分析的服务，可以引用这个工具来实现。\n\n**用法：**具体用法比较多，这里也不再展开了。可以通过工具内置的`-h`帮助指令查看各个模块的功能。\n\n```\nunclechendeiMac:androguard-2.0 unclechen$ python androaxml.py -h\nUsage: androaxml.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -i INPUT, --input=INPUT\n                        filename input (APK or android's binary xml)\n  -o OUTPUT, --output=OUTPUT\n                        filename output of the xml\n  -v, --version         version of the API\n\n// androaxml.py这个模块是用来解析AndroidManifest文件的，`-i` 表示输入的apk文件，`-o` 表示输出xml文件。\n\n```\n\n\n## 3.Mac专属工具：[Android-Crack-Tool](https://github.com/Jermic/Android-Crack-Tool)\n\n**功能：**这是网上一位名为[Jermic](https://github.com/Jermic)的大神开发的、在Mac环境下使用的App，集成了Android开发中常见的一些编译/反编译工具，方便用户对Apk进行逆向分析，提供Apk信息查看功能。工具的截图如下所示，非常强大。\n\n![Android-Crack-Tool.app](http://ww3.sinaimg.cn/large/801b780agw1f7l1q0hwugj20rs0gtwjl.jpg)\n\n\n## 4.手机上的反编译工具：[ApkParser](https://github.com/jaredrummler/APKParser)\n\n**功能：**在电脑上已经有了这么多的工具，在手机上的也有很方便的工具。**APKParser**是一款在查看手机上已经安装的Apk的信息的工具，他可以查看软件的**AndroidManifest.xml文件、方法数、res资源文件**，并在手机上直接展示出来。个人觉得这是一个非常实用的工具，作为开发者，手机里面必须要有它。\n\n![ApkParser](http://ww1.sinaimg.cn/large/65e4f1e6gw1f7l1wnbkv1j20m80b4jtf.jpg)\n\n\n## 5.工具汇总\n\n以上几款工具都是我体验过、感觉不错的集成工具，推荐给大家。临近本文结束前，又发现了这么一个福利网站-[http://www.androiddevtools.cn/](http://www.androiddevtools.cn/)，其中有一章专门总结了各种Apk反编译的工具。相信有了这么多的利器，大家应该有100种方法将一个App扒得干干净净了。\n\n![Apk反编译工具汇总](http://ww3.sinaimg.cn/large/801b780agw1f7l112kl4yj20m80pfwiq.jpg)","source":"_posts/Android反编译技术总结.md","raw":"---\nlayout: post\ntitle: Android反编译技术总结\ndate: '2016-09-07'\ntags:\n  - Android\n  - 反编译\ncategories: \n  - 技术\n---\n\n# 一、Apk反编译工具及其使用方法\n\n## 1.原理\n\n学习反编译之前，建议先学习一下Apk打包的过程，明白打包完成后的Apk里面都有什么文件，各种文件都是怎么生成的。\n\n这里有两篇AndroidWeekly中推荐过的好文章：\n\n- [浅析 Android 打包流程](http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&mid=2247483789&idx=1&sn=6aed8c7907d5bd9c8a5e7f2c2dcdac2e&scene=1&srcid=0831CCuRJsbJNuz1WxU6uUsI#wechat_redirect)\n\n- [Android构建过程分析](http://mp.weixin.qq.com/s?__biz=MzI1NjEwMTM4OA==&mid=2651232113&idx=1&sn=02f413999ab0865e23d272e69b9e6196&scene=1&srcid=0831gT4p6M0NFG5HTTeRHTUC#wechat_redirect)\n\n\nApk技术也有非常多的技术可以学习，主要都是围绕着如何减小体积，如何提高打包速度展开，这里先不多说了。下面是一张基本的Apk文件结构图。\n\n![APK文件结构](http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l2d6e4z5j20a80a0jrw.jpg)\n\n<!-- more -->\n\nApk文件本质上其实是一个zip包。直接拿解压工具解压就可以看到其中包含了什么。下面简单介绍一下Apk文件的结构。\n\n- AndroidManifest.xml：应用的全局配置文件\n- assets文件夹：原始资源文件夹，对应着Android工程的assets文件夹，一般用于存放原始的网页、音频等等，与res文件夹的区别这里不再赘述，可以参考上面介绍的两篇文章。\n- classes.dex：源代码编译成class后，转成jar，再压缩成dex文件，dex是可以直接在Android虚拟机上运行的文件。\n- lib文件夹：引用的第三方sdk的so文件。\n- META-INF文件夹：Apk签名文件。\n- res文件夹：资源文件，包括了布局、图片等等。\n- resources.arsc：记录资源文件和资源id的映射关系。\n\n上面的截图中每个文件都是一个最基本的Apk\n文件应该包含在内的。但是直接把Apk当做zip解压后的这些文件是没法直接阅读的，毕竟他们都是经过了build-tools打包工具处理过的。我们直接用文本编辑器打开这里面的Manifest文件看看。\n\n![反编译前的Manifest文件](http://ww3.sinaimg.cn/large/801b780agw1f7kzdom045j20go06sjul.jpg)\n\n**反编译Apk**的目的就是Apk拆成我们可以阅读的文件。通过反编译，我们一般想要得到里面的**AndroidManifest.xml文件**、**res文件**和**java代码**。\n\n\n## 2.Apk反编译步骤\n\n### (1) ApkTool拆包，得到AndroidManifest和res等资源文件\n\n**工具下载地址：**[https://bitbucket.org/iBotPeaches/apktool/downloads](https://bitbucket.org/iBotPeaches/apktool/downloads)\n\n**功能：**拆解Apk文件，反编译其中的资源文件，将它们反编译为可阅读的**AndroidManifest.xml文件**和**res文件**。前面讲过，直接把Apk文件当做zip解压，得到的xml资源文件，都是无法直接用文本编辑器打开阅读的，因为它们在打包时经过了build-tools的处理。\n\n**用法：**官网[https://ibotpeaches.github.io/Apktool/documentation/](https://ibotpeaches.github.io/Apktool/documentation/)有介绍，最新版本是**2.2.0**，运行环境需要**jre1.7**。\n\n这里，我演示一下用apktool来拆解Apk文件的基本方法，只需要在终端里面执行下面的命令。\n\n```\njava -jar apktool.jar d yourApkFile.apk\n// 注意`apktool.jar`是刚才下载后的jar的名称，`d`参数表示decode\n// 在这个命令后面还可以添加像`-o -s`之类的参数，例如\n// java -jar apktool.jar d yourApkFile.apk -o destiantionDir -s\n// 几个主要的参数设置方法及其含义：\n-f 如果目标文件夹已存在，强制删除现有文件夹\n-o 指定反编译的目标文件夹的名称（默认会将文件输出到以Apk文件名命名的文件夹中）\n-s 保留classes.dex文件（默认会将dex文件解码成smali文件）\n-r 保留resources.arsc文件（默认会将resources.arsc解码成具体的资源文件）\n```\n\n\n下面我们看一下`java -jar apktool.jar d yourApkFile.apk`拆解后的结果：\n\n![Apk拆包结果](http://ww1.sinaimg.cn/large/801b780agw1f7kxk0y0i9j20h00c6dgm.jpg)\n\n我们已经得到一个可以用文本编辑器打开的阅读的**AndroidManifest.xml文件、assets文件夹、res文件夹、smali文件夹**等等。original文件夹是原始的AndroidManifest.xml文件，res文件夹是反编译出来的所有资源，smali文件夹是反编译出来的代码。注意，smali文件夹下面，结构和我们的源代码的package一模一样，只不过换成了smali语言。它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言。\n\n这时，我们已经可以文本编辑器打开**AndroidManifest.xml**文件和**res下面的layout文件**了。这样，我们就可以查看到这个Apk文件的**package包名、Activity组件、程序所需要的权限、xml布局、图标**等等信息。其实我们把Apk上传到应用市场时，应用市场也会通过类似的方式解析我们的apk。\n\n\n> **note1：**其实还有一种方法，可以省去每次解包时，都要输入`java -jar apktool.jar xxx`这行命令，官网也有说明，就是将这个命令包装成shell脚本，方法见：[https://ibotpeaches.github.io/Apktool/install/](https://ibotpeaches.github.io/Apktool/install/)\n\n\n> **note2：**如果你在编译的时候，发现终端里面提示发生了**brut.android.UndefinedResObject**错误，说明你的apktool.jar版本太低了，需要去下载新版工具了。\n\n\n> **note3：**如果想要自己实现一个解析Apk文件，提取版本、权限信息的***java***服务时，可以引用`apktool.jar`中的`ApkDecoder`，调用`decode`方法来实现。可以看下图中，apktool.jar里面有解析Apk文件的实现。\n\n![apktool.jar](http://ww4.sinaimg.cn/large/801b780agw1f7kxsfcc9gj20m80f8ju0.jpg)\n\n\n\n### (2) dex2jar反编译dex文件，得到java源代码\n\n上一步中，我们得到了反编译后的资源文件，这一步我们还想看java源代码。这里要用的工具就是**dex2jar**。\n\n**工具下载地址：**[https://sourceforge.net/projects/dex2jar/](https://sourceforge.net/projects/dex2jar/)\n\n**功能：**将dex格式的文件，转换成jar文件。dex文件时Android虚拟机上面可以执行的文件，jar文件大家都是知道，其实就是java的class文件。在[官网](https://github.com/pxb1988/dex2jar)有详细介绍。\n\n**用法：**打开下载的dex2jar-2.0文件夹，里面有shell和bat脚本，进入终端，就可以在命令行使用了。\n\n```\nd2j-dex2jar classes.dex\n// 获取classes.dex文件在最前面说过，只要把Apk当做zip解压出来，里面就有dex文件了\n// 或者用apktool反编译时带上 `-s` 参数\n```\n\n运行后，可以看到**classes.dex**已经变成了**classes-dex2jar.jar**。\n\n![进入dex2jar文件夹](http://ww4.sinaimg.cn/large/801b780agw1f7kyy6qkwhj20go0e675q.jpg)\n\n\n> **note1：**第一次下载下来后，在mac里运行的时候可能会提示需要管理员的权限，这里我给这些sh脚本`chmod 777`后，即可运行它。\n\n![root执行dex2jar](http://ww1.sinaimg.cn/large/801b780agw1f7kz7zdeewj20go018t92.jpg)\n\n> **note2：**写完这一节的时候，我发现**把dex转换成jar**已经有了更好的工具**enjarify**，[https://github.com/google/enjarify](https://github.com/google/enjarify)这个工具是谷歌官方开源的用于反编译dex文件的。使用方法和dex2jar差不多，也是简单的命令行操作。这个工具的主页中也提到dex2jar已经是一个比较老的工具，在遇到混淆等等复杂的情况时，可能无法正常工作。所以这里推荐大家使用**enjarify**这个工具。\n\n\n### (3) jd-gui查看java源代码\n\n**工具下载地址：**官网[http://jd.benow.ca/](http://jd.benow.ca/)上选择自己所需要的版本。\n\n**功能：**这个工具不用多说，写java的人都知道。有时候我们自己开发一个jar包给别人用，也会用它来查看class是不是都被正确的打入到了jar内，我以前介绍的gradle自定义打包jar的博客中也提到过它。\n\n**用法：**下载后双击既可以运行这个工具，直接把上一步得到的**classes-dex2jar.jar**拖到jd-gui程序的界面上即可打开了，效果如下图所示。\n\n![classes-dex2jar.jar](http://ww3.sinaimg.cn/large/801b780agw1f7kzaffqirj20go04lmxb.jpg)\n\n### 反编译Apk步骤小结\n\n反编译一个Apk，查看它的资源文件和java代码，我们需要用到3个工具。\n\n- apktool：[https://ibotpeaches.github.io/Apktool/](https://ibotpeaches.github.io/Apktool/)\n- dex2jar：[https://github.com/pxb1988/dex2jar](https://github.com/pxb1988/dex2jar)\n- jd-gui：[http://jd.benow.ca/](http://jd.benow.ca/)\n\n反编译就是用这3个工具得到AndroidManifest.xml、res、java代码等。但是我们可以看到，如果你要对一个Apk做尽可能彻底的反编译，把它扒得干干净净，这一步一步的基本操作还是稍显麻烦。另外加固过Apk的情况可能更复杂，需要我们勤动手尝试。为了能提高效率，下面我把自己见过的一些集成工具介绍给大家，尽可能实现可以一键反编译Apk。\n\n\n# 二、自动化工具汇总（一键反编译Apk）\n\n## 1.谷歌提供的工具：[android-classyshark](http://classyshark.com/)\n\n**下载地址：**[https://github.com/google/android-classyshark/releases](https://github.com/google/android-classyshark/releases)，下载下来之后是一个可执行的jar文件，win下或者mac下都只要双击即可运行。\n\n**功能：**带有界面，一键反编译Apk工具，直接打开Apk文件，就可以看到Apk中所有的文件结构，甚至还集成了dex文件查看，java代码查看，方法数分析、导入混淆mapping文件等一系列工具。谷歌推出这个工具的目的是为了让我们开发者更清楚的了解自己的Apk中都有什么文件、混淆前后有什么变化，并方便我们进一步优化自己的Apk打包实现。下面带上几张截图，真是帅气的一笔的好工具啊！\n\n![dex文件查看](http://ww1.sinaimg.cn/large/801b780agw1f7l03o4znvj20m80e8n0f.jpg)\n\n![方法数分析](http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l21d8lm6j20p009iac1.jpg)\n\n即将到来的**Android Studio 2.2**中集成了一个叫做**APK Analyzer**的功能，这个功能不知道是不是和这个工具有关系呢，本人还没有尝试过2.2版本，有兴趣的朋友可以体验一下[preview版本](http://android-developers.blogspot.com/2016/05/android-studio-22-preview-new-ui.html)。\n\n\n## 2.Python实现的工具：[AndroidGuard](https://github.com/androguard/androguard)\n\n**下载地址：**[https://github.com/androguard/androguard/releases](https://github.com/androguard/androguard/releases)\n\n**功能：**集成了反编译资源、代码等各种文件的工具包。需要安装Python环境来运行这个工具，这个工具按照不同的反编译需求，分别写成了不同的py功能模块，还有静态分析的功能。所以如果想要用Python开发一个解析Apk文件并进行静态扫描分析的服务，可以引用这个工具来实现。\n\n**用法：**具体用法比较多，这里也不再展开了。可以通过工具内置的`-h`帮助指令查看各个模块的功能。\n\n```\nunclechendeiMac:androguard-2.0 unclechen$ python androaxml.py -h\nUsage: androaxml.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -i INPUT, --input=INPUT\n                        filename input (APK or android's binary xml)\n  -o OUTPUT, --output=OUTPUT\n                        filename output of the xml\n  -v, --version         version of the API\n\n// androaxml.py这个模块是用来解析AndroidManifest文件的，`-i` 表示输入的apk文件，`-o` 表示输出xml文件。\n\n```\n\n\n## 3.Mac专属工具：[Android-Crack-Tool](https://github.com/Jermic/Android-Crack-Tool)\n\n**功能：**这是网上一位名为[Jermic](https://github.com/Jermic)的大神开发的、在Mac环境下使用的App，集成了Android开发中常见的一些编译/反编译工具，方便用户对Apk进行逆向分析，提供Apk信息查看功能。工具的截图如下所示，非常强大。\n\n![Android-Crack-Tool.app](http://ww3.sinaimg.cn/large/801b780agw1f7l1q0hwugj20rs0gtwjl.jpg)\n\n\n## 4.手机上的反编译工具：[ApkParser](https://github.com/jaredrummler/APKParser)\n\n**功能：**在电脑上已经有了这么多的工具，在手机上的也有很方便的工具。**APKParser**是一款在查看手机上已经安装的Apk的信息的工具，他可以查看软件的**AndroidManifest.xml文件、方法数、res资源文件**，并在手机上直接展示出来。个人觉得这是一个非常实用的工具，作为开发者，手机里面必须要有它。\n\n![ApkParser](http://ww1.sinaimg.cn/large/65e4f1e6gw1f7l1wnbkv1j20m80b4jtf.jpg)\n\n\n## 5.工具汇总\n\n以上几款工具都是我体验过、感觉不错的集成工具，推荐给大家。临近本文结束前，又发现了这么一个福利网站-[http://www.androiddevtools.cn/](http://www.androiddevtools.cn/)，其中有一章专门总结了各种Apk反编译的工具。相信有了这么多的利器，大家应该有100种方法将一个App扒得干干净净了。\n\n![Apk反编译工具汇总](http://ww3.sinaimg.cn/large/801b780agw1f7l112kl4yj20m80pfwiq.jpg)","slug":"Android反编译技术总结","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8e2000lmtsxqlg0i90p","content":"<h1 id=\"一、Apk反编译工具及其使用方法\"><a href=\"#一、Apk反编译工具及其使用方法\" class=\"headerlink\" title=\"一、Apk反编译工具及其使用方法\"></a>一、Apk反编译工具及其使用方法</h1><h2 id=\"1-原理\"><a href=\"#1-原理\" class=\"headerlink\" title=\"1.原理\"></a>1.原理</h2><p>学习反编译之前，建议先学习一下Apk打包的过程，明白打包完成后的Apk里面都有什么文件，各种文件都是怎么生成的。</p>\n<p>这里有两篇AndroidWeekly中推荐过的好文章：</p>\n<ul>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&amp;mid=2247483789&amp;idx=1&amp;sn=6aed8c7907d5bd9c8a5e7f2c2dcdac2e&amp;scene=1&amp;srcid=0831CCuRJsbJNuz1WxU6uUsI#wechat_redirect\" target=\"_blank\" rel=\"noopener\">浅析 Android 打包流程</a></p>\n</li>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NjEwMTM4OA==&amp;mid=2651232113&amp;idx=1&amp;sn=02f413999ab0865e23d272e69b9e6196&amp;scene=1&amp;srcid=0831gT4p6M0NFG5HTTeRHTUC#wechat_redirect\" target=\"_blank\" rel=\"noopener\">Android构建过程分析</a></p>\n</li>\n</ul>\n<p>Apk技术也有非常多的技术可以学习，主要都是围绕着如何减小体积，如何提高打包速度展开，这里先不多说了。下面是一张基本的Apk文件结构图。</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l2d6e4z5j20a80a0jrw.jpg\" alt=\"APK文件结构\"></p>\n<a id=\"more\"></a>\n<p>Apk文件本质上其实是一个zip包。直接拿解压工具解压就可以看到其中包含了什么。下面简单介绍一下Apk文件的结构。</p>\n<ul>\n<li>AndroidManifest.xml：应用的全局配置文件</li>\n<li>assets文件夹：原始资源文件夹，对应着Android工程的assets文件夹，一般用于存放原始的网页、音频等等，与res文件夹的区别这里不再赘述，可以参考上面介绍的两篇文章。</li>\n<li>classes.dex：源代码编译成class后，转成jar，再压缩成dex文件，dex是可以直接在Android虚拟机上运行的文件。</li>\n<li>lib文件夹：引用的第三方sdk的so文件。</li>\n<li>META-INF文件夹：Apk签名文件。</li>\n<li>res文件夹：资源文件，包括了布局、图片等等。</li>\n<li>resources.arsc：记录资源文件和资源id的映射关系。</li>\n</ul>\n<p>上面的截图中每个文件都是一个最基本的Apk<br>文件应该包含在内的。但是直接把Apk当做zip解压后的这些文件是没法直接阅读的，毕竟他们都是经过了build-tools打包工具处理过的。我们直接用文本编辑器打开这里面的Manifest文件看看。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780agw1f7kzdom045j20go06sjul.jpg\" alt=\"反编译前的Manifest文件\"></p>\n<p><strong>反编译Apk</strong>的目的就是Apk拆成我们可以阅读的文件。通过反编译，我们一般想要得到里面的<strong>AndroidManifest.xml文件</strong>、<strong>res文件</strong>和<strong>java代码</strong>。</p>\n<h2 id=\"2-Apk反编译步骤\"><a href=\"#2-Apk反编译步骤\" class=\"headerlink\" title=\"2.Apk反编译步骤\"></a>2.Apk反编译步骤</h2><h3 id=\"1-ApkTool拆包，得到AndroidManifest和res等资源文件\"><a href=\"#1-ApkTool拆包，得到AndroidManifest和res等资源文件\" class=\"headerlink\" title=\"(1) ApkTool拆包，得到AndroidManifest和res等资源文件\"></a>(1) ApkTool拆包，得到AndroidManifest和res等资源文件</h3><p><strong>工具下载地址：</strong><a href=\"https://bitbucket.org/iBotPeaches/apktool/downloads\" target=\"_blank\" rel=\"noopener\">https://bitbucket.org/iBotPeaches/apktool/downloads</a></p>\n<p><strong>功能：</strong>拆解Apk文件，反编译其中的资源文件，将它们反编译为可阅读的<strong>AndroidManifest.xml文件</strong>和<strong>res文件</strong>。前面讲过，直接把Apk文件当做zip解压，得到的xml资源文件，都是无法直接用文本编辑器打开阅读的，因为它们在打包时经过了build-tools的处理。</p>\n<p><strong>用法：</strong>官网<a href=\"https://ibotpeaches.github.io/Apktool/documentation/\" target=\"_blank\" rel=\"noopener\">https://ibotpeaches.github.io/Apktool/documentation/</a>有介绍，最新版本是<strong>2.2.0</strong>，运行环境需要<strong>jre1.7</strong>。</p>\n<p>这里，我演示一下用apktool来拆解Apk文件的基本方法，只需要在终端里面执行下面的命令。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar apktool<span class=\"selector-class\">.jar</span> d yourApkFile.apk</span><br><span class=\"line\"><span class=\"comment\">// 注意`apktool.jar`是刚才下载后的jar的名称，`d`参数表示decode</span></span><br><span class=\"line\"><span class=\"comment\">// 在这个命令后面还可以添加像`-o -s`之类的参数，例如</span></span><br><span class=\"line\"><span class=\"comment\">// java -jar apktool.jar d yourApkFile.apk -o destiantionDir -s</span></span><br><span class=\"line\"><span class=\"comment\">// 几个主要的参数设置方法及其含义：</span></span><br><span class=\"line\">-f 如果目标文件夹已存在，强制删除现有文件夹</span><br><span class=\"line\">-o 指定反编译的目标文件夹的名称（默认会将文件输出到以Apk文件名命名的文件夹中）</span><br><span class=\"line\">-s 保留classes.dex文件（默认会将dex文件解码成smali文件）</span><br><span class=\"line\">-r 保留resources.arsc文件（默认会将resources.arsc解码成具体的资源文件）</span><br></pre></td></tr></table></figure>\n<p>下面我们看一下<code>java -jar apktool.jar d yourApkFile.apk</code>拆解后的结果：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780agw1f7kxk0y0i9j20h00c6dgm.jpg\" alt=\"Apk拆包结果\"></p>\n<p>我们已经得到一个可以用文本编辑器打开的阅读的<strong>AndroidManifest.xml文件、assets文件夹、res文件夹、smali文件夹</strong>等等。original文件夹是原始的AndroidManifest.xml文件，res文件夹是反编译出来的所有资源，smali文件夹是反编译出来的代码。注意，smali文件夹下面，结构和我们的源代码的package一模一样，只不过换成了smali语言。它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言。</p>\n<p>这时，我们已经可以文本编辑器打开<strong>AndroidManifest.xml</strong>文件和<strong>res下面的layout文件</strong>了。这样，我们就可以查看到这个Apk文件的<strong>package包名、Activity组件、程序所需要的权限、xml布局、图标</strong>等等信息。其实我们把Apk上传到应用市场时，应用市场也会通过类似的方式解析我们的apk。</p>\n<blockquote>\n<p><strong>note1：</strong>其实还有一种方法，可以省去每次解包时，都要输入<code>java -jar apktool.jar xxx</code>这行命令，官网也有说明，就是将这个命令包装成shell脚本，方法见：<a href=\"https://ibotpeaches.github.io/Apktool/install/\" target=\"_blank\" rel=\"noopener\">https://ibotpeaches.github.io/Apktool/install/</a></p>\n<p><strong>note2：</strong>如果你在编译的时候，发现终端里面提示发生了<strong>brut.android.UndefinedResObject</strong>错误，说明你的apktool.jar版本太低了，需要去下载新版工具了。</p>\n<p><strong>note3：</strong>如果想要自己实现一个解析Apk文件，提取版本、权限信息的<strong><em>java</em></strong>服务时，可以引用<code>apktool.jar</code>中的<code>ApkDecoder</code>，调用<code>decode</code>方法来实现。可以看下图中，apktool.jar里面有解析Apk文件的实现。</p>\n</blockquote>\n<p><img src=\"http://ww4.sinaimg.cn/large/801b780agw1f7kxsfcc9gj20m80f8ju0.jpg\" alt=\"apktool.jar\"></p>\n<h3 id=\"2-dex2jar反编译dex文件，得到java源代码\"><a href=\"#2-dex2jar反编译dex文件，得到java源代码\" class=\"headerlink\" title=\"(2) dex2jar反编译dex文件，得到java源代码\"></a>(2) dex2jar反编译dex文件，得到java源代码</h3><p>上一步中，我们得到了反编译后的资源文件，这一步我们还想看java源代码。这里要用的工具就是<strong>dex2jar</strong>。</p>\n<p><strong>工具下载地址：</strong><a href=\"https://sourceforge.net/projects/dex2jar/\" target=\"_blank\" rel=\"noopener\">https://sourceforge.net/projects/dex2jar/</a></p>\n<p><strong>功能：</strong>将dex格式的文件，转换成jar文件。dex文件时Android虚拟机上面可以执行的文件，jar文件大家都是知道，其实就是java的class文件。在<a href=\"https://github.com/pxb1988/dex2jar\" target=\"_blank\" rel=\"noopener\">官网</a>有详细介绍。</p>\n<p><strong>用法：</strong>打开下载的dex2jar-2.0文件夹，里面有shell和bat脚本，进入终端，就可以在命令行使用了。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d2j-dex2jar classes.dex</span><br><span class=\"line\"><span class=\"comment\">// 获取classes.dex文件在最前面说过，只要把Apk当做zip解压出来，里面就有dex文件了</span></span><br><span class=\"line\"><span class=\"comment\">// 或者用apktool反编译时带上 `-s` 参数</span></span><br></pre></td></tr></table></figure>\n<p>运行后，可以看到<strong>classes.dex</strong>已经变成了<strong>classes-dex2jar.jar</strong>。</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/801b780agw1f7kyy6qkwhj20go0e675q.jpg\" alt=\"进入dex2jar文件夹\"></p>\n<blockquote>\n<p><strong>note1：</strong>第一次下载下来后，在mac里运行的时候可能会提示需要管理员的权限，这里我给这些sh脚本<code>chmod 777</code>后，即可运行它。</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780agw1f7kz7zdeewj20go018t92.jpg\" alt=\"root执行dex2jar\"></p>\n<blockquote>\n<p><strong>note2：</strong>写完这一节的时候，我发现<strong>把dex转换成jar</strong>已经有了更好的工具<strong>enjarify</strong>，<a href=\"https://github.com/google/enjarify\" target=\"_blank\" rel=\"noopener\">https://github.com/google/enjarify</a>这个工具是谷歌官方开源的用于反编译dex文件的。使用方法和dex2jar差不多，也是简单的命令行操作。这个工具的主页中也提到dex2jar已经是一个比较老的工具，在遇到混淆等等复杂的情况时，可能无法正常工作。所以这里推荐大家使用<strong>enjarify</strong>这个工具。</p>\n</blockquote>\n<h3 id=\"3-jd-gui查看java源代码\"><a href=\"#3-jd-gui查看java源代码\" class=\"headerlink\" title=\"(3) jd-gui查看java源代码\"></a>(3) jd-gui查看java源代码</h3><p><strong>工具下载地址：</strong>官网<a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"noopener\">http://jd.benow.ca/</a>上选择自己所需要的版本。</p>\n<p><strong>功能：</strong>这个工具不用多说，写java的人都知道。有时候我们自己开发一个jar包给别人用，也会用它来查看class是不是都被正确的打入到了jar内，我以前介绍的gradle自定义打包jar的博客中也提到过它。</p>\n<p><strong>用法：</strong>下载后双击既可以运行这个工具，直接把上一步得到的<strong>classes-dex2jar.jar</strong>拖到jd-gui程序的界面上即可打开了，效果如下图所示。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780agw1f7kzaffqirj20go04lmxb.jpg\" alt=\"classes-dex2jar.jar\"></p>\n<h3 id=\"反编译Apk步骤小结\"><a href=\"#反编译Apk步骤小结\" class=\"headerlink\" title=\"反编译Apk步骤小结\"></a>反编译Apk步骤小结</h3><p>反编译一个Apk，查看它的资源文件和java代码，我们需要用到3个工具。</p>\n<ul>\n<li>apktool：<a href=\"https://ibotpeaches.github.io/Apktool/\" target=\"_blank\" rel=\"noopener\">https://ibotpeaches.github.io/Apktool/</a></li>\n<li>dex2jar：<a href=\"https://github.com/pxb1988/dex2jar\" target=\"_blank\" rel=\"noopener\">https://github.com/pxb1988/dex2jar</a></li>\n<li>jd-gui：<a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"noopener\">http://jd.benow.ca/</a></li>\n</ul>\n<p>反编译就是用这3个工具得到AndroidManifest.xml、res、java代码等。但是我们可以看到，如果你要对一个Apk做尽可能彻底的反编译，把它扒得干干净净，这一步一步的基本操作还是稍显麻烦。另外加固过Apk的情况可能更复杂，需要我们勤动手尝试。为了能提高效率，下面我把自己见过的一些集成工具介绍给大家，尽可能实现可以一键反编译Apk。</p>\n<h1 id=\"二、自动化工具汇总（一键反编译Apk）\"><a href=\"#二、自动化工具汇总（一键反编译Apk）\" class=\"headerlink\" title=\"二、自动化工具汇总（一键反编译Apk）\"></a>二、自动化工具汇总（一键反编译Apk）</h1><h2 id=\"1-谷歌提供的工具：android-classyshark\"><a href=\"#1-谷歌提供的工具：android-classyshark\" class=\"headerlink\" title=\"1.谷歌提供的工具：android-classyshark\"></a>1.谷歌提供的工具：<a href=\"http://classyshark.com/\" target=\"_blank\" rel=\"noopener\">android-classyshark</a></h2><p><strong>下载地址：</strong><a href=\"https://github.com/google/android-classyshark/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/google/android-classyshark/releases</a>，下载下来之后是一个可执行的jar文件，win下或者mac下都只要双击即可运行。</p>\n<p><strong>功能：</strong>带有界面，一键反编译Apk工具，直接打开Apk文件，就可以看到Apk中所有的文件结构，甚至还集成了dex文件查看，java代码查看，方法数分析、导入混淆mapping文件等一系列工具。谷歌推出这个工具的目的是为了让我们开发者更清楚的了解自己的Apk中都有什么文件、混淆前后有什么变化，并方便我们进一步优化自己的Apk打包实现。下面带上几张截图，真是帅气的一笔的好工具啊！</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780agw1f7l03o4znvj20m80e8n0f.jpg\" alt=\"dex文件查看\"></p>\n<p><img src=\"http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l21d8lm6j20p009iac1.jpg\" alt=\"方法数分析\"></p>\n<p>即将到来的<strong>Android Studio 2.2</strong>中集成了一个叫做<strong>APK Analyzer</strong>的功能，这个功能不知道是不是和这个工具有关系呢，本人还没有尝试过2.2版本，有兴趣的朋友可以体验一下<a href=\"http://android-developers.blogspot.com/2016/05/android-studio-22-preview-new-ui.html\" target=\"_blank\" rel=\"noopener\">preview版本</a>。</p>\n<h2 id=\"2-Python实现的工具：AndroidGuard\"><a href=\"#2-Python实现的工具：AndroidGuard\" class=\"headerlink\" title=\"2.Python实现的工具：AndroidGuard\"></a>2.Python实现的工具：<a href=\"https://github.com/androguard/androguard\" target=\"_blank\" rel=\"noopener\">AndroidGuard</a></h2><p><strong>下载地址：</strong><a href=\"https://github.com/androguard/androguard/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/androguard/androguard/releases</a></p>\n<p><strong>功能：</strong>集成了反编译资源、代码等各种文件的工具包。需要安装Python环境来运行这个工具，这个工具按照不同的反编译需求，分别写成了不同的py功能模块，还有静态分析的功能。所以如果想要用Python开发一个解析Apk文件并进行静态扫描分析的服务，可以引用这个工具来实现。</p>\n<p><strong>用法：</strong>具体用法比较多，这里也不再展开了。可以通过工具内置的<code>-h</code>帮助指令查看各个模块的功能。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unclechendeiMac:androguard-2.0 unclechen$ python androaxml.py -<span class=\"built_in\">h</span></span><br><span class=\"line\">Usage: androaxml.py [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -<span class=\"keyword\">h</span>, --<span class=\"keyword\">help</span>            show this <span class=\"keyword\">help</span> message and <span class=\"keyword\">exit</span></span><br><span class=\"line\">  -i <span class=\"keyword\">INPUT</span>, --<span class=\"keyword\">input</span>=<span class=\"keyword\">INPUT</span></span><br><span class=\"line\">                        filename <span class=\"keyword\">input</span> (APK or android's binary xml)</span><br><span class=\"line\">  -o OUTPUT, --output=OUTPUT</span><br><span class=\"line\">                        filename output of the xml</span><br><span class=\"line\">  -v, --<span class=\"keyword\">version</span>         <span class=\"keyword\">version</span> of the API</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// androaxml.py这个模块是用来解析AndroidManifest文件的，`-i` 表示输入的apk文件，`-o` 表示输出xml文件。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-Mac专属工具：Android-Crack-Tool\"><a href=\"#3-Mac专属工具：Android-Crack-Tool\" class=\"headerlink\" title=\"3.Mac专属工具：Android-Crack-Tool\"></a>3.Mac专属工具：<a href=\"https://github.com/Jermic/Android-Crack-Tool\" target=\"_blank\" rel=\"noopener\">Android-Crack-Tool</a></h2><p><strong>功能：</strong>这是网上一位名为<a href=\"https://github.com/Jermic\" target=\"_blank\" rel=\"noopener\">Jermic</a>的大神开发的、在Mac环境下使用的App，集成了Android开发中常见的一些编译/反编译工具，方便用户对Apk进行逆向分析，提供Apk信息查看功能。工具的截图如下所示，非常强大。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780agw1f7l1q0hwugj20rs0gtwjl.jpg\" alt=\"Android-Crack-Tool.app\"></p>\n<h2 id=\"4-手机上的反编译工具：ApkParser\"><a href=\"#4-手机上的反编译工具：ApkParser\" class=\"headerlink\" title=\"4.手机上的反编译工具：ApkParser\"></a>4.手机上的反编译工具：<a href=\"https://github.com/jaredrummler/APKParser\" target=\"_blank\" rel=\"noopener\">ApkParser</a></h2><p><strong>功能：</strong>在电脑上已经有了这么多的工具，在手机上的也有很方便的工具。<strong>APKParser</strong>是一款在查看手机上已经安装的Apk的信息的工具，他可以查看软件的<strong>AndroidManifest.xml文件、方法数、res资源文件</strong>，并在手机上直接展示出来。个人觉得这是一个非常实用的工具，作为开发者，手机里面必须要有它。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/65e4f1e6gw1f7l1wnbkv1j20m80b4jtf.jpg\" alt=\"ApkParser\"></p>\n<h2 id=\"5-工具汇总\"><a href=\"#5-工具汇总\" class=\"headerlink\" title=\"5.工具汇总\"></a>5.工具汇总</h2><p>以上几款工具都是我体验过、感觉不错的集成工具，推荐给大家。临近本文结束前，又发现了这么一个福利网站-<a href=\"http://www.androiddevtools.cn/\" target=\"_blank\" rel=\"noopener\">http://www.androiddevtools.cn/</a>，其中有一章专门总结了各种Apk反编译的工具。相信有了这么多的利器，大家应该有100种方法将一个App扒得干干净净了。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780agw1f7l112kl4yj20m80pfwiq.jpg\" alt=\"Apk反编译工具汇总\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、Apk反编译工具及其使用方法\"><a href=\"#一、Apk反编译工具及其使用方法\" class=\"headerlink\" title=\"一、Apk反编译工具及其使用方法\"></a>一、Apk反编译工具及其使用方法</h1><h2 id=\"1-原理\"><a href=\"#1-原理\" class=\"headerlink\" title=\"1.原理\"></a>1.原理</h2><p>学习反编译之前，建议先学习一下Apk打包的过程，明白打包完成后的Apk里面都有什么文件，各种文件都是怎么生成的。</p>\n<p>这里有两篇AndroidWeekly中推荐过的好文章：</p>\n<ul>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&amp;mid=2247483789&amp;idx=1&amp;sn=6aed8c7907d5bd9c8a5e7f2c2dcdac2e&amp;scene=1&amp;srcid=0831CCuRJsbJNuz1WxU6uUsI#wechat_redirect\" target=\"_blank\" rel=\"noopener\">浅析 Android 打包流程</a></p>\n</li>\n<li><p><a href=\"http://mp.weixin.qq.com/s?__biz=MzI1NjEwMTM4OA==&amp;mid=2651232113&amp;idx=1&amp;sn=02f413999ab0865e23d272e69b9e6196&amp;scene=1&amp;srcid=0831gT4p6M0NFG5HTTeRHTUC#wechat_redirect\" target=\"_blank\" rel=\"noopener\">Android构建过程分析</a></p>\n</li>\n</ul>\n<p>Apk技术也有非常多的技术可以学习，主要都是围绕着如何减小体积，如何提高打包速度展开，这里先不多说了。下面是一张基本的Apk文件结构图。</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l2d6e4z5j20a80a0jrw.jpg\" alt=\"APK文件结构\"></p>","more":"<p>Apk文件本质上其实是一个zip包。直接拿解压工具解压就可以看到其中包含了什么。下面简单介绍一下Apk文件的结构。</p>\n<ul>\n<li>AndroidManifest.xml：应用的全局配置文件</li>\n<li>assets文件夹：原始资源文件夹，对应着Android工程的assets文件夹，一般用于存放原始的网页、音频等等，与res文件夹的区别这里不再赘述，可以参考上面介绍的两篇文章。</li>\n<li>classes.dex：源代码编译成class后，转成jar，再压缩成dex文件，dex是可以直接在Android虚拟机上运行的文件。</li>\n<li>lib文件夹：引用的第三方sdk的so文件。</li>\n<li>META-INF文件夹：Apk签名文件。</li>\n<li>res文件夹：资源文件，包括了布局、图片等等。</li>\n<li>resources.arsc：记录资源文件和资源id的映射关系。</li>\n</ul>\n<p>上面的截图中每个文件都是一个最基本的Apk<br>文件应该包含在内的。但是直接把Apk当做zip解压后的这些文件是没法直接阅读的，毕竟他们都是经过了build-tools打包工具处理过的。我们直接用文本编辑器打开这里面的Manifest文件看看。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780agw1f7kzdom045j20go06sjul.jpg\" alt=\"反编译前的Manifest文件\"></p>\n<p><strong>反编译Apk</strong>的目的就是Apk拆成我们可以阅读的文件。通过反编译，我们一般想要得到里面的<strong>AndroidManifest.xml文件</strong>、<strong>res文件</strong>和<strong>java代码</strong>。</p>\n<h2 id=\"2-Apk反编译步骤\"><a href=\"#2-Apk反编译步骤\" class=\"headerlink\" title=\"2.Apk反编译步骤\"></a>2.Apk反编译步骤</h2><h3 id=\"1-ApkTool拆包，得到AndroidManifest和res等资源文件\"><a href=\"#1-ApkTool拆包，得到AndroidManifest和res等资源文件\" class=\"headerlink\" title=\"(1) ApkTool拆包，得到AndroidManifest和res等资源文件\"></a>(1) ApkTool拆包，得到AndroidManifest和res等资源文件</h3><p><strong>工具下载地址：</strong><a href=\"https://bitbucket.org/iBotPeaches/apktool/downloads\" target=\"_blank\" rel=\"noopener\">https://bitbucket.org/iBotPeaches/apktool/downloads</a></p>\n<p><strong>功能：</strong>拆解Apk文件，反编译其中的资源文件，将它们反编译为可阅读的<strong>AndroidManifest.xml文件</strong>和<strong>res文件</strong>。前面讲过，直接把Apk文件当做zip解压，得到的xml资源文件，都是无法直接用文本编辑器打开阅读的，因为它们在打包时经过了build-tools的处理。</p>\n<p><strong>用法：</strong>官网<a href=\"https://ibotpeaches.github.io/Apktool/documentation/\" target=\"_blank\" rel=\"noopener\">https://ibotpeaches.github.io/Apktool/documentation/</a>有介绍，最新版本是<strong>2.2.0</strong>，运行环境需要<strong>jre1.7</strong>。</p>\n<p>这里，我演示一下用apktool来拆解Apk文件的基本方法，只需要在终端里面执行下面的命令。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar apktool<span class=\"selector-class\">.jar</span> d yourApkFile.apk</span><br><span class=\"line\"><span class=\"comment\">// 注意`apktool.jar`是刚才下载后的jar的名称，`d`参数表示decode</span></span><br><span class=\"line\"><span class=\"comment\">// 在这个命令后面还可以添加像`-o -s`之类的参数，例如</span></span><br><span class=\"line\"><span class=\"comment\">// java -jar apktool.jar d yourApkFile.apk -o destiantionDir -s</span></span><br><span class=\"line\"><span class=\"comment\">// 几个主要的参数设置方法及其含义：</span></span><br><span class=\"line\">-f 如果目标文件夹已存在，强制删除现有文件夹</span><br><span class=\"line\">-o 指定反编译的目标文件夹的名称（默认会将文件输出到以Apk文件名命名的文件夹中）</span><br><span class=\"line\">-s 保留classes.dex文件（默认会将dex文件解码成smali文件）</span><br><span class=\"line\">-r 保留resources.arsc文件（默认会将resources.arsc解码成具体的资源文件）</span><br></pre></td></tr></table></figure>\n<p>下面我们看一下<code>java -jar apktool.jar d yourApkFile.apk</code>拆解后的结果：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780agw1f7kxk0y0i9j20h00c6dgm.jpg\" alt=\"Apk拆包结果\"></p>\n<p>我们已经得到一个可以用文本编辑器打开的阅读的<strong>AndroidManifest.xml文件、assets文件夹、res文件夹、smali文件夹</strong>等等。original文件夹是原始的AndroidManifest.xml文件，res文件夹是反编译出来的所有资源，smali文件夹是反编译出来的代码。注意，smali文件夹下面，结构和我们的源代码的package一模一样，只不过换成了smali语言。它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言。</p>\n<p>这时，我们已经可以文本编辑器打开<strong>AndroidManifest.xml</strong>文件和<strong>res下面的layout文件</strong>了。这样，我们就可以查看到这个Apk文件的<strong>package包名、Activity组件、程序所需要的权限、xml布局、图标</strong>等等信息。其实我们把Apk上传到应用市场时，应用市场也会通过类似的方式解析我们的apk。</p>\n<blockquote>\n<p><strong>note1：</strong>其实还有一种方法，可以省去每次解包时，都要输入<code>java -jar apktool.jar xxx</code>这行命令，官网也有说明，就是将这个命令包装成shell脚本，方法见：<a href=\"https://ibotpeaches.github.io/Apktool/install/\" target=\"_blank\" rel=\"noopener\">https://ibotpeaches.github.io/Apktool/install/</a></p>\n<p><strong>note2：</strong>如果你在编译的时候，发现终端里面提示发生了<strong>brut.android.UndefinedResObject</strong>错误，说明你的apktool.jar版本太低了，需要去下载新版工具了。</p>\n<p><strong>note3：</strong>如果想要自己实现一个解析Apk文件，提取版本、权限信息的<strong><em>java</em></strong>服务时，可以引用<code>apktool.jar</code>中的<code>ApkDecoder</code>，调用<code>decode</code>方法来实现。可以看下图中，apktool.jar里面有解析Apk文件的实现。</p>\n</blockquote>\n<p><img src=\"http://ww4.sinaimg.cn/large/801b780agw1f7kxsfcc9gj20m80f8ju0.jpg\" alt=\"apktool.jar\"></p>\n<h3 id=\"2-dex2jar反编译dex文件，得到java源代码\"><a href=\"#2-dex2jar反编译dex文件，得到java源代码\" class=\"headerlink\" title=\"(2) dex2jar反编译dex文件，得到java源代码\"></a>(2) dex2jar反编译dex文件，得到java源代码</h3><p>上一步中，我们得到了反编译后的资源文件，这一步我们还想看java源代码。这里要用的工具就是<strong>dex2jar</strong>。</p>\n<p><strong>工具下载地址：</strong><a href=\"https://sourceforge.net/projects/dex2jar/\" target=\"_blank\" rel=\"noopener\">https://sourceforge.net/projects/dex2jar/</a></p>\n<p><strong>功能：</strong>将dex格式的文件，转换成jar文件。dex文件时Android虚拟机上面可以执行的文件，jar文件大家都是知道，其实就是java的class文件。在<a href=\"https://github.com/pxb1988/dex2jar\" target=\"_blank\" rel=\"noopener\">官网</a>有详细介绍。</p>\n<p><strong>用法：</strong>打开下载的dex2jar-2.0文件夹，里面有shell和bat脚本，进入终端，就可以在命令行使用了。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d2j-dex2jar classes.dex</span><br><span class=\"line\"><span class=\"comment\">// 获取classes.dex文件在最前面说过，只要把Apk当做zip解压出来，里面就有dex文件了</span></span><br><span class=\"line\"><span class=\"comment\">// 或者用apktool反编译时带上 `-s` 参数</span></span><br></pre></td></tr></table></figure>\n<p>运行后，可以看到<strong>classes.dex</strong>已经变成了<strong>classes-dex2jar.jar</strong>。</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/801b780agw1f7kyy6qkwhj20go0e675q.jpg\" alt=\"进入dex2jar文件夹\"></p>\n<blockquote>\n<p><strong>note1：</strong>第一次下载下来后，在mac里运行的时候可能会提示需要管理员的权限，这里我给这些sh脚本<code>chmod 777</code>后，即可运行它。</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780agw1f7kz7zdeewj20go018t92.jpg\" alt=\"root执行dex2jar\"></p>\n<blockquote>\n<p><strong>note2：</strong>写完这一节的时候，我发现<strong>把dex转换成jar</strong>已经有了更好的工具<strong>enjarify</strong>，<a href=\"https://github.com/google/enjarify\" target=\"_blank\" rel=\"noopener\">https://github.com/google/enjarify</a>这个工具是谷歌官方开源的用于反编译dex文件的。使用方法和dex2jar差不多，也是简单的命令行操作。这个工具的主页中也提到dex2jar已经是一个比较老的工具，在遇到混淆等等复杂的情况时，可能无法正常工作。所以这里推荐大家使用<strong>enjarify</strong>这个工具。</p>\n</blockquote>\n<h3 id=\"3-jd-gui查看java源代码\"><a href=\"#3-jd-gui查看java源代码\" class=\"headerlink\" title=\"(3) jd-gui查看java源代码\"></a>(3) jd-gui查看java源代码</h3><p><strong>工具下载地址：</strong>官网<a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"noopener\">http://jd.benow.ca/</a>上选择自己所需要的版本。</p>\n<p><strong>功能：</strong>这个工具不用多说，写java的人都知道。有时候我们自己开发一个jar包给别人用，也会用它来查看class是不是都被正确的打入到了jar内，我以前介绍的gradle自定义打包jar的博客中也提到过它。</p>\n<p><strong>用法：</strong>下载后双击既可以运行这个工具，直接把上一步得到的<strong>classes-dex2jar.jar</strong>拖到jd-gui程序的界面上即可打开了，效果如下图所示。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780agw1f7kzaffqirj20go04lmxb.jpg\" alt=\"classes-dex2jar.jar\"></p>\n<h3 id=\"反编译Apk步骤小结\"><a href=\"#反编译Apk步骤小结\" class=\"headerlink\" title=\"反编译Apk步骤小结\"></a>反编译Apk步骤小结</h3><p>反编译一个Apk，查看它的资源文件和java代码，我们需要用到3个工具。</p>\n<ul>\n<li>apktool：<a href=\"https://ibotpeaches.github.io/Apktool/\" target=\"_blank\" rel=\"noopener\">https://ibotpeaches.github.io/Apktool/</a></li>\n<li>dex2jar：<a href=\"https://github.com/pxb1988/dex2jar\" target=\"_blank\" rel=\"noopener\">https://github.com/pxb1988/dex2jar</a></li>\n<li>jd-gui：<a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"noopener\">http://jd.benow.ca/</a></li>\n</ul>\n<p>反编译就是用这3个工具得到AndroidManifest.xml、res、java代码等。但是我们可以看到，如果你要对一个Apk做尽可能彻底的反编译，把它扒得干干净净，这一步一步的基本操作还是稍显麻烦。另外加固过Apk的情况可能更复杂，需要我们勤动手尝试。为了能提高效率，下面我把自己见过的一些集成工具介绍给大家，尽可能实现可以一键反编译Apk。</p>\n<h1 id=\"二、自动化工具汇总（一键反编译Apk）\"><a href=\"#二、自动化工具汇总（一键反编译Apk）\" class=\"headerlink\" title=\"二、自动化工具汇总（一键反编译Apk）\"></a>二、自动化工具汇总（一键反编译Apk）</h1><h2 id=\"1-谷歌提供的工具：android-classyshark\"><a href=\"#1-谷歌提供的工具：android-classyshark\" class=\"headerlink\" title=\"1.谷歌提供的工具：android-classyshark\"></a>1.谷歌提供的工具：<a href=\"http://classyshark.com/\" target=\"_blank\" rel=\"noopener\">android-classyshark</a></h2><p><strong>下载地址：</strong><a href=\"https://github.com/google/android-classyshark/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/google/android-classyshark/releases</a>，下载下来之后是一个可执行的jar文件，win下或者mac下都只要双击即可运行。</p>\n<p><strong>功能：</strong>带有界面，一键反编译Apk工具，直接打开Apk文件，就可以看到Apk中所有的文件结构，甚至还集成了dex文件查看，java代码查看，方法数分析、导入混淆mapping文件等一系列工具。谷歌推出这个工具的目的是为了让我们开发者更清楚的了解自己的Apk中都有什么文件、混淆前后有什么变化，并方便我们进一步优化自己的Apk打包实现。下面带上几张截图，真是帅气的一笔的好工具啊！</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/801b780agw1f7l03o4znvj20m80e8n0f.jpg\" alt=\"dex文件查看\"></p>\n<p><img src=\"http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l21d8lm6j20p009iac1.jpg\" alt=\"方法数分析\"></p>\n<p>即将到来的<strong>Android Studio 2.2</strong>中集成了一个叫做<strong>APK Analyzer</strong>的功能，这个功能不知道是不是和这个工具有关系呢，本人还没有尝试过2.2版本，有兴趣的朋友可以体验一下<a href=\"http://android-developers.blogspot.com/2016/05/android-studio-22-preview-new-ui.html\" target=\"_blank\" rel=\"noopener\">preview版本</a>。</p>\n<h2 id=\"2-Python实现的工具：AndroidGuard\"><a href=\"#2-Python实现的工具：AndroidGuard\" class=\"headerlink\" title=\"2.Python实现的工具：AndroidGuard\"></a>2.Python实现的工具：<a href=\"https://github.com/androguard/androguard\" target=\"_blank\" rel=\"noopener\">AndroidGuard</a></h2><p><strong>下载地址：</strong><a href=\"https://github.com/androguard/androguard/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/androguard/androguard/releases</a></p>\n<p><strong>功能：</strong>集成了反编译资源、代码等各种文件的工具包。需要安装Python环境来运行这个工具，这个工具按照不同的反编译需求，分别写成了不同的py功能模块，还有静态分析的功能。所以如果想要用Python开发一个解析Apk文件并进行静态扫描分析的服务，可以引用这个工具来实现。</p>\n<p><strong>用法：</strong>具体用法比较多，这里也不再展开了。可以通过工具内置的<code>-h</code>帮助指令查看各个模块的功能。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unclechendeiMac:androguard-2.0 unclechen$ python androaxml.py -<span class=\"built_in\">h</span></span><br><span class=\"line\">Usage: androaxml.py [options]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -<span class=\"keyword\">h</span>, --<span class=\"keyword\">help</span>            show this <span class=\"keyword\">help</span> message and <span class=\"keyword\">exit</span></span><br><span class=\"line\">  -i <span class=\"keyword\">INPUT</span>, --<span class=\"keyword\">input</span>=<span class=\"keyword\">INPUT</span></span><br><span class=\"line\">                        filename <span class=\"keyword\">input</span> (APK or android's binary xml)</span><br><span class=\"line\">  -o OUTPUT, --output=OUTPUT</span><br><span class=\"line\">                        filename output of the xml</span><br><span class=\"line\">  -v, --<span class=\"keyword\">version</span>         <span class=\"keyword\">version</span> of the API</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// androaxml.py这个模块是用来解析AndroidManifest文件的，`-i` 表示输入的apk文件，`-o` 表示输出xml文件。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-Mac专属工具：Android-Crack-Tool\"><a href=\"#3-Mac专属工具：Android-Crack-Tool\" class=\"headerlink\" title=\"3.Mac专属工具：Android-Crack-Tool\"></a>3.Mac专属工具：<a href=\"https://github.com/Jermic/Android-Crack-Tool\" target=\"_blank\" rel=\"noopener\">Android-Crack-Tool</a></h2><p><strong>功能：</strong>这是网上一位名为<a href=\"https://github.com/Jermic\" target=\"_blank\" rel=\"noopener\">Jermic</a>的大神开发的、在Mac环境下使用的App，集成了Android开发中常见的一些编译/反编译工具，方便用户对Apk进行逆向分析，提供Apk信息查看功能。工具的截图如下所示，非常强大。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780agw1f7l1q0hwugj20rs0gtwjl.jpg\" alt=\"Android-Crack-Tool.app\"></p>\n<h2 id=\"4-手机上的反编译工具：ApkParser\"><a href=\"#4-手机上的反编译工具：ApkParser\" class=\"headerlink\" title=\"4.手机上的反编译工具：ApkParser\"></a>4.手机上的反编译工具：<a href=\"https://github.com/jaredrummler/APKParser\" target=\"_blank\" rel=\"noopener\">ApkParser</a></h2><p><strong>功能：</strong>在电脑上已经有了这么多的工具，在手机上的也有很方便的工具。<strong>APKParser</strong>是一款在查看手机上已经安装的Apk的信息的工具，他可以查看软件的<strong>AndroidManifest.xml文件、方法数、res资源文件</strong>，并在手机上直接展示出来。个人觉得这是一个非常实用的工具，作为开发者，手机里面必须要有它。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/65e4f1e6gw1f7l1wnbkv1j20m80b4jtf.jpg\" alt=\"ApkParser\"></p>\n<h2 id=\"5-工具汇总\"><a href=\"#5-工具汇总\" class=\"headerlink\" title=\"5.工具汇总\"></a>5.工具汇总</h2><p>以上几款工具都是我体验过、感觉不错的集成工具，推荐给大家。临近本文结束前，又发现了这么一个福利网站-<a href=\"http://www.androiddevtools.cn/\" target=\"_blank\" rel=\"noopener\">http://www.androiddevtools.cn/</a>，其中有一章专门总结了各种Apk反编译的工具。相信有了这么多的利器，大家应该有100种方法将一个App扒得干干净净了。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/801b780agw1f7l112kl4yj20m80pfwiq.jpg\" alt=\"Apk反编译工具汇总\"></p>"},{"layout":"post","title":"Android地理位置服务解析","date":"2016-09-02T00:00:00.000Z","_content":"\n# 手机设备有哪几种定位方式\n\n## GPS\n\n基于卫星发射的信号，可以推算出手机到每颗卫星的距离，根据卫星的位置，推测出手机的位置。\n\n这是一张简单的GPS定位原理图，需要一点数学知识，先不讨论这个细节，需要的同学看[这里](http://baike.baidu.com/view/193655.htm)。\n\n![gps定位原理图](http://ww1.sinaimg.cn/large/65e4f1e6gw1f7fbixzcaxj20dw0bo750.jpg)\n\n现在卫星信号全球都覆盖了，手机一般都有GPS芯片，因此可以实现定位。GPS方式准确度是最高的，走卫星通道，不需要联网就可以要使用。但是它的缺点也非常明显：\n\n- 1.比较耗电; \n- 2.绝大部分用户默认不开启GPS模块，也不会长时间开着; \n- 3.从GPS模块启动到获取第一次定位数据，可能需要**比较长的时间**; \n- 4.**只能在户外使用**，当有遮挡物干扰时，几乎无法使用，如城市大楼密集的地方。\n\n<!-- more -->\n\n## WiFi\n\n通过获取当前所连接的WiFi热点的一些信息，然后访问定位服务以获得经纬度坐标。\n\n这是一张简单的WiFi定位原理图。\n\n![WiFi定位原理图](http://ww3.sinaimg.cn/large/65e4f1e6gw1f7fbjjbmesj20b408a0t0.jpg)\n\n因为WiFi热点一般都是固定位置，所以只要能知道手机连接的WiFi热点的位置，也就可以推算出手机的位置。而且由于手机一般连接的WiFi不会太远，所以其实精确度也不会太差。也不会像GPS那样需要耗时比较久才能获得位置信息。\n\n\n## Cell-ID\n\n采集到手机所连接的基站ID号(cellid)和其它的一些信息(MNC，MCC，LAC等)，然后通过网络访问定位服务，获取并返回对应的经纬度坐标。\n\n这是一张简单的基站定位原理图。\n\n![基站定位原理](http://ww2.sinaimg.cn/large/65e4f1e6gw1f7fbjts47yj20b40bqq3o.jpg)\n\n现在各大运营商的基站已经覆盖了全国大部分地区，每个基站的ID号是全球唯一的，只要有手机信号，就能接收到周围基站的信号。基站定位的精确度不如GPS，但优点是能够在室内用，只要网络通畅就行。\n\n\n其实各种定位方式，大体都是基于三角定位的原理，不过计算的时候会有一些自己的特点，这里先不深究背景知识了。下面进入正题。\n\n\n# Android系统上如何获取地理位置\n\n## 方法1：Google Play Service提供的API\n\n这个不多说，因为国内不可用！！！ \n\n需要的同学可以自己爬梯子看下用法，比较简单：[https://developer.android.com/google/play-services/location.html](https://developer.android.com/google/play-services/location.html)\n\n## 方法2：系统提供的原生API：主要就是系统的`android.location`中提供的两个类。\n\n- **LocationManager：**和大多数系统提供的**SystemService**一样是单例，通过`locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);`来获取。\n- **LocationListener：**非常典型的观察者模式，需要监听地理位置的时候，创建一个**Listener**，实现LocationListener中的几个回调方法。把Listener传给LocationManager，当地理位置变化的时候就会回调`onLocationChanged(Location location)`发出通知。\n- 官方指导：[https://developer.android.com/guide/topics/location/strategies.html](https://developer.android.com/guide/topics/location/strategies.html)\n\n## 方法3：使用百度、高德之类的地图SDK。\n\n这简直就是大招了，各家都有自己的数据库，比起系统提供的API强太多了。这个这次也不说，各家的接入文档写的很清楚。\n\n\n# 使用原生API采集地理位置的方法\n\n下面介绍一下我对使用原生API的理解，毕竟不是所有场景都需要用到大招级别的sdk，有的情况我们需要自己实现定位服务。\n\n## 1.首先需要了解**PROVIDER**\n\n看过前面介绍的3种定位方式之后，可以很容易理解PROVIDER是什么。其实它就对应着地理位置采集的几种方式：\n\n- LocationManager.GPS_PROVIDER：通过gps来获取地理位置的经纬度信息，优点：获取地理位置信息精确度高，缺点：只能在户外使用，**耗时，耗电**。\n- LocationManager.NETWORK_PROVIDER：通过移动网络的基站或者WiFi来获得地理位置，优点：只要有网络，获取速度快，耗电低，在室内室外都可以使用。\n- LocationManager.PASSIVE_PROVIDER：被动的接收更新的地理位置信息，而不用自己主动请求地理位置。意思就是共享手机上其他App采集的位置信息，而不是自己主动去采集。\n\n下图是3种Provider的特点和区别：\n\n![3种Provider的特点](http://ww3.sinaimg.cn/large/65e4f1e6gw1f7f3p1sx4aj20kp0g5acw.jpg)\n\n## 2.打开手机的设置\n\n先看下原生系统中地理位置设置的界面截图：\n\n![地理位置设置截图](http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f47p124kj20rs0m376v.jpg)\n\n以原生系统为例，需要采集地理位置时，需要：\n\n- 打开通知栏的GPS开关\n- 进入`设置->位置信息->模式`，打开开关。然后我们可以看到，这里有3类模式：\n    - 高精确度：使用GPS、WLAN、蓝牙或者移动网络确定位置\n    - 节电：使用WLAN、蓝牙或者移动网络确定位置\n    - 仅限设备：使用GPS确定位置\n\n**PS：**我发现小米手机上，即使你把通知栏里面地理位置开关关闭了，进入系统的设置界面，还是可以看到地理位置是开启的，默认选择的是`节电`模式。而原生系统你只要在通知栏关闭了开关，就无法使用定位服务了。这里感觉国内厂商在细节上可能会有一些不同的实现。\n\n## 3.给你的App注册权限\n\n当你在代码里面使用3种不同的Provider时，应该关注到两个权限：\n\n- LocationManager.GPS_PROVIDER：android.permission.ACCESS_FINE_LOCATION\n- LocationManager.NETWORK_PROVIDER：android.permission.ACCESS_COARSE_LOCATION 或者 android.permission.ACCESS_FINE_LOCATION。\n    - 当声明ACCESS_FINE_LOCATION时，拿到的位置信息将更精确（几十米到几百米）\n    - 当声明ACCESS_COARSE_LOCATION时，拿到的位置会粗略一点（几百米到几千米）\n- LocationManager.PASSIVE_PROVIDER：android.permission.ACCESS_COARSE_LOCATION \n\n> 注意：如果声明了ACCESS_FINE_LOCATION时，就不用再声明ACCESS_COARSE_LOCATION了，因为ACCESS_FINE_LOCATION已经包含了使用NETWORK_PROVIDER的能力。此外从Android6.0开始，ACCESS_FINE_LOCATION和ACCESS_COARSE_LOCATION已经是***dangerous permission***，开发者需要注意这一点，当用户在运行你的App时，如果没有授权，仍然是无法获取到地理位置信息的。\n\n\n## 4.根据需求的场景写代码（**记住要尽量省电**）\n\n**一定要省电：**这是一个非常重要的用户体验，我们应该对自己做的App负责。什么时候开始使用地理位置服务，什么时候停止使用，我们一定要想清楚，尽量不要一直占用着这种高耗电的资源。\n\n### 4.1基本代码\n\n下面看代码，一段基本的获取地理位置的代码是这么写的，这段代码可以让你通过异步的方式获取到用户的地理位置。\n\n```\n// 获得Location Manager的实例\nLocationManager locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);\n\n// 定义一个监听器，实现onLocationChanged方法，在这个方法里面可以拿到更新后的地理位置\nLocationListener locationListener = new LocationListener() {\n    public void onLocationChanged(Location location) {\n      // 新的Location值在这里返回，Location实例中包含着纬度、经度、海拔、精确度、更新时间等一系列信息。\n      makeUseOfNewLocation(location);\n    }\n\n    public void onStatusChanged(String provider, int status, Bundle extras) {}\n\n    public void onProviderEnabled(String provider) {}\n\n    public void onProviderDisabled(String provider) {}\n  };\n\n// 注册监听器，当地理位置变化时，发出通知给Listener。这个方法很关键。4个参数需要了解清楚：\n// 第1个参数：你所使用的provider名称，是个String\n// 第2个参数minTime：地理位置更新时发出通知的最小时间间隔\n// 第3个参数minDistance：地理位置更新发出通知的最小距离，第2和第3个参数的作用关系是“或”的关系，也就是满足任意一个条件都会发出通知。这里第2、3个参数都是0，意味着任何时间，只要位置有变化就会发出通知。\n// 第4个参数：你的监听器\nlocationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);\n```\n\n\n### 4.2如何优化\n\n但是实战中一定要尽量去优化，虽然获取地理位置只能是异步的，但是仍然不建议一直不停地监听地理位置的变化。\n\n谷歌官方也给出了一个采集地理位置的思路，非常值得我们来参考。思路的基本步骤如下：\n\n- 启动应用。\n- 当用户进入到应用中需要使用地理位置场景时，选择一个合适的Provider，开始监听地理位置的变化。\n- 获取系统中缓存的上次的地理位置`LastKnownLocation`，保存到当前地理位置变量`currentLocation`中作为备选值，当拿到新的地理位置后，对比两者，选择最优的那个继续保存它。\n- 停止监听地理位置的变化。\n- 使用当前维护着的这个Location作为用户的位置。\n\n谷歌还给出了这个方案的一个timeline图示。\n\n![A timeline representing the window in which an application listens for location updates](http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f4svf6zsj20mj064ab0.jpg)\n\n\n### 4.3关键问题\n\n我们比较关注下面4点：\n\n- 1.如何选择一个最好的provider？\n- 2.什么时候开始监听地理位置变化，什么时候结束？\n- 3.如何比较两个地理位置，决定哪个更好？\n- 4.LastknownPostion怎么获取，怎么使用？\n\n\n下面介绍我的想法：\n\n#### 第1点：如何选择一个最好的provider？\n\n这需要看你的需求。系统中也提供了一些方法来帮我们选择，可以设定一个条件`Criteria`，指定帅选最符合条件的地理位置提供者，根据Cirteria指定的条件，设备会自动选择哪种location provider。\n\n代码如下：\n\n```\nCriteria criteria = new Criteria();//\ncriteria.setAccuracy(Criteria.ACCURACY_FINE);//设置定位精准度\ncriteria.setAltitudeRequired(false);//是否要求海拔\ncriteria.setBearingRequired(true);//是否要求方向\ncriteria.setCostAllowed(true);//是否要求收费\ncriteria.setSpeedRequired(true);//是否要求速度\ncriteria.setPowerRequirement(Criteria.POWER_LOW);//设置相对省电\ncriteria.setBearingAccuracy(Criteria.ACCURACY_HIGH);//设置方向精确度\ncriteria.setSpeedAccuracy(Criteria.ACCURACY_HIGH);//设置速度精确度\ncriteria.setHorizontalAccuracy(Criteria.ACCURACY_HIGH);//设置水平方向精确度\ncriteria.setVerticalAccuracy(Criteria.ACCURACY_HIGH);//设置垂直方向精确度\n\n// 返回满足条件的，当前设备可用的location provider\n// 当第2个参数为false时，返回当前设备所有provider中最符合条件的那个（但是不一定可用）。\n// 当第2个参数为true时，返回当前设备所有可用的provider中最符合条件的那个。\nString rovider  = mLocationManager.getBestProvider(criteria,true);\n```\n\n\n总之，一共就3个provider，其实对于大部分开发者，选来选去就是`gps` or `network`。\n\n\n#### 第2点，什么时候开始，什么时候结束？\n\n我认为最好开启了监听器后，要尽可能早地结束它。也就是不要调用了`requestLocationUpdates(provider, minTime, minDistance, listener)`让位置服务开始工作后，很长时间都不去`removeUpdates(listener)`来停止服务。\n\n虽然在`requestLocationUpdates`方法中，有**minTime**、**minDistance**参数可以设置。比如设置了60000ms的minTime，希望采更新完一次地理位置后休息60s。或者设置2000米的minDistance，希望位置变化不超过2公里，也休息。这样做**看起来好像**是可以省电。\n\n但是实测中发现，如果调用`requestLocationUpdates(LocationManager.GPS_PROVIDER, 60000, 2000, listener)`注册监听器后，系统的状态栏上面的GPS那个小图标一直在显示。只要你不`removeUpdates(listener)`，他就一直在工作。其实我理解，即使你设置了minTime和minDistance，位置服务还是一直处于工作状态的，不然它怎么知道位置变化超过了你设定的minDistance呢？\n\n![系统栏中的GPS图标](http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f94tb263j20eu022t8r.jpg)\n\n所以我的建议是，当你调用**requestLocationUpdates**后，还应该是设置一个定时器，比如30s。当30s时间到了之后，就**removeUpdate**，不再监听地理位置了，转而使用备选的LastKnownLocation。当下次需要使用地理位置时，再重新注册监听器，监听30s，然后就移除监听器。如果对实时性要求高，我们可以在用户进入App中某个需要定位服务的场景之前，采用这个方法获取一次地理位置，把它保存下来。\n\n#### 第3点，如何比较两个Location，选出更好的那个？\n\n谷歌也给出了代码示例，先看一下。\n\n```\nprivate static final int TWO_MINUTES = 1000 * 60 * 2;\n\n/** Determines whether one Location reading is better than the current Location fix\n  * @param location  The new Location that you want to evaluate\n  * @param currentBestLocation  The current Location fix, to which you want to compare the new one\n  */\nprotected boolean isBetterLocation(Location location, Location currentBestLocation) {\n    if (currentBestLocation == null) {\n        // A new location is always better than no location\n        return true;\n    }\n\n    // Check whether the new location fix is newer or older\n    long timeDelta = location.getTime() - currentBestLocation.getTime();\n    boolean isSignificantlyNewer = timeDelta > TWO_MINUTES;\n    boolean isSignificantlyOlder = timeDelta < -TWO_MINUTES;\n    boolean isNewer = timeDelta > 0;\n\n    // If it's been more than two minutes since the current location, use the new location\n    // because the user has likely moved\n    if (isSignificantlyNewer) {\n        return true;\n    // If the new location is more than two minutes older, it must be worse\n    } else if (isSignificantlyOlder) {\n        return false;\n    }\n\n    // Check whether the new location fix is more or less accurate\n    int accuracyDelta = (int) (location.getAccuracy() - currentBestLocation.getAccuracy());\n    boolean isLessAccurate = accuracyDelta > 0;\n    boolean isMoreAccurate = accuracyDelta < 0;\n    boolean isSignificantlyLessAccurate = accuracyDelta > 200;\n\n    // Check if the old and new location are from the same provider\n    boolean isFromSameProvider = isSameProvider(location.getProvider(),\n            currentBestLocation.getProvider());\n\n    // Determine location quality using a combination of timeliness and accuracy\n    if (isMoreAccurate) {\n        return true;\n    } else if (isNewer && !isLessAccurate) {\n        return true;\n    } else if (isNewer && !isSignificantlyLessAccurate && isFromSameProvider) {\n        return true;\n    }\n    return false;\n}\n\n/** Checks whether two providers are the same */\nprivate boolean isSameProvider(String provider1, String provider2) {\n    if (provider1 == null) {\n      return provider2 == null;\n    }\n    return provider1.equals(provider2);\n}\n\n```\n\n这段代码的策略是：\n\n- 1.先看更新时间：设定一个时间范围，2分钟。\n    - 如果新的Location比旧的Location获取时间更新，且超过2分钟，那么认为新的Location更好。\n    - 如果新的Location比旧的Location获取时间更老，且超过2分钟，那么认为新的Location不够好。\n    - 如果新的Location比旧的Location获取时间更新，但没有超过2分钟，那么看下它们的精确度。\n\n- 2.再看精确度：设定一个精确度范围，200米。\n    - 如果新的Location比旧的Location精确度更高，那么认为新的Location更好。\n    - 如果新的Location和旧的Location精确度相等，且获取时间更新，那么认为新的Location更好。\n    - 如果新的Location比旧的Location精确度低200m以内，且获取时间更新，来自同一个provider，那么为认为新的Location更好。\n    - 其他情况都认为旧的Location更好。\n\n这段代码是一个参考，我们实际开发中可以更具需要去定义自己的**Better Location**策略。\n\n另外，从API>=17开始，Location类还增加了一个`getElapsedRealtimeNanos`方法（获取从系统启动后走过的时间），这是为了解决`getTime`方法（获取UTC时间）不够精确，容易产生误差的问题。这个方法在比较两个Location时将更加可靠。\n\n#### 第4点，怎么获取LastknownPostion，怎么使用？\n\n相信有了第3点，应该知道怎么选择**Better Location**。至于获取LastKnownLocation直接看代码。\n\n```\nLocation gpsLocation = null;\nLocation networkLocation = null;\n\nif (context.checkCallingOrSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n    gpsLocation = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);\n}\n\nif (context.checkCallingOrSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n    networkLocation = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);\n}\n\n// 下面可以比较一下哪个更好...\nLocation currentLocation = gpsLocation;\nif (isBetterLocation(currentLocation, networkLocation)){\n    currentLocation = networkLocation;\n}\n```\n\n# 总结一下\n\n说了一大堆，我觉得平时开发的时候应该这么做：\n\n- 1.确定自己的应用什么时候要开始监听地理位置变化，什么时候停止。\n- 2.选择一个合适的provider，开始监听它提供的地理位置变化。\n- 3.读取系统中GPS和NETWORK这两个Provide缓存的**LastKnownPostion**，选出Better Location保存到currentBestLocation变量中。\n- 4.监听到地理位置更新后，把更新到的Location和保存的currentBestLocation比较，得出Better One，再保存到currentBestLocation变量中。\n- 5.使用currentBestLocation作为用户的位置，并在合适时机移除监听器。\n\n\n\n\n\n\n\n","source":"_posts/Android地理位置服务解析.markdown","raw":"---\nlayout: post\ntitle: Android地理位置服务解析\ndate: '2016-09-02'\ntags:\n  - Android\n  - 定位\ncategories: \n  - 技术\n---\n\n# 手机设备有哪几种定位方式\n\n## GPS\n\n基于卫星发射的信号，可以推算出手机到每颗卫星的距离，根据卫星的位置，推测出手机的位置。\n\n这是一张简单的GPS定位原理图，需要一点数学知识，先不讨论这个细节，需要的同学看[这里](http://baike.baidu.com/view/193655.htm)。\n\n![gps定位原理图](http://ww1.sinaimg.cn/large/65e4f1e6gw1f7fbixzcaxj20dw0bo750.jpg)\n\n现在卫星信号全球都覆盖了，手机一般都有GPS芯片，因此可以实现定位。GPS方式准确度是最高的，走卫星通道，不需要联网就可以要使用。但是它的缺点也非常明显：\n\n- 1.比较耗电; \n- 2.绝大部分用户默认不开启GPS模块，也不会长时间开着; \n- 3.从GPS模块启动到获取第一次定位数据，可能需要**比较长的时间**; \n- 4.**只能在户外使用**，当有遮挡物干扰时，几乎无法使用，如城市大楼密集的地方。\n\n<!-- more -->\n\n## WiFi\n\n通过获取当前所连接的WiFi热点的一些信息，然后访问定位服务以获得经纬度坐标。\n\n这是一张简单的WiFi定位原理图。\n\n![WiFi定位原理图](http://ww3.sinaimg.cn/large/65e4f1e6gw1f7fbjjbmesj20b408a0t0.jpg)\n\n因为WiFi热点一般都是固定位置，所以只要能知道手机连接的WiFi热点的位置，也就可以推算出手机的位置。而且由于手机一般连接的WiFi不会太远，所以其实精确度也不会太差。也不会像GPS那样需要耗时比较久才能获得位置信息。\n\n\n## Cell-ID\n\n采集到手机所连接的基站ID号(cellid)和其它的一些信息(MNC，MCC，LAC等)，然后通过网络访问定位服务，获取并返回对应的经纬度坐标。\n\n这是一张简单的基站定位原理图。\n\n![基站定位原理](http://ww2.sinaimg.cn/large/65e4f1e6gw1f7fbjts47yj20b40bqq3o.jpg)\n\n现在各大运营商的基站已经覆盖了全国大部分地区，每个基站的ID号是全球唯一的，只要有手机信号，就能接收到周围基站的信号。基站定位的精确度不如GPS，但优点是能够在室内用，只要网络通畅就行。\n\n\n其实各种定位方式，大体都是基于三角定位的原理，不过计算的时候会有一些自己的特点，这里先不深究背景知识了。下面进入正题。\n\n\n# Android系统上如何获取地理位置\n\n## 方法1：Google Play Service提供的API\n\n这个不多说，因为国内不可用！！！ \n\n需要的同学可以自己爬梯子看下用法，比较简单：[https://developer.android.com/google/play-services/location.html](https://developer.android.com/google/play-services/location.html)\n\n## 方法2：系统提供的原生API：主要就是系统的`android.location`中提供的两个类。\n\n- **LocationManager：**和大多数系统提供的**SystemService**一样是单例，通过`locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);`来获取。\n- **LocationListener：**非常典型的观察者模式，需要监听地理位置的时候，创建一个**Listener**，实现LocationListener中的几个回调方法。把Listener传给LocationManager，当地理位置变化的时候就会回调`onLocationChanged(Location location)`发出通知。\n- 官方指导：[https://developer.android.com/guide/topics/location/strategies.html](https://developer.android.com/guide/topics/location/strategies.html)\n\n## 方法3：使用百度、高德之类的地图SDK。\n\n这简直就是大招了，各家都有自己的数据库，比起系统提供的API强太多了。这个这次也不说，各家的接入文档写的很清楚。\n\n\n# 使用原生API采集地理位置的方法\n\n下面介绍一下我对使用原生API的理解，毕竟不是所有场景都需要用到大招级别的sdk，有的情况我们需要自己实现定位服务。\n\n## 1.首先需要了解**PROVIDER**\n\n看过前面介绍的3种定位方式之后，可以很容易理解PROVIDER是什么。其实它就对应着地理位置采集的几种方式：\n\n- LocationManager.GPS_PROVIDER：通过gps来获取地理位置的经纬度信息，优点：获取地理位置信息精确度高，缺点：只能在户外使用，**耗时，耗电**。\n- LocationManager.NETWORK_PROVIDER：通过移动网络的基站或者WiFi来获得地理位置，优点：只要有网络，获取速度快，耗电低，在室内室外都可以使用。\n- LocationManager.PASSIVE_PROVIDER：被动的接收更新的地理位置信息，而不用自己主动请求地理位置。意思就是共享手机上其他App采集的位置信息，而不是自己主动去采集。\n\n下图是3种Provider的特点和区别：\n\n![3种Provider的特点](http://ww3.sinaimg.cn/large/65e4f1e6gw1f7f3p1sx4aj20kp0g5acw.jpg)\n\n## 2.打开手机的设置\n\n先看下原生系统中地理位置设置的界面截图：\n\n![地理位置设置截图](http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f47p124kj20rs0m376v.jpg)\n\n以原生系统为例，需要采集地理位置时，需要：\n\n- 打开通知栏的GPS开关\n- 进入`设置->位置信息->模式`，打开开关。然后我们可以看到，这里有3类模式：\n    - 高精确度：使用GPS、WLAN、蓝牙或者移动网络确定位置\n    - 节电：使用WLAN、蓝牙或者移动网络确定位置\n    - 仅限设备：使用GPS确定位置\n\n**PS：**我发现小米手机上，即使你把通知栏里面地理位置开关关闭了，进入系统的设置界面，还是可以看到地理位置是开启的，默认选择的是`节电`模式。而原生系统你只要在通知栏关闭了开关，就无法使用定位服务了。这里感觉国内厂商在细节上可能会有一些不同的实现。\n\n## 3.给你的App注册权限\n\n当你在代码里面使用3种不同的Provider时，应该关注到两个权限：\n\n- LocationManager.GPS_PROVIDER：android.permission.ACCESS_FINE_LOCATION\n- LocationManager.NETWORK_PROVIDER：android.permission.ACCESS_COARSE_LOCATION 或者 android.permission.ACCESS_FINE_LOCATION。\n    - 当声明ACCESS_FINE_LOCATION时，拿到的位置信息将更精确（几十米到几百米）\n    - 当声明ACCESS_COARSE_LOCATION时，拿到的位置会粗略一点（几百米到几千米）\n- LocationManager.PASSIVE_PROVIDER：android.permission.ACCESS_COARSE_LOCATION \n\n> 注意：如果声明了ACCESS_FINE_LOCATION时，就不用再声明ACCESS_COARSE_LOCATION了，因为ACCESS_FINE_LOCATION已经包含了使用NETWORK_PROVIDER的能力。此外从Android6.0开始，ACCESS_FINE_LOCATION和ACCESS_COARSE_LOCATION已经是***dangerous permission***，开发者需要注意这一点，当用户在运行你的App时，如果没有授权，仍然是无法获取到地理位置信息的。\n\n\n## 4.根据需求的场景写代码（**记住要尽量省电**）\n\n**一定要省电：**这是一个非常重要的用户体验，我们应该对自己做的App负责。什么时候开始使用地理位置服务，什么时候停止使用，我们一定要想清楚，尽量不要一直占用着这种高耗电的资源。\n\n### 4.1基本代码\n\n下面看代码，一段基本的获取地理位置的代码是这么写的，这段代码可以让你通过异步的方式获取到用户的地理位置。\n\n```\n// 获得Location Manager的实例\nLocationManager locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);\n\n// 定义一个监听器，实现onLocationChanged方法，在这个方法里面可以拿到更新后的地理位置\nLocationListener locationListener = new LocationListener() {\n    public void onLocationChanged(Location location) {\n      // 新的Location值在这里返回，Location实例中包含着纬度、经度、海拔、精确度、更新时间等一系列信息。\n      makeUseOfNewLocation(location);\n    }\n\n    public void onStatusChanged(String provider, int status, Bundle extras) {}\n\n    public void onProviderEnabled(String provider) {}\n\n    public void onProviderDisabled(String provider) {}\n  };\n\n// 注册监听器，当地理位置变化时，发出通知给Listener。这个方法很关键。4个参数需要了解清楚：\n// 第1个参数：你所使用的provider名称，是个String\n// 第2个参数minTime：地理位置更新时发出通知的最小时间间隔\n// 第3个参数minDistance：地理位置更新发出通知的最小距离，第2和第3个参数的作用关系是“或”的关系，也就是满足任意一个条件都会发出通知。这里第2、3个参数都是0，意味着任何时间，只要位置有变化就会发出通知。\n// 第4个参数：你的监听器\nlocationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);\n```\n\n\n### 4.2如何优化\n\n但是实战中一定要尽量去优化，虽然获取地理位置只能是异步的，但是仍然不建议一直不停地监听地理位置的变化。\n\n谷歌官方也给出了一个采集地理位置的思路，非常值得我们来参考。思路的基本步骤如下：\n\n- 启动应用。\n- 当用户进入到应用中需要使用地理位置场景时，选择一个合适的Provider，开始监听地理位置的变化。\n- 获取系统中缓存的上次的地理位置`LastKnownLocation`，保存到当前地理位置变量`currentLocation`中作为备选值，当拿到新的地理位置后，对比两者，选择最优的那个继续保存它。\n- 停止监听地理位置的变化。\n- 使用当前维护着的这个Location作为用户的位置。\n\n谷歌还给出了这个方案的一个timeline图示。\n\n![A timeline representing the window in which an application listens for location updates](http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f4svf6zsj20mj064ab0.jpg)\n\n\n### 4.3关键问题\n\n我们比较关注下面4点：\n\n- 1.如何选择一个最好的provider？\n- 2.什么时候开始监听地理位置变化，什么时候结束？\n- 3.如何比较两个地理位置，决定哪个更好？\n- 4.LastknownPostion怎么获取，怎么使用？\n\n\n下面介绍我的想法：\n\n#### 第1点：如何选择一个最好的provider？\n\n这需要看你的需求。系统中也提供了一些方法来帮我们选择，可以设定一个条件`Criteria`，指定帅选最符合条件的地理位置提供者，根据Cirteria指定的条件，设备会自动选择哪种location provider。\n\n代码如下：\n\n```\nCriteria criteria = new Criteria();//\ncriteria.setAccuracy(Criteria.ACCURACY_FINE);//设置定位精准度\ncriteria.setAltitudeRequired(false);//是否要求海拔\ncriteria.setBearingRequired(true);//是否要求方向\ncriteria.setCostAllowed(true);//是否要求收费\ncriteria.setSpeedRequired(true);//是否要求速度\ncriteria.setPowerRequirement(Criteria.POWER_LOW);//设置相对省电\ncriteria.setBearingAccuracy(Criteria.ACCURACY_HIGH);//设置方向精确度\ncriteria.setSpeedAccuracy(Criteria.ACCURACY_HIGH);//设置速度精确度\ncriteria.setHorizontalAccuracy(Criteria.ACCURACY_HIGH);//设置水平方向精确度\ncriteria.setVerticalAccuracy(Criteria.ACCURACY_HIGH);//设置垂直方向精确度\n\n// 返回满足条件的，当前设备可用的location provider\n// 当第2个参数为false时，返回当前设备所有provider中最符合条件的那个（但是不一定可用）。\n// 当第2个参数为true时，返回当前设备所有可用的provider中最符合条件的那个。\nString rovider  = mLocationManager.getBestProvider(criteria,true);\n```\n\n\n总之，一共就3个provider，其实对于大部分开发者，选来选去就是`gps` or `network`。\n\n\n#### 第2点，什么时候开始，什么时候结束？\n\n我认为最好开启了监听器后，要尽可能早地结束它。也就是不要调用了`requestLocationUpdates(provider, minTime, minDistance, listener)`让位置服务开始工作后，很长时间都不去`removeUpdates(listener)`来停止服务。\n\n虽然在`requestLocationUpdates`方法中，有**minTime**、**minDistance**参数可以设置。比如设置了60000ms的minTime，希望采更新完一次地理位置后休息60s。或者设置2000米的minDistance，希望位置变化不超过2公里，也休息。这样做**看起来好像**是可以省电。\n\n但是实测中发现，如果调用`requestLocationUpdates(LocationManager.GPS_PROVIDER, 60000, 2000, listener)`注册监听器后，系统的状态栏上面的GPS那个小图标一直在显示。只要你不`removeUpdates(listener)`，他就一直在工作。其实我理解，即使你设置了minTime和minDistance，位置服务还是一直处于工作状态的，不然它怎么知道位置变化超过了你设定的minDistance呢？\n\n![系统栏中的GPS图标](http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f94tb263j20eu022t8r.jpg)\n\n所以我的建议是，当你调用**requestLocationUpdates**后，还应该是设置一个定时器，比如30s。当30s时间到了之后，就**removeUpdate**，不再监听地理位置了，转而使用备选的LastKnownLocation。当下次需要使用地理位置时，再重新注册监听器，监听30s，然后就移除监听器。如果对实时性要求高，我们可以在用户进入App中某个需要定位服务的场景之前，采用这个方法获取一次地理位置，把它保存下来。\n\n#### 第3点，如何比较两个Location，选出更好的那个？\n\n谷歌也给出了代码示例，先看一下。\n\n```\nprivate static final int TWO_MINUTES = 1000 * 60 * 2;\n\n/** Determines whether one Location reading is better than the current Location fix\n  * @param location  The new Location that you want to evaluate\n  * @param currentBestLocation  The current Location fix, to which you want to compare the new one\n  */\nprotected boolean isBetterLocation(Location location, Location currentBestLocation) {\n    if (currentBestLocation == null) {\n        // A new location is always better than no location\n        return true;\n    }\n\n    // Check whether the new location fix is newer or older\n    long timeDelta = location.getTime() - currentBestLocation.getTime();\n    boolean isSignificantlyNewer = timeDelta > TWO_MINUTES;\n    boolean isSignificantlyOlder = timeDelta < -TWO_MINUTES;\n    boolean isNewer = timeDelta > 0;\n\n    // If it's been more than two minutes since the current location, use the new location\n    // because the user has likely moved\n    if (isSignificantlyNewer) {\n        return true;\n    // If the new location is more than two minutes older, it must be worse\n    } else if (isSignificantlyOlder) {\n        return false;\n    }\n\n    // Check whether the new location fix is more or less accurate\n    int accuracyDelta = (int) (location.getAccuracy() - currentBestLocation.getAccuracy());\n    boolean isLessAccurate = accuracyDelta > 0;\n    boolean isMoreAccurate = accuracyDelta < 0;\n    boolean isSignificantlyLessAccurate = accuracyDelta > 200;\n\n    // Check if the old and new location are from the same provider\n    boolean isFromSameProvider = isSameProvider(location.getProvider(),\n            currentBestLocation.getProvider());\n\n    // Determine location quality using a combination of timeliness and accuracy\n    if (isMoreAccurate) {\n        return true;\n    } else if (isNewer && !isLessAccurate) {\n        return true;\n    } else if (isNewer && !isSignificantlyLessAccurate && isFromSameProvider) {\n        return true;\n    }\n    return false;\n}\n\n/** Checks whether two providers are the same */\nprivate boolean isSameProvider(String provider1, String provider2) {\n    if (provider1 == null) {\n      return provider2 == null;\n    }\n    return provider1.equals(provider2);\n}\n\n```\n\n这段代码的策略是：\n\n- 1.先看更新时间：设定一个时间范围，2分钟。\n    - 如果新的Location比旧的Location获取时间更新，且超过2分钟，那么认为新的Location更好。\n    - 如果新的Location比旧的Location获取时间更老，且超过2分钟，那么认为新的Location不够好。\n    - 如果新的Location比旧的Location获取时间更新，但没有超过2分钟，那么看下它们的精确度。\n\n- 2.再看精确度：设定一个精确度范围，200米。\n    - 如果新的Location比旧的Location精确度更高，那么认为新的Location更好。\n    - 如果新的Location和旧的Location精确度相等，且获取时间更新，那么认为新的Location更好。\n    - 如果新的Location比旧的Location精确度低200m以内，且获取时间更新，来自同一个provider，那么为认为新的Location更好。\n    - 其他情况都认为旧的Location更好。\n\n这段代码是一个参考，我们实际开发中可以更具需要去定义自己的**Better Location**策略。\n\n另外，从API>=17开始，Location类还增加了一个`getElapsedRealtimeNanos`方法（获取从系统启动后走过的时间），这是为了解决`getTime`方法（获取UTC时间）不够精确，容易产生误差的问题。这个方法在比较两个Location时将更加可靠。\n\n#### 第4点，怎么获取LastknownPostion，怎么使用？\n\n相信有了第3点，应该知道怎么选择**Better Location**。至于获取LastKnownLocation直接看代码。\n\n```\nLocation gpsLocation = null;\nLocation networkLocation = null;\n\nif (context.checkCallingOrSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n    gpsLocation = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);\n}\n\nif (context.checkCallingOrSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n    networkLocation = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);\n}\n\n// 下面可以比较一下哪个更好...\nLocation currentLocation = gpsLocation;\nif (isBetterLocation(currentLocation, networkLocation)){\n    currentLocation = networkLocation;\n}\n```\n\n# 总结一下\n\n说了一大堆，我觉得平时开发的时候应该这么做：\n\n- 1.确定自己的应用什么时候要开始监听地理位置变化，什么时候停止。\n- 2.选择一个合适的provider，开始监听它提供的地理位置变化。\n- 3.读取系统中GPS和NETWORK这两个Provide缓存的**LastKnownPostion**，选出Better Location保存到currentBestLocation变量中。\n- 4.监听到地理位置更新后，把更新到的Location和保存的currentBestLocation比较，得出Better One，再保存到currentBestLocation变量中。\n- 5.使用currentBestLocation作为用户的位置，并在合适时机移除监听器。\n\n\n\n\n\n\n\n","slug":"Android地理位置服务解析","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8e3000omtsxty0ig0va","content":"<h1 id=\"手机设备有哪几种定位方式\"><a href=\"#手机设备有哪几种定位方式\" class=\"headerlink\" title=\"手机设备有哪几种定位方式\"></a>手机设备有哪几种定位方式</h1><h2 id=\"GPS\"><a href=\"#GPS\" class=\"headerlink\" title=\"GPS\"></a>GPS</h2><p>基于卫星发射的信号，可以推算出手机到每颗卫星的距离，根据卫星的位置，推测出手机的位置。</p>\n<p>这是一张简单的GPS定位原理图，需要一点数学知识，先不讨论这个细节，需要的同学看<a href=\"http://baike.baidu.com/view/193655.htm\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/65e4f1e6gw1f7fbixzcaxj20dw0bo750.jpg\" alt=\"gps定位原理图\"></p>\n<p>现在卫星信号全球都覆盖了，手机一般都有GPS芯片，因此可以实现定位。GPS方式准确度是最高的，走卫星通道，不需要联网就可以要使用。但是它的缺点也非常明显：</p>\n<ul>\n<li>1.比较耗电; </li>\n<li>2.绝大部分用户默认不开启GPS模块，也不会长时间开着; </li>\n<li>3.从GPS模块启动到获取第一次定位数据，可能需要<strong>比较长的时间</strong>; </li>\n<li>4.<strong>只能在户外使用</strong>，当有遮挡物干扰时，几乎无法使用，如城市大楼密集的地方。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"WiFi\"><a href=\"#WiFi\" class=\"headerlink\" title=\"WiFi\"></a>WiFi</h2><p>通过获取当前所连接的WiFi热点的一些信息，然后访问定位服务以获得经纬度坐标。</p>\n<p>这是一张简单的WiFi定位原理图。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f7fbjjbmesj20b408a0t0.jpg\" alt=\"WiFi定位原理图\"></p>\n<p>因为WiFi热点一般都是固定位置，所以只要能知道手机连接的WiFi热点的位置，也就可以推算出手机的位置。而且由于手机一般连接的WiFi不会太远，所以其实精确度也不会太差。也不会像GPS那样需要耗时比较久才能获得位置信息。</p>\n<h2 id=\"Cell-ID\"><a href=\"#Cell-ID\" class=\"headerlink\" title=\"Cell-ID\"></a>Cell-ID</h2><p>采集到手机所连接的基站ID号(cellid)和其它的一些信息(MNC，MCC，LAC等)，然后通过网络访问定位服务，获取并返回对应的经纬度坐标。</p>\n<p>这是一张简单的基站定位原理图。</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/65e4f1e6gw1f7fbjts47yj20b40bqq3o.jpg\" alt=\"基站定位原理\"></p>\n<p>现在各大运营商的基站已经覆盖了全国大部分地区，每个基站的ID号是全球唯一的，只要有手机信号，就能接收到周围基站的信号。基站定位的精确度不如GPS，但优点是能够在室内用，只要网络通畅就行。</p>\n<p>其实各种定位方式，大体都是基于三角定位的原理，不过计算的时候会有一些自己的特点，这里先不深究背景知识了。下面进入正题。</p>\n<h1 id=\"Android系统上如何获取地理位置\"><a href=\"#Android系统上如何获取地理位置\" class=\"headerlink\" title=\"Android系统上如何获取地理位置\"></a>Android系统上如何获取地理位置</h1><h2 id=\"方法1：Google-Play-Service提供的API\"><a href=\"#方法1：Google-Play-Service提供的API\" class=\"headerlink\" title=\"方法1：Google Play Service提供的API\"></a>方法1：Google Play Service提供的API</h2><p>这个不多说，因为国内不可用！！！ </p>\n<p>需要的同学可以自己爬梯子看下用法，比较简单：<a href=\"https://developer.android.com/google/play-services/location.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/google/play-services/location.html</a></p>\n<h2 id=\"方法2：系统提供的原生API：主要就是系统的android-location中提供的两个类。\"><a href=\"#方法2：系统提供的原生API：主要就是系统的android-location中提供的两个类。\" class=\"headerlink\" title=\"方法2：系统提供的原生API：主要就是系统的android.location中提供的两个类。\"></a>方法2：系统提供的原生API：主要就是系统的<code>android.location</code>中提供的两个类。</h2><ul>\n<li><strong>LocationManager：</strong>和大多数系统提供的<strong>SystemService</strong>一样是单例，通过<code>locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);</code>来获取。</li>\n<li><strong>LocationListener：</strong>非常典型的观察者模式，需要监听地理位置的时候，创建一个<strong>Listener</strong>，实现LocationListener中的几个回调方法。把Listener传给LocationManager，当地理位置变化的时候就会回调<code>onLocationChanged(Location location)</code>发出通知。</li>\n<li>官方指导：<a href=\"https://developer.android.com/guide/topics/location/strategies.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/guide/topics/location/strategies.html</a></li>\n</ul>\n<h2 id=\"方法3：使用百度、高德之类的地图SDK。\"><a href=\"#方法3：使用百度、高德之类的地图SDK。\" class=\"headerlink\" title=\"方法3：使用百度、高德之类的地图SDK。\"></a>方法3：使用百度、高德之类的地图SDK。</h2><p>这简直就是大招了，各家都有自己的数据库，比起系统提供的API强太多了。这个这次也不说，各家的接入文档写的很清楚。</p>\n<h1 id=\"使用原生API采集地理位置的方法\"><a href=\"#使用原生API采集地理位置的方法\" class=\"headerlink\" title=\"使用原生API采集地理位置的方法\"></a>使用原生API采集地理位置的方法</h1><p>下面介绍一下我对使用原生API的理解，毕竟不是所有场景都需要用到大招级别的sdk，有的情况我们需要自己实现定位服务。</p>\n<h2 id=\"1-首先需要了解PROVIDER\"><a href=\"#1-首先需要了解PROVIDER\" class=\"headerlink\" title=\"1.首先需要了解PROVIDER\"></a>1.首先需要了解<strong>PROVIDER</strong></h2><p>看过前面介绍的3种定位方式之后，可以很容易理解PROVIDER是什么。其实它就对应着地理位置采集的几种方式：</p>\n<ul>\n<li>LocationManager.GPS_PROVIDER：通过gps来获取地理位置的经纬度信息，优点：获取地理位置信息精确度高，缺点：只能在户外使用，<strong>耗时，耗电</strong>。</li>\n<li>LocationManager.NETWORK_PROVIDER：通过移动网络的基站或者WiFi来获得地理位置，优点：只要有网络，获取速度快，耗电低，在室内室外都可以使用。</li>\n<li>LocationManager.PASSIVE_PROVIDER：被动的接收更新的地理位置信息，而不用自己主动请求地理位置。意思就是共享手机上其他App采集的位置信息，而不是自己主动去采集。</li>\n</ul>\n<p>下图是3种Provider的特点和区别：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f7f3p1sx4aj20kp0g5acw.jpg\" alt=\"3种Provider的特点\"></p>\n<h2 id=\"2-打开手机的设置\"><a href=\"#2-打开手机的设置\" class=\"headerlink\" title=\"2.打开手机的设置\"></a>2.打开手机的设置</h2><p>先看下原生系统中地理位置设置的界面截图：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f47p124kj20rs0m376v.jpg\" alt=\"地理位置设置截图\"></p>\n<p>以原生系统为例，需要采集地理位置时，需要：</p>\n<ul>\n<li>打开通知栏的GPS开关</li>\n<li>进入<code>设置-&gt;位置信息-&gt;模式</code>，打开开关。然后我们可以看到，这里有3类模式：<ul>\n<li>高精确度：使用GPS、WLAN、蓝牙或者移动网络确定位置</li>\n<li>节电：使用WLAN、蓝牙或者移动网络确定位置</li>\n<li>仅限设备：使用GPS确定位置</li>\n</ul>\n</li>\n</ul>\n<p><strong>PS：</strong>我发现小米手机上，即使你把通知栏里面地理位置开关关闭了，进入系统的设置界面，还是可以看到地理位置是开启的，默认选择的是<code>节电</code>模式。而原生系统你只要在通知栏关闭了开关，就无法使用定位服务了。这里感觉国内厂商在细节上可能会有一些不同的实现。</p>\n<h2 id=\"3-给你的App注册权限\"><a href=\"#3-给你的App注册权限\" class=\"headerlink\" title=\"3.给你的App注册权限\"></a>3.给你的App注册权限</h2><p>当你在代码里面使用3种不同的Provider时，应该关注到两个权限：</p>\n<ul>\n<li>LocationManager.GPS_PROVIDER：android.permission.ACCESS_FINE_LOCATION</li>\n<li>LocationManager.NETWORK_PROVIDER：android.permission.ACCESS_COARSE_LOCATION 或者 android.permission.ACCESS_FINE_LOCATION。<ul>\n<li>当声明ACCESS_FINE_LOCATION时，拿到的位置信息将更精确（几十米到几百米）</li>\n<li>当声明ACCESS_COARSE_LOCATION时，拿到的位置会粗略一点（几百米到几千米）</li>\n</ul>\n</li>\n<li>LocationManager.PASSIVE_PROVIDER：android.permission.ACCESS_COARSE_LOCATION </li>\n</ul>\n<blockquote>\n<p>注意：如果声明了ACCESS_FINE_LOCATION时，就不用再声明ACCESS_COARSE_LOCATION了，因为ACCESS_FINE_LOCATION已经包含了使用NETWORK_PROVIDER的能力。此外从Android6.0开始，ACCESS_FINE_LOCATION和ACCESS_COARSE_LOCATION已经是<strong><em>dangerous permission</em></strong>，开发者需要注意这一点，当用户在运行你的App时，如果没有授权，仍然是无法获取到地理位置信息的。</p>\n</blockquote>\n<h2 id=\"4-根据需求的场景写代码（记住要尽量省电）\"><a href=\"#4-根据需求的场景写代码（记住要尽量省电）\" class=\"headerlink\" title=\"4.根据需求的场景写代码（记住要尽量省电）\"></a>4.根据需求的场景写代码（<strong>记住要尽量省电</strong>）</h2><p><strong>一定要省电：</strong>这是一个非常重要的用户体验，我们应该对自己做的App负责。什么时候开始使用地理位置服务，什么时候停止使用，我们一定要想清楚，尽量不要一直占用着这种高耗电的资源。</p>\n<h3 id=\"4-1基本代码\"><a href=\"#4-1基本代码\" class=\"headerlink\" title=\"4.1基本代码\"></a>4.1基本代码</h3><p>下面看代码，一段基本的获取地理位置的代码是这么写的，这段代码可以让你通过异步的方式获取到用户的地理位置。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获得Location Manager的实例</span></span><br><span class=\"line\">LocationManager locationManager = (LocationManager) <span class=\"keyword\">this</span>.getSystemService(Context.LOCATION_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个监听器，实现onLocationChanged方法，在这个方法里面可以拿到更新后的地理位置</span></span><br><span class=\"line\">LocationListener locationListener = <span class=\"keyword\">new</span> LocationListener() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onLocationChanged</span><span class=\"params\">(Location location)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 新的Location值在这里返回，Location实例中包含着纬度、经度、海拔、精确度、更新时间等一系列信息。</span></span><br><span class=\"line\">      makeUseOfNewLocation(location);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStatusChanged</span><span class=\"params\">(String provider, <span class=\"keyword\">int</span> status, Bundle extras)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProviderEnabled</span><span class=\"params\">(String provider)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProviderDisabled</span><span class=\"params\">(String provider)</span> </span>&#123;&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册监听器，当地理位置变化时，发出通知给Listener。这个方法很关键。4个参数需要了解清楚：</span></span><br><span class=\"line\"><span class=\"comment\">// 第1个参数：你所使用的provider名称，是个String</span></span><br><span class=\"line\"><span class=\"comment\">// 第2个参数minTime：地理位置更新时发出通知的最小时间间隔</span></span><br><span class=\"line\"><span class=\"comment\">// 第3个参数minDistance：地理位置更新发出通知的最小距离，第2和第3个参数的作用关系是“或”的关系，也就是满足任意一个条件都会发出通知。这里第2、3个参数都是0，意味着任何时间，只要位置有变化就会发出通知。</span></span><br><span class=\"line\"><span class=\"comment\">// 第4个参数：你的监听器</span></span><br><span class=\"line\">locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, <span class=\"number\">0</span>, <span class=\"number\">0</span>, locationListener);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2如何优化\"><a href=\"#4-2如何优化\" class=\"headerlink\" title=\"4.2如何优化\"></a>4.2如何优化</h3><p>但是实战中一定要尽量去优化，虽然获取地理位置只能是异步的，但是仍然不建议一直不停地监听地理位置的变化。</p>\n<p>谷歌官方也给出了一个采集地理位置的思路，非常值得我们来参考。思路的基本步骤如下：</p>\n<ul>\n<li>启动应用。</li>\n<li>当用户进入到应用中需要使用地理位置场景时，选择一个合适的Provider，开始监听地理位置的变化。</li>\n<li>获取系统中缓存的上次的地理位置<code>LastKnownLocation</code>，保存到当前地理位置变量<code>currentLocation</code>中作为备选值，当拿到新的地理位置后，对比两者，选择最优的那个继续保存它。</li>\n<li>停止监听地理位置的变化。</li>\n<li>使用当前维护着的这个Location作为用户的位置。</li>\n</ul>\n<p>谷歌还给出了这个方案的一个timeline图示。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f4svf6zsj20mj064ab0.jpg\" alt=\"A timeline representing the window in which an application listens for location updates\"></p>\n<h3 id=\"4-3关键问题\"><a href=\"#4-3关键问题\" class=\"headerlink\" title=\"4.3关键问题\"></a>4.3关键问题</h3><p>我们比较关注下面4点：</p>\n<ul>\n<li>1.如何选择一个最好的provider？</li>\n<li>2.什么时候开始监听地理位置变化，什么时候结束？</li>\n<li>3.如何比较两个地理位置，决定哪个更好？</li>\n<li>4.LastknownPostion怎么获取，怎么使用？</li>\n</ul>\n<p>下面介绍我的想法：</p>\n<h4 id=\"第1点：如何选择一个最好的provider？\"><a href=\"#第1点：如何选择一个最好的provider？\" class=\"headerlink\" title=\"第1点：如何选择一个最好的provider？\"></a>第1点：如何选择一个最好的provider？</h4><p>这需要看你的需求。系统中也提供了一些方法来帮我们选择，可以设定一个条件<code>Criteria</code>，指定帅选最符合条件的地理位置提供者，根据Cirteria指定的条件，设备会自动选择哪种location provider。</p>\n<p>代码如下：</p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Criteria</span> criteria = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">Criteria</span>();<span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setAccuracy</span>(<span class=\"type\">Criteria</span>.<span class=\"type\">ACCURACY_FINE</span>);<span class=\"comment\">//设置定位精准度</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setAltitudeRequired</span>(false);<span class=\"comment\">//是否要求海拔</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setBearingRequired</span>(true);<span class=\"comment\">//是否要求方向</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setCostAllowed</span>(true);<span class=\"comment\">//是否要求收费</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setSpeedRequired</span>(true);<span class=\"comment\">//是否要求速度</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setPowerRequirement</span>(<span class=\"type\">Criteria</span>.<span class=\"type\">POWER_LOW</span>);<span class=\"comment\">//设置相对省电</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setBearingAccuracy</span>(<span class=\"type\">Criteria</span>.<span class=\"type\">ACCURACY_HIGH</span>);<span class=\"comment\">//设置方向精确度</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setSpeedAccuracy</span>(<span class=\"type\">Criteria</span>.<span class=\"type\">ACCURACY_HIGH</span>);<span class=\"comment\">//设置速度精确度</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setHorizontalAccuracy</span>(<span class=\"type\">Criteria</span>.<span class=\"type\">ACCURACY_HIGH</span>);<span class=\"comment\">//设置水平方向精确度</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setVerticalAccuracy</span>(<span class=\"type\">Criteria</span>.<span class=\"type\">ACCURACY_HIGH</span>);<span class=\"comment\">//设置垂直方向精确度</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 返回满足条件的，当前设备可用的location provider</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 当第2个参数为false时，返回当前设备所有provider中最符合条件的那个（但是不一定可用）。</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 当第2个参数为true时，返回当前设备所有可用的provider中最符合条件的那个。</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">String</span> <span class=\"title\">rovider</span>  = <span class=\"title\">mLocationManager</span>.<span class=\"title\">getBestProvider</span>(criteria,true);</span></span><br></pre></td></tr></table></figure>\n<p>总之，一共就3个provider，其实对于大部分开发者，选来选去就是<code>gps</code> or <code>network</code>。</p>\n<h4 id=\"第2点，什么时候开始，什么时候结束？\"><a href=\"#第2点，什么时候开始，什么时候结束？\" class=\"headerlink\" title=\"第2点，什么时候开始，什么时候结束？\"></a>第2点，什么时候开始，什么时候结束？</h4><p>我认为最好开启了监听器后，要尽可能早地结束它。也就是不要调用了<code>requestLocationUpdates(provider, minTime, minDistance, listener)</code>让位置服务开始工作后，很长时间都不去<code>removeUpdates(listener)</code>来停止服务。</p>\n<p>虽然在<code>requestLocationUpdates</code>方法中，有<strong>minTime</strong>、<strong>minDistance</strong>参数可以设置。比如设置了60000ms的minTime，希望采更新完一次地理位置后休息60s。或者设置2000米的minDistance，希望位置变化不超过2公里，也休息。这样做<strong>看起来好像</strong>是可以省电。</p>\n<p>但是实测中发现，如果调用<code>requestLocationUpdates(LocationManager.GPS_PROVIDER, 60000, 2000, listener)</code>注册监听器后，系统的状态栏上面的GPS那个小图标一直在显示。只要你不<code>removeUpdates(listener)</code>，他就一直在工作。其实我理解，即使你设置了minTime和minDistance，位置服务还是一直处于工作状态的，不然它怎么知道位置变化超过了你设定的minDistance呢？</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f94tb263j20eu022t8r.jpg\" alt=\"系统栏中的GPS图标\"></p>\n<p>所以我的建议是，当你调用<strong>requestLocationUpdates</strong>后，还应该是设置一个定时器，比如30s。当30s时间到了之后，就<strong>removeUpdate</strong>，不再监听地理位置了，转而使用备选的LastKnownLocation。当下次需要使用地理位置时，再重新注册监听器，监听30s，然后就移除监听器。如果对实时性要求高，我们可以在用户进入App中某个需要定位服务的场景之前，采用这个方法获取一次地理位置，把它保存下来。</p>\n<h4 id=\"第3点，如何比较两个Location，选出更好的那个？\"><a href=\"#第3点，如何比较两个Location，选出更好的那个？\" class=\"headerlink\" title=\"第3点，如何比较两个Location，选出更好的那个？\"></a>第3点，如何比较两个Location，选出更好的那个？</h4><p>谷歌也给出了代码示例，先看一下。</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TWO_MINUTES = <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Determines whether one Location reading is better than the current Location fix</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> location  The new Location that you want to evaluate</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> currentBestLocation  The current Location fix, to which you want to compare the new one</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> isBetterLocation(Location location, Location currentBestLocation) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentBestLocation == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A new location is always better than no location</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check whether the new location fix is newer or older</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> timeDelta = location.getTime() - currentBestLocation.getTime();</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isSignificantlyNewer = timeDelta &gt; TWO_MINUTES;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isSignificantlyOlder = timeDelta &lt; -TWO_MINUTES;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isNewer = timeDelta &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If it's been more than two minutes since the current location, use the new location</span></span><br><span class=\"line\">    <span class=\"comment\">// because the user has likely moved</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSignificantlyNewer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If the new location is more than two minutes older, it must be worse</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isSignificantlyOlder) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check whether the new location fix is more or less accurate</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> accuracyDelta = (<span class=\"keyword\">int</span>) (location.getAccuracy() - currentBestLocation.getAccuracy());</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isLessAccurate = accuracyDelta &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isMoreAccurate = accuracyDelta &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isSignificantlyLessAccurate = accuracyDelta &gt; <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if the old and new location are from the same provider</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isFromSameProvider = isSameProvider(location.getProvider(),</span><br><span class=\"line\">            currentBestLocation.getProvider());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Determine location quality using a combination of timeliness and accuracy</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isMoreAccurate) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isNewer &amp;&amp; !isLessAccurate) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isNewer &amp;&amp; !isSignificantlyLessAccurate &amp;&amp; isFromSameProvider) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Checks whether two providers are the same */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isSameProvider(String provider1, String provider2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (provider1 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> provider2 == <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> provider1.equals(provider2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的策略是：</p>\n<ul>\n<li><p>1.先看更新时间：设定一个时间范围，2分钟。</p>\n<ul>\n<li>如果新的Location比旧的Location获取时间更新，且超过2分钟，那么认为新的Location更好。</li>\n<li>如果新的Location比旧的Location获取时间更老，且超过2分钟，那么认为新的Location不够好。</li>\n<li>如果新的Location比旧的Location获取时间更新，但没有超过2分钟，那么看下它们的精确度。</li>\n</ul>\n</li>\n<li><p>2.再看精确度：设定一个精确度范围，200米。</p>\n<ul>\n<li>如果新的Location比旧的Location精确度更高，那么认为新的Location更好。</li>\n<li>如果新的Location和旧的Location精确度相等，且获取时间更新，那么认为新的Location更好。</li>\n<li>如果新的Location比旧的Location精确度低200m以内，且获取时间更新，来自同一个provider，那么为认为新的Location更好。</li>\n<li>其他情况都认为旧的Location更好。</li>\n</ul>\n</li>\n</ul>\n<p>这段代码是一个参考，我们实际开发中可以更具需要去定义自己的<strong>Better Location</strong>策略。</p>\n<p>另外，从API&gt;=17开始，Location类还增加了一个<code>getElapsedRealtimeNanos</code>方法（获取从系统启动后走过的时间），这是为了解决<code>getTime</code>方法（获取UTC时间）不够精确，容易产生误差的问题。这个方法在比较两个Location时将更加可靠。</p>\n<h4 id=\"第4点，怎么获取LastknownPostion，怎么使用？\"><a href=\"#第4点，怎么获取LastknownPostion，怎么使用？\" class=\"headerlink\" title=\"第4点，怎么获取LastknownPostion，怎么使用？\"></a>第4点，怎么获取LastknownPostion，怎么使用？</h4><p>相信有了第3点，应该知道怎么选择<strong>Better Location</strong>。至于获取LastKnownLocation直接看代码。</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Location <span class=\"attr\">gpsLocation</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">Location <span class=\"attr\">networkLocation</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (context.checkCallingOrSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">    <span class=\"attr\">gpsLocation</span> = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (context.checkCallingOrSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">    <span class=\"attr\">networkLocation</span> = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 下面可以比较一下哪个更好...</span><br><span class=\"line\">Location <span class=\"attr\">currentLocation</span> = gpsLocation;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isBetterLocation(currentLocation, networkLocation))&#123;</span><br><span class=\"line\">    <span class=\"attr\">currentLocation</span> = networkLocation;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h1><p>说了一大堆，我觉得平时开发的时候应该这么做：</p>\n<ul>\n<li>1.确定自己的应用什么时候要开始监听地理位置变化，什么时候停止。</li>\n<li>2.选择一个合适的provider，开始监听它提供的地理位置变化。</li>\n<li>3.读取系统中GPS和NETWORK这两个Provide缓存的<strong>LastKnownPostion</strong>，选出Better Location保存到currentBestLocation变量中。</li>\n<li>4.监听到地理位置更新后，把更新到的Location和保存的currentBestLocation比较，得出Better One，再保存到currentBestLocation变量中。</li>\n<li>5.使用currentBestLocation作为用户的位置，并在合适时机移除监听器。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"手机设备有哪几种定位方式\"><a href=\"#手机设备有哪几种定位方式\" class=\"headerlink\" title=\"手机设备有哪几种定位方式\"></a>手机设备有哪几种定位方式</h1><h2 id=\"GPS\"><a href=\"#GPS\" class=\"headerlink\" title=\"GPS\"></a>GPS</h2><p>基于卫星发射的信号，可以推算出手机到每颗卫星的距离，根据卫星的位置，推测出手机的位置。</p>\n<p>这是一张简单的GPS定位原理图，需要一点数学知识，先不讨论这个细节，需要的同学看<a href=\"http://baike.baidu.com/view/193655.htm\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/65e4f1e6gw1f7fbixzcaxj20dw0bo750.jpg\" alt=\"gps定位原理图\"></p>\n<p>现在卫星信号全球都覆盖了，手机一般都有GPS芯片，因此可以实现定位。GPS方式准确度是最高的，走卫星通道，不需要联网就可以要使用。但是它的缺点也非常明显：</p>\n<ul>\n<li>1.比较耗电; </li>\n<li>2.绝大部分用户默认不开启GPS模块，也不会长时间开着; </li>\n<li>3.从GPS模块启动到获取第一次定位数据，可能需要<strong>比较长的时间</strong>; </li>\n<li>4.<strong>只能在户外使用</strong>，当有遮挡物干扰时，几乎无法使用，如城市大楼密集的地方。</li>\n</ul>","more":"<h2 id=\"WiFi\"><a href=\"#WiFi\" class=\"headerlink\" title=\"WiFi\"></a>WiFi</h2><p>通过获取当前所连接的WiFi热点的一些信息，然后访问定位服务以获得经纬度坐标。</p>\n<p>这是一张简单的WiFi定位原理图。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f7fbjjbmesj20b408a0t0.jpg\" alt=\"WiFi定位原理图\"></p>\n<p>因为WiFi热点一般都是固定位置，所以只要能知道手机连接的WiFi热点的位置，也就可以推算出手机的位置。而且由于手机一般连接的WiFi不会太远，所以其实精确度也不会太差。也不会像GPS那样需要耗时比较久才能获得位置信息。</p>\n<h2 id=\"Cell-ID\"><a href=\"#Cell-ID\" class=\"headerlink\" title=\"Cell-ID\"></a>Cell-ID</h2><p>采集到手机所连接的基站ID号(cellid)和其它的一些信息(MNC，MCC，LAC等)，然后通过网络访问定位服务，获取并返回对应的经纬度坐标。</p>\n<p>这是一张简单的基站定位原理图。</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/65e4f1e6gw1f7fbjts47yj20b40bqq3o.jpg\" alt=\"基站定位原理\"></p>\n<p>现在各大运营商的基站已经覆盖了全国大部分地区，每个基站的ID号是全球唯一的，只要有手机信号，就能接收到周围基站的信号。基站定位的精确度不如GPS，但优点是能够在室内用，只要网络通畅就行。</p>\n<p>其实各种定位方式，大体都是基于三角定位的原理，不过计算的时候会有一些自己的特点，这里先不深究背景知识了。下面进入正题。</p>\n<h1 id=\"Android系统上如何获取地理位置\"><a href=\"#Android系统上如何获取地理位置\" class=\"headerlink\" title=\"Android系统上如何获取地理位置\"></a>Android系统上如何获取地理位置</h1><h2 id=\"方法1：Google-Play-Service提供的API\"><a href=\"#方法1：Google-Play-Service提供的API\" class=\"headerlink\" title=\"方法1：Google Play Service提供的API\"></a>方法1：Google Play Service提供的API</h2><p>这个不多说，因为国内不可用！！！ </p>\n<p>需要的同学可以自己爬梯子看下用法，比较简单：<a href=\"https://developer.android.com/google/play-services/location.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/google/play-services/location.html</a></p>\n<h2 id=\"方法2：系统提供的原生API：主要就是系统的android-location中提供的两个类。\"><a href=\"#方法2：系统提供的原生API：主要就是系统的android-location中提供的两个类。\" class=\"headerlink\" title=\"方法2：系统提供的原生API：主要就是系统的android.location中提供的两个类。\"></a>方法2：系统提供的原生API：主要就是系统的<code>android.location</code>中提供的两个类。</h2><ul>\n<li><strong>LocationManager：</strong>和大多数系统提供的<strong>SystemService</strong>一样是单例，通过<code>locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);</code>来获取。</li>\n<li><strong>LocationListener：</strong>非常典型的观察者模式，需要监听地理位置的时候，创建一个<strong>Listener</strong>，实现LocationListener中的几个回调方法。把Listener传给LocationManager，当地理位置变化的时候就会回调<code>onLocationChanged(Location location)</code>发出通知。</li>\n<li>官方指导：<a href=\"https://developer.android.com/guide/topics/location/strategies.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/guide/topics/location/strategies.html</a></li>\n</ul>\n<h2 id=\"方法3：使用百度、高德之类的地图SDK。\"><a href=\"#方法3：使用百度、高德之类的地图SDK。\" class=\"headerlink\" title=\"方法3：使用百度、高德之类的地图SDK。\"></a>方法3：使用百度、高德之类的地图SDK。</h2><p>这简直就是大招了，各家都有自己的数据库，比起系统提供的API强太多了。这个这次也不说，各家的接入文档写的很清楚。</p>\n<h1 id=\"使用原生API采集地理位置的方法\"><a href=\"#使用原生API采集地理位置的方法\" class=\"headerlink\" title=\"使用原生API采集地理位置的方法\"></a>使用原生API采集地理位置的方法</h1><p>下面介绍一下我对使用原生API的理解，毕竟不是所有场景都需要用到大招级别的sdk，有的情况我们需要自己实现定位服务。</p>\n<h2 id=\"1-首先需要了解PROVIDER\"><a href=\"#1-首先需要了解PROVIDER\" class=\"headerlink\" title=\"1.首先需要了解PROVIDER\"></a>1.首先需要了解<strong>PROVIDER</strong></h2><p>看过前面介绍的3种定位方式之后，可以很容易理解PROVIDER是什么。其实它就对应着地理位置采集的几种方式：</p>\n<ul>\n<li>LocationManager.GPS_PROVIDER：通过gps来获取地理位置的经纬度信息，优点：获取地理位置信息精确度高，缺点：只能在户外使用，<strong>耗时，耗电</strong>。</li>\n<li>LocationManager.NETWORK_PROVIDER：通过移动网络的基站或者WiFi来获得地理位置，优点：只要有网络，获取速度快，耗电低，在室内室外都可以使用。</li>\n<li>LocationManager.PASSIVE_PROVIDER：被动的接收更新的地理位置信息，而不用自己主动请求地理位置。意思就是共享手机上其他App采集的位置信息，而不是自己主动去采集。</li>\n</ul>\n<p>下图是3种Provider的特点和区别：</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/65e4f1e6gw1f7f3p1sx4aj20kp0g5acw.jpg\" alt=\"3种Provider的特点\"></p>\n<h2 id=\"2-打开手机的设置\"><a href=\"#2-打开手机的设置\" class=\"headerlink\" title=\"2.打开手机的设置\"></a>2.打开手机的设置</h2><p>先看下原生系统中地理位置设置的界面截图：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f47p124kj20rs0m376v.jpg\" alt=\"地理位置设置截图\"></p>\n<p>以原生系统为例，需要采集地理位置时，需要：</p>\n<ul>\n<li>打开通知栏的GPS开关</li>\n<li>进入<code>设置-&gt;位置信息-&gt;模式</code>，打开开关。然后我们可以看到，这里有3类模式：<ul>\n<li>高精确度：使用GPS、WLAN、蓝牙或者移动网络确定位置</li>\n<li>节电：使用WLAN、蓝牙或者移动网络确定位置</li>\n<li>仅限设备：使用GPS确定位置</li>\n</ul>\n</li>\n</ul>\n<p><strong>PS：</strong>我发现小米手机上，即使你把通知栏里面地理位置开关关闭了，进入系统的设置界面，还是可以看到地理位置是开启的，默认选择的是<code>节电</code>模式。而原生系统你只要在通知栏关闭了开关，就无法使用定位服务了。这里感觉国内厂商在细节上可能会有一些不同的实现。</p>\n<h2 id=\"3-给你的App注册权限\"><a href=\"#3-给你的App注册权限\" class=\"headerlink\" title=\"3.给你的App注册权限\"></a>3.给你的App注册权限</h2><p>当你在代码里面使用3种不同的Provider时，应该关注到两个权限：</p>\n<ul>\n<li>LocationManager.GPS_PROVIDER：android.permission.ACCESS_FINE_LOCATION</li>\n<li>LocationManager.NETWORK_PROVIDER：android.permission.ACCESS_COARSE_LOCATION 或者 android.permission.ACCESS_FINE_LOCATION。<ul>\n<li>当声明ACCESS_FINE_LOCATION时，拿到的位置信息将更精确（几十米到几百米）</li>\n<li>当声明ACCESS_COARSE_LOCATION时，拿到的位置会粗略一点（几百米到几千米）</li>\n</ul>\n</li>\n<li>LocationManager.PASSIVE_PROVIDER：android.permission.ACCESS_COARSE_LOCATION </li>\n</ul>\n<blockquote>\n<p>注意：如果声明了ACCESS_FINE_LOCATION时，就不用再声明ACCESS_COARSE_LOCATION了，因为ACCESS_FINE_LOCATION已经包含了使用NETWORK_PROVIDER的能力。此外从Android6.0开始，ACCESS_FINE_LOCATION和ACCESS_COARSE_LOCATION已经是<strong><em>dangerous permission</em></strong>，开发者需要注意这一点，当用户在运行你的App时，如果没有授权，仍然是无法获取到地理位置信息的。</p>\n</blockquote>\n<h2 id=\"4-根据需求的场景写代码（记住要尽量省电）\"><a href=\"#4-根据需求的场景写代码（记住要尽量省电）\" class=\"headerlink\" title=\"4.根据需求的场景写代码（记住要尽量省电）\"></a>4.根据需求的场景写代码（<strong>记住要尽量省电</strong>）</h2><p><strong>一定要省电：</strong>这是一个非常重要的用户体验，我们应该对自己做的App负责。什么时候开始使用地理位置服务，什么时候停止使用，我们一定要想清楚，尽量不要一直占用着这种高耗电的资源。</p>\n<h3 id=\"4-1基本代码\"><a href=\"#4-1基本代码\" class=\"headerlink\" title=\"4.1基本代码\"></a>4.1基本代码</h3><p>下面看代码，一段基本的获取地理位置的代码是这么写的，这段代码可以让你通过异步的方式获取到用户的地理位置。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获得Location Manager的实例</span></span><br><span class=\"line\">LocationManager locationManager = (LocationManager) <span class=\"keyword\">this</span>.getSystemService(Context.LOCATION_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个监听器，实现onLocationChanged方法，在这个方法里面可以拿到更新后的地理位置</span></span><br><span class=\"line\">LocationListener locationListener = <span class=\"keyword\">new</span> LocationListener() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onLocationChanged</span><span class=\"params\">(Location location)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 新的Location值在这里返回，Location实例中包含着纬度、经度、海拔、精确度、更新时间等一系列信息。</span></span><br><span class=\"line\">      makeUseOfNewLocation(location);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStatusChanged</span><span class=\"params\">(String provider, <span class=\"keyword\">int</span> status, Bundle extras)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProviderEnabled</span><span class=\"params\">(String provider)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProviderDisabled</span><span class=\"params\">(String provider)</span> </span>&#123;&#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册监听器，当地理位置变化时，发出通知给Listener。这个方法很关键。4个参数需要了解清楚：</span></span><br><span class=\"line\"><span class=\"comment\">// 第1个参数：你所使用的provider名称，是个String</span></span><br><span class=\"line\"><span class=\"comment\">// 第2个参数minTime：地理位置更新时发出通知的最小时间间隔</span></span><br><span class=\"line\"><span class=\"comment\">// 第3个参数minDistance：地理位置更新发出通知的最小距离，第2和第3个参数的作用关系是“或”的关系，也就是满足任意一个条件都会发出通知。这里第2、3个参数都是0，意味着任何时间，只要位置有变化就会发出通知。</span></span><br><span class=\"line\"><span class=\"comment\">// 第4个参数：你的监听器</span></span><br><span class=\"line\">locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, <span class=\"number\">0</span>, <span class=\"number\">0</span>, locationListener);</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2如何优化\"><a href=\"#4-2如何优化\" class=\"headerlink\" title=\"4.2如何优化\"></a>4.2如何优化</h3><p>但是实战中一定要尽量去优化，虽然获取地理位置只能是异步的，但是仍然不建议一直不停地监听地理位置的变化。</p>\n<p>谷歌官方也给出了一个采集地理位置的思路，非常值得我们来参考。思路的基本步骤如下：</p>\n<ul>\n<li>启动应用。</li>\n<li>当用户进入到应用中需要使用地理位置场景时，选择一个合适的Provider，开始监听地理位置的变化。</li>\n<li>获取系统中缓存的上次的地理位置<code>LastKnownLocation</code>，保存到当前地理位置变量<code>currentLocation</code>中作为备选值，当拿到新的地理位置后，对比两者，选择最优的那个继续保存它。</li>\n<li>停止监听地理位置的变化。</li>\n<li>使用当前维护着的这个Location作为用户的位置。</li>\n</ul>\n<p>谷歌还给出了这个方案的一个timeline图示。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f4svf6zsj20mj064ab0.jpg\" alt=\"A timeline representing the window in which an application listens for location updates\"></p>\n<h3 id=\"4-3关键问题\"><a href=\"#4-3关键问题\" class=\"headerlink\" title=\"4.3关键问题\"></a>4.3关键问题</h3><p>我们比较关注下面4点：</p>\n<ul>\n<li>1.如何选择一个最好的provider？</li>\n<li>2.什么时候开始监听地理位置变化，什么时候结束？</li>\n<li>3.如何比较两个地理位置，决定哪个更好？</li>\n<li>4.LastknownPostion怎么获取，怎么使用？</li>\n</ul>\n<p>下面介绍我的想法：</p>\n<h4 id=\"第1点：如何选择一个最好的provider？\"><a href=\"#第1点：如何选择一个最好的provider？\" class=\"headerlink\" title=\"第1点：如何选择一个最好的provider？\"></a>第1点：如何选择一个最好的provider？</h4><p>这需要看你的需求。系统中也提供了一些方法来帮我们选择，可以设定一个条件<code>Criteria</code>，指定帅选最符合条件的地理位置提供者，根据Cirteria指定的条件，设备会自动选择哪种location provider。</p>\n<p>代码如下：</p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Criteria</span> criteria = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">Criteria</span>();<span class=\"comment\">//</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setAccuracy</span>(<span class=\"type\">Criteria</span>.<span class=\"type\">ACCURACY_FINE</span>);<span class=\"comment\">//设置定位精准度</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setAltitudeRequired</span>(false);<span class=\"comment\">//是否要求海拔</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setBearingRequired</span>(true);<span class=\"comment\">//是否要求方向</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setCostAllowed</span>(true);<span class=\"comment\">//是否要求收费</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setSpeedRequired</span>(true);<span class=\"comment\">//是否要求速度</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setPowerRequirement</span>(<span class=\"type\">Criteria</span>.<span class=\"type\">POWER_LOW</span>);<span class=\"comment\">//设置相对省电</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setBearingAccuracy</span>(<span class=\"type\">Criteria</span>.<span class=\"type\">ACCURACY_HIGH</span>);<span class=\"comment\">//设置方向精确度</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setSpeedAccuracy</span>(<span class=\"type\">Criteria</span>.<span class=\"type\">ACCURACY_HIGH</span>);<span class=\"comment\">//设置速度精确度</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setHorizontalAccuracy</span>(<span class=\"type\">Criteria</span>.<span class=\"type\">ACCURACY_HIGH</span>);<span class=\"comment\">//设置水平方向精确度</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">criteria</span>.<span class=\"title\">setVerticalAccuracy</span>(<span class=\"type\">Criteria</span>.<span class=\"type\">ACCURACY_HIGH</span>);<span class=\"comment\">//设置垂直方向精确度</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 返回满足条件的，当前设备可用的location provider</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 当第2个参数为false时，返回当前设备所有provider中最符合条件的那个（但是不一定可用）。</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 当第2个参数为true时，返回当前设备所有可用的provider中最符合条件的那个。</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">String</span> <span class=\"title\">rovider</span>  = <span class=\"title\">mLocationManager</span>.<span class=\"title\">getBestProvider</span>(criteria,true);</span></span><br></pre></td></tr></table></figure>\n<p>总之，一共就3个provider，其实对于大部分开发者，选来选去就是<code>gps</code> or <code>network</code>。</p>\n<h4 id=\"第2点，什么时候开始，什么时候结束？\"><a href=\"#第2点，什么时候开始，什么时候结束？\" class=\"headerlink\" title=\"第2点，什么时候开始，什么时候结束？\"></a>第2点，什么时候开始，什么时候结束？</h4><p>我认为最好开启了监听器后，要尽可能早地结束它。也就是不要调用了<code>requestLocationUpdates(provider, minTime, minDistance, listener)</code>让位置服务开始工作后，很长时间都不去<code>removeUpdates(listener)</code>来停止服务。</p>\n<p>虽然在<code>requestLocationUpdates</code>方法中，有<strong>minTime</strong>、<strong>minDistance</strong>参数可以设置。比如设置了60000ms的minTime，希望采更新完一次地理位置后休息60s。或者设置2000米的minDistance，希望位置变化不超过2公里，也休息。这样做<strong>看起来好像</strong>是可以省电。</p>\n<p>但是实测中发现，如果调用<code>requestLocationUpdates(LocationManager.GPS_PROVIDER, 60000, 2000, listener)</code>注册监听器后，系统的状态栏上面的GPS那个小图标一直在显示。只要你不<code>removeUpdates(listener)</code>，他就一直在工作。其实我理解，即使你设置了minTime和minDistance，位置服务还是一直处于工作状态的，不然它怎么知道位置变化超过了你设定的minDistance呢？</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f94tb263j20eu022t8r.jpg\" alt=\"系统栏中的GPS图标\"></p>\n<p>所以我的建议是，当你调用<strong>requestLocationUpdates</strong>后，还应该是设置一个定时器，比如30s。当30s时间到了之后，就<strong>removeUpdate</strong>，不再监听地理位置了，转而使用备选的LastKnownLocation。当下次需要使用地理位置时，再重新注册监听器，监听30s，然后就移除监听器。如果对实时性要求高，我们可以在用户进入App中某个需要定位服务的场景之前，采用这个方法获取一次地理位置，把它保存下来。</p>\n<h4 id=\"第3点，如何比较两个Location，选出更好的那个？\"><a href=\"#第3点，如何比较两个Location，选出更好的那个？\" class=\"headerlink\" title=\"第3点，如何比较两个Location，选出更好的那个？\"></a>第3点，如何比较两个Location，选出更好的那个？</h4><p>谷歌也给出了代码示例，先看一下。</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TWO_MINUTES = <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Determines whether one Location reading is better than the current Location fix</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> location  The new Location that you want to evaluate</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> currentBestLocation  The current Location fix, to which you want to compare the new one</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> isBetterLocation(Location location, Location currentBestLocation) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentBestLocation == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A new location is always better than no location</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check whether the new location fix is newer or older</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> timeDelta = location.getTime() - currentBestLocation.getTime();</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isSignificantlyNewer = timeDelta &gt; TWO_MINUTES;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isSignificantlyOlder = timeDelta &lt; -TWO_MINUTES;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isNewer = timeDelta &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If it's been more than two minutes since the current location, use the new location</span></span><br><span class=\"line\">    <span class=\"comment\">// because the user has likely moved</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSignificantlyNewer) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If the new location is more than two minutes older, it must be worse</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isSignificantlyOlder) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check whether the new location fix is more or less accurate</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> accuracyDelta = (<span class=\"keyword\">int</span>) (location.getAccuracy() - currentBestLocation.getAccuracy());</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isLessAccurate = accuracyDelta &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isMoreAccurate = accuracyDelta &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isSignificantlyLessAccurate = accuracyDelta &gt; <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if the old and new location are from the same provider</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isFromSameProvider = isSameProvider(location.getProvider(),</span><br><span class=\"line\">            currentBestLocation.getProvider());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Determine location quality using a combination of timeliness and accuracy</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isMoreAccurate) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isNewer &amp;&amp; !isLessAccurate) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isNewer &amp;&amp; !isSignificantlyLessAccurate &amp;&amp; isFromSameProvider) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Checks whether two providers are the same */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isSameProvider(String provider1, String provider2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (provider1 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> provider2 == <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> provider1.equals(provider2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的策略是：</p>\n<ul>\n<li><p>1.先看更新时间：设定一个时间范围，2分钟。</p>\n<ul>\n<li>如果新的Location比旧的Location获取时间更新，且超过2分钟，那么认为新的Location更好。</li>\n<li>如果新的Location比旧的Location获取时间更老，且超过2分钟，那么认为新的Location不够好。</li>\n<li>如果新的Location比旧的Location获取时间更新，但没有超过2分钟，那么看下它们的精确度。</li>\n</ul>\n</li>\n<li><p>2.再看精确度：设定一个精确度范围，200米。</p>\n<ul>\n<li>如果新的Location比旧的Location精确度更高，那么认为新的Location更好。</li>\n<li>如果新的Location和旧的Location精确度相等，且获取时间更新，那么认为新的Location更好。</li>\n<li>如果新的Location比旧的Location精确度低200m以内，且获取时间更新，来自同一个provider，那么为认为新的Location更好。</li>\n<li>其他情况都认为旧的Location更好。</li>\n</ul>\n</li>\n</ul>\n<p>这段代码是一个参考，我们实际开发中可以更具需要去定义自己的<strong>Better Location</strong>策略。</p>\n<p>另外，从API&gt;=17开始，Location类还增加了一个<code>getElapsedRealtimeNanos</code>方法（获取从系统启动后走过的时间），这是为了解决<code>getTime</code>方法（获取UTC时间）不够精确，容易产生误差的问题。这个方法在比较两个Location时将更加可靠。</p>\n<h4 id=\"第4点，怎么获取LastknownPostion，怎么使用？\"><a href=\"#第4点，怎么获取LastknownPostion，怎么使用？\" class=\"headerlink\" title=\"第4点，怎么获取LastknownPostion，怎么使用？\"></a>第4点，怎么获取LastknownPostion，怎么使用？</h4><p>相信有了第3点，应该知道怎么选择<strong>Better Location</strong>。至于获取LastKnownLocation直接看代码。</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Location <span class=\"attr\">gpsLocation</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">Location <span class=\"attr\">networkLocation</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (context.checkCallingOrSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">    <span class=\"attr\">gpsLocation</span> = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (context.checkCallingOrSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">    <span class=\"attr\">networkLocation</span> = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 下面可以比较一下哪个更好...</span><br><span class=\"line\">Location <span class=\"attr\">currentLocation</span> = gpsLocation;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isBetterLocation(currentLocation, networkLocation))&#123;</span><br><span class=\"line\">    <span class=\"attr\">currentLocation</span> = networkLocation;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h1><p>说了一大堆，我觉得平时开发的时候应该这么做：</p>\n<ul>\n<li>1.确定自己的应用什么时候要开始监听地理位置变化，什么时候停止。</li>\n<li>2.选择一个合适的provider，开始监听它提供的地理位置变化。</li>\n<li>3.读取系统中GPS和NETWORK这两个Provide缓存的<strong>LastKnownPostion</strong>，选出Better Location保存到currentBestLocation变量中。</li>\n<li>4.监听到地理位置更新后，把更新到的Location和保存的currentBestLocation比较，得出Better One，再保存到currentBestLocation变量中。</li>\n<li>5.使用currentBestLocation作为用户的位置，并在合适时机移除监听器。</li>\n</ul>"},{"layout":"post","title":"Android混合开发之——WebView中使用原生组件替换标签元素","date":"2017-10-15T00:00:00.000Z","_content":"\n# 一、背景\n\n在Android混合开发中，常常会把界面渲染全部交给html，而后台数据相关的处理交给Native。然而在有些时候html无法完全满足我们在界面处理上的要求，比如像要有一个自己定制的软键盘或者在html里面播放视频，或者想要把html里面的图片替换成Native中统一封装的ImageView等等。这不，跟WebView打交道这么多年，我最近还真遇到这样的需要了，希望把html中展示的一个大图换成Native实现的播放器，这个播放器是自己封装过的，播放控制的界面和交互也全部都由Native实现。拍脑袋一想，这有点困难啊？html里面的标签怎么替换成Native组件呢？这不可能啊？难道要实现一套把html全部转成Native的框架？这岂不是得自己做一套ReactNative？\n\n<!-- more -->\n\n你别说我还真在万能的Github上找到一个叫[HtmlNative](https://github.com/hsllany/HtmlNative)的库，这货就真的实现了把一部分css+html转成Native，看了下它的demo，效果其实不错。但是对于我来讲还有点偏重了，因为如果一旦我们开始转换css，那么到底对css支持到一个什么样的程度呢？这种无法走到尽头的大难路，我不想走。于是我又开始看微信小程序，发现小程序大部分的组件还是WebView渲染的dom，只有几个组件入输入框，视频播放器是原生的，并且我很惊讶地发现它就是把原生组件“嵌入”到了WebView中！！！看到这里我觉得如果是把html里面的某些指定的元素替换成Native组件，是可行的，这时我开始想办法了。从界面绘制的角度，界面由一个个的View组成，每个View都应该由坐标和尺寸来描述，从而可以被摆放到正确的位置上。举个最简单的例子，我们知道ViewGroup里面的onLayout方法，当我们实现一个ViewGroup的时候，需要在onLayout方法中调用每一个子View的layout方法，并给这个方法传入left、top、right、bottom参数，这几个参数表示这个View距离父控件的左、上、右、下距离。**如果我可以把html中需要替换的元素，相对WebView控件的left、top、right、bottom参数获取，并通过js传给Native，Native再把一个原生组件盖在WebView的位置上，是不是就可以实现“原声组件嵌入WebView里？”**\n\n# 二、思路\n\n这里我们就以一个简单场景来做示例，比如有一个组件是包装WebView实现的，转门用于加载html格式的广告。现在需要把这个WebView里面**img标签变成一个ImageView**，思路如下：\n\n- 1.把WebView放到一个FrameLayout里面，使用WebView加载这个html，让其中的元素都被加载、渲染完成，这时img标签的位置和尺寸才可以确定。\n- 2.自定义WebViewClient，监听onPageFinished回调，当回调发生时，执行一段js，去获取指定的img标签的left、top、width、height属性，然后传给Native\n- 3.Native接收到之后，把ImageView添加到第一步中的FrameLayout里面。\n\n# 三、具体实现方案\n\n## 1.准备html\n\nhtml中一定要能清楚的获取到需要替换的img标签，例如我们可以给这个img标签加上特定的id，如下所示：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<title>test</title>\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>\n<style type=\"text/css\">\n.container{ margin:0 auto; width:300px; overflow:hidden} \n.container img{ float:left; width:100px; height:100px} \n.container .right{ float:right; width:180px; text-align:left} \n.container .right h3{ height:20px; line-height:20px; font-family:\"Microsoft YaHei\"; font-size:16px; overflow:hidden;} \n.container .right div{ padding-top:0px; height:50px; overflow:hidden}\n</style>\n</head>\n<body>\n<div class=\"container\"> \n    <img id=\"imageHolder\" src=\"./img.jpeg\"/> \n    <div class=\"right\">\n        <h3>我是一个标题好吗</h3> \n        <div>无论事态变迁，你总有一颗人仰马翻的少年心</div> \n    </div> \n</div>\n\n</body>\n</html>\n\n```\n\n这段html里面的有两个需要注意的地方：\n\n- 需要替换的html标签img，我们给它加上了一个id叫“imageHolder”，后面我们需要通过js获取这个标签。\n- viewport里面把device-width设为设备的宽度，这样我们获取到的图片位置和宽高都是dp为单位。\n\n# 2.准备好获取img标签left、top、width、height属性的js方法，提供给Native调用\n\n```\n<script type=\"text/javascript\">\nvar jsFun = {\n  // 测量图片的大小和位置\n  measureImagePlaceHolder: function () {\n    var img = document.getElementById(\"imageHolder\");\n    var left = img.getBoundingClientRect().left + img.scrollLeft;\n    var top = img.getBoundingClientRect().top + img.scrollTop;\n    var width = img.getBoundingClientRect().right - left;\n    var height = img.getBoundingClientRect().bottom - top;\n    JavaFun.replaceImgWithImageView(left, top, width, height);\n  }\n}\n</script>\n```\n\n这段代码的功能就是获取img标签在网页中的绝对位置和大小，我是从阮一峰老师的[博客](http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html)学到的，把这段js加入到html的body最后即可。\n\n这时其实已经可以用chrome打开这个页面，进入inspect界面，手动调用一下`measureImagePlaceHolder`方法已经可以看到效果了，如下图所示。\n\n![chrome查看js](https://ws4.sinaimg.cn/large/006tKfTcly1fkjcqk16dgj30rs082774.jpg)\n\n# 3.在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。\n\n```\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        rootView = (FrameLayout) findViewById(R.id.root_view);\n        initView();\n        initWebView();\n    }\n\n    private void initWebView() {\n        webView.getSettings().setJavaScriptEnabled(true);\n        webView.setWebViewClient(new WebViewClient() {\n            @Override\n            public void onPageFinished(WebView view, String url) {\n                super.onPageFinished(view, url);\n                view.loadUrl(\"javascriprt:jsFun.measureImagePlaceHolder();\");\n            }\n        });\n    }\n\n    private void initView() {\n        webView = new WebView(this);\n        imageView = new ImageView(this);\n        FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n        rootView.addView(webView, layoutParams);\n    }\n\n```\n\n# 4.Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法\n\n```\n    class JavaFun {\n        @JavascriptInterface\n        public void replaceImgWithImageView(int left, int top, int width, int height) {\n            final Context context = MainActivity.this.getApplicationContext();\n            if (imageView == null) {\n                imageView = new ImageView(MainActivity.this);\n            }\n            final FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(dp2px(context, width), dp2px(context, height));\n            params.leftMargin = dp2px(context, left);\n            params.topMargin = dp2px(context, top);\n            new Handler(Looper.getMainLooper()).post(new Runnable() {\n                @Override\n                public void run() {\n                    rootView.addView(imageView, params);\n                    imageView.setBackgroundColor(Color.WHITE);\n                    imageView.setImageDrawable(context.getResources().getDrawable(R.drawable.shepherd));\n                }\n            });\n        }\n    }\n\n    // 此后还需要在initWebView方法添加一行。把一个名为JavaFun的对象注入js：webView.addJavascriptInterface(new JavaFun(), \"JavaFun\");\n    // 然后在js的measureImagePlaceHolder方法后面添加一行调用Java的代码：JavaFun.replaceImgWithImageView(left, top, width, height);\n```\n\n关于Java和JS通信的方法，这里不做介绍，感兴趣的同学可以看看前面写过的博客。\n\n我们看下两种模式下的效果，左边是html的img标签渲染图片的效果，右边是ImageView渲染图片的效果，为了明显对比，我用了两张不同的图片，打开了开发者模式的布局边界：\n\n![two mode](https://ws2.sinaimg.cn/large/006tKfTcly1fkjcpehayoj30xc08kk08.jpg)\n\n怎么样，是不是还可以用来其他的Native组件来替换html标签啊？哈哈，我要用我们的视频组件去替换喽。上面这个小例子的代码在[这里](https://github.com/unclechen/ReplaceElementInHtml)，仅供大家参考，更复杂的例子还需要具体情况具体分析了。\n\n# 四、总结\n\n在界面开发的时候，不论是Android、iOS还是html，其实我们都是在处理布局，也就是说撇开各个平台上它们自己定义的一套标准，大部分时候，我们编写界面就是在处理界面上每一个元素在这个界面的位置和这个元素自身的大小。ReactNative类的框架干得事情就是帮开发者把html里面那套布局转换到Android和iOS各自的平台，站在现在看，可能会有人会争论html什么时候统一天下。但也许将来会出现一个新标准，在各个平台上都可以执行，而不是现阶段的哪个平台去取代哪个平台这么简单。前段时间看到过一个叫[Flutter](https://flutter.io/)的东西，好像就有点这个方向的意思，感兴趣的同学可以看看去。\n\n","source":"_posts/Android混合开发之WebView中使用原生组件替换标签元素.md","raw":"---\nlayout: post\ntitle: Android混合开发之——WebView中使用原生组件替换标签元素\ndate: '2017-10-15'\ntags:\n  - Android\n  - WebView\ncategories: \n  - 技术\n---\n\n# 一、背景\n\n在Android混合开发中，常常会把界面渲染全部交给html，而后台数据相关的处理交给Native。然而在有些时候html无法完全满足我们在界面处理上的要求，比如像要有一个自己定制的软键盘或者在html里面播放视频，或者想要把html里面的图片替换成Native中统一封装的ImageView等等。这不，跟WebView打交道这么多年，我最近还真遇到这样的需要了，希望把html中展示的一个大图换成Native实现的播放器，这个播放器是自己封装过的，播放控制的界面和交互也全部都由Native实现。拍脑袋一想，这有点困难啊？html里面的标签怎么替换成Native组件呢？这不可能啊？难道要实现一套把html全部转成Native的框架？这岂不是得自己做一套ReactNative？\n\n<!-- more -->\n\n你别说我还真在万能的Github上找到一个叫[HtmlNative](https://github.com/hsllany/HtmlNative)的库，这货就真的实现了把一部分css+html转成Native，看了下它的demo，效果其实不错。但是对于我来讲还有点偏重了，因为如果一旦我们开始转换css，那么到底对css支持到一个什么样的程度呢？这种无法走到尽头的大难路，我不想走。于是我又开始看微信小程序，发现小程序大部分的组件还是WebView渲染的dom，只有几个组件入输入框，视频播放器是原生的，并且我很惊讶地发现它就是把原生组件“嵌入”到了WebView中！！！看到这里我觉得如果是把html里面的某些指定的元素替换成Native组件，是可行的，这时我开始想办法了。从界面绘制的角度，界面由一个个的View组成，每个View都应该由坐标和尺寸来描述，从而可以被摆放到正确的位置上。举个最简单的例子，我们知道ViewGroup里面的onLayout方法，当我们实现一个ViewGroup的时候，需要在onLayout方法中调用每一个子View的layout方法，并给这个方法传入left、top、right、bottom参数，这几个参数表示这个View距离父控件的左、上、右、下距离。**如果我可以把html中需要替换的元素，相对WebView控件的left、top、right、bottom参数获取，并通过js传给Native，Native再把一个原生组件盖在WebView的位置上，是不是就可以实现“原声组件嵌入WebView里？”**\n\n# 二、思路\n\n这里我们就以一个简单场景来做示例，比如有一个组件是包装WebView实现的，转门用于加载html格式的广告。现在需要把这个WebView里面**img标签变成一个ImageView**，思路如下：\n\n- 1.把WebView放到一个FrameLayout里面，使用WebView加载这个html，让其中的元素都被加载、渲染完成，这时img标签的位置和尺寸才可以确定。\n- 2.自定义WebViewClient，监听onPageFinished回调，当回调发生时，执行一段js，去获取指定的img标签的left、top、width、height属性，然后传给Native\n- 3.Native接收到之后，把ImageView添加到第一步中的FrameLayout里面。\n\n# 三、具体实现方案\n\n## 1.准备html\n\nhtml中一定要能清楚的获取到需要替换的img标签，例如我们可以给这个img标签加上特定的id，如下所示：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<title>test</title>\n<meta http-equiv=\"content-Type\" content=\"text/html;charset=utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\"/>\n<style type=\"text/css\">\n.container{ margin:0 auto; width:300px; overflow:hidden} \n.container img{ float:left; width:100px; height:100px} \n.container .right{ float:right; width:180px; text-align:left} \n.container .right h3{ height:20px; line-height:20px; font-family:\"Microsoft YaHei\"; font-size:16px; overflow:hidden;} \n.container .right div{ padding-top:0px; height:50px; overflow:hidden}\n</style>\n</head>\n<body>\n<div class=\"container\"> \n    <img id=\"imageHolder\" src=\"./img.jpeg\"/> \n    <div class=\"right\">\n        <h3>我是一个标题好吗</h3> \n        <div>无论事态变迁，你总有一颗人仰马翻的少年心</div> \n    </div> \n</div>\n\n</body>\n</html>\n\n```\n\n这段html里面的有两个需要注意的地方：\n\n- 需要替换的html标签img，我们给它加上了一个id叫“imageHolder”，后面我们需要通过js获取这个标签。\n- viewport里面把device-width设为设备的宽度，这样我们获取到的图片位置和宽高都是dp为单位。\n\n# 2.准备好获取img标签left、top、width、height属性的js方法，提供给Native调用\n\n```\n<script type=\"text/javascript\">\nvar jsFun = {\n  // 测量图片的大小和位置\n  measureImagePlaceHolder: function () {\n    var img = document.getElementById(\"imageHolder\");\n    var left = img.getBoundingClientRect().left + img.scrollLeft;\n    var top = img.getBoundingClientRect().top + img.scrollTop;\n    var width = img.getBoundingClientRect().right - left;\n    var height = img.getBoundingClientRect().bottom - top;\n    JavaFun.replaceImgWithImageView(left, top, width, height);\n  }\n}\n</script>\n```\n\n这段代码的功能就是获取img标签在网页中的绝对位置和大小，我是从阮一峰老师的[博客](http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html)学到的，把这段js加入到html的body最后即可。\n\n这时其实已经可以用chrome打开这个页面，进入inspect界面，手动调用一下`measureImagePlaceHolder`方法已经可以看到效果了，如下图所示。\n\n![chrome查看js](https://ws4.sinaimg.cn/large/006tKfTcly1fkjcqk16dgj30rs082774.jpg)\n\n# 3.在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。\n\n```\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        rootView = (FrameLayout) findViewById(R.id.root_view);\n        initView();\n        initWebView();\n    }\n\n    private void initWebView() {\n        webView.getSettings().setJavaScriptEnabled(true);\n        webView.setWebViewClient(new WebViewClient() {\n            @Override\n            public void onPageFinished(WebView view, String url) {\n                super.onPageFinished(view, url);\n                view.loadUrl(\"javascriprt:jsFun.measureImagePlaceHolder();\");\n            }\n        });\n    }\n\n    private void initView() {\n        webView = new WebView(this);\n        imageView = new ImageView(this);\n        FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n        rootView.addView(webView, layoutParams);\n    }\n\n```\n\n# 4.Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法\n\n```\n    class JavaFun {\n        @JavascriptInterface\n        public void replaceImgWithImageView(int left, int top, int width, int height) {\n            final Context context = MainActivity.this.getApplicationContext();\n            if (imageView == null) {\n                imageView = new ImageView(MainActivity.this);\n            }\n            final FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(dp2px(context, width), dp2px(context, height));\n            params.leftMargin = dp2px(context, left);\n            params.topMargin = dp2px(context, top);\n            new Handler(Looper.getMainLooper()).post(new Runnable() {\n                @Override\n                public void run() {\n                    rootView.addView(imageView, params);\n                    imageView.setBackgroundColor(Color.WHITE);\n                    imageView.setImageDrawable(context.getResources().getDrawable(R.drawable.shepherd));\n                }\n            });\n        }\n    }\n\n    // 此后还需要在initWebView方法添加一行。把一个名为JavaFun的对象注入js：webView.addJavascriptInterface(new JavaFun(), \"JavaFun\");\n    // 然后在js的measureImagePlaceHolder方法后面添加一行调用Java的代码：JavaFun.replaceImgWithImageView(left, top, width, height);\n```\n\n关于Java和JS通信的方法，这里不做介绍，感兴趣的同学可以看看前面写过的博客。\n\n我们看下两种模式下的效果，左边是html的img标签渲染图片的效果，右边是ImageView渲染图片的效果，为了明显对比，我用了两张不同的图片，打开了开发者模式的布局边界：\n\n![two mode](https://ws2.sinaimg.cn/large/006tKfTcly1fkjcpehayoj30xc08kk08.jpg)\n\n怎么样，是不是还可以用来其他的Native组件来替换html标签啊？哈哈，我要用我们的视频组件去替换喽。上面这个小例子的代码在[这里](https://github.com/unclechen/ReplaceElementInHtml)，仅供大家参考，更复杂的例子还需要具体情况具体分析了。\n\n# 四、总结\n\n在界面开发的时候，不论是Android、iOS还是html，其实我们都是在处理布局，也就是说撇开各个平台上它们自己定义的一套标准，大部分时候，我们编写界面就是在处理界面上每一个元素在这个界面的位置和这个元素自身的大小。ReactNative类的框架干得事情就是帮开发者把html里面那套布局转换到Android和iOS各自的平台，站在现在看，可能会有人会争论html什么时候统一天下。但也许将来会出现一个新标准，在各个平台上都可以执行，而不是现阶段的哪个平台去取代哪个平台这么简单。前段时间看到过一个叫[Flutter](https://flutter.io/)的东西，好像就有点这个方向的意思，感兴趣的同学可以看看去。\n\n","slug":"Android混合开发之WebView中使用原生组件替换标签元素","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8e5000smtsxh47ekpez","content":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>在Android混合开发中，常常会把界面渲染全部交给html，而后台数据相关的处理交给Native。然而在有些时候html无法完全满足我们在界面处理上的要求，比如像要有一个自己定制的软键盘或者在html里面播放视频，或者想要把html里面的图片替换成Native中统一封装的ImageView等等。这不，跟WebView打交道这么多年，我最近还真遇到这样的需要了，希望把html中展示的一个大图换成Native实现的播放器，这个播放器是自己封装过的，播放控制的界面和交互也全部都由Native实现。拍脑袋一想，这有点困难啊？html里面的标签怎么替换成Native组件呢？这不可能啊？难道要实现一套把html全部转成Native的框架？这岂不是得自己做一套ReactNative？</p>\n<a id=\"more\"></a>\n<p>你别说我还真在万能的Github上找到一个叫<a href=\"https://github.com/hsllany/HtmlNative\" target=\"_blank\" rel=\"noopener\">HtmlNative</a>的库，这货就真的实现了把一部分css+html转成Native，看了下它的demo，效果其实不错。但是对于我来讲还有点偏重了，因为如果一旦我们开始转换css，那么到底对css支持到一个什么样的程度呢？这种无法走到尽头的大难路，我不想走。于是我又开始看微信小程序，发现小程序大部分的组件还是WebView渲染的dom，只有几个组件入输入框，视频播放器是原生的，并且我很惊讶地发现它就是把原生组件“嵌入”到了WebView中！！！看到这里我觉得如果是把html里面的某些指定的元素替换成Native组件，是可行的，这时我开始想办法了。从界面绘制的角度，界面由一个个的View组成，每个View都应该由坐标和尺寸来描述，从而可以被摆放到正确的位置上。举个最简单的例子，我们知道ViewGroup里面的onLayout方法，当我们实现一个ViewGroup的时候，需要在onLayout方法中调用每一个子View的layout方法，并给这个方法传入left、top、right、bottom参数，这几个参数表示这个View距离父控件的左、上、右、下距离。<strong>如果我可以把html中需要替换的元素，相对WebView控件的left、top、right、bottom参数获取，并通过js传给Native，Native再把一个原生组件盖在WebView的位置上，是不是就可以实现“原声组件嵌入WebView里？”</strong></p>\n<h1 id=\"二、思路\"><a href=\"#二、思路\" class=\"headerlink\" title=\"二、思路\"></a>二、思路</h1><p>这里我们就以一个简单场景来做示例，比如有一个组件是包装WebView实现的，转门用于加载html格式的广告。现在需要把这个WebView里面<strong>img标签变成一个ImageView</strong>，思路如下：</p>\n<ul>\n<li>1.把WebView放到一个FrameLayout里面，使用WebView加载这个html，让其中的元素都被加载、渲染完成，这时img标签的位置和尺寸才可以确定。</li>\n<li>2.自定义WebViewClient，监听onPageFinished回调，当回调发生时，执行一段js，去获取指定的img标签的left、top、width、height属性，然后传给Native</li>\n<li>3.Native接收到之后，把ImageView添加到第一步中的FrameLayout里面。</li>\n</ul>\n<h1 id=\"三、具体实现方案\"><a href=\"#三、具体实现方案\" class=\"headerlink\" title=\"三、具体实现方案\"></a>三、具体实现方案</h1><h2 id=\"1-准备html\"><a href=\"#1-准备html\" class=\"headerlink\" title=\"1.准备html\"></a>1.准备html</h2><p>html中一定要能清楚的获取到需要替换的img标签，例如我们可以给这个img标签加上特定的id，如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span>&#123; <span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto; <span class=\"attribute\">width</span>:<span class=\"number\">300px</span>; <span class=\"attribute\">overflow</span>:hidden&#125; </span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">img</span>&#123; <span class=\"attribute\">float</span>:left; <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>&#125; </span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.right</span>&#123; <span class=\"attribute\">float</span>:right; <span class=\"attribute\">width</span>:<span class=\"number\">180px</span>; <span class=\"attribute\">text-align</span>:left&#125; </span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.right</span> <span class=\"selector-tag\">h3</span>&#123; <span class=\"attribute\">height</span>:<span class=\"number\">20px</span>; <span class=\"attribute\">line-height</span>:<span class=\"number\">20px</span>; <span class=\"attribute\">font-family</span>:<span class=\"string\">\"Microsoft YaHei\"</span>; <span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>; <span class=\"attribute\">overflow</span>:hidden;&#125; </span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.right</span> <span class=\"selector-tag\">div</span>&#123; <span class=\"attribute\">padding-top</span>:<span class=\"number\">0px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>; <span class=\"attribute\">overflow</span>:hidden&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"imageHolder\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img.jpeg\"</span>/&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>我是一个标题好吗<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>无论事态变迁，你总有一颗人仰马翻的少年心<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这段html里面的有两个需要注意的地方：</p>\n<ul>\n<li>需要替换的html标签img，我们给它加上了一个id叫“imageHolder”，后面我们需要通过js获取这个标签。</li>\n<li>viewport里面把device-width设为设备的宽度，这样我们获取到的图片位置和宽高都是dp为单位。</li>\n</ul>\n<h1 id=\"2-准备好获取img标签left、top、width、height属性的js方法，提供给Native调用\"><a href=\"#2-准备好获取img标签left、top、width、height属性的js方法，提供给Native调用\" class=\"headerlink\" title=\"2.准备好获取img标签left、top、width、height属性的js方法，提供给Native调用\"></a>2.准备好获取img标签left、top、width、height属性的js方法，提供给Native调用</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> jsFun = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 测量图片的大小和位置</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  measureImagePlaceHolder: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"imageHolder\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> left = img.getBoundingClientRect().left + img.scrollLeft;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> top = img.getBoundingClientRect().top + img.scrollTop;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> width = img.getBoundingClientRect().right - left;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> height = img.getBoundingClientRect().bottom - top;</span></span><br><span class=\"line\"><span class=\"undefined\">    JavaFun.replaceImgWithImageView(left, top, width, height);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这段代码的功能就是获取img标签在网页中的绝对位置和大小，我是从阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html\" target=\"_blank\" rel=\"noopener\">博客</a>学到的，把这段js加入到html的body最后即可。</p>\n<p>这时其实已经可以用chrome打开这个页面，进入inspect界面，手动调用一下<code>measureImagePlaceHolder</code>方法已经可以看到效果了，如下图所示。</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tKfTcly1fkjcqk16dgj30rs082774.jpg\" alt=\"chrome查看js\"></p>\n<h1 id=\"3-在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。\"><a href=\"#3-在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。\" class=\"headerlink\" title=\"3.在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。\"></a>3.在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。</h1><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    rootView = (FrameLayout) findViewById(R.id.root_view);</span><br><span class=\"line\">    initView();</span><br><span class=\"line\">    initWebView();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initWebView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    webView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPageFinished(view, url);</span><br><span class=\"line\">            view.loadUrl(<span class=\"string\">\"javascriprt:jsFun.measureImagePlaceHolder();\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    webView = <span class=\"keyword\">new</span> WebView(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    imageView = <span class=\"keyword\">new</span> ImageView(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    FrameLayout.LayoutParams layoutParams = <span class=\"keyword\">new</span> FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class=\"line\">    rootView.addView(webView, layoutParams);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法\"><a href=\"#4-Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法\" class=\"headerlink\" title=\"4.Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法\"></a>4.Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法</h1><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">JavaFun</span> &#123;</span><br><span class=\"line\">    @JavascriptInterface</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">replaceImgWithImageView</span>(<span class=\"params\"><span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height</span>) </span>&#123;</span><br><span class=\"line\">        final Context context = MainActivity.<span class=\"keyword\">this</span>.getApplicationContext();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (imageView == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            imageView = <span class=\"keyword\">new</span> ImageView(MainActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        final FrameLayout.LayoutParams <span class=\"keyword\">params</span> = <span class=\"keyword\">new</span> FrameLayout.LayoutParams(dp2px(context, width), dp2px(context, height));</span><br><span class=\"line\">        <span class=\"keyword\">params</span>.leftMargin = dp2px(context, left);</span><br><span class=\"line\">        <span class=\"keyword\">params</span>.topMargin = dp2px(context, top);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Handler(Looper.getMainLooper()).post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                rootView.addView(imageView, <span class=\"keyword\">params</span>);</span><br><span class=\"line\">                imageView.setBackgroundColor(Color.WHITE);</span><br><span class=\"line\">                imageView.setImageDrawable(context.getResources().getDrawable(R.drawable.shepherd));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此后还需要在initWebView方法添加一行。把一个名为JavaFun的对象注入js：webView.addJavascriptInterface(new JavaFun(), \"JavaFun\");</span></span><br><span class=\"line\"><span class=\"comment\">// 然后在js的measureImagePlaceHolder方法后面添加一行调用Java的代码：JavaFun.replaceImgWithImageView(left, top, width, height);</span></span><br></pre></td></tr></table></figure>\n<p>关于Java和JS通信的方法，这里不做介绍，感兴趣的同学可以看看前面写过的博客。</p>\n<p>我们看下两种模式下的效果，左边是html的img标签渲染图片的效果，右边是ImageView渲染图片的效果，为了明显对比，我用了两张不同的图片，打开了开发者模式的布局边界：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tKfTcly1fkjcpehayoj30xc08kk08.jpg\" alt=\"two mode\"></p>\n<p>怎么样，是不是还可以用来其他的Native组件来替换html标签啊？哈哈，我要用我们的视频组件去替换喽。上面这个小例子的代码在<a href=\"https://github.com/unclechen/ReplaceElementInHtml\" target=\"_blank\" rel=\"noopener\">这里</a>，仅供大家参考，更复杂的例子还需要具体情况具体分析了。</p>\n<h1 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h1><p>在界面开发的时候，不论是Android、iOS还是html，其实我们都是在处理布局，也就是说撇开各个平台上它们自己定义的一套标准，大部分时候，我们编写界面就是在处理界面上每一个元素在这个界面的位置和这个元素自身的大小。ReactNative类的框架干得事情就是帮开发者把html里面那套布局转换到Android和iOS各自的平台，站在现在看，可能会有人会争论html什么时候统一天下。但也许将来会出现一个新标准，在各个平台上都可以执行，而不是现阶段的哪个平台去取代哪个平台这么简单。前段时间看到过一个叫<a href=\"https://flutter.io/\" target=\"_blank\" rel=\"noopener\">Flutter</a>的东西，好像就有点这个方向的意思，感兴趣的同学可以看看去。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>在Android混合开发中，常常会把界面渲染全部交给html，而后台数据相关的处理交给Native。然而在有些时候html无法完全满足我们在界面处理上的要求，比如像要有一个自己定制的软键盘或者在html里面播放视频，或者想要把html里面的图片替换成Native中统一封装的ImageView等等。这不，跟WebView打交道这么多年，我最近还真遇到这样的需要了，希望把html中展示的一个大图换成Native实现的播放器，这个播放器是自己封装过的，播放控制的界面和交互也全部都由Native实现。拍脑袋一想，这有点困难啊？html里面的标签怎么替换成Native组件呢？这不可能啊？难道要实现一套把html全部转成Native的框架？这岂不是得自己做一套ReactNative？</p>","more":"<p>你别说我还真在万能的Github上找到一个叫<a href=\"https://github.com/hsllany/HtmlNative\" target=\"_blank\" rel=\"noopener\">HtmlNative</a>的库，这货就真的实现了把一部分css+html转成Native，看了下它的demo，效果其实不错。但是对于我来讲还有点偏重了，因为如果一旦我们开始转换css，那么到底对css支持到一个什么样的程度呢？这种无法走到尽头的大难路，我不想走。于是我又开始看微信小程序，发现小程序大部分的组件还是WebView渲染的dom，只有几个组件入输入框，视频播放器是原生的，并且我很惊讶地发现它就是把原生组件“嵌入”到了WebView中！！！看到这里我觉得如果是把html里面的某些指定的元素替换成Native组件，是可行的，这时我开始想办法了。从界面绘制的角度，界面由一个个的View组成，每个View都应该由坐标和尺寸来描述，从而可以被摆放到正确的位置上。举个最简单的例子，我们知道ViewGroup里面的onLayout方法，当我们实现一个ViewGroup的时候，需要在onLayout方法中调用每一个子View的layout方法，并给这个方法传入left、top、right、bottom参数，这几个参数表示这个View距离父控件的左、上、右、下距离。<strong>如果我可以把html中需要替换的元素，相对WebView控件的left、top、right、bottom参数获取，并通过js传给Native，Native再把一个原生组件盖在WebView的位置上，是不是就可以实现“原声组件嵌入WebView里？”</strong></p>\n<h1 id=\"二、思路\"><a href=\"#二、思路\" class=\"headerlink\" title=\"二、思路\"></a>二、思路</h1><p>这里我们就以一个简单场景来做示例，比如有一个组件是包装WebView实现的，转门用于加载html格式的广告。现在需要把这个WebView里面<strong>img标签变成一个ImageView</strong>，思路如下：</p>\n<ul>\n<li>1.把WebView放到一个FrameLayout里面，使用WebView加载这个html，让其中的元素都被加载、渲染完成，这时img标签的位置和尺寸才可以确定。</li>\n<li>2.自定义WebViewClient，监听onPageFinished回调，当回调发生时，执行一段js，去获取指定的img标签的left、top、width、height属性，然后传给Native</li>\n<li>3.Native接收到之后，把ImageView添加到第一步中的FrameLayout里面。</li>\n</ul>\n<h1 id=\"三、具体实现方案\"><a href=\"#三、具体实现方案\" class=\"headerlink\" title=\"三、具体实现方案\"></a>三、具体实现方案</h1><h2 id=\"1-准备html\"><a href=\"#1-准备html\" class=\"headerlink\" title=\"1.准备html\"></a>1.准备html</h2><p>html中一定要能清楚的获取到需要替换的img标签，例如我们可以给这个img标签加上特定的id，如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span>&#123; <span class=\"attribute\">margin</span>:<span class=\"number\">0</span> auto; <span class=\"attribute\">width</span>:<span class=\"number\">300px</span>; <span class=\"attribute\">overflow</span>:hidden&#125; </span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">img</span>&#123; <span class=\"attribute\">float</span>:left; <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>&#125; </span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.right</span>&#123; <span class=\"attribute\">float</span>:right; <span class=\"attribute\">width</span>:<span class=\"number\">180px</span>; <span class=\"attribute\">text-align</span>:left&#125; </span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.right</span> <span class=\"selector-tag\">h3</span>&#123; <span class=\"attribute\">height</span>:<span class=\"number\">20px</span>; <span class=\"attribute\">line-height</span>:<span class=\"number\">20px</span>; <span class=\"attribute\">font-family</span>:<span class=\"string\">\"Microsoft YaHei\"</span>; <span class=\"attribute\">font-size</span>:<span class=\"number\">16px</span>; <span class=\"attribute\">overflow</span>:hidden;&#125; </span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.container</span> <span class=\"selector-class\">.right</span> <span class=\"selector-tag\">div</span>&#123; <span class=\"attribute\">padding-top</span>:<span class=\"number\">0px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">50px</span>; <span class=\"attribute\">overflow</span>:hidden&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"imageHolder\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./img.jpeg\"</span>/&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>我是一个标题好吗<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>无论事态变迁，你总有一颗人仰马翻的少年心<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这段html里面的有两个需要注意的地方：</p>\n<ul>\n<li>需要替换的html标签img，我们给它加上了一个id叫“imageHolder”，后面我们需要通过js获取这个标签。</li>\n<li>viewport里面把device-width设为设备的宽度，这样我们获取到的图片位置和宽高都是dp为单位。</li>\n</ul>\n<h1 id=\"2-准备好获取img标签left、top、width、height属性的js方法，提供给Native调用\"><a href=\"#2-准备好获取img标签left、top、width、height属性的js方法，提供给Native调用\" class=\"headerlink\" title=\"2.准备好获取img标签left、top、width、height属性的js方法，提供给Native调用\"></a>2.准备好获取img标签left、top、width、height属性的js方法，提供给Native调用</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> jsFun = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 测量图片的大小和位置</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  measureImagePlaceHolder: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"imageHolder\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> left = img.getBoundingClientRect().left + img.scrollLeft;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> top = img.getBoundingClientRect().top + img.scrollTop;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> width = img.getBoundingClientRect().right - left;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> height = img.getBoundingClientRect().bottom - top;</span></span><br><span class=\"line\"><span class=\"undefined\">    JavaFun.replaceImgWithImageView(left, top, width, height);</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这段代码的功能就是获取img标签在网页中的绝对位置和大小，我是从阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html\" target=\"_blank\" rel=\"noopener\">博客</a>学到的，把这段js加入到html的body最后即可。</p>\n<p>这时其实已经可以用chrome打开这个页面，进入inspect界面，手动调用一下<code>measureImagePlaceHolder</code>方法已经可以看到效果了，如下图所示。</p>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tKfTcly1fkjcqk16dgj30rs082774.jpg\" alt=\"chrome查看js\"></p>\n<h1 id=\"3-在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。\"><a href=\"#3-在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。\" class=\"headerlink\" title=\"3.在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。\"></a>3.在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。</h1><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    rootView = (FrameLayout) findViewById(R.id.root_view);</span><br><span class=\"line\">    initView();</span><br><span class=\"line\">    initWebView();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initWebView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    webView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    webView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPageFinished(view, url);</span><br><span class=\"line\">            view.loadUrl(<span class=\"string\">\"javascriprt:jsFun.measureImagePlaceHolder();\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    webView = <span class=\"keyword\">new</span> WebView(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    imageView = <span class=\"keyword\">new</span> ImageView(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    FrameLayout.LayoutParams layoutParams = <span class=\"keyword\">new</span> FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class=\"line\">    rootView.addView(webView, layoutParams);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法\"><a href=\"#4-Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法\" class=\"headerlink\" title=\"4.Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法\"></a>4.Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法</h1><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">JavaFun</span> &#123;</span><br><span class=\"line\">    @JavascriptInterface</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">replaceImgWithImageView</span>(<span class=\"params\"><span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height</span>) </span>&#123;</span><br><span class=\"line\">        final Context context = MainActivity.<span class=\"keyword\">this</span>.getApplicationContext();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (imageView == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            imageView = <span class=\"keyword\">new</span> ImageView(MainActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        final FrameLayout.LayoutParams <span class=\"keyword\">params</span> = <span class=\"keyword\">new</span> FrameLayout.LayoutParams(dp2px(context, width), dp2px(context, height));</span><br><span class=\"line\">        <span class=\"keyword\">params</span>.leftMargin = dp2px(context, left);</span><br><span class=\"line\">        <span class=\"keyword\">params</span>.topMargin = dp2px(context, top);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Handler(Looper.getMainLooper()).post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                rootView.addView(imageView, <span class=\"keyword\">params</span>);</span><br><span class=\"line\">                imageView.setBackgroundColor(Color.WHITE);</span><br><span class=\"line\">                imageView.setImageDrawable(context.getResources().getDrawable(R.drawable.shepherd));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此后还需要在initWebView方法添加一行。把一个名为JavaFun的对象注入js：webView.addJavascriptInterface(new JavaFun(), \"JavaFun\");</span></span><br><span class=\"line\"><span class=\"comment\">// 然后在js的measureImagePlaceHolder方法后面添加一行调用Java的代码：JavaFun.replaceImgWithImageView(left, top, width, height);</span></span><br></pre></td></tr></table></figure>\n<p>关于Java和JS通信的方法，这里不做介绍，感兴趣的同学可以看看前面写过的博客。</p>\n<p>我们看下两种模式下的效果，左边是html的img标签渲染图片的效果，右边是ImageView渲染图片的效果，为了明显对比，我用了两张不同的图片，打开了开发者模式的布局边界：</p>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tKfTcly1fkjcpehayoj30xc08kk08.jpg\" alt=\"two mode\"></p>\n<p>怎么样，是不是还可以用来其他的Native组件来替换html标签啊？哈哈，我要用我们的视频组件去替换喽。上面这个小例子的代码在<a href=\"https://github.com/unclechen/ReplaceElementInHtml\" target=\"_blank\" rel=\"noopener\">这里</a>，仅供大家参考，更复杂的例子还需要具体情况具体分析了。</p>\n<h1 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h1><p>在界面开发的时候，不论是Android、iOS还是html，其实我们都是在处理布局，也就是说撇开各个平台上它们自己定义的一套标准，大部分时候，我们编写界面就是在处理界面上每一个元素在这个界面的位置和这个元素自身的大小。ReactNative类的框架干得事情就是帮开发者把html里面那套布局转换到Android和iOS各自的平台，站在现在看，可能会有人会争论html什么时候统一天下。但也许将来会出现一个新标准，在各个平台上都可以执行，而不是现阶段的哪个平台去取代哪个平台这么简单。前段时间看到过一个叫<a href=\"https://flutter.io/\" target=\"_blank\" rel=\"noopener\">Flutter</a>的东西，好像就有点这个方向的意思，感兴趣的同学可以看看去。</p>"},{"layout":"post","title":"App动态配置探讨","date":"2016-09-25T00:00:00.000Z","_content":"\n# 一、背景\n\nApp开发中一个比较常见的问题就是动态化，有时我们会需要程序的某一个逻辑可以动态改变而不需要发版本让用户重新安装。例如，App中的某个WebView有一个url白名单，我们希望它可以动态改变。这是个常见的需求，现在无论是技术面上还是产品上大家都在讲一个动态化，所以一波接一波出了各种插件化，甚至是ReactNative、weex、微信小程序等等这些轮子。\n\n但是在实际中需要考虑到很多的业务特点，使得我们在**统一化**和**个性化**的时候比较难以选择，半年前天猫的技术博客就出了这篇文章--[动态调整的基础 —— 配置中心](http://pingguohe.net/2016/03/18/config-center.html)，里面介绍了阿里的团队在这方面的实践经验。今天我以一个遇到的实际需求为例，总结下我的想法。\n\n<!-- more -->\n\n# 二、需求&目标：设计一个动态配置中心\n\n- **需求：**支持不同业务、不同平台、不同版本（一般是版本的范围），按需动态下发配置。这里业务可以是不同的App、也可以是同一个App里面不同的模块，或者不同的SDK。\n\n- **目标：**业务方（App开发者）可以自助到配置中心添加新的配置项或者修改以前的配置，按需下发到客户端。\n\n## 数据模型\n\n这里参考天猫动态配置的设计，我的动态配置中心也有下面两个的**数据模型：**\n\n- 1.配置的数据结构\n\n这是客户端希望拿到的下发配置信息，这里我的需求就是一个**key-value**形式的json字符串，value里面是客户端可以自己解析出来使用的结构即可。\n\n```\n\"base_setting\": {\n        \"key_1\": \"value_1\",\n        \"key_2\": \"value_2\"  \n}\n```\n\n- 2.元信息（meta-info）：**业务(bizType) -> 平台(platform) -> 版本(version)**\n\n元信息代表着按需选择配置的条件。例如，对于同一个配置项`key_1`，对于业务1，它的值是0，对于业务2，它的值是1。或者对于配置项`key_2`，不会下发给业务1，只下发给业务2。这两类情况都应该能够在配置中心实现配置。\n\n此外，**业务->平台->版本**，这三个**元信息之间的优先级顺序关系一定要明确**，例如，业务1下面可以有iOS、Android两个平台；iOS下面又可以有1.0.0、2.0.0等多个版本。因此我认为版本的配置优先级要高于平台，平台的配置优先级要高于业务。\n\n# 三、数据关系的设计\n\n数据关系如何设计，取决于两点：\n\n- **1.每一项配置是如何生成的？**\n\n（1）当用户添加一个新的配置时，需要添加它的**key（下发的key）、defaultValue（默认值）、name（语义上可读配置名称）**。\n\n（2）然后根据需要，按照**业务 -> 平台 -> 版本**的顺序，逐级地选择这个配置支持的元信息。每一步选择时都需要设定一个单独的value。这里可以不用每一级元信息都要选择，只要选择到了第一级的**业务**，客户端就已经可以拿到这个配置了，如果需要更加细粒度的控制配置的value，才需要选择第二级的**平台**和**版本**。\n\n（3）把这个配置，和它对应的业务、平台、版本这三个元信息关系，以及各个元信息下面的value都存储下来。所以配置是直接关联着业务、平台、版本这3个元信息的。\n\n（4）存储业务、平台、版本之间的对应关系，这样才可以明确在逐级选择配置时，每一级都有哪些元信息。这里我实际中存储的是版本范围信息和平台的关系，如`bizA | Android | 1.0.0-2.0.0`、`bizA | iOS | 1.0.0 - 2.0.0`。其实在创建每一级元信息的setting-value之前，就应该建立好了这个关系。\n\n- **2.对于每一个请求，配置中心是如何处理、最后得到属于这个请求的配置？**\n\n当配置中心的Server接收到一个请求时：\n\n（1）提取出元信息：业务(bizType)、平台(platform)、版本(version)\n\n（2）根据业务、平台、版本找到和它关联的所有配置项。\n\n\n> 结合一个实例理解上面的两点：假设有2种业务，2个平台，2个版本范围，那么元信息的各种组合最多就是8种，所以每一个配置项的取值最多就是8种，我们可以选择不给某一种元信息下发这个配置，或者下发它独立的配置值。\n\n\n# 四、总结\n\n在设计过程中，其实就是要解决：配置结构长什么样，需要哪些元信息，元信息之间的关系是什么样的，怎么保存元信息之间的关系。这里我的需求比较简单，想到的方案也可能不是很好。实际中可能还有更多元信息，例如如果含有渠道ID，我们还可能加一个app_setting来覆盖base_setting。希望可以见到更多关于这方面的讨论和分享。\n\n","source":"_posts/App动态配置探讨.md","raw":"---\nlayout: post\ntitle: App动态配置探讨\ndate: '2016-09-25'\ntags:\n  - 客户端\n  - 服务器\n  - 动态化\ncategories: \n  - 技术\n---\n\n# 一、背景\n\nApp开发中一个比较常见的问题就是动态化，有时我们会需要程序的某一个逻辑可以动态改变而不需要发版本让用户重新安装。例如，App中的某个WebView有一个url白名单，我们希望它可以动态改变。这是个常见的需求，现在无论是技术面上还是产品上大家都在讲一个动态化，所以一波接一波出了各种插件化，甚至是ReactNative、weex、微信小程序等等这些轮子。\n\n但是在实际中需要考虑到很多的业务特点，使得我们在**统一化**和**个性化**的时候比较难以选择，半年前天猫的技术博客就出了这篇文章--[动态调整的基础 —— 配置中心](http://pingguohe.net/2016/03/18/config-center.html)，里面介绍了阿里的团队在这方面的实践经验。今天我以一个遇到的实际需求为例，总结下我的想法。\n\n<!-- more -->\n\n# 二、需求&目标：设计一个动态配置中心\n\n- **需求：**支持不同业务、不同平台、不同版本（一般是版本的范围），按需动态下发配置。这里业务可以是不同的App、也可以是同一个App里面不同的模块，或者不同的SDK。\n\n- **目标：**业务方（App开发者）可以自助到配置中心添加新的配置项或者修改以前的配置，按需下发到客户端。\n\n## 数据模型\n\n这里参考天猫动态配置的设计，我的动态配置中心也有下面两个的**数据模型：**\n\n- 1.配置的数据结构\n\n这是客户端希望拿到的下发配置信息，这里我的需求就是一个**key-value**形式的json字符串，value里面是客户端可以自己解析出来使用的结构即可。\n\n```\n\"base_setting\": {\n        \"key_1\": \"value_1\",\n        \"key_2\": \"value_2\"  \n}\n```\n\n- 2.元信息（meta-info）：**业务(bizType) -> 平台(platform) -> 版本(version)**\n\n元信息代表着按需选择配置的条件。例如，对于同一个配置项`key_1`，对于业务1，它的值是0，对于业务2，它的值是1。或者对于配置项`key_2`，不会下发给业务1，只下发给业务2。这两类情况都应该能够在配置中心实现配置。\n\n此外，**业务->平台->版本**，这三个**元信息之间的优先级顺序关系一定要明确**，例如，业务1下面可以有iOS、Android两个平台；iOS下面又可以有1.0.0、2.0.0等多个版本。因此我认为版本的配置优先级要高于平台，平台的配置优先级要高于业务。\n\n# 三、数据关系的设计\n\n数据关系如何设计，取决于两点：\n\n- **1.每一项配置是如何生成的？**\n\n（1）当用户添加一个新的配置时，需要添加它的**key（下发的key）、defaultValue（默认值）、name（语义上可读配置名称）**。\n\n（2）然后根据需要，按照**业务 -> 平台 -> 版本**的顺序，逐级地选择这个配置支持的元信息。每一步选择时都需要设定一个单独的value。这里可以不用每一级元信息都要选择，只要选择到了第一级的**业务**，客户端就已经可以拿到这个配置了，如果需要更加细粒度的控制配置的value，才需要选择第二级的**平台**和**版本**。\n\n（3）把这个配置，和它对应的业务、平台、版本这三个元信息关系，以及各个元信息下面的value都存储下来。所以配置是直接关联着业务、平台、版本这3个元信息的。\n\n（4）存储业务、平台、版本之间的对应关系，这样才可以明确在逐级选择配置时，每一级都有哪些元信息。这里我实际中存储的是版本范围信息和平台的关系，如`bizA | Android | 1.0.0-2.0.0`、`bizA | iOS | 1.0.0 - 2.0.0`。其实在创建每一级元信息的setting-value之前，就应该建立好了这个关系。\n\n- **2.对于每一个请求，配置中心是如何处理、最后得到属于这个请求的配置？**\n\n当配置中心的Server接收到一个请求时：\n\n（1）提取出元信息：业务(bizType)、平台(platform)、版本(version)\n\n（2）根据业务、平台、版本找到和它关联的所有配置项。\n\n\n> 结合一个实例理解上面的两点：假设有2种业务，2个平台，2个版本范围，那么元信息的各种组合最多就是8种，所以每一个配置项的取值最多就是8种，我们可以选择不给某一种元信息下发这个配置，或者下发它独立的配置值。\n\n\n# 四、总结\n\n在设计过程中，其实就是要解决：配置结构长什么样，需要哪些元信息，元信息之间的关系是什么样的，怎么保存元信息之间的关系。这里我的需求比较简单，想到的方案也可能不是很好。实际中可能还有更多元信息，例如如果含有渠道ID，我们还可能加一个app_setting来覆盖base_setting。希望可以见到更多关于这方面的讨论和分享。\n\n","slug":"App动态配置探讨","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8e6000vmtsxmdpg0yn6","content":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>App开发中一个比较常见的问题就是动态化，有时我们会需要程序的某一个逻辑可以动态改变而不需要发版本让用户重新安装。例如，App中的某个WebView有一个url白名单，我们希望它可以动态改变。这是个常见的需求，现在无论是技术面上还是产品上大家都在讲一个动态化，所以一波接一波出了各种插件化，甚至是ReactNative、weex、微信小程序等等这些轮子。</p>\n<p>但是在实际中需要考虑到很多的业务特点，使得我们在<strong>统一化</strong>和<strong>个性化</strong>的时候比较难以选择，半年前天猫的技术博客就出了这篇文章–<a href=\"http://pingguohe.net/2016/03/18/config-center.html\" target=\"_blank\" rel=\"noopener\">动态调整的基础 —— 配置中心</a>，里面介绍了阿里的团队在这方面的实践经验。今天我以一个遇到的实际需求为例，总结下我的想法。</p>\n<a id=\"more\"></a>\n<h1 id=\"二、需求-amp-目标：设计一个动态配置中心\"><a href=\"#二、需求-amp-目标：设计一个动态配置中心\" class=\"headerlink\" title=\"二、需求&amp;目标：设计一个动态配置中心\"></a>二、需求&amp;目标：设计一个动态配置中心</h1><ul>\n<li><p><strong>需求：</strong>支持不同业务、不同平台、不同版本（一般是版本的范围），按需动态下发配置。这里业务可以是不同的App、也可以是同一个App里面不同的模块，或者不同的SDK。</p>\n</li>\n<li><p><strong>目标：</strong>业务方（App开发者）可以自助到配置中心添加新的配置项或者修改以前的配置，按需下发到客户端。</p>\n</li>\n</ul>\n<h2 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h2><p>这里参考天猫动态配置的设计，我的动态配置中心也有下面两个的<strong>数据模型：</strong></p>\n<ul>\n<li>1.配置的数据结构</li>\n</ul>\n<p>这是客户端希望拿到的下发配置信息，这里我的需求就是一个<strong>key-value</strong>形式的json字符串，value里面是客户端可以自己解析出来使用的结构即可。</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"base_setting\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"key_1\"</span>: <span class=\"string\">\"value_1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"key_2\"</span>: <span class=\"string\">\"value_2\"</span>  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.元信息（meta-info）：<strong>业务(bizType) -&gt; 平台(platform) -&gt; 版本(version)</strong></li>\n</ul>\n<p>元信息代表着按需选择配置的条件。例如，对于同一个配置项<code>key_1</code>，对于业务1，它的值是0，对于业务2，它的值是1。或者对于配置项<code>key_2</code>，不会下发给业务1，只下发给业务2。这两类情况都应该能够在配置中心实现配置。</p>\n<p>此外，<strong>业务-&gt;平台-&gt;版本</strong>，这三个<strong>元信息之间的优先级顺序关系一定要明确</strong>，例如，业务1下面可以有iOS、Android两个平台；iOS下面又可以有1.0.0、2.0.0等多个版本。因此我认为版本的配置优先级要高于平台，平台的配置优先级要高于业务。</p>\n<h1 id=\"三、数据关系的设计\"><a href=\"#三、数据关系的设计\" class=\"headerlink\" title=\"三、数据关系的设计\"></a>三、数据关系的设计</h1><p>数据关系如何设计，取决于两点：</p>\n<ul>\n<li><strong>1.每一项配置是如何生成的？</strong></li>\n</ul>\n<p>（1）当用户添加一个新的配置时，需要添加它的<strong>key（下发的key）、defaultValue（默认值）、name（语义上可读配置名称）</strong>。</p>\n<p>（2）然后根据需要，按照<strong>业务 -&gt; 平台 -&gt; 版本</strong>的顺序，逐级地选择这个配置支持的元信息。每一步选择时都需要设定一个单独的value。这里可以不用每一级元信息都要选择，只要选择到了第一级的<strong>业务</strong>，客户端就已经可以拿到这个配置了，如果需要更加细粒度的控制配置的value，才需要选择第二级的<strong>平台</strong>和<strong>版本</strong>。</p>\n<p>（3）把这个配置，和它对应的业务、平台、版本这三个元信息关系，以及各个元信息下面的value都存储下来。所以配置是直接关联着业务、平台、版本这3个元信息的。</p>\n<p>（4）存储业务、平台、版本之间的对应关系，这样才可以明确在逐级选择配置时，每一级都有哪些元信息。这里我实际中存储的是版本范围信息和平台的关系，如<code>bizA | Android | 1.0.0-2.0.0</code>、<code>bizA | iOS | 1.0.0 - 2.0.0</code>。其实在创建每一级元信息的setting-value之前，就应该建立好了这个关系。</p>\n<ul>\n<li><strong>2.对于每一个请求，配置中心是如何处理、最后得到属于这个请求的配置？</strong></li>\n</ul>\n<p>当配置中心的Server接收到一个请求时：</p>\n<p>（1）提取出元信息：业务(bizType)、平台(platform)、版本(version)</p>\n<p>（2）根据业务、平台、版本找到和它关联的所有配置项。</p>\n<blockquote>\n<p>结合一个实例理解上面的两点：假设有2种业务，2个平台，2个版本范围，那么元信息的各种组合最多就是8种，所以每一个配置项的取值最多就是8种，我们可以选择不给某一种元信息下发这个配置，或者下发它独立的配置值。</p>\n</blockquote>\n<h1 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h1><p>在设计过程中，其实就是要解决：配置结构长什么样，需要哪些元信息，元信息之间的关系是什么样的，怎么保存元信息之间的关系。这里我的需求比较简单，想到的方案也可能不是很好。实际中可能还有更多元信息，例如如果含有渠道ID，我们还可能加一个app_setting来覆盖base_setting。希望可以见到更多关于这方面的讨论和分享。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>App开发中一个比较常见的问题就是动态化，有时我们会需要程序的某一个逻辑可以动态改变而不需要发版本让用户重新安装。例如，App中的某个WebView有一个url白名单，我们希望它可以动态改变。这是个常见的需求，现在无论是技术面上还是产品上大家都在讲一个动态化，所以一波接一波出了各种插件化，甚至是ReactNative、weex、微信小程序等等这些轮子。</p>\n<p>但是在实际中需要考虑到很多的业务特点，使得我们在<strong>统一化</strong>和<strong>个性化</strong>的时候比较难以选择，半年前天猫的技术博客就出了这篇文章–<a href=\"http://pingguohe.net/2016/03/18/config-center.html\" target=\"_blank\" rel=\"noopener\">动态调整的基础 —— 配置中心</a>，里面介绍了阿里的团队在这方面的实践经验。今天我以一个遇到的实际需求为例，总结下我的想法。</p>","more":"<h1 id=\"二、需求-amp-目标：设计一个动态配置中心\"><a href=\"#二、需求-amp-目标：设计一个动态配置中心\" class=\"headerlink\" title=\"二、需求&amp;目标：设计一个动态配置中心\"></a>二、需求&amp;目标：设计一个动态配置中心</h1><ul>\n<li><p><strong>需求：</strong>支持不同业务、不同平台、不同版本（一般是版本的范围），按需动态下发配置。这里业务可以是不同的App、也可以是同一个App里面不同的模块，或者不同的SDK。</p>\n</li>\n<li><p><strong>目标：</strong>业务方（App开发者）可以自助到配置中心添加新的配置项或者修改以前的配置，按需下发到客户端。</p>\n</li>\n</ul>\n<h2 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h2><p>这里参考天猫动态配置的设计，我的动态配置中心也有下面两个的<strong>数据模型：</strong></p>\n<ul>\n<li>1.配置的数据结构</li>\n</ul>\n<p>这是客户端希望拿到的下发配置信息，这里我的需求就是一个<strong>key-value</strong>形式的json字符串，value里面是客户端可以自己解析出来使用的结构即可。</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"base_setting\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"key_1\"</span>: <span class=\"string\">\"value_1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"key_2\"</span>: <span class=\"string\">\"value_2\"</span>  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.元信息（meta-info）：<strong>业务(bizType) -&gt; 平台(platform) -&gt; 版本(version)</strong></li>\n</ul>\n<p>元信息代表着按需选择配置的条件。例如，对于同一个配置项<code>key_1</code>，对于业务1，它的值是0，对于业务2，它的值是1。或者对于配置项<code>key_2</code>，不会下发给业务1，只下发给业务2。这两类情况都应该能够在配置中心实现配置。</p>\n<p>此外，<strong>业务-&gt;平台-&gt;版本</strong>，这三个<strong>元信息之间的优先级顺序关系一定要明确</strong>，例如，业务1下面可以有iOS、Android两个平台；iOS下面又可以有1.0.0、2.0.0等多个版本。因此我认为版本的配置优先级要高于平台，平台的配置优先级要高于业务。</p>\n<h1 id=\"三、数据关系的设计\"><a href=\"#三、数据关系的设计\" class=\"headerlink\" title=\"三、数据关系的设计\"></a>三、数据关系的设计</h1><p>数据关系如何设计，取决于两点：</p>\n<ul>\n<li><strong>1.每一项配置是如何生成的？</strong></li>\n</ul>\n<p>（1）当用户添加一个新的配置时，需要添加它的<strong>key（下发的key）、defaultValue（默认值）、name（语义上可读配置名称）</strong>。</p>\n<p>（2）然后根据需要，按照<strong>业务 -&gt; 平台 -&gt; 版本</strong>的顺序，逐级地选择这个配置支持的元信息。每一步选择时都需要设定一个单独的value。这里可以不用每一级元信息都要选择，只要选择到了第一级的<strong>业务</strong>，客户端就已经可以拿到这个配置了，如果需要更加细粒度的控制配置的value，才需要选择第二级的<strong>平台</strong>和<strong>版本</strong>。</p>\n<p>（3）把这个配置，和它对应的业务、平台、版本这三个元信息关系，以及各个元信息下面的value都存储下来。所以配置是直接关联着业务、平台、版本这3个元信息的。</p>\n<p>（4）存储业务、平台、版本之间的对应关系，这样才可以明确在逐级选择配置时，每一级都有哪些元信息。这里我实际中存储的是版本范围信息和平台的关系，如<code>bizA | Android | 1.0.0-2.0.0</code>、<code>bizA | iOS | 1.0.0 - 2.0.0</code>。其实在创建每一级元信息的setting-value之前，就应该建立好了这个关系。</p>\n<ul>\n<li><strong>2.对于每一个请求，配置中心是如何处理、最后得到属于这个请求的配置？</strong></li>\n</ul>\n<p>当配置中心的Server接收到一个请求时：</p>\n<p>（1）提取出元信息：业务(bizType)、平台(platform)、版本(version)</p>\n<p>（2）根据业务、平台、版本找到和它关联的所有配置项。</p>\n<blockquote>\n<p>结合一个实例理解上面的两点：假设有2种业务，2个平台，2个版本范围，那么元信息的各种组合最多就是8种，所以每一个配置项的取值最多就是8种，我们可以选择不给某一种元信息下发这个配置，或者下发它独立的配置值。</p>\n</blockquote>\n<h1 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h1><p>在设计过程中，其实就是要解决：配置结构长什么样，需要哪些元信息，元信息之间的关系是什么样的，怎么保存元信息之间的关系。这里我的需求比较简单，想到的方案也可能不是很好。实际中可能还有更多元信息，例如如果含有渠道ID，我们还可能加一个app_setting来覆盖base_setting。希望可以见到更多关于这方面的讨论和分享。</p>"},{"layout":"post","title":"Android埋点技术分析","date":"2017-12-18T00:00:00.000Z","_content":"\n# 一、概念\n\n埋点，是对网站、App或者后台等应用程序进行数据采集的一种方法。通过埋点，可以收集用户在应用中的产生行为，进而用于分析和优化产品后续的体验，也可以为产品的运营提供数据支撑，其中常见的指标有PV、UV、页面时长和按钮的点击等，通常可以采集到下面这些数据。\n\n- 行为数据：时间、地点、人物、交互的内容等\r- 质量数据：App运行情况、浏览器加载情况、错误异常等\r- 环境数据：手机型号、操作系统版本、浏览器UA、地理、运营商、网络环境等\r- 运营数据：PV、UV、点击量、日活、留存、渠道来源等\n\n采集行为数据时，通常需要在Web页面/App里面添加一些代码，当用户的行为达到某种条件时，就会向服务器上报用户的行为。其实添加这些代码的过程就可以叫做“埋点”，在很久以前就已经出现了这种技术。随着技术的发展和大家对数据采集要求的不断提高，我认为埋点的技术方案走过了下面几个阶段：\n\n- **代码埋点：代码埋点是指在某个事件发生时调用数据发送接口上报数据。**例如开发人员按照产品/运营的需求，在Web页面/App的源码里面添加行为上报的代码，当用户的行为满足某一个条件时，这些代码就会被执行，向服务器上报行为数据。这种方案是最基础的方案，每次增加或者修改数据上报的条件，都需要开发人员的参与，并且只能在下一个版本上线后才能看到效果。基本上所有的数据平台都提供了这类数据上报的SDK，将行为上报的后台服务器接口封装成了简单的客户端SDK接口。开发者可以通过嵌入这类SDK，在埋点的地方调用少量的代码就可以上报行为数据。\n\n- **全埋点：全埋点指的是将Web页面/App内产生的所有的、满足某个条件的行为，全部上报到后台服务器。**例如把一个App中所有的按钮点击都进行上报，然后由产品/运营去后台筛选所需要的行为数据。这种方案的优点非常明显，就是可以不用在新增/修改行为上报条件时，再找开发人员去修改埋点的代码。然而它的缺点也和优点一样明显，那就是上报的数据量比代码埋点大很多，里面可能很多是没有价值的数据。此外，这种方案更倾向于独立去看待用户的行为，而没有关注行为的上下文，给数据分析带来了一些难度。很多公司也提供了这类功能的SDK，通过静态或者动态的方式，**“Hook”了原有的App代码**，从而实现了行为的监测，在数据上报时通常是采用累积多条再上报的方案来合并请求。\n\n- **可视化埋点：可视化埋点是指通过可视化工具配置采集节点，在App/Web解析配置查找节点，监听节点产生的事件并上报。**例如产品在Web页面/App的界面上进行圈选，配置需要监测界面上哪一个元素，然后保存这个配置，当App启动时会从后台服务器获得产品/运营预先圈选好的配置，然后根据这份配置查找并监测App界面上的元素，当某一个元素满足条件时，就会上报行为数据到后台服务器。有了暴力的全埋点技术方案，很容易联想到按需埋点，可视化埋点就是一种按需配置埋点的方案。现在也有一些公司提供了这类SDK，圈选监测元素时，有的是提供一个Web管理界面，手机在安装并初始化了SDK之后，可以和管理界面了连接，让用户在Web管理界面上配置需要监测的元素，有的是直接让用户在手机上圈选元素进行埋点。\n\n> hook直译是钩子的意思，以前学信息安全的时候在windows上听到过，大体意思是通过某种手段去改变系统API的一个行为，绕过系统的某个方法，或者改变系统的工作流程。在这里其实是指把本来要执行某个方法的对象替换成另一个，一般用的是反射或者代理，需要找到hook的代码位置，甚至还可以在编译阶段实现替换。全埋点和可视化埋点都需要Hook掉App原本的代码实现。\n\n\n业界有多家SDK都支持上面介绍的3种埋点方案中的一种或者全部，例如Mixpanel、Sensorsdata、TalkingData、GrowingIO、诸葛IO、Heap Analytics、MTA、Umeng Analytics、百度，只是大家对后两种埋点的称呼不完全相同，有的叫无埋点或者codeless埋点。由于[Mixpanel](https://github.com/mixpanel/mixpanel-android)（支持代码埋点、可视化埋点）和[Sensorsdata](https://github.com/sensorsdata/sa-sdk-android)（全部支持）都开源了自己的全部SDK，技术方案也比较类似，下面以它们的Android SDK为例，简单分析一下3种埋点方案的技术实现。关于JS的SDK技术实现，可以看下我的另一篇博客-[JS埋点SDK技术分析](http://unclechen.github.io/2017/12/24/JS%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/)。\n\n<!-- more -->\n\n# 二、代码埋点\n\n包含Mixpanel SDK在内的大部分SDK，都会把这种埋点方案封装成一个比较简单的接口，在这里是`track(String eventName, JSONObject properties)`，开发者在调用这个接口时，可以把一个事件名称和事件的属性传入，然后就可以上报到后台了。一般代码埋点长这样：\n\n```java\nbutton.setOnClickListener(new View.OnClickListener() {\n  @Override\n  public void onClick(View v) {\n    // 业务代码\n    // ...\n    // 埋点上报\n    JSONObject properties = new JSONObject();\n    properties.put(\"price\", 6800);\n    properties.put(\"name\", \"Pixel2 XL\");\n    Tracker.track(\"PURCHASE\", properties);\n    }\n  });\n```\n\n\nMixpanel SDK内部采用一条HandlerThread线程来处理事件，当开发者调用`track(String eventName, JSONObject properties)`方法时，**主线程切换到HandlerThread**当中，并先将事件存入数据库。然后看SDK中是否累计到了40个事件，如果累计到40个事件的话，就合并它们上报到后台。\n\n当开发者设置为debug模式，或者手动调用`flush`接口时，可以立即上报累计的所有事件，不过由于只有一条线程，所以如果在flush的时候，前面的事件还没有处理完成，SDK会间隔1分钟再次去处理后面的这些事件。\n\n开发者可以设置累计上报的事件数量阈值、事件阻塞时再次尝试上报的时间间隔等。这种方案比较基础，相信大部分开发者都接触过，不需要过多分析。\n\n# 三、全埋点\n\n## 3.1 基本原理\n\n全埋点要对方法进行Hook，按照**是否在运行时**这个条件来区分，Android全埋点可以有下面两种方式：\n\n- **静态Hook：**AspectJ实现AOP，编译期修改代码\r- **动态Hook：**运行时替换View.OnClickListener等事件回调\n\n这里的Hook其实就是一种AOP实现。\n\n> 那么什么是AOP？AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。（from baidu baike）\n\n> 简而言之，AOP是可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。\n\n**Sensors Analytics AndroidSDK全埋点的实现就是通过在代码编译阶段，找到源代码中需要上报事件的位置，插入SDK的事件上报代码。它用到的框架是[AspectJ](https://www.eclipse.org/aspectj/)。**\n\n\n## 3.2 使用AspectJ做静态Hook\n\n### 3.2.1 AspectJ基本概念\n\n在很多地方我们可以看到AspectJ的身影，例如JakeWharton大神贡献的一个注解日志和性能调优框架[Hugo](https://github.com/JakeWharton/hugo)，在Spring框架里面也有应用到AspectJ的概念（不过Spring AOP的实现是用的动态代理）。我理解AspectJ里面的主要几个概念有：\n\n- **JPoint：**代码切点（就是我们要插入代码的地方）\n- **Aspect：**代码切点的描述\n\t- **Pointcut：**描述切点具体是什么样的点，如函数被调用的地方（`Call(MethodSignature)`）、函数执行的内部（`execution(MethodSignature)`）\n\t- **Advice：**描述在切点的什么位置插入代码，如在Pointcut前面（`@Before`）还是后面（`@After`），还是环绕整个Pointcut（`@Around`）\n\n由此可见，在实现AOP功能时，需要做下面几件事：\n\n- 定义一个Aspect，这个Aspect里面必须有Pointcut和Advice两个属性\n- 编写在匹配到符合Pointcut和Advice描述的代码时，需要注入的代码\n- 在代码编译时，通过特殊的java编译器（Aspect的ajc编译器），找到符合我们定义的Aspect的代码，将需要注入的代码插入到Advice指定的位置。\n\n如果你对AspectJ有了解的话，已经可以猜到SDK内部是怎么实现全埋点的了；如果没有接触，我觉得也不用急于全面地去学习AspectJ，毕竟AspectJ的功能很强大（可远不止前置、后置这么简单的增强），埋点这种业务只用到了AspectJ当中的一小部分功能而已，可以直接看下面的分析。\n\n### 3.2.2 实现\n\n神策SDK里面是如何监测View点击事件呢？我把SDK代码简化一下进行分析，有下面几个步骤：\n\n#### 3.2.2.1 定义一个Aspect\n\n```java\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\n\n@Aspect\npublic class ViewOnClickListenerAspectj {\n\n    /**\n     * android.view.View.OnClickListener.onClick(android.view.View)\n     *\n     * @param joinPoint JoinPoint\n     * @throws Throwable Exception\n     */\n    @After(\"execution(* android.view.View.OnClickListener.onClick(android.view.View))\")\n    public void onViewClickAOP(final JoinPoint joinPoint) throws Throwable {\n        AopUtil.sendTrackEventToSDK(joinPoint, \"onViewOnClick\");\n    }\n}\n\n```\n\n这段Aspect的代码定义了：**在执行android.view.View.OnClickListener.onClick(android.view.View)方法原有的实现后面，需要插入`AopUtil.sendTrackEventToSDK(joinPoint, \"onViewOnClick\");`这段代码。**\n\n`AopUtil.sendTrackEventToSDK(joinPoint, \"onViewOnClick\");`这段代码做的事情就是点击事件的上报。因为神策SDK将全埋点功能和主SDK包分离成了两个jar包，所以通过AopUtil工具去调用真正的事件上报代码，这里不细述其实现，下面直接看这段代码背后真正的点击上报实现。\n\n```java\nSensorsDataAPI.sharedInstance().track(AopConstants.APP_CLICK_EVENT_NAME, properties);\n\n```\n\n可以看到AOP实现的点击监测，最后也走`track`方法进行上报了。\n\n#### 3.2.2.2 使用ajc编译器向源代码中“织入”Aspect代码\n\n采用AspectJ框架编写的代码，想要注入原来的工程的代码，需要在`/app/build.gradle`中引用ajc编译器，脚本如下：\n\n```groovy\n...\nimport org.aspectj.bridge.IMessage\nimport org.aspectj.bridge.MessageHandler\nimport org.aspectj.tools.ajc.Main\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'org.aspectj:aspectjtools:1.8.10'\n    }\n}\n\nrepositories {\n    mavenCentral()\n}\n\nandroid {\n    ...\n}\n\ndependencies {\n    ...\n    compile 'org.aspectj:aspectjrt:1.8.10'\n}\n\nfinal def log = project.logger\nfinal def variants = project.android.applicationVariants\n\nvariants.all { variant ->\n    if (!variant.buildType.isDebuggable()) {\n        log.debug(\"Skipping non-debuggable build type '${variant.buildType.name}'.\")\n        return;\n    }\n\n    JavaCompile javaCompile = variant.javaCompile\n    javaCompile.doLast {\n        String[] args = [\"-showWeaveInfo\",\n                     \"-1.5\",\n                     \"-inpath\", javaCompile.destinationDir.toString(),\n                     \"-aspectpath\", javaCompile.classpath.asPath,\n                     \"-d\", javaCompile.destinationDir.toString(),\n                     \"-classpath\", javaCompile.classpath.asPath,\n                     \"-bootclasspath\", project.android.bootClasspath.join(File.pathSeparator)]\n        log.debug \"ajc args: \" + Arrays.toString(args)\n\n        MessageHandler handler = new MessageHandler(true);\n        new Main().run(args, handler);\n        for (IMessage message : handler.getMessages(null, true)) {\n           switch (message.getKind()) {\n                case IMessage.ABORT:\n                case IMessage.ERROR:\n                case IMessage.FAIL:\n                    log.error message.message, message.thrown\n                    break;\n                case IMessage.WARNING:\n                    log.warn message.message, message.thrown\n                    break;\n                case IMessage.INFO:\n                    log.info message.message, message.thrown\n                    break;\n                case IMessage.DEBUG:\n                    log.debug message.message, message.thrown\n                    break;\n            }\n        }\n    }\n}\n```\n\n在SensorsAndroidSDK中，把上面这段脚本编写成了一个[gradle插件](https://github.com/sensorsdata/sa-sdk-android-plugin2)，开发者只需要在`app/build.gradle`引用这个插件即可。\n\n```groovy\napply plugin: 'com.sensorsdata.analytics.android'\n```\n\n#### 3.2.2.3 查看织入后的class文件\n\n完成上面两步，就可以实现在`android.view.View.OnClickListener.onClick(android.view.View)`方法中插入我们的数据上报代码了。我们在demo代码中加一个Button，并给它set一个OnClickListener，编译一下代码，查看`/build/intermediates/classes/debug/`里面class文件，经过ajc编译之后，原始代码中插入了Aspect的代码，并调用了`ViewOnClickListenerAspectj`里面的`onViewClickAOP`方法。\n\n```java\npublic class MainActivity extends Activity {\n    public MainActivity() {\n    }\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        this.setContentView(2130968603);\n        Button btnTst = (Button)this.findViewById(2131427422);\n        btnTst.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                JoinPoint var2 = Factory.makeJP(ajc$tjp_0, this, this, v);\n\n                try {\n                    Log.i(\"MainActivity\", \"button clicked\");\n                } catch (Throwable var5) {\n                    ViewOnClickListenerAspectj.aspectOf().onViewClickAOP(var2);\n                    throw var5;\n                }\n\n                ViewOnClickListenerAspectj.aspectOf().onViewClickAOP(var2);\n            }\n\n            static {\n                ajc$preClinit();\n            }\n        });\n    }\n}\n```\n\nAspectJ的基本用法就是这样，除了对`OnClickListener`进行替换，理论上可以对任何已知的方法进行替换，所以在埋点SDK中还可以采用对RatingBar、CheckBox、RadioButton等控件的点击进行监听。\n\n神策AndroidSDK借助AspectJ插入Aspect代码，就是一种静态Hook的方式。本质上是在程序没有运行之前，通常是编译或者链接的阶段，对字节码进行修改，插入事件上报的代码。\n\n修改字节码除了这种方案之外，还有Android Gradle插件提供的trasform api（1.5.0版本以上）、ASM、Javassist。在网易乐得的埋点方案，Nuwa热修复项目都可以见到这些技术的实践。\n\n## 3.3 使用代理模式实现动态Hook\n\n### 3.3.1 代理模式\n\n上面分析了以AspectJ为代表的**“静态Hook”**实现方案，有没有其他办法可以不修改源代码，只是**在App运行的时候去“动态Hook”**点击行为的处理呢？答案是肯定的，JAVA里面有一个设计模式叫代理模式，从这个角度出发，看下怎么**在运行时**实现点击事件的监测上报。\n\n在[android.view.View.java](https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/view/View.java)的源码（`API>=14`）中，有这么几个关键的方法：\n\n```java\n    // getListenerInfo方法：返回所有的监听器信息mListenerInfo\n    ListenerInfo getListenerInfo() {\n        if (mListenerInfo != null) {\n            return mListenerInfo;\n        }\n        mListenerInfo = new ListenerInfo();\n        return mListenerInfo;\n    }\n    \n    // 监听器信息\n    static class ListenerInfo {\n        ... // 此处省略各种xxxListener\n        /**\n         * Listener used to dispatch click events.\n         * This field should be made private, so it is hidden from the SDK.\n         * {@hide}\n         */\n        public OnClickListener mOnClickListener;\n\n        /**\n         * Listener used to dispatch long click events.\n         * This field should be made private, so it is hidden from the SDK.\n         * {@hide}\n         */\n        protected OnLongClickListener mOnLongClickListener;\n\n        ...\n    }\n    ListenerInfo mListenerInfo;\n    \n    // 我们非常熟悉的方法，内部其实是把mListenerInfo的mOnClickListener设成了我们创建的OnclickListner对象\n    public void setOnClickListener(@Nullable OnClickListener l) {\n        if (!isClickable()) {\n            setClickable(true);\n        }\n        getListenerInfo().mOnClickListener = l;\n    }\n    \n    /**\n     * 判断这个View是否设置了点击监听器\n     * Return whether this view has an attached OnClickListener.  Returns\n     * true if there is a listener, false if there is none.\n     */\n    public boolean hasOnClickListeners() {\n        ListenerInfo li = mListenerInfo;\n        return (li != null && li.mOnClickListener != null);\n    }\n```\n\n通过上面几个方法可以看到，点击监听器其实被保存在了**`mListenerInfo.mOnClickListener`**里面。那么实现**Hook点击监听器**时，只要将这个`mOnClickListener`替换成我们包装的**点击监听器代理对象**就可以实现点击监听的代理了。\n\n### 3.3.2 实现\n\n#### 3.3.2.1 创建点击监听器的代理类\n\n```\n    // 点击监听器的代理类，具有上报点击行为的功能\n    class OnClickListenerWrapper implements View.OnClickListener {\n        // 原始的点击监听器对象\n        private View.OnClickListener onClickListener;\n\n        public OnClickListenerWrapper(View.OnClickListener onClickListener) {\n            this.onClickListener = onClickListener;\n        }\n\n        @Override\n        public void onClick(View view) {\n            // 让原来的点击监听器正常工作\n            if(onClickListener != null){\n                onClickListener.onClick(view);\n            }\n            // 点击事件上报，可以获取被点击view的一些属性\n            track(APP_CLICK_EVENT_NAME, getSomeProperties(view));\n        }\n    }\n```\n\n#### 3.3.2.2 反射获取一个View的mListenerInfo.mOnClickListener，替换成代理的点击监听器\n\n```\n    // 对一个View的点击监听器进行hook\n    public void hookView(View view) {\n        // 1. 反射调用View的getListenerInfo方法（API>=14），获得mListenerInfo对象\n        Class viewClazz = Class.forName(\"android.view.View\");\n        Method getListenerInfoMethod = viewClazz.getDeclaredMethod(\"getListenerInfo\");\n        if (!getListenerInfoMethod.isAccessible()) {\n            getListenerInfoMethod.setAccessible(true);\n        }\n        Object mListenerInfo = listenerInfoMethod.invoke(view);\n        \n        // 2. 然后从mListenerInfo中反射获取mOnClickListener对象\n        Class listenerInfoClazz = Class.forName(\"android.view.View$ListenerInfo\");\n        Field onClickListenerField = listenerInfoClazz.getDeclaredField(\"mOnClickListener\");\n        if (!onClickListenerField.isAccessible()) {\n            onClickListenerField.setAccessible(true);\n        }\n        View.OnClickListener mOnClickListener = (View.OnClickListener) onClickListenerField.get(mListenerInfo);\n        \n        // 3. 创建代理的点击监听器对象\n        View.OnClickListener mOnClickListenerWrapper = new OnClickListenerWrapper(mOnClickListener);\n        \n        // 4. 把mListenerInfo的mOnClickListener设成新的onClickListenerWrapper\n        onClickListenerField.set(mListenerInfo, mOnClickListenerWrapper);\n        // 用这个似乎也可以：view.setOnClickListener(mOnClickListenerWrapper);     \n    }\n```\n\n注意，如果是`API<14`的话，mOnClickListener直接是直接以一个Field保存在View对象中的，没有ListenerInfo，因此反射的次数要更少一些。\n\n#### 3.3.2.3 对App中所有的View进行动态Hook\n\n我们在分析的是全埋点，那么怎样把App里面所有的View点击都Hook到呢？有两种方式：\n\n- 第一种：当Activity创建完成后，开始从Activity的DecorView开始自顶向下深度遍历ViewTree，遍历到一个View的时候，对它进行hookView操作。这种方式有点暴力，由于这里面遍历ViewTree的时候用到了大量反射，性能会有影响。\n\n- 第二种：比第一种方式稍微优秀一些，来源是一个Github上的开源库[AndroidTracker](https://github.com/foolchen/AndroidTracker)（Kotlin实现）。他的处理方式是当Activity创建完成后，在DecorView中添加一个透明的View作为子View，在这个子View的onTouchEvent方法中，根据触摸坐标找到屏幕中包含了这个坐标的View，再对这些View尝试进行hookView操作。**这种方式比较取巧，首先是拿到了手指按下的位置，根据这个位置来找需要被Hook的View，避免了在遍历ViewTree的同时对View进行反射。具体实现是在遍历ViewTree中的每个View时，判断这个View的坐标是否包含手指按下的坐标，以及View是否Visible，如果满足这两个条件，就把这个View保存到一个ArrayList<View>hitViews。然后再遍历这个ArrayList里面的View，如果一个View#hasOnClickListeners返回true，那么才对他进行hookView操作。**\n\n\n### 3.3.3 动态Hook小结\n\n整体来看，动态Hook的思路这里用到了反射，难免对程序性能产生影响，如果要采用这种方式实现全埋点方案，还需要好好评估。既然提到了代理，要说一下**这里的“代理模式”其实还是JAVA的静态代理**，不是动态代理。因为`OnClickListener`和`OnClickListenerWrapper`是在编写代码的时候就确定了，并不是在运行时动态生成了一个`OnClickListenerWrapper`。在JDK中动态代理是使用Native去生成了代理类的字节码（比如使用ASM等工具），并使用ClassLoader加载进来的。\n\n\n## 3.4 全埋点参考资料\n\n- Aspect Oriented Programming in Android：[https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/](https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/)\n- AOP之AspectJ全面剖析in Android（AspectJ详细用法）：[http://www.jianshu.com/p/f90e04bcb326](http://www.jianshu.com/p/f90e04bcb326)\n- 沪江开源了一个叫做AspectJX的插件，扩展了AspectJ，除了对src代码进行AOP，还支持kotlin、工程中引用的jar和aar进行AOP：[https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx](https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx)\n- 关于 Spring AOP (AspectJ) 你该知晓的一切：[http://blog.csdn.net/javazejian/article/details/56267036](http://blog.csdn.net/javazejian/article/details/56267036)\n\n\n# 四、可视化埋点\n\n第三章介绍的是App全埋点，显然这种方式产生的数据太多，无论是对用户资源的节约，还是后续的数据分析都不太好。那么能否**同样借助动态Hook技术，在运行时，只对我们感兴趣的控件进行埋点呢？**这就是可视化埋点。\n\n## 4.1 可视化埋点原理\n\n可视化埋点，需要经过两个步骤，可以由非技术人员操作完成。\n\n- **第一步：通过可视化工具配置采集的View。**例如使用已经嵌入了SDK的App连接管理界面，当手机App与后台同步时，后台管理界面上会显示和手机App一样的界面，用户可以在管理界面上用鼠标选择需要监测的元素，设置事件名称，保存这个配置。（也有一些SDK，比如GrowingIO的SDK圈选操作是在手机悬浮了一个原点，拖动圆点到需要监测的元素上来设置埋点位置的，不管是什么方式本质上是一样的，需要保存一份配置到后台）。\n- **第二步：App解析配置，找到View，Hook它的事件并上报数据。**例如嵌入了SDK的App启动时，会从服务器获取到一份配置，再根据这份配置去检测App中的界面及其元素，满足配置的条件时向服务器上报事件。\n\n这里面最重要的技术点就是如何把手机上需要埋点的元素记录下来，然后根据配置信息找到需要埋点的控件，再替换这个控件的交互事件处理方法（如点击、长按等）。下面以Mixpanel、SensorsdataSDK为例（这两个SDK实现是一样的），简单分析一下技术方案的实现。\n\n## 4.2 可视化埋点实现\n\n### 4.2.1 圈选需要监测的View，保存配置\n\n#### 4.2.1.1 创建WebSocket连接后台\n\n采用WebSocket连接是因为要让手机和后台长时间保持连接，是一个**持续的、实时的双向通信**，WebSocket正适合这种场景。\n\n在Mixpanel和神策SDK里面其实都用到了开源的[Java-WebSocket](https://github.com/TooTallNate/Java-WebSocket)实现。此外，还有一个非常著名的Android同屏工具[Vysor](https://www.vysor.io/)，里面也有一个基于WebSocket的网络框架[AndroidAsync](https://github.com/koush/AndroidAsync)。如果对WebSocket感兴趣，可以看看它们。这里其实只要是用Java实现的WebSocket通信就行。\n\n#### 4.2.1.2 把App界面截图和里面的子View信息发送到后台\n\n创建WebSocket连接后，SDK会在主线程中，对App中启动的Activity进行扫描，找到界面的RootView（其实是DecorView）。在查找RootView的同时，会采用反射调用View类`createSnapshot`方法对RootView进行截图，从而实现了对屏幕的截图。\n\n截图之后，SDK内部会判断图片的hash值，如果图片发生了变化，会采用**先序**的方式遍历Activity的ViewTree，遍历同时读取View的属性（id、top、left、width、height、class名称、layoutRules等等）。下面举一个栗子：\n\n![](https://ws1.sinaimg.cn/large/006tKfTcly1fn1f3fcrrkj30rs06twfj.jpg)\n\n一个简单的Activity，ContentView里面有一个LineaLayout，LinearLayout里面放了一个Button。先序遍历Activity的ViewTree后，SDK会把下面这些数据传到WebSocket的服务器（数据有点多，大概有13k，数据主要来自截图）：\n\n```json\n{\n    \"type\": \"snapshot_response\", \n    \"payload\": {\n        \"activities\": [\n            {\n                \"activity\": \"com.sensorsdata.analytics.android.demo.MainActivity\", \n                \"scale\": 0.3809524, \n                \"serialized_objects\": {\n                    \"rootObject\": 88528516, \n                    \"objects\": [\n                        {\n                            \"hashCode\": 88528516, \n                            \"id\": -1, \n                            \"index\": -1, \n                            \"sa_id_name\": null, \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 1920, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"com.android.internal.policy.DecorView\", \n                                \"android.widget.FrameLayout\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [\n                                57495077, \n                                150453242\n                            ]\n                        }, \n                        {\n                            \"hashCode\": 57495077, \n                            \"id\": 16908822, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 1920, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"com.android.internal.widget.ActionBarOverlayLayout\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [\n                                12620808, \n                                88713121\n                            ]\n                        }, \n                        {\n                            \"hashCode\": 12620808, \n                            \"id\": 16908290, \n                            \"index\": 0, \n                            \"sa_id_name\": \"android:content\", \n                            \"top\": 210, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 1710, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.widget.FrameLayout\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [\n                                150314438\n                            ]\n                        }, \n                        {\n                            \"hashCode\": 150314438, \n                            \"id\": -1, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 1710, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.widget.LinearLayout\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [\n                                104340701\n                            ]\n                        }, \n                        {\n                            \"hashCode\": 104340701, \n                            \"id\": 2131427422, \n                            \"index\": 0, \n                            \"sa_id_name\": \"buttonTest\", \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 126, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.widget.Button\", \n                                \"android.widget.TextView\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [ ]\n                        }, \n                        {\n                            \"hashCode\": 88713121, \n                            \"id\": 16908669, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 63, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 147, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"com.android.internal.widget.ActionBarContainer\", \n                                \"android.widget.FrameLayout\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [\n                                164355104, \n                                161393113\n                            ]\n                        }, \n                        {\n                            \"hashCode\": 164355104, \n                            \"id\": 16908668, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 147, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.widget.Toolbar\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [\n                                222758006, \n                                64817783\n                            ]\n                        }, \n                        {\n                            \"hashCode\": 222758006, \n                            \"id\": -1, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 38, \n                            \"left\": 42, \n                            \"width\": 553, \n                            \"height\": 71, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.widget.TextView\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [ ]\n                        }, \n                        {\n                            \"hashCode\": 64817783, \n                            \"id\": -1, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 0, \n                            \"left\": 1080, \n                            \"width\": 0, \n                            \"height\": 147, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.widget.ActionMenuView\", \n                                \"android.widget.LinearLayout\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [ ]\n                        }, \n                        {\n                            \"hashCode\": 161393113, \n                            \"id\": 16908673, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 0, \n                            \"height\": 0, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 8, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"com.android.internal.widget.ActionBarContextView\", \n                                \"com.android.internal.widget.AbsActionBarView\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [ ]\n                        }, \n                        {\n                            \"hashCode\": 150453242, \n                            \"id\": 16908335, \n                            \"index\": 0, \n                            \"sa_id_name\": \"android:statusBarBackground\", \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 63, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [ ]\n                        }\n                    ]\n                }, \n                \"image_hash\": \"785C4DC3B01B4AFA56BA0E3A56CE8657\", \n                \"screenshot\": \"iVBORw0KGgoAAAANSUhEUgAAAZsAAALbCAIAAACjSrpeAAAAA3NCSVQFBgUzC42AAAAZnklEQVR4nO3dUWhc96Hn8X8XPZwLfpiAFyxIIYIWKnMDtdnASpCHqOTBErkQmxRikUAjN3Bjr6Gx2gdH5KEoeUilFFKrFxKrgRY7sEUK1EiGDVEeAtKCi1TIxRNoYAIJWHADGbiGDFxB9+FMx5LsJI7i4Oa3nw9+mDmaMzqj0Xznf/7njPydMz8/UwAi/Le7vQEAd4yiATkUDcihaEAORQNyKBqQQ9GAHIoG5FA0IIeiATkUDcihaEAORQNyKBqQQ9GAHIoG5FA0IIeiATkUDcihaEAORQNyKBqQQ9GAHN/57LPP7vY2ANwZxmhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgBx9e16z+X5z/InxzlanlFL1VeNPjp/5X2fu3IbdfYeHDm+/WlXV6MOjE09P9O/vvyvbM/2r6cXFxfry+tr6rq/OvzE/98rc9iXDDwwff/z48NDwjoUPDne2OlVftfruar3k2I+PtT5q7Vrx6GNHRx4cucMPAL55e/y/oI79+Fiz2bx5+Zlnz0z8ZOJrb9U/hIP3H7zl8qqqpl+cHn149Cvd28rayoU/XCilzL4029jX2MP2HH7gcKfTqS8vXV4auHdg+1fnXp+be3nuVuuVmZdnelt78NDBslVKX7m6cbVeMjI6svnR5i1XPPro0annp6q+ag9bC3fFXvY6516bq3N24LsHZl6eOf/q+ZGHRurR3vzv5u/s9t19fWX0yOjokdHBwcHG/kYppdPpTD47ufjm4le6m43/u7H27trau2tlay9b0el0ejkrpXzB28boI6Mnnzk58eTEge8eqJdMPju5fd3PXfHI6OiR0UMPHOqtuPjm4uiR0XoYDt8Ke9nrnPttdyywsrxSXxgeGu5sdaaen5p+fvqObdo/hgP7D8y8NNO72ny/eeyxY6WUqeenhoaG+g/c7h5oq9X68ht9vomnJ0opVV/V6G9sfrS5ublZ7zzefMujjxyt9zTP/PzM4qXFqbNTpZTxp8YXLi588bfY/jDb7fboo6PtT9qbm5tz/zYXNp9AsD0dGbjVKKPqq2ZenKmqG6+x9vX25NnJg/cfrP+NPDyy8eeN3lebHzTr5c33m9c2rw0/NFxfHRsdu/bJte33PPvr2d6dHLz/4NSLU+3r7R3f5dkb3+XwA4frnbue8afG6y+VUub+ba53uZTSfL858vBIb92xfxnrzS59nsEfDE6/2K325NnJ+sK1T65N/2r64KGD2x/s6tqNuzp4/8GVd/5e/weHe9vQvt6e/fXs4QcO91Ycfmi4d8uezlZnY2OjlHLogUO97779/j9Pb2ez9dev1tNGo7FyubsZ86/uGHev/nl1ZPTGD23y7I4BYP1Yhh8cLtueuMMPHN74y0YppfVxq/dEjz81vmv01/ygeezHx77S0wG77KVog4OD9YXhB4fb7fYt90o6W53hoeHlS8ullKqqSl/Z3Nwc/8l4/Zu9XfOvzR89/KP2J91ItT5qjR0Z63314KGDN/Zk+0opZfGNxXp6u5Ry7ZNrw0PDy28t3/i+nc4LL70w8vDIzVs1/avp3uiylNL6sHXssWObm5u9e261WieeObH93m7p6CNH6wsbV7qPZf71+Yu/v1jPT9V3tbm5eeLpE4uXvmTP9MIbF+Z/N9/pdHortj9pnzp9av6NHRFpfdDt0ezLs8M/7M70z/5q9ovv/Guqquro491HuvrnblnmXps78ZMT9bxb/e61fGn58NDhXT/tdrs98fRE74nrdDrjT4y3PmyNHRnrPdEbVzbGj4/3Vlm+vHzs0R2Ts/XTMfubb/ZhEmYvRZv+ZXeY0G63hx8cHn5wePrF6V0zNfW7dFVV61fW639HHz1aSukdHu2ZOjs1eP/g0qWlC290x1a9OaNrm9fq8eDJ0yevvnf16sbVpctLg/cPnn/tfL3D1Wvf+VfPr2+sr66tDj0wVErZ3NzcNVIrpVz8/cWqrzp5+uSZX5wppUz+ojvCWr+yfnXj6vqV9elfTpe+cjtT/gcOHNh+deKJiYmnJt5+5+2rG1evblx9+523ez+o+sGuvrs68P3uRP7S5aXVd1fr0cf4Y+PHHzu+Y8W+UkqZfWl2+09p5uXu/mB9SGFoaKjc3m5sb7g3+P3BL73xzUYf6v4olv+0XEppfdiqD6cef+r41feurl9ZX313taqqslVOPnNy17pra2szL8/Uz1e9ZOyRscb+xtKlpd5T02w26ye63W73no6lS0tX37v69jtv17OW86/Ob/z77ndB+Dx7GqP9YHDhzYX6F66U0rneufjGxcMPHJ765VS9pPVxq3O9U0o598q5+p286qt6HVx5a8deVbWvWri4MHDfwKF/PnTut+fqhfUuVW/vsvle91d/4N6BhYsLw/9juJSy8ZeNeuHoI6PDQ8NVX9XY1+iNC2Zf3v3e3mg01jfWT/705MQTE6WUXoJbH7ZKPSR59GjvCOAXOzi44zBo/4H+Mz870zuro39/f53FTqdTF7nRuHFw85599zQajXpJo9GYen5q+4rdAeBWqX+AtbW1tVLK0ce6I6bxJ7pDm11DudrGXzaWLy8vXlo89cypXibmXr31YdAvds8999QXmh80y7Yf6dTPuk90o9Go36jWrqztWvfcK+dGHx4duHdg+07r6jurA/cNHPrhodFHdrxtzP+he5uFNxcG7hsopfTv77/wejd8vaDDl9rj+WiD3xtceWvl0/ank6cnN97rvoUu/nGx/Un73Cvnmu919x1OPXvq5nXXN9ZHj9z4hZ76xVTv8sB3uwOZumX1L3cpZeWdlcMPHN512sTS8lJ9YfvOSyllaGioTkCn09k+rzf/2o7X/9D/HKqHOcceO1b6ysiDIzMv7ZgH/AJ1BHfZ+PeNcy+fq38at3Nssaf5fnPulbnVK6vbV/xs67NGaZRSVta6bwATT3aPb/ZOMbvwhwsTj+8+6Ll9z7o2/eL03s4X+fT6p/WF+kyR3ohv+5l63Q3eKu12e3u460F6+fu4spQy8tCNE9wGBwfrGYm6+L3qDX7vxliy9+z39u7hS+39DNuqr+rf33/h4oXOVmf+tfn6hbTyzkpnq/Npu/tK2D7Q6Nn1at8RkZ2bU/VVS5eWxh8frwNXnzYxWSbP/+H88A+HeyO4A/t37AP+075/qi982v50+7HIge/tOIFr6uxU+3q797qqozny0Mi5V8596WPftcfXOwDa3ex9VbWvuuVj330/H7bGHh3rHWm55Ypzv+4W6uZUbX602bneqfbtqPDA4EBdlv79/cOHhkcfHd3zCWXL/6c7pbhrSHXLh9ZL8OfZ/kQ7x41vyF6Ktuu8gaqvOvmvJxcuLdQTxp3rnXsa3b2VpUtLvXfavRm4b2B1bbX1YWvy7GTrr626hid+cmL9ynrvzX9zc3N7uXo9vWf/PV985zMvzsy8ODP/2vz8xfl6xnrlnZXFS4u9uf9bWnm3O1TpTY3VOauqqjuvVMrU2akvPSxQShl7ZKyUUvrK+tp6veL0i9MX37jYu0Fnq9ObLF++fItDFhf+eGHXuWnP/ey5XZ8T2JvOVmfxje5D6H5+oK87pLr63m3tm38Ffbc+gA5f1V7m0SZ/MVmf5bRd5z+779vVvqo3GTz7ytc9UFVPqA3cN7BwcWF1bXVgYKCUUrZK2Spjo93DAhcu7jgI0NtJuc2BwMRPJ1bfWX37re50/vrG7g8YbXftk2unnunuSs+8OFMv6d7PUxO3s9P62Vb3QxrtdneMefSRo5+34vqV7saMPDwycmTHv3r5zdOFd0Rnq9ObGegN0HoHCr7SPvXtOPl098BC76Bq2bZrXx8JgdvxlYu2ura68tbK4qXFg/cfnP3N7Mq7K8uXlo/9+Fj9+hwcHKz6qoF7uzs+K2+tzL8+X78AWh+2Jn8xuX0y5Us1P2ieePrEsR8f2/j3jc5Wp3O989l/flZK9ySJQz88VO9wLV9eXnxzsbPVabfbx4529/6ee/65L77zsX8ZO3j/wfk/zNcnoPTO2Dp8/46Pc7avt+dfn59/fX72N7NjR8d+9NCP6uXHHzs++IPBUso9+7ojwd4008ZfNm4eoB3650P1heVLy51Op/Vxq1ex3su4+X5z+wCtlHLq9Kn68c68NHPupXPb//XOoWl9/LXO3e2pH+bca3Onnj11+NDh+ryWat+NQzonn+12Z+Thkeb7zVJKp9NZeXdl+KHh+tDBno0/3p0JPfHTE90z1z5sHXu8+1Te/PYJn+cr73UODw0fOHCg/nXfde5lVVUL/7t7Yvrqu6v1RwhnX57dNY5oftDcPgH8Beqjos1ms/cbXztz+kw9/lq5vDL80HDZKlPPT009v+0Iw8DA+GPj5fN1tjrXrl0rpcy+NDv70rbN6yv1wbsbt7zeuXkctP3jq1XVnfxqNpu9c3cb+xv1bmxnq1OVqpQy8fRE/cGp3g/k6ntX6xU3P9q8xYqdTmerexbLoUOHbh5vHn386AvPv1BKufDGhamf34HX/M0Pc2BgYGFxofetB+4dOHP2zOyLs+12e/u8YSll/Inxmz88f/sajca5V86dOn2qbN04kls7efrk15y44P8re9nrXHlr5cIbF3bsC/SV584+t+ss9vW19fqzOz3Hnzy++u7qbeaslHLyX0++/dbb26elG43G+dfP92rSaDTW19aPP3m8d4NqX3Xu5XNLf1r64nuu+qr1K+szL+84uHn88eO9vbybNRqNoaGh6V9Or19Z3zV1tfLWSm83sKqq86+e7515sHSpuyUD9w70Bjv1dpZSVt9ZvRHQvnLulXMLf+y+JSxfWu5d3n44uGf80e4r/+LFizd/dc+qqhocHDz5zMmly0tLf1raVdKJxycW3lzozSqUUg4cOHDulXNfJ2e1kYdGli4vDT1445dqcHBw4Y8LJ3+6+0w3+AJ7/NsbAP+A/MVHIIeiATkUDcihaEAORQNyKBqQQ9GAHIoG5FA0IIeiATkUDcihaEAORQNyKBqQQ9GAHIoG5FA0IIeiATkUDcjxnb/919/u9jYA3BnGaEAORQNyKBqQQ9GAHIoG5OjbfqX5YbNs3a0tAdiLgXsHqqqqL+8co8kZ8G3T2mz1LtvrBHIoGpBD0YAcigbkUDQgh6IBORQNyKFoQA5FA3IoGpBD0YAcfV9+EyillDL90nTrr62bl8+/Nn/q9KnPPvvs5uWllOZfmzO/ntn8aLOqqsHvD06enWzsa0z8dOLm++n/bv/089O9qxM/mbjnv98z89LMHX0QhDNG47b9/Q8ZbH68ufnx5vavtD5qbX68efNfOrj2ybXJ05ObH20Ofn+wv79/Y2Nj/LHxTqfTu8HNd9XZ6ixeWhw7Mra5ufnpf3z6TTwOghmjcbumzk7VF8aOjJVS5n4z1/sTLrXJs5OD3x/cscrPp0op518/37+/v5TS6XQWLi9UVVUP3zpbnWOPHCt/H83Vqr5q/rfzQw8Prb219s0+HhIZo/EN6mx1SimLi4v11aqqxh8d/9K1li4vTT079c1uGaEUjTtm8vTk2JGx+t/yO8ullLnfzJVSlt9cHjsyNvfbuXa7fbe3kXCKxjeo0Wic/935A/ceKKUsX1oef3x87rdzd3ujSGYejTtm5pWZXfNopZT+/v56mmz+9/OLbywuX1oef3K8sa9xNzaQfMZofIM6W516Kq2UMvHkxMDAQCnl2rVrd3WjSGaMxh3zafvT1kc3Tlgb+O7A+GPjVVWdfPbk4UOHm81mq9UqpdRdg2+ConHHvPD8C9uvLl1eGnloZPny8vblz/3yuaqvumlVuDO+87f/+lvvSvOD5l3cFL4t2tfbpZTtc2H1kl3qG3Q6nWv/ca31Qav/3v6BgYHtOetsdeqzbW85rda+3q76ql2nvMEt9JXB+7oTuIoGfMttK5ojA0AORQNyKBqQQ9GAHIoG5FA0IIeiATkUDcihaEAORQNyKBrw7TZw4MZfc9nxuU6AbzVjNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuRQNCCHogE5FA3IoWhADkUDcigakEPRgByKBuT4f1ZVvXKwGu9EAAAAAElFTkSuQmCC\"\n            }\n        ], \n        \"snapshot_time_millis\": 403\n    }\n}\n```\n\n最后面的`screenshot`就是手机的截图，以base64编码。\n\n> **为了简化分析，在上面的数据里面没有体现View的一些属性，例如Button上显示的text文字，实际上在遍历ViewTree里面每一个View的同时也会上报这个信息，因为我们的Activity和里面View大部分情况下都会是复用的，一个购物的Activity界面，里面的按钮可以显示不同的文字，我们需要统计不同商品的点击次数，就必须要知道按钮上显示的文字是什么。**\n\n对于View来讲，关键信息有这些：\n\n- activity：Activity类名\n- hashcode：view的hashcode\n- id：在Apk中的id\n- index：在父控件中的同类元素的顺序，如果是根View，那么为-1，如果父View没有多个同类型的子View，那么为0（例如LinearLayout中只有一个Button）\n- sa_id_name：在Apk中的控件的id的字符串名称，例如android:id=\"@+id/button2\"，结果就是`button2`\n- top：距离屏幕上边距\n- left：距离屏幕的左边距\n- width：宽\n- height：高\n- classes：View自身以及所有的父类类名，是一个数组，这里决定了一个View到底可以有哪些交互，比如点击、长按等\n- subviews：子View的hashcode，是一个数组\n\n#### 4.2.1.3 保存待监测的元素的关键信息\n\n将上面收集到数据发送到连接的WebSocket后台，由后台解析之后，可以把App界面的截图展示在Web页面。然后把可以监测的元素以方框的形式添加在界面上提示用户（web页面实现时，我推测只需要用到这个View的left、top、width、height属性在html上加一个div标签，然后设置一个有颜色的border属性即可）。用户可以在这个Web页面点击需要监测的元素，设置这个元素的事件名称（event_type和event_name），点击保存。保存一个需要监测的元素时，需要保存这个元素在当前Activity的ViewTree的路径`path`，以及这个View在父控件中的`index`，具体有下面几个信息：\n\n- target_activity：View所在的Activity类名\n- event_type：事件类型，例如点击事件\n- event_name：事件名称\n- trigger_id：事件id\n- path：View在ViewTree中查找路径\n\t- prefix：表示是否需要监测这个View的兄弟元素，当为`shortest`时，表示只匹配到索引为index那一个元素，否则匹配所有的父控件下面所有的同类子元素\n\t- view_class：view的类名\n\t- index：View在父控件中同类元素的下标索引，**这个属性一定程序上可以对抗ViewTree的更新导致的元素监测失效问题，因为父控件加入一个不同类的元素时，index的值不会发生改变**\n\t- id：View在Apk中的id\n\t- sa_id_name：View在Apk中的id的字符串名称\n\n\n### 4.2.2 获取配置，查找View，监测View的行为后上报事件\n\n#### 4.2.2.1 获取配置，查找View\n\nSDK启动时，会从服务器拉取一份JSON格式的配置，保存到sharedPreference里，同时SDK会扫描`android.R`文件里面的资源id和资源的name并缓存起来。\n\nSDK得到配置之后，解析成JSON对象，读取`event_bindings`字段，再进一步读取`events`字段，这个字段下面包含了一个数组，数组的每个元素都描述了一类事件，并包含了这类事件需要监测的元素所在的Activity和元素的路径。这份配置基本上是这样的一个结构：\n\n```json\nevent_bindings: {\n    events:[\n        {\n            target_activity: \"\"\n            event_name: \"\",\n            event_type: \"\",\n            ...\n            path: [\n                {\n                    prefix:\n                    view_class:\n                    index:\n                    id:\n                    sa_id_name:\n                }, \n                {\n                    ...\n                }\n                ...\n            ]\n        }\n    ]\n}\n```\n\n收到了这份配置之后，SDK会把根据每个event信息，生成一个`ViewVisitor`。`ViewVisitor`的作用就是把`path`数组里面指向的所有View元素都找到，并且根据event_type，**给这个View设置相应的行为监测器**，当这个View发生指定行为时，监测器就会监测到，并上报行为。\n\n在生成ViewVisitor之后，SDK内部是以`Map<activity, ViewVisitor>`结构保存它们的，这也比较容易理解，毕竟我们的界面是随着一个一个的Activity被create，onResume之后才被用户看见的嘛。在ViewVisitor对象中还有一个`PathFinder`对象，这个对象负责在ViewTree中根据path去查找View（这里其实是在一个tree里面查找node的问题）。\n\n#### 4.2.2.2 监测View的行为，上报事件\n\n`ViewVisitor`是怎么给View设置监听器，监测元素的产生的行为呢？**答案就是`View.AccessibilityDelegate`。**\n\n在Android SDK里面，AccessibilityService（无障碍服务）为我们提供了一系列的事件回调，帮助我们指示一些用户界面的状态变化。我们可以派生辅助功能类，进而对不同的AccessibilityEvent进行处理，我们看下AccessibilityEvent里面有哪些事件类型：\n\n```java\n    /**\n     * Represents the event of clicking on a {@link android.view.View} like\n     * {@link android.widget.Button}, {@link android.widget.CompoundButton}, etc.\n     */\n    public static final int TYPE_VIEW_CLICKED = 0x00000001;\n\n    /**\n     * Represents the event of long clicking on a {@link android.view.View} like\n     * {@link android.widget.Button}, {@link android.widget.CompoundButton}, etc.\n     */\n    public static final int TYPE_VIEW_LONG_CLICKED = 0x00000002;\n\n    /**\n     * Represents the event of selecting an item usually in the context of an\n     * {@link android.widget.AdapterView}.\n     */\n    public static final int TYPE_VIEW_SELECTED = 0x00000004;\n\n    /**\n     * Represents the event of setting input focus of a {@link android.view.View}.\n     */\n    public static final int TYPE_VIEW_FOCUSED = 0x00000008;\n\n    /**\n     * Represents the event of changing the text of an {@link android.widget.EditText}.\n     */\n    public static final int TYPE_VIEW_TEXT_CHANGED = 0x00000010;\n    ...\n```\n\n**以点击事件`TYPE_VIEW_CLICKED`为例**，当Activity界面的RootView开始绘制的时候（ViewTreeObserver.OnGlobalLayoutListener的onGlobalLayout回调时），ViewVisitor也会开始寻找指定的View，并给这个View设置新的AccessibilityDelegate。简单看一下这个新的View.AccessibilityDelegate是怎么写的：\n\n```java\nprivate class TrackingAccessibilityDelegate extends View.AccessibilityDelegate {\n...\n            public TrackingAccessibilityDelegate(View.AccessibilityDelegate realDelegate) {\n                mRealDelegate = realDelegate;\n            }\n\n            public View.AccessibilityDelegate getRealDelegate() {\n                return mRealDelegate;\n            }\n\n            ...\n            \n            @Override\n            public void sendAccessibilityEvent(View host, int eventType) {\n                if (eventType == mEventType) {\n                    fireEvent(host); // 事件上报\n                }\n\n                if (null != mRealDelegate) {\n                    mRealDelegate.sendAccessibilityEvent(host, eventType);\n                }\n            }\n\n            private View.AccessibilityDelegate mRealDelegate;\n        }\n        ...\n```\n\n可以看到在SDK的`TrackingAccessibilityDelegate#sendAccessibilityEvent`方法里面，发出了事件上报。\n\n这么说View的点击处理方法中应该要调用`sendAccessibilityEvent`才行，那么View在点击方法的内部实现里有调用`sendAccessibilityEvent`方法吗？看一下View处理点击事件 - `View.performClick`的源码：\n\n```java\npublic boolean performClick() {\n    final boolean result;\n    final ListenerInfo li = mListenerInfo;\n    if (li != null && li.mOnClickListener != null) {\n        playSoundEffect(SoundEffectConstants.CLICK);\n        li.mOnClickListener.onClick(this);\n        result = true;\n    } else {\n        result = false;\n    }\n    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);\n    return result;\n}\n...\npublic void sendAccessibilityEvent(int eventType) {\n    if (mAccessibilityDelegate != null) {\n        mAccessibilityDelegate.sendAccessibilityEvent(this, eventType);\n    } else {\n        sendAccessibilityEventInternal(eventType);\n    }\n}\n...\npublic void setAccessibilityDelegate(@Nullable AccessibilityDelegate delegate) {\n    mAccessibilityDelegate = delegate;\n}\n```\n\n由此可见View的点击处理内部确实调用到了`sendAccessibilityEvent `，所以在RootView开始绘制的时候，给View注册AccessibilityDelegate可以监测到它的点击事件。可视化埋点这里对View的事件监测也是一种**“动态Hook”**的实现，不过没有采用第三章中介绍的反射获取OnClickListener的方案，而是采用了获取AccessibilityDelegate来实现，这种方式反射次数少一些，效率上会更好一些。\n\n> 在网上看到有网友提出，setAccessibilityDelegate来监测View的点击对大多数厂商的机型和版本都是可以的，但是有部分机型是无法成功捕获监控到点击事件。从View的标识生成，以及监测原理来讲，这个方案的稳定性存在一些疑问。\n\n## 4.3 可视化埋点的难点和优化\n\n上面简单分析了Mixpanel和SensorsSDK可视化埋点的基本实现，里面最重要有一个技术点值得仔细琢磨，那就是**如何唯一标识App中的一个View？由于View是长在ViewTree上的一个节点，那么用纵向的路径，以及横向的下标应该可以标识一个View。**\n\n- 纵向的路径：是指从根View到这个View的父控件的路径上经过的每一个节点\n- 横向的下标：是指这个View在父控件中的同类元素的下标索引（例如一个LinearLayout中有两个Button，那么第一个Button的下标就是0，第二个Button的下标就是1，这种方式可以抵抗父控件中加入一个非Button类型的元素时对ViewTree的改变，保证仍然可以找到Button，但是无法抵抗父控件中加入同类型的元素）\n\n上面仅仅提到了标识一个View的基本方法，但是有很多实际场景，会对View的查找造成毁灭性的影响，例如界面中Fragment的变化，ViewTree的变化，ListView中控件的复用等等，这里有两篇网易的博客，里面对一些场景的优化做了详细地说明，可以仔细看看：\n\n- [http://www.infoq.com/cn/presentations/netease-happy-to-no-burial-point-data-collection-practice-road](http://www.infoq.com/cn/presentations/netease-happy-to-no-burial-point-data-collection-practice-road)\n- [http://www.jianshu.com/p/b5ffe845fe2d](http://www.jianshu.com/p/b5ffe845fe2d)\n\n\n## 4.4 可视化埋点参考资料\n\n- sensorsdata git，包含了Android、iOS、js、JAVA等多个版本的SDK：[https://github.com/sensorsdata](https://github.com/sensorsdata)\n- Mixpanel git，包含了Android、iOS、js、JAVA等多个版本的SDK：[https://github.com/mixpanel](https://github.com/mixpanel)\n- 网易移动端数据收集和分析博客：[http://www.jianshu.com/c/ee326e36f556](http://www.jianshu.com/c/ee326e36f556)\n- 美团点评前端无痕埋点实践：[https://tech.meituan.com/mt-mobile-analytics-practice.html](https://tech.meituan.com/mt-mobile-analytics-practice.html)\n\n# 五、总结\n\n最后简单总结一下几种方案的优缺点和使用场景，在实际应用中多种方式配合使用，平衡效率和可靠性，适合自己的业务才是最好的。\n\n|埋点方案|优点|缺点|适用场景|\n|:---:|:---|:---|:---|\n|代码埋点|1.使用灵活，精确控制发送时机 <br> 2.方便设置自定义业务相关的属性|1.埋点成本高，工作量大，必须是技术人员才能完成 <br> 2.更新成本高，一旦上线很难修改。只能通过热修复或者重新发版 <br> 3.对业务代码的侵入大|对业务上下文理解要求较高的业务数据，如电商购物这类可能经过多次页面跳转，埋点时还需要带上前面页面中的一些信息|\n|全埋点|1.开发、维护成本低 <br> 2.可以追溯历史数据 <br> 3.对业务代码侵入小 <br> 4.可以收集到一些额外信息，例如界面的热力图|1.高额流量和计算成本 <br> 2.无法灵活收集属性 <br> 3.动态的Hook方式支持的控件有限、事件类型有限，大量事件监测时反射对App运行性能有影响 <br> 4.静态的Hook方式需要第三方编译器参与，打包时间增长|上下文相对独立的、通用的数据，如点击热力图，性能监控和日志|\n|可视化埋点|1.开发、维护成本低 <br> 2.可以按需埋点，灵活性好 <br> 3.对业务代码侵入小|1.界面的结构发生变化时，圈选的待监测元素可能会失效 <br> 2.支持的控件和事件类型有限 <br> 3.无法灵活地收集到上下文属性|上下文相对简单，依靠控件可以获得上下文信息，界面结构比较简单固定，如新闻阅读、游戏分享界面|\n","source":"_posts/Android埋点技术分析.md","raw":"---\nlayout: post\ntitle: Android埋点技术分析\ndate: '2017-12-18'\ntags:\n  - Android\n  - SDK\n  - 埋点\n  - 无埋点\n  - 可视化埋点\ncategories:\n  - 技术\n---\n\n# 一、概念\n\n埋点，是对网站、App或者后台等应用程序进行数据采集的一种方法。通过埋点，可以收集用户在应用中的产生行为，进而用于分析和优化产品后续的体验，也可以为产品的运营提供数据支撑，其中常见的指标有PV、UV、页面时长和按钮的点击等，通常可以采集到下面这些数据。\n\n- 行为数据：时间、地点、人物、交互的内容等\r- 质量数据：App运行情况、浏览器加载情况、错误异常等\r- 环境数据：手机型号、操作系统版本、浏览器UA、地理、运营商、网络环境等\r- 运营数据：PV、UV、点击量、日活、留存、渠道来源等\n\n采集行为数据时，通常需要在Web页面/App里面添加一些代码，当用户的行为达到某种条件时，就会向服务器上报用户的行为。其实添加这些代码的过程就可以叫做“埋点”，在很久以前就已经出现了这种技术。随着技术的发展和大家对数据采集要求的不断提高，我认为埋点的技术方案走过了下面几个阶段：\n\n- **代码埋点：代码埋点是指在某个事件发生时调用数据发送接口上报数据。**例如开发人员按照产品/运营的需求，在Web页面/App的源码里面添加行为上报的代码，当用户的行为满足某一个条件时，这些代码就会被执行，向服务器上报行为数据。这种方案是最基础的方案，每次增加或者修改数据上报的条件，都需要开发人员的参与，并且只能在下一个版本上线后才能看到效果。基本上所有的数据平台都提供了这类数据上报的SDK，将行为上报的后台服务器接口封装成了简单的客户端SDK接口。开发者可以通过嵌入这类SDK，在埋点的地方调用少量的代码就可以上报行为数据。\n\n- **全埋点：全埋点指的是将Web页面/App内产生的所有的、满足某个条件的行为，全部上报到后台服务器。**例如把一个App中所有的按钮点击都进行上报，然后由产品/运营去后台筛选所需要的行为数据。这种方案的优点非常明显，就是可以不用在新增/修改行为上报条件时，再找开发人员去修改埋点的代码。然而它的缺点也和优点一样明显，那就是上报的数据量比代码埋点大很多，里面可能很多是没有价值的数据。此外，这种方案更倾向于独立去看待用户的行为，而没有关注行为的上下文，给数据分析带来了一些难度。很多公司也提供了这类功能的SDK，通过静态或者动态的方式，**“Hook”了原有的App代码**，从而实现了行为的监测，在数据上报时通常是采用累积多条再上报的方案来合并请求。\n\n- **可视化埋点：可视化埋点是指通过可视化工具配置采集节点，在App/Web解析配置查找节点，监听节点产生的事件并上报。**例如产品在Web页面/App的界面上进行圈选，配置需要监测界面上哪一个元素，然后保存这个配置，当App启动时会从后台服务器获得产品/运营预先圈选好的配置，然后根据这份配置查找并监测App界面上的元素，当某一个元素满足条件时，就会上报行为数据到后台服务器。有了暴力的全埋点技术方案，很容易联想到按需埋点，可视化埋点就是一种按需配置埋点的方案。现在也有一些公司提供了这类SDK，圈选监测元素时，有的是提供一个Web管理界面，手机在安装并初始化了SDK之后，可以和管理界面了连接，让用户在Web管理界面上配置需要监测的元素，有的是直接让用户在手机上圈选元素进行埋点。\n\n> hook直译是钩子的意思，以前学信息安全的时候在windows上听到过，大体意思是通过某种手段去改变系统API的一个行为，绕过系统的某个方法，或者改变系统的工作流程。在这里其实是指把本来要执行某个方法的对象替换成另一个，一般用的是反射或者代理，需要找到hook的代码位置，甚至还可以在编译阶段实现替换。全埋点和可视化埋点都需要Hook掉App原本的代码实现。\n\n\n业界有多家SDK都支持上面介绍的3种埋点方案中的一种或者全部，例如Mixpanel、Sensorsdata、TalkingData、GrowingIO、诸葛IO、Heap Analytics、MTA、Umeng Analytics、百度，只是大家对后两种埋点的称呼不完全相同，有的叫无埋点或者codeless埋点。由于[Mixpanel](https://github.com/mixpanel/mixpanel-android)（支持代码埋点、可视化埋点）和[Sensorsdata](https://github.com/sensorsdata/sa-sdk-android)（全部支持）都开源了自己的全部SDK，技术方案也比较类似，下面以它们的Android SDK为例，简单分析一下3种埋点方案的技术实现。关于JS的SDK技术实现，可以看下我的另一篇博客-[JS埋点SDK技术分析](http://unclechen.github.io/2017/12/24/JS%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/)。\n\n<!-- more -->\n\n# 二、代码埋点\n\n包含Mixpanel SDK在内的大部分SDK，都会把这种埋点方案封装成一个比较简单的接口，在这里是`track(String eventName, JSONObject properties)`，开发者在调用这个接口时，可以把一个事件名称和事件的属性传入，然后就可以上报到后台了。一般代码埋点长这样：\n\n```java\nbutton.setOnClickListener(new View.OnClickListener() {\n  @Override\n  public void onClick(View v) {\n    // 业务代码\n    // ...\n    // 埋点上报\n    JSONObject properties = new JSONObject();\n    properties.put(\"price\", 6800);\n    properties.put(\"name\", \"Pixel2 XL\");\n    Tracker.track(\"PURCHASE\", properties);\n    }\n  });\n```\n\n\nMixpanel SDK内部采用一条HandlerThread线程来处理事件，当开发者调用`track(String eventName, JSONObject properties)`方法时，**主线程切换到HandlerThread**当中，并先将事件存入数据库。然后看SDK中是否累计到了40个事件，如果累计到40个事件的话，就合并它们上报到后台。\n\n当开发者设置为debug模式，或者手动调用`flush`接口时，可以立即上报累计的所有事件，不过由于只有一条线程，所以如果在flush的时候，前面的事件还没有处理完成，SDK会间隔1分钟再次去处理后面的这些事件。\n\n开发者可以设置累计上报的事件数量阈值、事件阻塞时再次尝试上报的时间间隔等。这种方案比较基础，相信大部分开发者都接触过，不需要过多分析。\n\n# 三、全埋点\n\n## 3.1 基本原理\n\n全埋点要对方法进行Hook，按照**是否在运行时**这个条件来区分，Android全埋点可以有下面两种方式：\n\n- **静态Hook：**AspectJ实现AOP，编译期修改代码\r- **动态Hook：**运行时替换View.OnClickListener等事件回调\n\n这里的Hook其实就是一种AOP实现。\n\n> 那么什么是AOP？AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。（from baidu baike）\n\n> 简而言之，AOP是可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。\n\n**Sensors Analytics AndroidSDK全埋点的实现就是通过在代码编译阶段，找到源代码中需要上报事件的位置，插入SDK的事件上报代码。它用到的框架是[AspectJ](https://www.eclipse.org/aspectj/)。**\n\n\n## 3.2 使用AspectJ做静态Hook\n\n### 3.2.1 AspectJ基本概念\n\n在很多地方我们可以看到AspectJ的身影，例如JakeWharton大神贡献的一个注解日志和性能调优框架[Hugo](https://github.com/JakeWharton/hugo)，在Spring框架里面也有应用到AspectJ的概念（不过Spring AOP的实现是用的动态代理）。我理解AspectJ里面的主要几个概念有：\n\n- **JPoint：**代码切点（就是我们要插入代码的地方）\n- **Aspect：**代码切点的描述\n\t- **Pointcut：**描述切点具体是什么样的点，如函数被调用的地方（`Call(MethodSignature)`）、函数执行的内部（`execution(MethodSignature)`）\n\t- **Advice：**描述在切点的什么位置插入代码，如在Pointcut前面（`@Before`）还是后面（`@After`），还是环绕整个Pointcut（`@Around`）\n\n由此可见，在实现AOP功能时，需要做下面几件事：\n\n- 定义一个Aspect，这个Aspect里面必须有Pointcut和Advice两个属性\n- 编写在匹配到符合Pointcut和Advice描述的代码时，需要注入的代码\n- 在代码编译时，通过特殊的java编译器（Aspect的ajc编译器），找到符合我们定义的Aspect的代码，将需要注入的代码插入到Advice指定的位置。\n\n如果你对AspectJ有了解的话，已经可以猜到SDK内部是怎么实现全埋点的了；如果没有接触，我觉得也不用急于全面地去学习AspectJ，毕竟AspectJ的功能很强大（可远不止前置、后置这么简单的增强），埋点这种业务只用到了AspectJ当中的一小部分功能而已，可以直接看下面的分析。\n\n### 3.2.2 实现\n\n神策SDK里面是如何监测View点击事件呢？我把SDK代码简化一下进行分析，有下面几个步骤：\n\n#### 3.2.2.1 定义一个Aspect\n\n```java\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\n\n@Aspect\npublic class ViewOnClickListenerAspectj {\n\n    /**\n     * android.view.View.OnClickListener.onClick(android.view.View)\n     *\n     * @param joinPoint JoinPoint\n     * @throws Throwable Exception\n     */\n    @After(\"execution(* android.view.View.OnClickListener.onClick(android.view.View))\")\n    public void onViewClickAOP(final JoinPoint joinPoint) throws Throwable {\n        AopUtil.sendTrackEventToSDK(joinPoint, \"onViewOnClick\");\n    }\n}\n\n```\n\n这段Aspect的代码定义了：**在执行android.view.View.OnClickListener.onClick(android.view.View)方法原有的实现后面，需要插入`AopUtil.sendTrackEventToSDK(joinPoint, \"onViewOnClick\");`这段代码。**\n\n`AopUtil.sendTrackEventToSDK(joinPoint, \"onViewOnClick\");`这段代码做的事情就是点击事件的上报。因为神策SDK将全埋点功能和主SDK包分离成了两个jar包，所以通过AopUtil工具去调用真正的事件上报代码，这里不细述其实现，下面直接看这段代码背后真正的点击上报实现。\n\n```java\nSensorsDataAPI.sharedInstance().track(AopConstants.APP_CLICK_EVENT_NAME, properties);\n\n```\n\n可以看到AOP实现的点击监测，最后也走`track`方法进行上报了。\n\n#### 3.2.2.2 使用ajc编译器向源代码中“织入”Aspect代码\n\n采用AspectJ框架编写的代码，想要注入原来的工程的代码，需要在`/app/build.gradle`中引用ajc编译器，脚本如下：\n\n```groovy\n...\nimport org.aspectj.bridge.IMessage\nimport org.aspectj.bridge.MessageHandler\nimport org.aspectj.tools.ajc.Main\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'org.aspectj:aspectjtools:1.8.10'\n    }\n}\n\nrepositories {\n    mavenCentral()\n}\n\nandroid {\n    ...\n}\n\ndependencies {\n    ...\n    compile 'org.aspectj:aspectjrt:1.8.10'\n}\n\nfinal def log = project.logger\nfinal def variants = project.android.applicationVariants\n\nvariants.all { variant ->\n    if (!variant.buildType.isDebuggable()) {\n        log.debug(\"Skipping non-debuggable build type '${variant.buildType.name}'.\")\n        return;\n    }\n\n    JavaCompile javaCompile = variant.javaCompile\n    javaCompile.doLast {\n        String[] args = [\"-showWeaveInfo\",\n                     \"-1.5\",\n                     \"-inpath\", javaCompile.destinationDir.toString(),\n                     \"-aspectpath\", javaCompile.classpath.asPath,\n                     \"-d\", javaCompile.destinationDir.toString(),\n                     \"-classpath\", javaCompile.classpath.asPath,\n                     \"-bootclasspath\", project.android.bootClasspath.join(File.pathSeparator)]\n        log.debug \"ajc args: \" + Arrays.toString(args)\n\n        MessageHandler handler = new MessageHandler(true);\n        new Main().run(args, handler);\n        for (IMessage message : handler.getMessages(null, true)) {\n           switch (message.getKind()) {\n                case IMessage.ABORT:\n                case IMessage.ERROR:\n                case IMessage.FAIL:\n                    log.error message.message, message.thrown\n                    break;\n                case IMessage.WARNING:\n                    log.warn message.message, message.thrown\n                    break;\n                case IMessage.INFO:\n                    log.info message.message, message.thrown\n                    break;\n                case IMessage.DEBUG:\n                    log.debug message.message, message.thrown\n                    break;\n            }\n        }\n    }\n}\n```\n\n在SensorsAndroidSDK中，把上面这段脚本编写成了一个[gradle插件](https://github.com/sensorsdata/sa-sdk-android-plugin2)，开发者只需要在`app/build.gradle`引用这个插件即可。\n\n```groovy\napply plugin: 'com.sensorsdata.analytics.android'\n```\n\n#### 3.2.2.3 查看织入后的class文件\n\n完成上面两步，就可以实现在`android.view.View.OnClickListener.onClick(android.view.View)`方法中插入我们的数据上报代码了。我们在demo代码中加一个Button，并给它set一个OnClickListener，编译一下代码，查看`/build/intermediates/classes/debug/`里面class文件，经过ajc编译之后，原始代码中插入了Aspect的代码，并调用了`ViewOnClickListenerAspectj`里面的`onViewClickAOP`方法。\n\n```java\npublic class MainActivity extends Activity {\n    public MainActivity() {\n    }\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        this.setContentView(2130968603);\n        Button btnTst = (Button)this.findViewById(2131427422);\n        btnTst.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                JoinPoint var2 = Factory.makeJP(ajc$tjp_0, this, this, v);\n\n                try {\n                    Log.i(\"MainActivity\", \"button clicked\");\n                } catch (Throwable var5) {\n                    ViewOnClickListenerAspectj.aspectOf().onViewClickAOP(var2);\n                    throw var5;\n                }\n\n                ViewOnClickListenerAspectj.aspectOf().onViewClickAOP(var2);\n            }\n\n            static {\n                ajc$preClinit();\n            }\n        });\n    }\n}\n```\n\nAspectJ的基本用法就是这样，除了对`OnClickListener`进行替换，理论上可以对任何已知的方法进行替换，所以在埋点SDK中还可以采用对RatingBar、CheckBox、RadioButton等控件的点击进行监听。\n\n神策AndroidSDK借助AspectJ插入Aspect代码，就是一种静态Hook的方式。本质上是在程序没有运行之前，通常是编译或者链接的阶段，对字节码进行修改，插入事件上报的代码。\n\n修改字节码除了这种方案之外，还有Android Gradle插件提供的trasform api（1.5.0版本以上）、ASM、Javassist。在网易乐得的埋点方案，Nuwa热修复项目都可以见到这些技术的实践。\n\n## 3.3 使用代理模式实现动态Hook\n\n### 3.3.1 代理模式\n\n上面分析了以AspectJ为代表的**“静态Hook”**实现方案，有没有其他办法可以不修改源代码，只是**在App运行的时候去“动态Hook”**点击行为的处理呢？答案是肯定的，JAVA里面有一个设计模式叫代理模式，从这个角度出发，看下怎么**在运行时**实现点击事件的监测上报。\n\n在[android.view.View.java](https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/view/View.java)的源码（`API>=14`）中，有这么几个关键的方法：\n\n```java\n    // getListenerInfo方法：返回所有的监听器信息mListenerInfo\n    ListenerInfo getListenerInfo() {\n        if (mListenerInfo != null) {\n            return mListenerInfo;\n        }\n        mListenerInfo = new ListenerInfo();\n        return mListenerInfo;\n    }\n    \n    // 监听器信息\n    static class ListenerInfo {\n        ... // 此处省略各种xxxListener\n        /**\n         * Listener used to dispatch click events.\n         * This field should be made private, so it is hidden from the SDK.\n         * {@hide}\n         */\n        public OnClickListener mOnClickListener;\n\n        /**\n         * Listener used to dispatch long click events.\n         * This field should be made private, so it is hidden from the SDK.\n         * {@hide}\n         */\n        protected OnLongClickListener mOnLongClickListener;\n\n        ...\n    }\n    ListenerInfo mListenerInfo;\n    \n    // 我们非常熟悉的方法，内部其实是把mListenerInfo的mOnClickListener设成了我们创建的OnclickListner对象\n    public void setOnClickListener(@Nullable OnClickListener l) {\n        if (!isClickable()) {\n            setClickable(true);\n        }\n        getListenerInfo().mOnClickListener = l;\n    }\n    \n    /**\n     * 判断这个View是否设置了点击监听器\n     * Return whether this view has an attached OnClickListener.  Returns\n     * true if there is a listener, false if there is none.\n     */\n    public boolean hasOnClickListeners() {\n        ListenerInfo li = mListenerInfo;\n        return (li != null && li.mOnClickListener != null);\n    }\n```\n\n通过上面几个方法可以看到，点击监听器其实被保存在了**`mListenerInfo.mOnClickListener`**里面。那么实现**Hook点击监听器**时，只要将这个`mOnClickListener`替换成我们包装的**点击监听器代理对象**就可以实现点击监听的代理了。\n\n### 3.3.2 实现\n\n#### 3.3.2.1 创建点击监听器的代理类\n\n```\n    // 点击监听器的代理类，具有上报点击行为的功能\n    class OnClickListenerWrapper implements View.OnClickListener {\n        // 原始的点击监听器对象\n        private View.OnClickListener onClickListener;\n\n        public OnClickListenerWrapper(View.OnClickListener onClickListener) {\n            this.onClickListener = onClickListener;\n        }\n\n        @Override\n        public void onClick(View view) {\n            // 让原来的点击监听器正常工作\n            if(onClickListener != null){\n                onClickListener.onClick(view);\n            }\n            // 点击事件上报，可以获取被点击view的一些属性\n            track(APP_CLICK_EVENT_NAME, getSomeProperties(view));\n        }\n    }\n```\n\n#### 3.3.2.2 反射获取一个View的mListenerInfo.mOnClickListener，替换成代理的点击监听器\n\n```\n    // 对一个View的点击监听器进行hook\n    public void hookView(View view) {\n        // 1. 反射调用View的getListenerInfo方法（API>=14），获得mListenerInfo对象\n        Class viewClazz = Class.forName(\"android.view.View\");\n        Method getListenerInfoMethod = viewClazz.getDeclaredMethod(\"getListenerInfo\");\n        if (!getListenerInfoMethod.isAccessible()) {\n            getListenerInfoMethod.setAccessible(true);\n        }\n        Object mListenerInfo = listenerInfoMethod.invoke(view);\n        \n        // 2. 然后从mListenerInfo中反射获取mOnClickListener对象\n        Class listenerInfoClazz = Class.forName(\"android.view.View$ListenerInfo\");\n        Field onClickListenerField = listenerInfoClazz.getDeclaredField(\"mOnClickListener\");\n        if (!onClickListenerField.isAccessible()) {\n            onClickListenerField.setAccessible(true);\n        }\n        View.OnClickListener mOnClickListener = (View.OnClickListener) onClickListenerField.get(mListenerInfo);\n        \n        // 3. 创建代理的点击监听器对象\n        View.OnClickListener mOnClickListenerWrapper = new OnClickListenerWrapper(mOnClickListener);\n        \n        // 4. 把mListenerInfo的mOnClickListener设成新的onClickListenerWrapper\n        onClickListenerField.set(mListenerInfo, mOnClickListenerWrapper);\n        // 用这个似乎也可以：view.setOnClickListener(mOnClickListenerWrapper);     \n    }\n```\n\n注意，如果是`API<14`的话，mOnClickListener直接是直接以一个Field保存在View对象中的，没有ListenerInfo，因此反射的次数要更少一些。\n\n#### 3.3.2.3 对App中所有的View进行动态Hook\n\n我们在分析的是全埋点，那么怎样把App里面所有的View点击都Hook到呢？有两种方式：\n\n- 第一种：当Activity创建完成后，开始从Activity的DecorView开始自顶向下深度遍历ViewTree，遍历到一个View的时候，对它进行hookView操作。这种方式有点暴力，由于这里面遍历ViewTree的时候用到了大量反射，性能会有影响。\n\n- 第二种：比第一种方式稍微优秀一些，来源是一个Github上的开源库[AndroidTracker](https://github.com/foolchen/AndroidTracker)（Kotlin实现）。他的处理方式是当Activity创建完成后，在DecorView中添加一个透明的View作为子View，在这个子View的onTouchEvent方法中，根据触摸坐标找到屏幕中包含了这个坐标的View，再对这些View尝试进行hookView操作。**这种方式比较取巧，首先是拿到了手指按下的位置，根据这个位置来找需要被Hook的View，避免了在遍历ViewTree的同时对View进行反射。具体实现是在遍历ViewTree中的每个View时，判断这个View的坐标是否包含手指按下的坐标，以及View是否Visible，如果满足这两个条件，就把这个View保存到一个ArrayList<View>hitViews。然后再遍历这个ArrayList里面的View，如果一个View#hasOnClickListeners返回true，那么才对他进行hookView操作。**\n\n\n### 3.3.3 动态Hook小结\n\n整体来看，动态Hook的思路这里用到了反射，难免对程序性能产生影响，如果要采用这种方式实现全埋点方案，还需要好好评估。既然提到了代理，要说一下**这里的“代理模式”其实还是JAVA的静态代理**，不是动态代理。因为`OnClickListener`和`OnClickListenerWrapper`是在编写代码的时候就确定了，并不是在运行时动态生成了一个`OnClickListenerWrapper`。在JDK中动态代理是使用Native去生成了代理类的字节码（比如使用ASM等工具），并使用ClassLoader加载进来的。\n\n\n## 3.4 全埋点参考资料\n\n- Aspect Oriented Programming in Android：[https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/](https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/)\n- AOP之AspectJ全面剖析in Android（AspectJ详细用法）：[http://www.jianshu.com/p/f90e04bcb326](http://www.jianshu.com/p/f90e04bcb326)\n- 沪江开源了一个叫做AspectJX的插件，扩展了AspectJ，除了对src代码进行AOP，还支持kotlin、工程中引用的jar和aar进行AOP：[https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx](https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx)\n- 关于 Spring AOP (AspectJ) 你该知晓的一切：[http://blog.csdn.net/javazejian/article/details/56267036](http://blog.csdn.net/javazejian/article/details/56267036)\n\n\n# 四、可视化埋点\n\n第三章介绍的是App全埋点，显然这种方式产生的数据太多，无论是对用户资源的节约，还是后续的数据分析都不太好。那么能否**同样借助动态Hook技术，在运行时，只对我们感兴趣的控件进行埋点呢？**这就是可视化埋点。\n\n## 4.1 可视化埋点原理\n\n可视化埋点，需要经过两个步骤，可以由非技术人员操作完成。\n\n- **第一步：通过可视化工具配置采集的View。**例如使用已经嵌入了SDK的App连接管理界面，当手机App与后台同步时，后台管理界面上会显示和手机App一样的界面，用户可以在管理界面上用鼠标选择需要监测的元素，设置事件名称，保存这个配置。（也有一些SDK，比如GrowingIO的SDK圈选操作是在手机悬浮了一个原点，拖动圆点到需要监测的元素上来设置埋点位置的，不管是什么方式本质上是一样的，需要保存一份配置到后台）。\n- **第二步：App解析配置，找到View，Hook它的事件并上报数据。**例如嵌入了SDK的App启动时，会从服务器获取到一份配置，再根据这份配置去检测App中的界面及其元素，满足配置的条件时向服务器上报事件。\n\n这里面最重要的技术点就是如何把手机上需要埋点的元素记录下来，然后根据配置信息找到需要埋点的控件，再替换这个控件的交互事件处理方法（如点击、长按等）。下面以Mixpanel、SensorsdataSDK为例（这两个SDK实现是一样的），简单分析一下技术方案的实现。\n\n## 4.2 可视化埋点实现\n\n### 4.2.1 圈选需要监测的View，保存配置\n\n#### 4.2.1.1 创建WebSocket连接后台\n\n采用WebSocket连接是因为要让手机和后台长时间保持连接，是一个**持续的、实时的双向通信**，WebSocket正适合这种场景。\n\n在Mixpanel和神策SDK里面其实都用到了开源的[Java-WebSocket](https://github.com/TooTallNate/Java-WebSocket)实现。此外，还有一个非常著名的Android同屏工具[Vysor](https://www.vysor.io/)，里面也有一个基于WebSocket的网络框架[AndroidAsync](https://github.com/koush/AndroidAsync)。如果对WebSocket感兴趣，可以看看它们。这里其实只要是用Java实现的WebSocket通信就行。\n\n#### 4.2.1.2 把App界面截图和里面的子View信息发送到后台\n\n创建WebSocket连接后，SDK会在主线程中，对App中启动的Activity进行扫描，找到界面的RootView（其实是DecorView）。在查找RootView的同时，会采用反射调用View类`createSnapshot`方法对RootView进行截图，从而实现了对屏幕的截图。\n\n截图之后，SDK内部会判断图片的hash值，如果图片发生了变化，会采用**先序**的方式遍历Activity的ViewTree，遍历同时读取View的属性（id、top、left、width、height、class名称、layoutRules等等）。下面举一个栗子：\n\n![](https://ws1.sinaimg.cn/large/006tKfTcly1fn1f3fcrrkj30rs06twfj.jpg)\n\n一个简单的Activity，ContentView里面有一个LineaLayout，LinearLayout里面放了一个Button。先序遍历Activity的ViewTree后，SDK会把下面这些数据传到WebSocket的服务器（数据有点多，大概有13k，数据主要来自截图）：\n\n```json\n{\n    \"type\": \"snapshot_response\", \n    \"payload\": {\n        \"activities\": [\n            {\n                \"activity\": \"com.sensorsdata.analytics.android.demo.MainActivity\", \n                \"scale\": 0.3809524, \n                \"serialized_objects\": {\n                    \"rootObject\": 88528516, \n                    \"objects\": [\n                        {\n                            \"hashCode\": 88528516, \n                            \"id\": -1, \n                            \"index\": -1, \n                            \"sa_id_name\": null, \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 1920, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"com.android.internal.policy.DecorView\", \n                                \"android.widget.FrameLayout\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [\n                                57495077, \n                                150453242\n                            ]\n                        }, \n                        {\n                            \"hashCode\": 57495077, \n                            \"id\": 16908822, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 1920, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"com.android.internal.widget.ActionBarOverlayLayout\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [\n                                12620808, \n                                88713121\n                            ]\n                        }, \n                        {\n                            \"hashCode\": 12620808, \n                            \"id\": 16908290, \n                            \"index\": 0, \n                            \"sa_id_name\": \"android:content\", \n                            \"top\": 210, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 1710, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.widget.FrameLayout\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [\n                                150314438\n                            ]\n                        }, \n                        {\n                            \"hashCode\": 150314438, \n                            \"id\": -1, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 1710, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.widget.LinearLayout\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [\n                                104340701\n                            ]\n                        }, \n                        {\n                            \"hashCode\": 104340701, \n                            \"id\": 2131427422, \n                            \"index\": 0, \n                            \"sa_id_name\": \"buttonTest\", \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 126, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.widget.Button\", \n                                \"android.widget.TextView\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [ ]\n                        }, \n                        {\n                            \"hashCode\": 88713121, \n                            \"id\": 16908669, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 63, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 147, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"com.android.internal.widget.ActionBarContainer\", \n                                \"android.widget.FrameLayout\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [\n                                164355104, \n                                161393113\n                            ]\n                        }, \n                        {\n                            \"hashCode\": 164355104, \n                            \"id\": 16908668, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 147, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.widget.Toolbar\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [\n                                222758006, \n                                64817783\n                            ]\n                        }, \n                        {\n                            \"hashCode\": 222758006, \n                            \"id\": -1, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 38, \n                            \"left\": 42, \n                            \"width\": 553, \n                            \"height\": 71, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.widget.TextView\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [ ]\n                        }, \n                        {\n                            \"hashCode\": 64817783, \n                            \"id\": -1, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 0, \n                            \"left\": 1080, \n                            \"width\": 0, \n                            \"height\": 147, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.widget.ActionMenuView\", \n                                \"android.widget.LinearLayout\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [ ]\n                        }, \n                        {\n                            \"hashCode\": 161393113, \n                            \"id\": 16908673, \n                            \"index\": 0, \n                            \"sa_id_name\": null, \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 0, \n                            \"height\": 0, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 8, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"com.android.internal.widget.ActionBarContextView\", \n                                \"com.android.internal.widget.AbsActionBarView\", \n                                \"android.view.ViewGroup\", \n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [ ]\n                        }, \n                        {\n                            \"hashCode\": 150453242, \n                            \"id\": 16908335, \n                            \"index\": 0, \n                            \"sa_id_name\": \"android:statusBarBackground\", \n                            \"top\": 0, \n                            \"left\": 0, \n                            \"width\": 1080, \n                            \"height\": 63, \n                            \"scrollX\": 0, \n                            \"scrollY\": 0, \n                            \"visibility\": 0, \n                            \"translationX\": 0, \n                            \"translationY\": 0, \n                            \"classes\": [\n                                \"android.view.View\"\n                            ], \n                            \"subviews\": [ ]\n                        }\n                    ]\n                }, \n                \"image_hash\": \"785C4DC3B01B4AFA56BA0E3A56CE8657\", \n                \"screenshot\": \"\"\n            }\n        ], \n        \"snapshot_time_millis\": 403\n    }\n}\n```\n\n最后面的`screenshot`就是手机的截图，以base64编码。\n\n> **为了简化分析，在上面的数据里面没有体现View的一些属性，例如Button上显示的text文字，实际上在遍历ViewTree里面每一个View的同时也会上报这个信息，因为我们的Activity和里面View大部分情况下都会是复用的，一个购物的Activity界面，里面的按钮可以显示不同的文字，我们需要统计不同商品的点击次数，就必须要知道按钮上显示的文字是什么。**\n\n对于View来讲，关键信息有这些：\n\n- activity：Activity类名\n- hashcode：view的hashcode\n- id：在Apk中的id\n- index：在父控件中的同类元素的顺序，如果是根View，那么为-1，如果父View没有多个同类型的子View，那么为0（例如LinearLayout中只有一个Button）\n- sa_id_name：在Apk中的控件的id的字符串名称，例如android:id=\"@+id/button2\"，结果就是`button2`\n- top：距离屏幕上边距\n- left：距离屏幕的左边距\n- width：宽\n- height：高\n- classes：View自身以及所有的父类类名，是一个数组，这里决定了一个View到底可以有哪些交互，比如点击、长按等\n- subviews：子View的hashcode，是一个数组\n\n#### 4.2.1.3 保存待监测的元素的关键信息\n\n将上面收集到数据发送到连接的WebSocket后台，由后台解析之后，可以把App界面的截图展示在Web页面。然后把可以监测的元素以方框的形式添加在界面上提示用户（web页面实现时，我推测只需要用到这个View的left、top、width、height属性在html上加一个div标签，然后设置一个有颜色的border属性即可）。用户可以在这个Web页面点击需要监测的元素，设置这个元素的事件名称（event_type和event_name），点击保存。保存一个需要监测的元素时，需要保存这个元素在当前Activity的ViewTree的路径`path`，以及这个View在父控件中的`index`，具体有下面几个信息：\n\n- target_activity：View所在的Activity类名\n- event_type：事件类型，例如点击事件\n- event_name：事件名称\n- trigger_id：事件id\n- path：View在ViewTree中查找路径\n\t- prefix：表示是否需要监测这个View的兄弟元素，当为`shortest`时，表示只匹配到索引为index那一个元素，否则匹配所有的父控件下面所有的同类子元素\n\t- view_class：view的类名\n\t- index：View在父控件中同类元素的下标索引，**这个属性一定程序上可以对抗ViewTree的更新导致的元素监测失效问题，因为父控件加入一个不同类的元素时，index的值不会发生改变**\n\t- id：View在Apk中的id\n\t- sa_id_name：View在Apk中的id的字符串名称\n\n\n### 4.2.2 获取配置，查找View，监测View的行为后上报事件\n\n#### 4.2.2.1 获取配置，查找View\n\nSDK启动时，会从服务器拉取一份JSON格式的配置，保存到sharedPreference里，同时SDK会扫描`android.R`文件里面的资源id和资源的name并缓存起来。\n\nSDK得到配置之后，解析成JSON对象，读取`event_bindings`字段，再进一步读取`events`字段，这个字段下面包含了一个数组，数组的每个元素都描述了一类事件，并包含了这类事件需要监测的元素所在的Activity和元素的路径。这份配置基本上是这样的一个结构：\n\n```json\nevent_bindings: {\n    events:[\n        {\n            target_activity: \"\"\n            event_name: \"\",\n            event_type: \"\",\n            ...\n            path: [\n                {\n                    prefix:\n                    view_class:\n                    index:\n                    id:\n                    sa_id_name:\n                }, \n                {\n                    ...\n                }\n                ...\n            ]\n        }\n    ]\n}\n```\n\n收到了这份配置之后，SDK会把根据每个event信息，生成一个`ViewVisitor`。`ViewVisitor`的作用就是把`path`数组里面指向的所有View元素都找到，并且根据event_type，**给这个View设置相应的行为监测器**，当这个View发生指定行为时，监测器就会监测到，并上报行为。\n\n在生成ViewVisitor之后，SDK内部是以`Map<activity, ViewVisitor>`结构保存它们的，这也比较容易理解，毕竟我们的界面是随着一个一个的Activity被create，onResume之后才被用户看见的嘛。在ViewVisitor对象中还有一个`PathFinder`对象，这个对象负责在ViewTree中根据path去查找View（这里其实是在一个tree里面查找node的问题）。\n\n#### 4.2.2.2 监测View的行为，上报事件\n\n`ViewVisitor`是怎么给View设置监听器，监测元素的产生的行为呢？**答案就是`View.AccessibilityDelegate`。**\n\n在Android SDK里面，AccessibilityService（无障碍服务）为我们提供了一系列的事件回调，帮助我们指示一些用户界面的状态变化。我们可以派生辅助功能类，进而对不同的AccessibilityEvent进行处理，我们看下AccessibilityEvent里面有哪些事件类型：\n\n```java\n    /**\n     * Represents the event of clicking on a {@link android.view.View} like\n     * {@link android.widget.Button}, {@link android.widget.CompoundButton}, etc.\n     */\n    public static final int TYPE_VIEW_CLICKED = 0x00000001;\n\n    /**\n     * Represents the event of long clicking on a {@link android.view.View} like\n     * {@link android.widget.Button}, {@link android.widget.CompoundButton}, etc.\n     */\n    public static final int TYPE_VIEW_LONG_CLICKED = 0x00000002;\n\n    /**\n     * Represents the event of selecting an item usually in the context of an\n     * {@link android.widget.AdapterView}.\n     */\n    public static final int TYPE_VIEW_SELECTED = 0x00000004;\n\n    /**\n     * Represents the event of setting input focus of a {@link android.view.View}.\n     */\n    public static final int TYPE_VIEW_FOCUSED = 0x00000008;\n\n    /**\n     * Represents the event of changing the text of an {@link android.widget.EditText}.\n     */\n    public static final int TYPE_VIEW_TEXT_CHANGED = 0x00000010;\n    ...\n```\n\n**以点击事件`TYPE_VIEW_CLICKED`为例**，当Activity界面的RootView开始绘制的时候（ViewTreeObserver.OnGlobalLayoutListener的onGlobalLayout回调时），ViewVisitor也会开始寻找指定的View，并给这个View设置新的AccessibilityDelegate。简单看一下这个新的View.AccessibilityDelegate是怎么写的：\n\n```java\nprivate class TrackingAccessibilityDelegate extends View.AccessibilityDelegate {\n...\n            public TrackingAccessibilityDelegate(View.AccessibilityDelegate realDelegate) {\n                mRealDelegate = realDelegate;\n            }\n\n            public View.AccessibilityDelegate getRealDelegate() {\n                return mRealDelegate;\n            }\n\n            ...\n            \n            @Override\n            public void sendAccessibilityEvent(View host, int eventType) {\n                if (eventType == mEventType) {\n                    fireEvent(host); // 事件上报\n                }\n\n                if (null != mRealDelegate) {\n                    mRealDelegate.sendAccessibilityEvent(host, eventType);\n                }\n            }\n\n            private View.AccessibilityDelegate mRealDelegate;\n        }\n        ...\n```\n\n可以看到在SDK的`TrackingAccessibilityDelegate#sendAccessibilityEvent`方法里面，发出了事件上报。\n\n这么说View的点击处理方法中应该要调用`sendAccessibilityEvent`才行，那么View在点击方法的内部实现里有调用`sendAccessibilityEvent`方法吗？看一下View处理点击事件 - `View.performClick`的源码：\n\n```java\npublic boolean performClick() {\n    final boolean result;\n    final ListenerInfo li = mListenerInfo;\n    if (li != null && li.mOnClickListener != null) {\n        playSoundEffect(SoundEffectConstants.CLICK);\n        li.mOnClickListener.onClick(this);\n        result = true;\n    } else {\n        result = false;\n    }\n    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);\n    return result;\n}\n...\npublic void sendAccessibilityEvent(int eventType) {\n    if (mAccessibilityDelegate != null) {\n        mAccessibilityDelegate.sendAccessibilityEvent(this, eventType);\n    } else {\n        sendAccessibilityEventInternal(eventType);\n    }\n}\n...\npublic void setAccessibilityDelegate(@Nullable AccessibilityDelegate delegate) {\n    mAccessibilityDelegate = delegate;\n}\n```\n\n由此可见View的点击处理内部确实调用到了`sendAccessibilityEvent `，所以在RootView开始绘制的时候，给View注册AccessibilityDelegate可以监测到它的点击事件。可视化埋点这里对View的事件监测也是一种**“动态Hook”**的实现，不过没有采用第三章中介绍的反射获取OnClickListener的方案，而是采用了获取AccessibilityDelegate来实现，这种方式反射次数少一些，效率上会更好一些。\n\n> 在网上看到有网友提出，setAccessibilityDelegate来监测View的点击对大多数厂商的机型和版本都是可以的，但是有部分机型是无法成功捕获监控到点击事件。从View的标识生成，以及监测原理来讲，这个方案的稳定性存在一些疑问。\n\n## 4.3 可视化埋点的难点和优化\n\n上面简单分析了Mixpanel和SensorsSDK可视化埋点的基本实现，里面最重要有一个技术点值得仔细琢磨，那就是**如何唯一标识App中的一个View？由于View是长在ViewTree上的一个节点，那么用纵向的路径，以及横向的下标应该可以标识一个View。**\n\n- 纵向的路径：是指从根View到这个View的父控件的路径上经过的每一个节点\n- 横向的下标：是指这个View在父控件中的同类元素的下标索引（例如一个LinearLayout中有两个Button，那么第一个Button的下标就是0，第二个Button的下标就是1，这种方式可以抵抗父控件中加入一个非Button类型的元素时对ViewTree的改变，保证仍然可以找到Button，但是无法抵抗父控件中加入同类型的元素）\n\n上面仅仅提到了标识一个View的基本方法，但是有很多实际场景，会对View的查找造成毁灭性的影响，例如界面中Fragment的变化，ViewTree的变化，ListView中控件的复用等等，这里有两篇网易的博客，里面对一些场景的优化做了详细地说明，可以仔细看看：\n\n- [http://www.infoq.com/cn/presentations/netease-happy-to-no-burial-point-data-collection-practice-road](http://www.infoq.com/cn/presentations/netease-happy-to-no-burial-point-data-collection-practice-road)\n- [http://www.jianshu.com/p/b5ffe845fe2d](http://www.jianshu.com/p/b5ffe845fe2d)\n\n\n## 4.4 可视化埋点参考资料\n\n- sensorsdata git，包含了Android、iOS、js、JAVA等多个版本的SDK：[https://github.com/sensorsdata](https://github.com/sensorsdata)\n- Mixpanel git，包含了Android、iOS、js、JAVA等多个版本的SDK：[https://github.com/mixpanel](https://github.com/mixpanel)\n- 网易移动端数据收集和分析博客：[http://www.jianshu.com/c/ee326e36f556](http://www.jianshu.com/c/ee326e36f556)\n- 美团点评前端无痕埋点实践：[https://tech.meituan.com/mt-mobile-analytics-practice.html](https://tech.meituan.com/mt-mobile-analytics-practice.html)\n\n# 五、总结\n\n最后简单总结一下几种方案的优缺点和使用场景，在实际应用中多种方式配合使用，平衡效率和可靠性，适合自己的业务才是最好的。\n\n|埋点方案|优点|缺点|适用场景|\n|:---:|:---|:---|:---|\n|代码埋点|1.使用灵活，精确控制发送时机 <br> 2.方便设置自定义业务相关的属性|1.埋点成本高，工作量大，必须是技术人员才能完成 <br> 2.更新成本高，一旦上线很难修改。只能通过热修复或者重新发版 <br> 3.对业务代码的侵入大|对业务上下文理解要求较高的业务数据，如电商购物这类可能经过多次页面跳转，埋点时还需要带上前面页面中的一些信息|\n|全埋点|1.开发、维护成本低 <br> 2.可以追溯历史数据 <br> 3.对业务代码侵入小 <br> 4.可以收集到一些额外信息，例如界面的热力图|1.高额流量和计算成本 <br> 2.无法灵活收集属性 <br> 3.动态的Hook方式支持的控件有限、事件类型有限，大量事件监测时反射对App运行性能有影响 <br> 4.静态的Hook方式需要第三方编译器参与，打包时间增长|上下文相对独立的、通用的数据，如点击热力图，性能监控和日志|\n|可视化埋点|1.开发、维护成本低 <br> 2.可以按需埋点，灵活性好 <br> 3.对业务代码侵入小|1.界面的结构发生变化时，圈选的待监测元素可能会失效 <br> 2.支持的控件和事件类型有限 <br> 3.无法灵活地收集到上下文属性|上下文相对简单，依靠控件可以获得上下文信息，界面结构比较简单固定，如新闻阅读、游戏分享界面|\n","slug":"Android埋点技术分析","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8e7000ymtsxlj1odfyc","content":"<h1 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h1><p>埋点，是对网站、App或者后台等应用程序进行数据采集的一种方法。通过埋点，可以收集用户在应用中的产生行为，进而用于分析和优化产品后续的体验，也可以为产品的运营提供数据支撑，其中常见的指标有PV、UV、页面时长和按钮的点击等，通常可以采集到下面这些数据。</p>\n<ul>\n<li>行为数据：时间、地点、人物、交互的内容等</li>\n<li>质量数据：App运行情况、浏览器加载情况、错误异常等</li>\n<li>环境数据：手机型号、操作系统版本、浏览器UA、地理、运营商、网络环境等</li>\n<li>运营数据：PV、UV、点击量、日活、留存、渠道来源等</li>\n</ul>\n<p>采集行为数据时，通常需要在Web页面/App里面添加一些代码，当用户的行为达到某种条件时，就会向服务器上报用户的行为。其实添加这些代码的过程就可以叫做“埋点”，在很久以前就已经出现了这种技术。随着技术的发展和大家对数据采集要求的不断提高，我认为埋点的技术方案走过了下面几个阶段：</p>\n<ul>\n<li><p><strong>代码埋点：代码埋点是指在某个事件发生时调用数据发送接口上报数据。</strong>例如开发人员按照产品/运营的需求，在Web页面/App的源码里面添加行为上报的代码，当用户的行为满足某一个条件时，这些代码就会被执行，向服务器上报行为数据。这种方案是最基础的方案，每次增加或者修改数据上报的条件，都需要开发人员的参与，并且只能在下一个版本上线后才能看到效果。基本上所有的数据平台都提供了这类数据上报的SDK，将行为上报的后台服务器接口封装成了简单的客户端SDK接口。开发者可以通过嵌入这类SDK，在埋点的地方调用少量的代码就可以上报行为数据。</p>\n</li>\n<li><p><strong>全埋点：全埋点指的是将Web页面/App内产生的所有的、满足某个条件的行为，全部上报到后台服务器。</strong>例如把一个App中所有的按钮点击都进行上报，然后由产品/运营去后台筛选所需要的行为数据。这种方案的优点非常明显，就是可以不用在新增/修改行为上报条件时，再找开发人员去修改埋点的代码。然而它的缺点也和优点一样明显，那就是上报的数据量比代码埋点大很多，里面可能很多是没有价值的数据。此外，这种方案更倾向于独立去看待用户的行为，而没有关注行为的上下文，给数据分析带来了一些难度。很多公司也提供了这类功能的SDK，通过静态或者动态的方式，<strong>“Hook”了原有的App代码</strong>，从而实现了行为的监测，在数据上报时通常是采用累积多条再上报的方案来合并请求。</p>\n</li>\n<li><p><strong>可视化埋点：可视化埋点是指通过可视化工具配置采集节点，在App/Web解析配置查找节点，监听节点产生的事件并上报。</strong>例如产品在Web页面/App的界面上进行圈选，配置需要监测界面上哪一个元素，然后保存这个配置，当App启动时会从后台服务器获得产品/运营预先圈选好的配置，然后根据这份配置查找并监测App界面上的元素，当某一个元素满足条件时，就会上报行为数据到后台服务器。有了暴力的全埋点技术方案，很容易联想到按需埋点，可视化埋点就是一种按需配置埋点的方案。现在也有一些公司提供了这类SDK，圈选监测元素时，有的是提供一个Web管理界面，手机在安装并初始化了SDK之后，可以和管理界面了连接，让用户在Web管理界面上配置需要监测的元素，有的是直接让用户在手机上圈选元素进行埋点。</p>\n</li>\n</ul>\n<blockquote>\n<p>hook直译是钩子的意思，以前学信息安全的时候在windows上听到过，大体意思是通过某种手段去改变系统API的一个行为，绕过系统的某个方法，或者改变系统的工作流程。在这里其实是指把本来要执行某个方法的对象替换成另一个，一般用的是反射或者代理，需要找到hook的代码位置，甚至还可以在编译阶段实现替换。全埋点和可视化埋点都需要Hook掉App原本的代码实现。</p>\n</blockquote>\n<p>业界有多家SDK都支持上面介绍的3种埋点方案中的一种或者全部，例如Mixpanel、Sensorsdata、TalkingData、GrowingIO、诸葛IO、Heap Analytics、MTA、Umeng Analytics、百度，只是大家对后两种埋点的称呼不完全相同，有的叫无埋点或者codeless埋点。由于<a href=\"https://github.com/mixpanel/mixpanel-android\" target=\"_blank\" rel=\"noopener\">Mixpanel</a>（支持代码埋点、可视化埋点）和<a href=\"https://github.com/sensorsdata/sa-sdk-android\" target=\"_blank\" rel=\"noopener\">Sensorsdata</a>（全部支持）都开源了自己的全部SDK，技术方案也比较类似，下面以它们的Android SDK为例，简单分析一下3种埋点方案的技术实现。关于JS的SDK技术实现，可以看下我的另一篇博客-<a href=\"http://unclechen.github.io/2017/12/24/JS%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/\">JS埋点SDK技术分析</a>。</p>\n<a id=\"more\"></a>\n<h1 id=\"二、代码埋点\"><a href=\"#二、代码埋点\" class=\"headerlink\" title=\"二、代码埋点\"></a>二、代码埋点</h1><p>包含Mixpanel SDK在内的大部分SDK，都会把这种埋点方案封装成一个比较简单的接口，在这里是<code>track(String eventName, JSONObject properties)</code>，开发者在调用这个接口时，可以把一个事件名称和事件的属性传入，然后就可以上报到后台了。一般代码埋点长这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 埋点上报</span></span><br><span class=\"line\">    JSONObject properties = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">    properties.put(<span class=\"string\">\"price\"</span>, <span class=\"number\">6800</span>);</span><br><span class=\"line\">    properties.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"Pixel2 XL\"</span>);</span><br><span class=\"line\">    Tracker.track(<span class=\"string\">\"PURCHASE\"</span>, properties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>Mixpanel SDK内部采用一条HandlerThread线程来处理事件，当开发者调用<code>track(String eventName, JSONObject properties)</code>方法时，<strong>主线程切换到HandlerThread</strong>当中，并先将事件存入数据库。然后看SDK中是否累计到了40个事件，如果累计到40个事件的话，就合并它们上报到后台。</p>\n<p>当开发者设置为debug模式，或者手动调用<code>flush</code>接口时，可以立即上报累计的所有事件，不过由于只有一条线程，所以如果在flush的时候，前面的事件还没有处理完成，SDK会间隔1分钟再次去处理后面的这些事件。</p>\n<p>开发者可以设置累计上报的事件数量阈值、事件阻塞时再次尝试上报的时间间隔等。这种方案比较基础，相信大部分开发者都接触过，不需要过多分析。</p>\n<h1 id=\"三、全埋点\"><a href=\"#三、全埋点\" class=\"headerlink\" title=\"三、全埋点\"></a>三、全埋点</h1><h2 id=\"3-1-基本原理\"><a href=\"#3-1-基本原理\" class=\"headerlink\" title=\"3.1 基本原理\"></a>3.1 基本原理</h2><p>全埋点要对方法进行Hook，按照<strong>是否在运行时</strong>这个条件来区分，Android全埋点可以有下面两种方式：</p>\n<ul>\n<li><strong>静态Hook：</strong>AspectJ实现AOP，编译期修改代码</li>\n<li><strong>动态Hook：</strong>运行时替换View.OnClickListener等事件回调</li>\n</ul>\n<p>这里的Hook其实就是一种AOP实现。</p>\n<blockquote>\n<p>那么什么是AOP？AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。（from baidu baike）</p>\n<p>简而言之，AOP是可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。</p>\n</blockquote>\n<p><strong>Sensors Analytics AndroidSDK全埋点的实现就是通过在代码编译阶段，找到源代码中需要上报事件的位置，插入SDK的事件上报代码。它用到的框架是<a href=\"https://www.eclipse.org/aspectj/\" target=\"_blank\" rel=\"noopener\">AspectJ</a>。</strong></p>\n<h2 id=\"3-2-使用AspectJ做静态Hook\"><a href=\"#3-2-使用AspectJ做静态Hook\" class=\"headerlink\" title=\"3.2 使用AspectJ做静态Hook\"></a>3.2 使用AspectJ做静态Hook</h2><h3 id=\"3-2-1-AspectJ基本概念\"><a href=\"#3-2-1-AspectJ基本概念\" class=\"headerlink\" title=\"3.2.1 AspectJ基本概念\"></a>3.2.1 AspectJ基本概念</h3><p>在很多地方我们可以看到AspectJ的身影，例如JakeWharton大神贡献的一个注解日志和性能调优框架<a href=\"https://github.com/JakeWharton/hugo\" target=\"_blank\" rel=\"noopener\">Hugo</a>，在Spring框架里面也有应用到AspectJ的概念（不过Spring AOP的实现是用的动态代理）。我理解AspectJ里面的主要几个概念有：</p>\n<ul>\n<li><strong>JPoint：</strong>代码切点（就是我们要插入代码的地方）</li>\n<li><strong>Aspect：</strong>代码切点的描述<ul>\n<li><strong>Pointcut：</strong>描述切点具体是什么样的点，如函数被调用的地方（<code>Call(MethodSignature)</code>）、函数执行的内部（<code>execution(MethodSignature)</code>）</li>\n<li><strong>Advice：</strong>描述在切点的什么位置插入代码，如在Pointcut前面（<code>@Before</code>）还是后面（<code>@After</code>），还是环绕整个Pointcut（<code>@Around</code>）</li>\n</ul>\n</li>\n</ul>\n<p>由此可见，在实现AOP功能时，需要做下面几件事：</p>\n<ul>\n<li>定义一个Aspect，这个Aspect里面必须有Pointcut和Advice两个属性</li>\n<li>编写在匹配到符合Pointcut和Advice描述的代码时，需要注入的代码</li>\n<li>在代码编译时，通过特殊的java编译器（Aspect的ajc编译器），找到符合我们定义的Aspect的代码，将需要注入的代码插入到Advice指定的位置。</li>\n</ul>\n<p>如果你对AspectJ有了解的话，已经可以猜到SDK内部是怎么实现全埋点的了；如果没有接触，我觉得也不用急于全面地去学习AspectJ，毕竟AspectJ的功能很强大（可远不止前置、后置这么简单的增强），埋点这种业务只用到了AspectJ当中的一小部分功能而已，可以直接看下面的分析。</p>\n<h3 id=\"3-2-2-实现\"><a href=\"#3-2-2-实现\" class=\"headerlink\" title=\"3.2.2 实现\"></a>3.2.2 实现</h3><p>神策SDK里面是如何监测View点击事件呢？我把SDK代码简化一下进行分析，有下面几个步骤：</p>\n<h4 id=\"3-2-2-1-定义一个Aspect\"><a href=\"#3-2-2-1-定义一个Aspect\" class=\"headerlink\" title=\"3.2.2.1 定义一个Aspect\"></a>3.2.2.1 定义一个Aspect</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.After;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewOnClickListenerAspectj</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * android.view.View.OnClickListener.onClick(android.view.View)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint JoinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"execution(* android.view.View.OnClickListener.onClick(android.view.View))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onViewClickAOP</span><span class=\"params\">(<span class=\"keyword\">final</span> JoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        AopUtil.sendTrackEventToSDK(joinPoint, <span class=\"string\">\"onViewOnClick\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段Aspect的代码定义了：<strong>在执行android.view.View.OnClickListener.onClick(android.view.View)方法原有的实现后面，需要插入<code>AopUtil.sendTrackEventToSDK(joinPoint, &quot;onViewOnClick&quot;);</code>这段代码。</strong></p>\n<p><code>AopUtil.sendTrackEventToSDK(joinPoint, &quot;onViewOnClick&quot;);</code>这段代码做的事情就是点击事件的上报。因为神策SDK将全埋点功能和主SDK包分离成了两个jar包，所以通过AopUtil工具去调用真正的事件上报代码，这里不细述其实现，下面直接看这段代码背后真正的点击上报实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SensorsDataAPI.sharedInstance().track(AopConstants.APP_CLICK_EVENT_NAME, properties);</span><br></pre></td></tr></table></figure>\n<p>可以看到AOP实现的点击监测，最后也走<code>track</code>方法进行上报了。</p>\n<h4 id=\"3-2-2-2-使用ajc编译器向源代码中“织入”Aspect代码\"><a href=\"#3-2-2-2-使用ajc编译器向源代码中“织入”Aspect代码\" class=\"headerlink\" title=\"3.2.2.2 使用ajc编译器向源代码中“织入”Aspect代码\"></a>3.2.2.2 使用ajc编译器向源代码中“织入”Aspect代码</h4><p>采用AspectJ框架编写的代码，想要注入原来的工程的代码，需要在<code>/app/build.gradle</code>中引用ajc编译器，脚本如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.bridge.IMessage</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.bridge.MessageHandler</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.tools.ajc.Main</span><br><span class=\"line\"></span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenCentral()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">'org.aspectj:aspectjtools:1.8.10'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    compile <span class=\"string\">'org.aspectj:aspectjrt:1.8.10'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">def</span> log = project.logger</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">def</span> variants = project.android.applicationVariants</span><br><span class=\"line\"></span><br><span class=\"line\">variants.all &#123; variant -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!variant.buildType.isDebuggable()) &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">\"Skipping non-debuggable build type '$&#123;variant.buildType.name&#125;'.\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    JavaCompile javaCompile = variant.javaCompile</span><br><span class=\"line\">    javaCompile.doLast &#123;</span><br><span class=\"line\">        String[] args = [<span class=\"string\">\"-showWeaveInfo\"</span>,</span><br><span class=\"line\">                     <span class=\"string\">\"-1.5\"</span>,</span><br><span class=\"line\">                     <span class=\"string\">\"-inpath\"</span>, javaCompile.destinationDir.toString(),</span><br><span class=\"line\">                     <span class=\"string\">\"-aspectpath\"</span>, javaCompile.classpath.asPath,</span><br><span class=\"line\">                     <span class=\"string\">\"-d\"</span>, javaCompile.destinationDir.toString(),</span><br><span class=\"line\">                     <span class=\"string\">\"-classpath\"</span>, javaCompile.classpath.asPath,</span><br><span class=\"line\">                     <span class=\"string\">\"-bootclasspath\"</span>, project.android.bootClasspath.join(File.pathSeparator)]</span><br><span class=\"line\">        log.debug <span class=\"string\">\"ajc args: \"</span> + Arrays.toString(args)</span><br><span class=\"line\"></span><br><span class=\"line\">        MessageHandler handler = <span class=\"keyword\">new</span> MessageHandler(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Main().run(args, handler);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (IMessage <span class=\"string\">message :</span> handler.getMessages(<span class=\"literal\">null</span>, <span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">switch</span> (message.getKind()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">ABORT:</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">ERROR:</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">FAIL:</span></span><br><span class=\"line\">                    log.error message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">WARNING:</span></span><br><span class=\"line\">                    log.warn message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">INFO:</span></span><br><span class=\"line\">                    log.info message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">DEBUG:</span></span><br><span class=\"line\">                    log.debug message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在SensorsAndroidSDK中，把上面这段脚本编写成了一个<a href=\"https://github.com/sensorsdata/sa-sdk-android-plugin2\" target=\"_blank\" rel=\"noopener\">gradle插件</a>，开发者只需要在<code>app/build.gradle</code>引用这个插件即可。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.sensorsdata.analytics.android'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-2-3-查看织入后的class文件\"><a href=\"#3-2-2-3-查看织入后的class文件\" class=\"headerlink\" title=\"3.2.2.3 查看织入后的class文件\"></a>3.2.2.3 查看织入后的class文件</h4><p>完成上面两步，就可以实现在<code>android.view.View.OnClickListener.onClick(android.view.View)</code>方法中插入我们的数据上报代码了。我们在demo代码中加一个Button，并给它set一个OnClickListener，编译一下代码，查看<code>/build/intermediates/classes/debug/</code>里面class文件，经过ajc编译之后，原始代码中插入了Aspect的代码，并调用了<code>ViewOnClickListenerAspectj</code>里面的<code>onViewClickAOP</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MainActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setContentView(<span class=\"number\">2130968603</span>);</span><br><span class=\"line\">        Button btnTst = (Button)<span class=\"keyword\">this</span>.findViewById(<span class=\"number\">2131427422</span>);</span><br><span class=\"line\">        btnTst.setOnClickListener(<span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                JoinPoint var2 = Factory.makeJP(ajc$tjp_0, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>, v);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Log.i(<span class=\"string\">\"MainActivity\"</span>, <span class=\"string\">\"button clicked\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable var5) &#123;</span><br><span class=\"line\">                    ViewOnClickListenerAspectj.aspectOf().onViewClickAOP(var2);</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> var5;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                ViewOnClickListenerAspectj.aspectOf().onViewClickAOP(var2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">                ajc$preClinit();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AspectJ的基本用法就是这样，除了对<code>OnClickListener</code>进行替换，理论上可以对任何已知的方法进行替换，所以在埋点SDK中还可以采用对RatingBar、CheckBox、RadioButton等控件的点击进行监听。</p>\n<p>神策AndroidSDK借助AspectJ插入Aspect代码，就是一种静态Hook的方式。本质上是在程序没有运行之前，通常是编译或者链接的阶段，对字节码进行修改，插入事件上报的代码。</p>\n<p>修改字节码除了这种方案之外，还有Android Gradle插件提供的trasform api（1.5.0版本以上）、ASM、Javassist。在网易乐得的埋点方案，Nuwa热修复项目都可以见到这些技术的实践。</p>\n<h2 id=\"3-3-使用代理模式实现动态Hook\"><a href=\"#3-3-使用代理模式实现动态Hook\" class=\"headerlink\" title=\"3.3 使用代理模式实现动态Hook\"></a>3.3 使用代理模式实现动态Hook</h2><h3 id=\"3-3-1-代理模式\"><a href=\"#3-3-1-代理模式\" class=\"headerlink\" title=\"3.3.1 代理模式\"></a>3.3.1 代理模式</h3><p>上面分析了以AspectJ为代表的<strong>“静态Hook”</strong>实现方案，有没有其他办法可以不修改源代码，只是<strong>在App运行的时候去“动态Hook”</strong>点击行为的处理呢？答案是肯定的，JAVA里面有一个设计模式叫代理模式，从这个角度出发，看下怎么<strong>在运行时</strong>实现点击事件的监测上报。</p>\n<p>在<a href=\"https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/view/View.java\" target=\"_blank\" rel=\"noopener\">android.view.View.java</a>的源码（<code>API&gt;=14</code>）中，有这么几个关键的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// getListenerInfo方法：返回所有的监听器信息mListenerInfo</span></span><br><span class=\"line\"><span class=\"function\">ListenerInfo <span class=\"title\">getListenerInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mListenerInfo != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mListenerInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mListenerInfo = <span class=\"keyword\">new</span> ListenerInfo();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mListenerInfo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听器信息</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListenerInfo</span> </span>&#123;</span><br><span class=\"line\">    ... <span class=\"comment\">// 此处省略各种xxxListener</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Listener used to dispatch click events.</span></span><br><span class=\"line\"><span class=\"comment\">     * This field should be made private, so it is hidden from the SDK.</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@hide</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> OnClickListener mOnClickListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Listener used to dispatch long click events.</span></span><br><span class=\"line\"><span class=\"comment\">     * This field should be made private, so it is hidden from the SDK.</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@hide</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> OnLongClickListener mOnLongClickListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ListenerInfo mListenerInfo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们非常熟悉的方法，内部其实是把mListenerInfo的mOnClickListener设成了我们创建的OnclickListner对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnClickListener</span><span class=\"params\">(@Nullable OnClickListener l)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isClickable()) &#123;</span><br><span class=\"line\">        setClickable(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getListenerInfo().mOnClickListener = l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断这个View是否设置了点击监听器</span></span><br><span class=\"line\"><span class=\"comment\"> * Return whether this view has an attached OnClickListener.  Returns</span></span><br><span class=\"line\"><span class=\"comment\"> * true if there is a listener, false if there is none.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasOnClickListeners</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ListenerInfo li = mListenerInfo;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnClickListener != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面几个方法可以看到，点击监听器其实被保存在了<strong><code>mListenerInfo.mOnClickListener</code></strong>里面。那么实现<strong>Hook点击监听器</strong>时，只要将这个<code>mOnClickListener</code>替换成我们包装的<strong>点击监听器代理对象</strong>就可以实现点击监听的代理了。</p>\n<h3 id=\"3-3-2-实现\"><a href=\"#3-3-2-实现\" class=\"headerlink\" title=\"3.3.2 实现\"></a>3.3.2 实现</h3><h4 id=\"3-3-2-1-创建点击监听器的代理类\"><a href=\"#3-3-2-1-创建点击监听器的代理类\" class=\"headerlink\" title=\"3.3.2.1 创建点击监听器的代理类\"></a>3.3.2.1 创建点击监听器的代理类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 点击监听器的代理类，具有上报点击行为的功能</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OnClickListenerWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 原始的点击监听器对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> View.OnClickListener onClickListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnClickListenerWrapper</span><span class=\"params\">(View.OnClickListener onClickListener)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onClickListener = onClickListener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 让原来的点击监听器正常工作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(onClickListener != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            onClickListener.onClick(view);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 点击事件上报，可以获取被点击view的一些属性</span></span><br><span class=\"line\">        track(APP_CLICK_EVENT_NAME, getSomeProperties(view));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-3-2-2-反射获取一个View的mListenerInfo-mOnClickListener，替换成代理的点击监听器\"><a href=\"#3-3-2-2-反射获取一个View的mListenerInfo-mOnClickListener，替换成代理的点击监听器\" class=\"headerlink\" title=\"3.3.2.2 反射获取一个View的mListenerInfo.mOnClickListener，替换成代理的点击监听器\"></a>3.3.2.2 反射获取一个View的mListenerInfo.mOnClickListener，替换成代理的点击监听器</h4><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对一个View的点击监听器进行hook</span></span><br><span class=\"line\">public void hookView(<span class=\"keyword\">View</span> <span class=\"keyword\">view</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 反射调用View的getListenerInfo方法（API&gt;=14），获得mListenerInfo对象</span></span><br><span class=\"line\">    <span class=\"keyword\">Class</span> viewClazz = <span class=\"keyword\">Class</span>.forName(<span class=\"string\">\"android.view.View\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    Method getListenerInfoMethod = viewClazz.getDeclaredMethod(<span class=\"string\">\"getListenerInfo\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!getListenerInfoMethod.isAccessible()) &#123;</span><br><span class=\"line\">        getListenerInfoMethod.setAccessible(true)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Object mListenerInfo = listenerInfoMethod.invoke(<span class=\"keyword\">view</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 2. 然后从mListenerInfo中反射获取mOnClickListener对象</span></span><br><span class=\"line\">    <span class=\"keyword\">Class</span> listenerInfoClazz = <span class=\"keyword\">Class</span>.forName(<span class=\"string\">\"android.view.View$ListenerInfo\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    Field onClickListenerField = listenerInfoClazz.getDeclaredField(<span class=\"string\">\"mOnClickListener\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!onClickListenerField.isAccessible()) &#123;</span><br><span class=\"line\">        onClickListenerField.setAccessible(true)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">View</span>.OnClickListener mOnClickListener = (<span class=\"keyword\">View</span>.OnClickListener) onClickListenerField.get(mListenerInfo)<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3. 创建代理的点击监听器对象</span></span><br><span class=\"line\">    <span class=\"keyword\">View</span>.OnClickListener mOnClickListenerWrapper = <span class=\"keyword\">new</span> OnClickListenerWrapper(mOnClickListener)<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 4. 把mListenerInfo的mOnClickListener设成新的onClickListenerWrapper</span></span><br><span class=\"line\">    onClickListenerField.<span class=\"keyword\">set</span>(mListenerInfo, mOnClickListenerWrapper)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"comment\">// 用这个似乎也可以：view.setOnClickListener(mOnClickListenerWrapper);     </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，如果是<code>API&lt;14</code>的话，mOnClickListener直接是直接以一个Field保存在View对象中的，没有ListenerInfo，因此反射的次数要更少一些。</p>\n<h4 id=\"3-3-2-3-对App中所有的View进行动态Hook\"><a href=\"#3-3-2-3-对App中所有的View进行动态Hook\" class=\"headerlink\" title=\"3.3.2.3 对App中所有的View进行动态Hook\"></a>3.3.2.3 对App中所有的View进行动态Hook</h4><p>我们在分析的是全埋点，那么怎样把App里面所有的View点击都Hook到呢？有两种方式：</p>\n<ul>\n<li><p>第一种：当Activity创建完成后，开始从Activity的DecorView开始自顶向下深度遍历ViewTree，遍历到一个View的时候，对它进行hookView操作。这种方式有点暴力，由于这里面遍历ViewTree的时候用到了大量反射，性能会有影响。</p>\n</li>\n<li><p>第二种：比第一种方式稍微优秀一些，来源是一个Github上的开源库<a href=\"https://github.com/foolchen/AndroidTracker\" target=\"_blank\" rel=\"noopener\">AndroidTracker</a>（Kotlin实现）。他的处理方式是当Activity创建完成后，在DecorView中添加一个透明的View作为子View，在这个子View的onTouchEvent方法中，根据触摸坐标找到屏幕中包含了这个坐标的View，再对这些View尝试进行hookView操作。<strong>这种方式比较取巧，首先是拿到了手指按下的位置，根据这个位置来找需要被Hook的View，避免了在遍历ViewTree的同时对View进行反射。具体实现是在遍历ViewTree中的每个View时，判断这个View的坐标是否包含手指按下的坐标，以及View是否Visible，如果满足这两个条件，就把这个View保存到一个ArrayList<view>hitViews。然后再遍历这个ArrayList里面的View，如果一个View#hasOnClickListeners返回true，那么才对他进行hookView操作。</view></strong></p>\n</li>\n</ul>\n<h3 id=\"3-3-3-动态Hook小结\"><a href=\"#3-3-3-动态Hook小结\" class=\"headerlink\" title=\"3.3.3 动态Hook小结\"></a>3.3.3 动态Hook小结</h3><p>整体来看，动态Hook的思路这里用到了反射，难免对程序性能产生影响，如果要采用这种方式实现全埋点方案，还需要好好评估。既然提到了代理，要说一下<strong>这里的“代理模式”其实还是JAVA的静态代理</strong>，不是动态代理。因为<code>OnClickListener</code>和<code>OnClickListenerWrapper</code>是在编写代码的时候就确定了，并不是在运行时动态生成了一个<code>OnClickListenerWrapper</code>。在JDK中动态代理是使用Native去生成了代理类的字节码（比如使用ASM等工具），并使用ClassLoader加载进来的。</p>\n<h2 id=\"3-4-全埋点参考资料\"><a href=\"#3-4-全埋点参考资料\" class=\"headerlink\" title=\"3.4 全埋点参考资料\"></a>3.4 全埋点参考资料</h2><ul>\n<li>Aspect Oriented Programming in Android：<a href=\"https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/\" target=\"_blank\" rel=\"noopener\">https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/</a></li>\n<li>AOP之AspectJ全面剖析in Android（AspectJ详细用法）：<a href=\"http://www.jianshu.com/p/f90e04bcb326\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/f90e04bcb326</a></li>\n<li>沪江开源了一个叫做AspectJX的插件，扩展了AspectJ，除了对src代码进行AOP，还支持kotlin、工程中引用的jar和aar进行AOP：<a href=\"https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx\" target=\"_blank\" rel=\"noopener\">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a></li>\n<li>关于 Spring AOP (AspectJ) 你该知晓的一切：<a href=\"http://blog.csdn.net/javazejian/article/details/56267036\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/javazejian/article/details/56267036</a></li>\n</ul>\n<h1 id=\"四、可视化埋点\"><a href=\"#四、可视化埋点\" class=\"headerlink\" title=\"四、可视化埋点\"></a>四、可视化埋点</h1><p>第三章介绍的是App全埋点，显然这种方式产生的数据太多，无论是对用户资源的节约，还是后续的数据分析都不太好。那么能否<strong>同样借助动态Hook技术，在运行时，只对我们感兴趣的控件进行埋点呢？</strong>这就是可视化埋点。</p>\n<h2 id=\"4-1-可视化埋点原理\"><a href=\"#4-1-可视化埋点原理\" class=\"headerlink\" title=\"4.1 可视化埋点原理\"></a>4.1 可视化埋点原理</h2><p>可视化埋点，需要经过两个步骤，可以由非技术人员操作完成。</p>\n<ul>\n<li><strong>第一步：通过可视化工具配置采集的View。</strong>例如使用已经嵌入了SDK的App连接管理界面，当手机App与后台同步时，后台管理界面上会显示和手机App一样的界面，用户可以在管理界面上用鼠标选择需要监测的元素，设置事件名称，保存这个配置。（也有一些SDK，比如GrowingIO的SDK圈选操作是在手机悬浮了一个原点，拖动圆点到需要监测的元素上来设置埋点位置的，不管是什么方式本质上是一样的，需要保存一份配置到后台）。</li>\n<li><strong>第二步：App解析配置，找到View，Hook它的事件并上报数据。</strong>例如嵌入了SDK的App启动时，会从服务器获取到一份配置，再根据这份配置去检测App中的界面及其元素，满足配置的条件时向服务器上报事件。</li>\n</ul>\n<p>这里面最重要的技术点就是如何把手机上需要埋点的元素记录下来，然后根据配置信息找到需要埋点的控件，再替换这个控件的交互事件处理方法（如点击、长按等）。下面以Mixpanel、SensorsdataSDK为例（这两个SDK实现是一样的），简单分析一下技术方案的实现。</p>\n<h2 id=\"4-2-可视化埋点实现\"><a href=\"#4-2-可视化埋点实现\" class=\"headerlink\" title=\"4.2 可视化埋点实现\"></a>4.2 可视化埋点实现</h2><h3 id=\"4-2-1-圈选需要监测的View，保存配置\"><a href=\"#4-2-1-圈选需要监测的View，保存配置\" class=\"headerlink\" title=\"4.2.1 圈选需要监测的View，保存配置\"></a>4.2.1 圈选需要监测的View，保存配置</h3><h4 id=\"4-2-1-1-创建WebSocket连接后台\"><a href=\"#4-2-1-1-创建WebSocket连接后台\" class=\"headerlink\" title=\"4.2.1.1 创建WebSocket连接后台\"></a>4.2.1.1 创建WebSocket连接后台</h4><p>采用WebSocket连接是因为要让手机和后台长时间保持连接，是一个<strong>持续的、实时的双向通信</strong>，WebSocket正适合这种场景。</p>\n<p>在Mixpanel和神策SDK里面其实都用到了开源的<a href=\"https://github.com/TooTallNate/Java-WebSocket\" target=\"_blank\" rel=\"noopener\">Java-WebSocket</a>实现。此外，还有一个非常著名的Android同屏工具<a href=\"https://www.vysor.io/\" target=\"_blank\" rel=\"noopener\">Vysor</a>，里面也有一个基于WebSocket的网络框架<a href=\"https://github.com/koush/AndroidAsync\" target=\"_blank\" rel=\"noopener\">AndroidAsync</a>。如果对WebSocket感兴趣，可以看看它们。这里其实只要是用Java实现的WebSocket通信就行。</p>\n<h4 id=\"4-2-1-2-把App界面截图和里面的子View信息发送到后台\"><a href=\"#4-2-1-2-把App界面截图和里面的子View信息发送到后台\" class=\"headerlink\" title=\"4.2.1.2 把App界面截图和里面的子View信息发送到后台\"></a>4.2.1.2 把App界面截图和里面的子View信息发送到后台</h4><p>创建WebSocket连接后，SDK会在主线程中，对App中启动的Activity进行扫描，找到界面的RootView（其实是DecorView）。在查找RootView的同时，会采用反射调用View类<code>createSnapshot</code>方法对RootView进行截图，从而实现了对屏幕的截图。</p>\n<p>截图之后，SDK内部会判断图片的hash值，如果图片发生了变化，会采用<strong>先序</strong>的方式遍历Activity的ViewTree，遍历同时读取View的属性（id、top、left、width、height、class名称、layoutRules等等）。下面举一个栗子：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcly1fn1f3fcrrkj30rs06twfj.jpg\" alt=\"\"></p>\n<p>一个简单的Activity，ContentView里面有一个LineaLayout，LinearLayout里面放了一个Button。先序遍历Activity的ViewTree后，SDK会把下面这些数据传到WebSocket的服务器（数据有点多，大概有13k，数据主要来自截图）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"snapshot_response\"</span>, </span><br><span class=\"line\">    <span class=\"attr\">\"payload\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"activities\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"activity\"</span>: <span class=\"string\">\"com.sensorsdata.analytics.android.demo.MainActivity\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"scale\"</span>: <span class=\"number\">0.3809524</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"serialized_objects\"</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"rootObject\"</span>: <span class=\"number\">88528516</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"objects\"</span>: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">88528516</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">-1</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">-1</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">1920</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"com.android.internal.policy.DecorView\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.FrameLayout\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [</span><br><span class=\"line\">                                <span class=\"number\">57495077</span>, </span><br><span class=\"line\">                                <span class=\"number\">150453242</span></span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">57495077</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">16908822</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">1920</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"com.android.internal.widget.ActionBarOverlayLayout\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [</span><br><span class=\"line\">                                <span class=\"number\">12620808</span>, </span><br><span class=\"line\">                                <span class=\"number\">88713121</span></span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">12620808</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">16908290</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"string\">\"android:content\"</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">210</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">1710</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.FrameLayout\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [</span><br><span class=\"line\">                                <span class=\"number\">150314438</span></span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">150314438</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">-1</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">1710</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.LinearLayout\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [</span><br><span class=\"line\">                                <span class=\"number\">104340701</span></span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">104340701</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">2131427422</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"string\">\"buttonTest\"</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">126</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.Button\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.TextView\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [ ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">88713121</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">16908669</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">63</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">147</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"com.android.internal.widget.ActionBarContainer\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.FrameLayout\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [</span><br><span class=\"line\">                                <span class=\"number\">164355104</span>, </span><br><span class=\"line\">                                <span class=\"number\">161393113</span></span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">164355104</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">16908668</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">147</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.Toolbar\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [</span><br><span class=\"line\">                                <span class=\"number\">222758006</span>, </span><br><span class=\"line\">                                <span class=\"number\">64817783</span></span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">222758006</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">-1</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">38</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">42</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">553</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">71</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.TextView\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [ ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">64817783</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">-1</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">147</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.ActionMenuView\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.LinearLayout\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [ ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">161393113</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">16908673</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">8</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"com.android.internal.widget.ActionBarContextView\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"com.android.internal.widget.AbsActionBarView\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [ ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">150453242</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">16908335</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"string\">\"android:statusBarBackground\"</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">63</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [ ]</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;, </span><br><span class=\"line\">                <span class=\"attr\">\"image_hash\"</span>: <span class=\"string\">\"785C4DC3B01B4AFA56BA0E3A56CE8657\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"screenshot\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ], </span><br><span class=\"line\">        <span class=\"attr\">\"snapshot_time_millis\"</span>: <span class=\"number\">403</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后面的<code>screenshot</code>就是手机的截图，以base64编码。</p>\n<blockquote>\n<p><strong>为了简化分析，在上面的数据里面没有体现View的一些属性，例如Button上显示的text文字，实际上在遍历ViewTree里面每一个View的同时也会上报这个信息，因为我们的Activity和里面View大部分情况下都会是复用的，一个购物的Activity界面，里面的按钮可以显示不同的文字，我们需要统计不同商品的点击次数，就必须要知道按钮上显示的文字是什么。</strong></p>\n</blockquote>\n<p>对于View来讲，关键信息有这些：</p>\n<ul>\n<li>activity：Activity类名</li>\n<li>hashcode：view的hashcode</li>\n<li>id：在Apk中的id</li>\n<li>index：在父控件中的同类元素的顺序，如果是根View，那么为-1，如果父View没有多个同类型的子View，那么为0（例如LinearLayout中只有一个Button）</li>\n<li>sa_id_name：在Apk中的控件的id的字符串名称，例如android:id=”@+id/button2”，结果就是<code>button2</code></li>\n<li>top：距离屏幕上边距</li>\n<li>left：距离屏幕的左边距</li>\n<li>width：宽</li>\n<li>height：高</li>\n<li>classes：View自身以及所有的父类类名，是一个数组，这里决定了一个View到底可以有哪些交互，比如点击、长按等</li>\n<li>subviews：子View的hashcode，是一个数组</li>\n</ul>\n<h4 id=\"4-2-1-3-保存待监测的元素的关键信息\"><a href=\"#4-2-1-3-保存待监测的元素的关键信息\" class=\"headerlink\" title=\"4.2.1.3 保存待监测的元素的关键信息\"></a>4.2.1.3 保存待监测的元素的关键信息</h4><p>将上面收集到数据发送到连接的WebSocket后台，由后台解析之后，可以把App界面的截图展示在Web页面。然后把可以监测的元素以方框的形式添加在界面上提示用户（web页面实现时，我推测只需要用到这个View的left、top、width、height属性在html上加一个div标签，然后设置一个有颜色的border属性即可）。用户可以在这个Web页面点击需要监测的元素，设置这个元素的事件名称（event_type和event_name），点击保存。保存一个需要监测的元素时，需要保存这个元素在当前Activity的ViewTree的路径<code>path</code>，以及这个View在父控件中的<code>index</code>，具体有下面几个信息：</p>\n<ul>\n<li>target_activity：View所在的Activity类名</li>\n<li>event_type：事件类型，例如点击事件</li>\n<li>event_name：事件名称</li>\n<li>trigger_id：事件id</li>\n<li>path：View在ViewTree中查找路径<ul>\n<li>prefix：表示是否需要监测这个View的兄弟元素，当为<code>shortest</code>时，表示只匹配到索引为index那一个元素，否则匹配所有的父控件下面所有的同类子元素</li>\n<li>view_class：view的类名</li>\n<li>index：View在父控件中同类元素的下标索引，<strong>这个属性一定程序上可以对抗ViewTree的更新导致的元素监测失效问题，因为父控件加入一个不同类的元素时，index的值不会发生改变</strong></li>\n<li>id：View在Apk中的id</li>\n<li>sa_id_name：View在Apk中的id的字符串名称</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-2-获取配置，查找View，监测View的行为后上报事件\"><a href=\"#4-2-2-获取配置，查找View，监测View的行为后上报事件\" class=\"headerlink\" title=\"4.2.2 获取配置，查找View，监测View的行为后上报事件\"></a>4.2.2 获取配置，查找View，监测View的行为后上报事件</h3><h4 id=\"4-2-2-1-获取配置，查找View\"><a href=\"#4-2-2-1-获取配置，查找View\" class=\"headerlink\" title=\"4.2.2.1 获取配置，查找View\"></a>4.2.2.1 获取配置，查找View</h4><p>SDK启动时，会从服务器拉取一份JSON格式的配置，保存到sharedPreference里，同时SDK会扫描<code>android.R</code>文件里面的资源id和资源的name并缓存起来。</p>\n<p>SDK得到配置之后，解析成JSON对象，读取<code>event_bindings</code>字段，再进一步读取<code>events</code>字段，这个字段下面包含了一个数组，数组的每个元素都描述了一类事件，并包含了这类事件需要监测的元素所在的Activity和元素的路径。这份配置基本上是这样的一个结构：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event_bindings: &#123;</span><br><span class=\"line\">    events:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            target_activity: \"\"</span><br><span class=\"line\">            event_name: \"\",</span><br><span class=\"line\">            event_type: \"\",</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            path: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    prefix:</span><br><span class=\"line\">                    view_class:</span><br><span class=\"line\">                    index:</span><br><span class=\"line\">                    id:</span><br><span class=\"line\">                    sa_id_name:</span><br><span class=\"line\">                &#125;, </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收到了这份配置之后，SDK会把根据每个event信息，生成一个<code>ViewVisitor</code>。<code>ViewVisitor</code>的作用就是把<code>path</code>数组里面指向的所有View元素都找到，并且根据event_type，<strong>给这个View设置相应的行为监测器</strong>，当这个View发生指定行为时，监测器就会监测到，并上报行为。</p>\n<p>在生成ViewVisitor之后，SDK内部是以<code>Map&lt;activity, ViewVisitor&gt;</code>结构保存它们的，这也比较容易理解，毕竟我们的界面是随着一个一个的Activity被create，onResume之后才被用户看见的嘛。在ViewVisitor对象中还有一个<code>PathFinder</code>对象，这个对象负责在ViewTree中根据path去查找View（这里其实是在一个tree里面查找node的问题）。</p>\n<h4 id=\"4-2-2-2-监测View的行为，上报事件\"><a href=\"#4-2-2-2-监测View的行为，上报事件\" class=\"headerlink\" title=\"4.2.2.2 监测View的行为，上报事件\"></a>4.2.2.2 监测View的行为，上报事件</h4><p><code>ViewVisitor</code>是怎么给View设置监听器，监测元素的产生的行为呢？<strong>答案就是<code>View.AccessibilityDelegate</code>。</strong></p>\n<p>在Android SDK里面，AccessibilityService（无障碍服务）为我们提供了一系列的事件回调，帮助我们指示一些用户界面的状态变化。我们可以派生辅助功能类，进而对不同的AccessibilityEvent进行处理，我们看下AccessibilityEvent里面有哪些事件类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Represents the event of clicking on a &#123;<span class=\"doctag\">@link</span> android.view.View&#125; like</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> android.widget.Button&#125;, &#123;<span class=\"doctag\">@link</span> android.widget.CompoundButton&#125;, etc.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_VIEW_CLICKED = <span class=\"number\">0x00000001</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Represents the event of long clicking on a &#123;<span class=\"doctag\">@link</span> android.view.View&#125; like</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> android.widget.Button&#125;, &#123;<span class=\"doctag\">@link</span> android.widget.CompoundButton&#125;, etc.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_VIEW_LONG_CLICKED = <span class=\"number\">0x00000002</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Represents the event of selecting an item usually in the context of an</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> android.widget.AdapterView&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_VIEW_SELECTED = <span class=\"number\">0x00000004</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Represents the event of setting input focus of a &#123;<span class=\"doctag\">@link</span> android.view.View&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_VIEW_FOCUSED = <span class=\"number\">0x00000008</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Represents the event of changing the text of an &#123;<span class=\"doctag\">@link</span> android.widget.EditText&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_VIEW_TEXT_CHANGED = <span class=\"number\">0x00000010</span>;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>以点击事件<code>TYPE_VIEW_CLICKED</code>为例</strong>，当Activity界面的RootView开始绘制的时候（ViewTreeObserver.OnGlobalLayoutListener的onGlobalLayout回调时），ViewVisitor也会开始寻找指定的View，并给这个View设置新的AccessibilityDelegate。简单看一下这个新的View.AccessibilityDelegate是怎么写的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrackingAccessibilityDelegate</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span>.<span class=\"title\">AccessibilityDelegate</span> </span>&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TrackingAccessibilityDelegate</span><span class=\"params\">(View.AccessibilityDelegate realDelegate)</span> </span>&#123;</span><br><span class=\"line\">                mRealDelegate = realDelegate;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">public</span> View.<span class=\"function\">AccessibilityDelegate <span class=\"title\">getRealDelegate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mRealDelegate;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ...</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendAccessibilityEvent</span><span class=\"params\">(View host, <span class=\"keyword\">int</span> eventType)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (eventType == mEventType) &#123;</span><br><span class=\"line\">                    fireEvent(host); <span class=\"comment\">// 事件上报</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mRealDelegate) &#123;</span><br><span class=\"line\">                    mRealDelegate.sendAccessibilityEvent(host, eventType);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">private</span> View.AccessibilityDelegate mRealDelegate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<p>可以看到在SDK的<code>TrackingAccessibilityDelegate#sendAccessibilityEvent</code>方法里面，发出了事件上报。</p>\n<p>这么说View的点击处理方法中应该要调用<code>sendAccessibilityEvent</code>才行，那么View在点击方法的内部实现里有调用<code>sendAccessibilityEvent</code>方法吗？看一下View处理点击事件 - <code>View.performClick</code>的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">performClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ListenerInfo li = mListenerInfo;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnClickListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        playSoundEffect(SoundEffectConstants.CLICK);</span><br><span class=\"line\">        li.mOnClickListener.onClick(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        result = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendAccessibilityEvent</span><span class=\"params\">(<span class=\"keyword\">int</span> eventType)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mAccessibilityDelegate != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mAccessibilityDelegate.sendAccessibilityEvent(<span class=\"keyword\">this</span>, eventType);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        sendAccessibilityEventInternal(eventType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAccessibilityDelegate</span><span class=\"params\">(@Nullable AccessibilityDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">    mAccessibilityDelegate = delegate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由此可见View的点击处理内部确实调用到了<code>sendAccessibilityEvent</code>，所以在RootView开始绘制的时候，给View注册AccessibilityDelegate可以监测到它的点击事件。可视化埋点这里对View的事件监测也是一种<strong>“动态Hook”</strong>的实现，不过没有采用第三章中介绍的反射获取OnClickListener的方案，而是采用了获取AccessibilityDelegate来实现，这种方式反射次数少一些，效率上会更好一些。</p>\n<blockquote>\n<p>在网上看到有网友提出，setAccessibilityDelegate来监测View的点击对大多数厂商的机型和版本都是可以的，但是有部分机型是无法成功捕获监控到点击事件。从View的标识生成，以及监测原理来讲，这个方案的稳定性存在一些疑问。</p>\n</blockquote>\n<h2 id=\"4-3-可视化埋点的难点和优化\"><a href=\"#4-3-可视化埋点的难点和优化\" class=\"headerlink\" title=\"4.3 可视化埋点的难点和优化\"></a>4.3 可视化埋点的难点和优化</h2><p>上面简单分析了Mixpanel和SensorsSDK可视化埋点的基本实现，里面最重要有一个技术点值得仔细琢磨，那就是<strong>如何唯一标识App中的一个View？由于View是长在ViewTree上的一个节点，那么用纵向的路径，以及横向的下标应该可以标识一个View。</strong></p>\n<ul>\n<li>纵向的路径：是指从根View到这个View的父控件的路径上经过的每一个节点</li>\n<li>横向的下标：是指这个View在父控件中的同类元素的下标索引（例如一个LinearLayout中有两个Button，那么第一个Button的下标就是0，第二个Button的下标就是1，这种方式可以抵抗父控件中加入一个非Button类型的元素时对ViewTree的改变，保证仍然可以找到Button，但是无法抵抗父控件中加入同类型的元素）</li>\n</ul>\n<p>上面仅仅提到了标识一个View的基本方法，但是有很多实际场景，会对View的查找造成毁灭性的影响，例如界面中Fragment的变化，ViewTree的变化，ListView中控件的复用等等，这里有两篇网易的博客，里面对一些场景的优化做了详细地说明，可以仔细看看：</p>\n<ul>\n<li><a href=\"http://www.infoq.com/cn/presentations/netease-happy-to-no-burial-point-data-collection-practice-road\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/presentations/netease-happy-to-no-burial-point-data-collection-practice-road</a></li>\n<li><a href=\"http://www.jianshu.com/p/b5ffe845fe2d\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/b5ffe845fe2d</a></li>\n</ul>\n<h2 id=\"4-4-可视化埋点参考资料\"><a href=\"#4-4-可视化埋点参考资料\" class=\"headerlink\" title=\"4.4 可视化埋点参考资料\"></a>4.4 可视化埋点参考资料</h2><ul>\n<li>sensorsdata git，包含了Android、iOS、js、JAVA等多个版本的SDK：<a href=\"https://github.com/sensorsdata\" target=\"_blank\" rel=\"noopener\">https://github.com/sensorsdata</a></li>\n<li>Mixpanel git，包含了Android、iOS、js、JAVA等多个版本的SDK：<a href=\"https://github.com/mixpanel\" target=\"_blank\" rel=\"noopener\">https://github.com/mixpanel</a></li>\n<li>网易移动端数据收集和分析博客：<a href=\"http://www.jianshu.com/c/ee326e36f556\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/c/ee326e36f556</a></li>\n<li>美团点评前端无痕埋点实践：<a href=\"https://tech.meituan.com/mt-mobile-analytics-practice.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/mt-mobile-analytics-practice.html</a></li>\n</ul>\n<h1 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h1><p>最后简单总结一下几种方案的优缺点和使用场景，在实际应用中多种方式配合使用，平衡效率和可靠性，适合自己的业务才是最好的。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">埋点方案</th>\n<th style=\"text-align:left\">优点</th>\n<th style=\"text-align:left\">缺点</th>\n<th style=\"text-align:left\">适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">代码埋点</td>\n<td style=\"text-align:left\">1.使用灵活，精确控制发送时机 <br> 2.方便设置自定义业务相关的属性</td>\n<td style=\"text-align:left\">1.埋点成本高，工作量大，必须是技术人员才能完成 <br> 2.更新成本高，一旦上线很难修改。只能通过热修复或者重新发版 <br> 3.对业务代码的侵入大</td>\n<td style=\"text-align:left\">对业务上下文理解要求较高的业务数据，如电商购物这类可能经过多次页面跳转，埋点时还需要带上前面页面中的一些信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全埋点</td>\n<td style=\"text-align:left\">1.开发、维护成本低 <br> 2.可以追溯历史数据 <br> 3.对业务代码侵入小 <br> 4.可以收集到一些额外信息，例如界面的热力图</td>\n<td style=\"text-align:left\">1.高额流量和计算成本 <br> 2.无法灵活收集属性 <br> 3.动态的Hook方式支持的控件有限、事件类型有限，大量事件监测时反射对App运行性能有影响 <br> 4.静态的Hook方式需要第三方编译器参与，打包时间增长</td>\n<td style=\"text-align:left\">上下文相对独立的、通用的数据，如点击热力图，性能监控和日志</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可视化埋点</td>\n<td style=\"text-align:left\">1.开发、维护成本低 <br> 2.可以按需埋点，灵活性好 <br> 3.对业务代码侵入小</td>\n<td style=\"text-align:left\">1.界面的结构发生变化时，圈选的待监测元素可能会失效 <br> 2.支持的控件和事件类型有限 <br> 3.无法灵活地收集到上下文属性</td>\n<td style=\"text-align:left\">上下文相对简单，依靠控件可以获得上下文信息，界面结构比较简单固定，如新闻阅读、游戏分享界面</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、概念\"><a href=\"#一、概念\" class=\"headerlink\" title=\"一、概念\"></a>一、概念</h1><p>埋点，是对网站、App或者后台等应用程序进行数据采集的一种方法。通过埋点，可以收集用户在应用中的产生行为，进而用于分析和优化产品后续的体验，也可以为产品的运营提供数据支撑，其中常见的指标有PV、UV、页面时长和按钮的点击等，通常可以采集到下面这些数据。</p>\n<ul>\n<li>行为数据：时间、地点、人物、交互的内容等</li>\n<li>质量数据：App运行情况、浏览器加载情况、错误异常等</li>\n<li>环境数据：手机型号、操作系统版本、浏览器UA、地理、运营商、网络环境等</li>\n<li>运营数据：PV、UV、点击量、日活、留存、渠道来源等</li>\n</ul>\n<p>采集行为数据时，通常需要在Web页面/App里面添加一些代码，当用户的行为达到某种条件时，就会向服务器上报用户的行为。其实添加这些代码的过程就可以叫做“埋点”，在很久以前就已经出现了这种技术。随着技术的发展和大家对数据采集要求的不断提高，我认为埋点的技术方案走过了下面几个阶段：</p>\n<ul>\n<li><p><strong>代码埋点：代码埋点是指在某个事件发生时调用数据发送接口上报数据。</strong>例如开发人员按照产品/运营的需求，在Web页面/App的源码里面添加行为上报的代码，当用户的行为满足某一个条件时，这些代码就会被执行，向服务器上报行为数据。这种方案是最基础的方案，每次增加或者修改数据上报的条件，都需要开发人员的参与，并且只能在下一个版本上线后才能看到效果。基本上所有的数据平台都提供了这类数据上报的SDK，将行为上报的后台服务器接口封装成了简单的客户端SDK接口。开发者可以通过嵌入这类SDK，在埋点的地方调用少量的代码就可以上报行为数据。</p>\n</li>\n<li><p><strong>全埋点：全埋点指的是将Web页面/App内产生的所有的、满足某个条件的行为，全部上报到后台服务器。</strong>例如把一个App中所有的按钮点击都进行上报，然后由产品/运营去后台筛选所需要的行为数据。这种方案的优点非常明显，就是可以不用在新增/修改行为上报条件时，再找开发人员去修改埋点的代码。然而它的缺点也和优点一样明显，那就是上报的数据量比代码埋点大很多，里面可能很多是没有价值的数据。此外，这种方案更倾向于独立去看待用户的行为，而没有关注行为的上下文，给数据分析带来了一些难度。很多公司也提供了这类功能的SDK，通过静态或者动态的方式，<strong>“Hook”了原有的App代码</strong>，从而实现了行为的监测，在数据上报时通常是采用累积多条再上报的方案来合并请求。</p>\n</li>\n<li><p><strong>可视化埋点：可视化埋点是指通过可视化工具配置采集节点，在App/Web解析配置查找节点，监听节点产生的事件并上报。</strong>例如产品在Web页面/App的界面上进行圈选，配置需要监测界面上哪一个元素，然后保存这个配置，当App启动时会从后台服务器获得产品/运营预先圈选好的配置，然后根据这份配置查找并监测App界面上的元素，当某一个元素满足条件时，就会上报行为数据到后台服务器。有了暴力的全埋点技术方案，很容易联想到按需埋点，可视化埋点就是一种按需配置埋点的方案。现在也有一些公司提供了这类SDK，圈选监测元素时，有的是提供一个Web管理界面，手机在安装并初始化了SDK之后，可以和管理界面了连接，让用户在Web管理界面上配置需要监测的元素，有的是直接让用户在手机上圈选元素进行埋点。</p>\n</li>\n</ul>\n<blockquote>\n<p>hook直译是钩子的意思，以前学信息安全的时候在windows上听到过，大体意思是通过某种手段去改变系统API的一个行为，绕过系统的某个方法，或者改变系统的工作流程。在这里其实是指把本来要执行某个方法的对象替换成另一个，一般用的是反射或者代理，需要找到hook的代码位置，甚至还可以在编译阶段实现替换。全埋点和可视化埋点都需要Hook掉App原本的代码实现。</p>\n</blockquote>\n<p>业界有多家SDK都支持上面介绍的3种埋点方案中的一种或者全部，例如Mixpanel、Sensorsdata、TalkingData、GrowingIO、诸葛IO、Heap Analytics、MTA、Umeng Analytics、百度，只是大家对后两种埋点的称呼不完全相同，有的叫无埋点或者codeless埋点。由于<a href=\"https://github.com/mixpanel/mixpanel-android\" target=\"_blank\" rel=\"noopener\">Mixpanel</a>（支持代码埋点、可视化埋点）和<a href=\"https://github.com/sensorsdata/sa-sdk-android\" target=\"_blank\" rel=\"noopener\">Sensorsdata</a>（全部支持）都开源了自己的全部SDK，技术方案也比较类似，下面以它们的Android SDK为例，简单分析一下3种埋点方案的技术实现。关于JS的SDK技术实现，可以看下我的另一篇博客-<a href=\"http://unclechen.github.io/2017/12/24/JS%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/\">JS埋点SDK技术分析</a>。</p>","more":"<h1 id=\"二、代码埋点\"><a href=\"#二、代码埋点\" class=\"headerlink\" title=\"二、代码埋点\"></a>二、代码埋点</h1><p>包含Mixpanel SDK在内的大部分SDK，都会把这种埋点方案封装成一个比较简单的接口，在这里是<code>track(String eventName, JSONObject properties)</code>，开发者在调用这个接口时，可以把一个事件名称和事件的属性传入，然后就可以上报到后台了。一般代码埋点长这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 埋点上报</span></span><br><span class=\"line\">    JSONObject properties = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">    properties.put(<span class=\"string\">\"price\"</span>, <span class=\"number\">6800</span>);</span><br><span class=\"line\">    properties.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"Pixel2 XL\"</span>);</span><br><span class=\"line\">    Tracker.track(<span class=\"string\">\"PURCHASE\"</span>, properties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>Mixpanel SDK内部采用一条HandlerThread线程来处理事件，当开发者调用<code>track(String eventName, JSONObject properties)</code>方法时，<strong>主线程切换到HandlerThread</strong>当中，并先将事件存入数据库。然后看SDK中是否累计到了40个事件，如果累计到40个事件的话，就合并它们上报到后台。</p>\n<p>当开发者设置为debug模式，或者手动调用<code>flush</code>接口时，可以立即上报累计的所有事件，不过由于只有一条线程，所以如果在flush的时候，前面的事件还没有处理完成，SDK会间隔1分钟再次去处理后面的这些事件。</p>\n<p>开发者可以设置累计上报的事件数量阈值、事件阻塞时再次尝试上报的时间间隔等。这种方案比较基础，相信大部分开发者都接触过，不需要过多分析。</p>\n<h1 id=\"三、全埋点\"><a href=\"#三、全埋点\" class=\"headerlink\" title=\"三、全埋点\"></a>三、全埋点</h1><h2 id=\"3-1-基本原理\"><a href=\"#3-1-基本原理\" class=\"headerlink\" title=\"3.1 基本原理\"></a>3.1 基本原理</h2><p>全埋点要对方法进行Hook，按照<strong>是否在运行时</strong>这个条件来区分，Android全埋点可以有下面两种方式：</p>\n<ul>\n<li><strong>静态Hook：</strong>AspectJ实现AOP，编译期修改代码</li>\n<li><strong>动态Hook：</strong>运行时替换View.OnClickListener等事件回调</li>\n</ul>\n<p>这里的Hook其实就是一种AOP实现。</p>\n<blockquote>\n<p>那么什么是AOP？AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。（from baidu baike）</p>\n<p>简而言之，AOP是可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。</p>\n</blockquote>\n<p><strong>Sensors Analytics AndroidSDK全埋点的实现就是通过在代码编译阶段，找到源代码中需要上报事件的位置，插入SDK的事件上报代码。它用到的框架是<a href=\"https://www.eclipse.org/aspectj/\" target=\"_blank\" rel=\"noopener\">AspectJ</a>。</strong></p>\n<h2 id=\"3-2-使用AspectJ做静态Hook\"><a href=\"#3-2-使用AspectJ做静态Hook\" class=\"headerlink\" title=\"3.2 使用AspectJ做静态Hook\"></a>3.2 使用AspectJ做静态Hook</h2><h3 id=\"3-2-1-AspectJ基本概念\"><a href=\"#3-2-1-AspectJ基本概念\" class=\"headerlink\" title=\"3.2.1 AspectJ基本概念\"></a>3.2.1 AspectJ基本概念</h3><p>在很多地方我们可以看到AspectJ的身影，例如JakeWharton大神贡献的一个注解日志和性能调优框架<a href=\"https://github.com/JakeWharton/hugo\" target=\"_blank\" rel=\"noopener\">Hugo</a>，在Spring框架里面也有应用到AspectJ的概念（不过Spring AOP的实现是用的动态代理）。我理解AspectJ里面的主要几个概念有：</p>\n<ul>\n<li><strong>JPoint：</strong>代码切点（就是我们要插入代码的地方）</li>\n<li><strong>Aspect：</strong>代码切点的描述<ul>\n<li><strong>Pointcut：</strong>描述切点具体是什么样的点，如函数被调用的地方（<code>Call(MethodSignature)</code>）、函数执行的内部（<code>execution(MethodSignature)</code>）</li>\n<li><strong>Advice：</strong>描述在切点的什么位置插入代码，如在Pointcut前面（<code>@Before</code>）还是后面（<code>@After</code>），还是环绕整个Pointcut（<code>@Around</code>）</li>\n</ul>\n</li>\n</ul>\n<p>由此可见，在实现AOP功能时，需要做下面几件事：</p>\n<ul>\n<li>定义一个Aspect，这个Aspect里面必须有Pointcut和Advice两个属性</li>\n<li>编写在匹配到符合Pointcut和Advice描述的代码时，需要注入的代码</li>\n<li>在代码编译时，通过特殊的java编译器（Aspect的ajc编译器），找到符合我们定义的Aspect的代码，将需要注入的代码插入到Advice指定的位置。</li>\n</ul>\n<p>如果你对AspectJ有了解的话，已经可以猜到SDK内部是怎么实现全埋点的了；如果没有接触，我觉得也不用急于全面地去学习AspectJ，毕竟AspectJ的功能很强大（可远不止前置、后置这么简单的增强），埋点这种业务只用到了AspectJ当中的一小部分功能而已，可以直接看下面的分析。</p>\n<h3 id=\"3-2-2-实现\"><a href=\"#3-2-2-实现\" class=\"headerlink\" title=\"3.2.2 实现\"></a>3.2.2 实现</h3><p>神策SDK里面是如何监测View点击事件呢？我把SDK代码简化一下进行分析，有下面几个步骤：</p>\n<h4 id=\"3-2-2-1-定义一个Aspect\"><a href=\"#3-2-2-1-定义一个Aspect\" class=\"headerlink\" title=\"3.2.2.1 定义一个Aspect\"></a>3.2.2.1 定义一个Aspect</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.After;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewOnClickListenerAspectj</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * android.view.View.OnClickListener.onClick(android.view.View)</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint JoinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"execution(* android.view.View.OnClickListener.onClick(android.view.View))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onViewClickAOP</span><span class=\"params\">(<span class=\"keyword\">final</span> JoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        AopUtil.sendTrackEventToSDK(joinPoint, <span class=\"string\">\"onViewOnClick\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段Aspect的代码定义了：<strong>在执行android.view.View.OnClickListener.onClick(android.view.View)方法原有的实现后面，需要插入<code>AopUtil.sendTrackEventToSDK(joinPoint, &quot;onViewOnClick&quot;);</code>这段代码。</strong></p>\n<p><code>AopUtil.sendTrackEventToSDK(joinPoint, &quot;onViewOnClick&quot;);</code>这段代码做的事情就是点击事件的上报。因为神策SDK将全埋点功能和主SDK包分离成了两个jar包，所以通过AopUtil工具去调用真正的事件上报代码，这里不细述其实现，下面直接看这段代码背后真正的点击上报实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SensorsDataAPI.sharedInstance().track(AopConstants.APP_CLICK_EVENT_NAME, properties);</span><br></pre></td></tr></table></figure>\n<p>可以看到AOP实现的点击监测，最后也走<code>track</code>方法进行上报了。</p>\n<h4 id=\"3-2-2-2-使用ajc编译器向源代码中“织入”Aspect代码\"><a href=\"#3-2-2-2-使用ajc编译器向源代码中“织入”Aspect代码\" class=\"headerlink\" title=\"3.2.2.2 使用ajc编译器向源代码中“织入”Aspect代码\"></a>3.2.2.2 使用ajc编译器向源代码中“织入”Aspect代码</h4><p>采用AspectJ框架编写的代码，想要注入原来的工程的代码，需要在<code>/app/build.gradle</code>中引用ajc编译器，脚本如下：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.bridge.IMessage</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.bridge.MessageHandler</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.tools.ajc.Main</span><br><span class=\"line\"></span><br><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        mavenCentral()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath <span class=\"string\">'org.aspectj:aspectjtools:1.8.10'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    compile <span class=\"string\">'org.aspectj:aspectjrt:1.8.10'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">def</span> log = project.logger</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">def</span> variants = project.android.applicationVariants</span><br><span class=\"line\"></span><br><span class=\"line\">variants.all &#123; variant -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!variant.buildType.isDebuggable()) &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">\"Skipping non-debuggable build type '$&#123;variant.buildType.name&#125;'.\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    JavaCompile javaCompile = variant.javaCompile</span><br><span class=\"line\">    javaCompile.doLast &#123;</span><br><span class=\"line\">        String[] args = [<span class=\"string\">\"-showWeaveInfo\"</span>,</span><br><span class=\"line\">                     <span class=\"string\">\"-1.5\"</span>,</span><br><span class=\"line\">                     <span class=\"string\">\"-inpath\"</span>, javaCompile.destinationDir.toString(),</span><br><span class=\"line\">                     <span class=\"string\">\"-aspectpath\"</span>, javaCompile.classpath.asPath,</span><br><span class=\"line\">                     <span class=\"string\">\"-d\"</span>, javaCompile.destinationDir.toString(),</span><br><span class=\"line\">                     <span class=\"string\">\"-classpath\"</span>, javaCompile.classpath.asPath,</span><br><span class=\"line\">                     <span class=\"string\">\"-bootclasspath\"</span>, project.android.bootClasspath.join(File.pathSeparator)]</span><br><span class=\"line\">        log.debug <span class=\"string\">\"ajc args: \"</span> + Arrays.toString(args)</span><br><span class=\"line\"></span><br><span class=\"line\">        MessageHandler handler = <span class=\"keyword\">new</span> MessageHandler(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Main().run(args, handler);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (IMessage <span class=\"string\">message :</span> handler.getMessages(<span class=\"literal\">null</span>, <span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">switch</span> (message.getKind()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">ABORT:</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">ERROR:</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">FAIL:</span></span><br><span class=\"line\">                    log.error message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">WARNING:</span></span><br><span class=\"line\">                    log.warn message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">INFO:</span></span><br><span class=\"line\">                    log.info message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> IMessage.<span class=\"string\">DEBUG:</span></span><br><span class=\"line\">                    log.debug message.message, message.thrown</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在SensorsAndroidSDK中，把上面这段脚本编写成了一个<a href=\"https://github.com/sensorsdata/sa-sdk-android-plugin2\" target=\"_blank\" rel=\"noopener\">gradle插件</a>，开发者只需要在<code>app/build.gradle</code>引用这个插件即可。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.sensorsdata.analytics.android'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-2-2-3-查看织入后的class文件\"><a href=\"#3-2-2-3-查看织入后的class文件\" class=\"headerlink\" title=\"3.2.2.3 查看织入后的class文件\"></a>3.2.2.3 查看织入后的class文件</h4><p>完成上面两步，就可以实现在<code>android.view.View.OnClickListener.onClick(android.view.View)</code>方法中插入我们的数据上报代码了。我们在demo代码中加一个Button，并给它set一个OnClickListener，编译一下代码，查看<code>/build/intermediates/classes/debug/</code>里面class文件，经过ajc编译之后，原始代码中插入了Aspect的代码，并调用了<code>ViewOnClickListenerAspectj</code>里面的<code>onViewClickAOP</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MainActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setContentView(<span class=\"number\">2130968603</span>);</span><br><span class=\"line\">        Button btnTst = (Button)<span class=\"keyword\">this</span>.findViewById(<span class=\"number\">2131427422</span>);</span><br><span class=\"line\">        btnTst.setOnClickListener(<span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                JoinPoint var2 = Factory.makeJP(ajc$tjp_0, <span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>, v);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Log.i(<span class=\"string\">\"MainActivity\"</span>, <span class=\"string\">\"button clicked\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable var5) &#123;</span><br><span class=\"line\">                    ViewOnClickListenerAspectj.aspectOf().onViewClickAOP(var2);</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> var5;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                ViewOnClickListenerAspectj.aspectOf().onViewClickAOP(var2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">                ajc$preClinit();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AspectJ的基本用法就是这样，除了对<code>OnClickListener</code>进行替换，理论上可以对任何已知的方法进行替换，所以在埋点SDK中还可以采用对RatingBar、CheckBox、RadioButton等控件的点击进行监听。</p>\n<p>神策AndroidSDK借助AspectJ插入Aspect代码，就是一种静态Hook的方式。本质上是在程序没有运行之前，通常是编译或者链接的阶段，对字节码进行修改，插入事件上报的代码。</p>\n<p>修改字节码除了这种方案之外，还有Android Gradle插件提供的trasform api（1.5.0版本以上）、ASM、Javassist。在网易乐得的埋点方案，Nuwa热修复项目都可以见到这些技术的实践。</p>\n<h2 id=\"3-3-使用代理模式实现动态Hook\"><a href=\"#3-3-使用代理模式实现动态Hook\" class=\"headerlink\" title=\"3.3 使用代理模式实现动态Hook\"></a>3.3 使用代理模式实现动态Hook</h2><h3 id=\"3-3-1-代理模式\"><a href=\"#3-3-1-代理模式\" class=\"headerlink\" title=\"3.3.1 代理模式\"></a>3.3.1 代理模式</h3><p>上面分析了以AspectJ为代表的<strong>“静态Hook”</strong>实现方案，有没有其他办法可以不修改源代码，只是<strong>在App运行的时候去“动态Hook”</strong>点击行为的处理呢？答案是肯定的，JAVA里面有一个设计模式叫代理模式，从这个角度出发，看下怎么<strong>在运行时</strong>实现点击事件的监测上报。</p>\n<p>在<a href=\"https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/view/View.java\" target=\"_blank\" rel=\"noopener\">android.view.View.java</a>的源码（<code>API&gt;=14</code>）中，有这么几个关键的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// getListenerInfo方法：返回所有的监听器信息mListenerInfo</span></span><br><span class=\"line\"><span class=\"function\">ListenerInfo <span class=\"title\">getListenerInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mListenerInfo != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mListenerInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mListenerInfo = <span class=\"keyword\">new</span> ListenerInfo();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mListenerInfo;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听器信息</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListenerInfo</span> </span>&#123;</span><br><span class=\"line\">    ... <span class=\"comment\">// 此处省略各种xxxListener</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Listener used to dispatch click events.</span></span><br><span class=\"line\"><span class=\"comment\">     * This field should be made private, so it is hidden from the SDK.</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@hide</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> OnClickListener mOnClickListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Listener used to dispatch long click events.</span></span><br><span class=\"line\"><span class=\"comment\">     * This field should be made private, so it is hidden from the SDK.</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@hide</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> OnLongClickListener mOnLongClickListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ListenerInfo mListenerInfo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们非常熟悉的方法，内部其实是把mListenerInfo的mOnClickListener设成了我们创建的OnclickListner对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnClickListener</span><span class=\"params\">(@Nullable OnClickListener l)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isClickable()) &#123;</span><br><span class=\"line\">        setClickable(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getListenerInfo().mOnClickListener = l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断这个View是否设置了点击监听器</span></span><br><span class=\"line\"><span class=\"comment\"> * Return whether this view has an attached OnClickListener.  Returns</span></span><br><span class=\"line\"><span class=\"comment\"> * true if there is a listener, false if there is none.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasOnClickListeners</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ListenerInfo li = mListenerInfo;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnClickListener != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面几个方法可以看到，点击监听器其实被保存在了<strong><code>mListenerInfo.mOnClickListener</code></strong>里面。那么实现<strong>Hook点击监听器</strong>时，只要将这个<code>mOnClickListener</code>替换成我们包装的<strong>点击监听器代理对象</strong>就可以实现点击监听的代理了。</p>\n<h3 id=\"3-3-2-实现\"><a href=\"#3-3-2-实现\" class=\"headerlink\" title=\"3.3.2 实现\"></a>3.3.2 实现</h3><h4 id=\"3-3-2-1-创建点击监听器的代理类\"><a href=\"#3-3-2-1-创建点击监听器的代理类\" class=\"headerlink\" title=\"3.3.2.1 创建点击监听器的代理类\"></a>3.3.2.1 创建点击监听器的代理类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 点击监听器的代理类，具有上报点击行为的功能</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OnClickListenerWrapper</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 原始的点击监听器对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> View.OnClickListener onClickListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OnClickListenerWrapper</span><span class=\"params\">(View.OnClickListener onClickListener)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onClickListener = onClickListener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 让原来的点击监听器正常工作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(onClickListener != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            onClickListener.onClick(view);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 点击事件上报，可以获取被点击view的一些属性</span></span><br><span class=\"line\">        track(APP_CLICK_EVENT_NAME, getSomeProperties(view));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-3-2-2-反射获取一个View的mListenerInfo-mOnClickListener，替换成代理的点击监听器\"><a href=\"#3-3-2-2-反射获取一个View的mListenerInfo-mOnClickListener，替换成代理的点击监听器\" class=\"headerlink\" title=\"3.3.2.2 反射获取一个View的mListenerInfo.mOnClickListener，替换成代理的点击监听器\"></a>3.3.2.2 反射获取一个View的mListenerInfo.mOnClickListener，替换成代理的点击监听器</h4><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对一个View的点击监听器进行hook</span></span><br><span class=\"line\">public void hookView(<span class=\"keyword\">View</span> <span class=\"keyword\">view</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 反射调用View的getListenerInfo方法（API&gt;=14），获得mListenerInfo对象</span></span><br><span class=\"line\">    <span class=\"keyword\">Class</span> viewClazz = <span class=\"keyword\">Class</span>.forName(<span class=\"string\">\"android.view.View\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    Method getListenerInfoMethod = viewClazz.getDeclaredMethod(<span class=\"string\">\"getListenerInfo\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!getListenerInfoMethod.isAccessible()) &#123;</span><br><span class=\"line\">        getListenerInfoMethod.setAccessible(true)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Object mListenerInfo = listenerInfoMethod.invoke(<span class=\"keyword\">view</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 2. 然后从mListenerInfo中反射获取mOnClickListener对象</span></span><br><span class=\"line\">    <span class=\"keyword\">Class</span> listenerInfoClazz = <span class=\"keyword\">Class</span>.forName(<span class=\"string\">\"android.view.View$ListenerInfo\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    Field onClickListenerField = listenerInfoClazz.getDeclaredField(<span class=\"string\">\"mOnClickListener\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!onClickListenerField.isAccessible()) &#123;</span><br><span class=\"line\">        onClickListenerField.setAccessible(true)<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">View</span>.OnClickListener mOnClickListener = (<span class=\"keyword\">View</span>.OnClickListener) onClickListenerField.get(mListenerInfo)<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 3. 创建代理的点击监听器对象</span></span><br><span class=\"line\">    <span class=\"keyword\">View</span>.OnClickListener mOnClickListenerWrapper = <span class=\"keyword\">new</span> OnClickListenerWrapper(mOnClickListener)<span class=\"comment\">;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 4. 把mListenerInfo的mOnClickListener设成新的onClickListenerWrapper</span></span><br><span class=\"line\">    onClickListenerField.<span class=\"keyword\">set</span>(mListenerInfo, mOnClickListenerWrapper)<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"comment\">// 用这个似乎也可以：view.setOnClickListener(mOnClickListenerWrapper);     </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，如果是<code>API&lt;14</code>的话，mOnClickListener直接是直接以一个Field保存在View对象中的，没有ListenerInfo，因此反射的次数要更少一些。</p>\n<h4 id=\"3-3-2-3-对App中所有的View进行动态Hook\"><a href=\"#3-3-2-3-对App中所有的View进行动态Hook\" class=\"headerlink\" title=\"3.3.2.3 对App中所有的View进行动态Hook\"></a>3.3.2.3 对App中所有的View进行动态Hook</h4><p>我们在分析的是全埋点，那么怎样把App里面所有的View点击都Hook到呢？有两种方式：</p>\n<ul>\n<li><p>第一种：当Activity创建完成后，开始从Activity的DecorView开始自顶向下深度遍历ViewTree，遍历到一个View的时候，对它进行hookView操作。这种方式有点暴力，由于这里面遍历ViewTree的时候用到了大量反射，性能会有影响。</p>\n</li>\n<li><p>第二种：比第一种方式稍微优秀一些，来源是一个Github上的开源库<a href=\"https://github.com/foolchen/AndroidTracker\" target=\"_blank\" rel=\"noopener\">AndroidTracker</a>（Kotlin实现）。他的处理方式是当Activity创建完成后，在DecorView中添加一个透明的View作为子View，在这个子View的onTouchEvent方法中，根据触摸坐标找到屏幕中包含了这个坐标的View，再对这些View尝试进行hookView操作。<strong>这种方式比较取巧，首先是拿到了手指按下的位置，根据这个位置来找需要被Hook的View，避免了在遍历ViewTree的同时对View进行反射。具体实现是在遍历ViewTree中的每个View时，判断这个View的坐标是否包含手指按下的坐标，以及View是否Visible，如果满足这两个条件，就把这个View保存到一个ArrayList<view>hitViews。然后再遍历这个ArrayList里面的View，如果一个View#hasOnClickListeners返回true，那么才对他进行hookView操作。</view></strong></p>\n</li>\n</ul>\n<h3 id=\"3-3-3-动态Hook小结\"><a href=\"#3-3-3-动态Hook小结\" class=\"headerlink\" title=\"3.3.3 动态Hook小结\"></a>3.3.3 动态Hook小结</h3><p>整体来看，动态Hook的思路这里用到了反射，难免对程序性能产生影响，如果要采用这种方式实现全埋点方案，还需要好好评估。既然提到了代理，要说一下<strong>这里的“代理模式”其实还是JAVA的静态代理</strong>，不是动态代理。因为<code>OnClickListener</code>和<code>OnClickListenerWrapper</code>是在编写代码的时候就确定了，并不是在运行时动态生成了一个<code>OnClickListenerWrapper</code>。在JDK中动态代理是使用Native去生成了代理类的字节码（比如使用ASM等工具），并使用ClassLoader加载进来的。</p>\n<h2 id=\"3-4-全埋点参考资料\"><a href=\"#3-4-全埋点参考资料\" class=\"headerlink\" title=\"3.4 全埋点参考资料\"></a>3.4 全埋点参考资料</h2><ul>\n<li>Aspect Oriented Programming in Android：<a href=\"https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/\" target=\"_blank\" rel=\"noopener\">https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/</a></li>\n<li>AOP之AspectJ全面剖析in Android（AspectJ详细用法）：<a href=\"http://www.jianshu.com/p/f90e04bcb326\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/f90e04bcb326</a></li>\n<li>沪江开源了一个叫做AspectJX的插件，扩展了AspectJ，除了对src代码进行AOP，还支持kotlin、工程中引用的jar和aar进行AOP：<a href=\"https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx\" target=\"_blank\" rel=\"noopener\">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a></li>\n<li>关于 Spring AOP (AspectJ) 你该知晓的一切：<a href=\"http://blog.csdn.net/javazejian/article/details/56267036\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/javazejian/article/details/56267036</a></li>\n</ul>\n<h1 id=\"四、可视化埋点\"><a href=\"#四、可视化埋点\" class=\"headerlink\" title=\"四、可视化埋点\"></a>四、可视化埋点</h1><p>第三章介绍的是App全埋点，显然这种方式产生的数据太多，无论是对用户资源的节约，还是后续的数据分析都不太好。那么能否<strong>同样借助动态Hook技术，在运行时，只对我们感兴趣的控件进行埋点呢？</strong>这就是可视化埋点。</p>\n<h2 id=\"4-1-可视化埋点原理\"><a href=\"#4-1-可视化埋点原理\" class=\"headerlink\" title=\"4.1 可视化埋点原理\"></a>4.1 可视化埋点原理</h2><p>可视化埋点，需要经过两个步骤，可以由非技术人员操作完成。</p>\n<ul>\n<li><strong>第一步：通过可视化工具配置采集的View。</strong>例如使用已经嵌入了SDK的App连接管理界面，当手机App与后台同步时，后台管理界面上会显示和手机App一样的界面，用户可以在管理界面上用鼠标选择需要监测的元素，设置事件名称，保存这个配置。（也有一些SDK，比如GrowingIO的SDK圈选操作是在手机悬浮了一个原点，拖动圆点到需要监测的元素上来设置埋点位置的，不管是什么方式本质上是一样的，需要保存一份配置到后台）。</li>\n<li><strong>第二步：App解析配置，找到View，Hook它的事件并上报数据。</strong>例如嵌入了SDK的App启动时，会从服务器获取到一份配置，再根据这份配置去检测App中的界面及其元素，满足配置的条件时向服务器上报事件。</li>\n</ul>\n<p>这里面最重要的技术点就是如何把手机上需要埋点的元素记录下来，然后根据配置信息找到需要埋点的控件，再替换这个控件的交互事件处理方法（如点击、长按等）。下面以Mixpanel、SensorsdataSDK为例（这两个SDK实现是一样的），简单分析一下技术方案的实现。</p>\n<h2 id=\"4-2-可视化埋点实现\"><a href=\"#4-2-可视化埋点实现\" class=\"headerlink\" title=\"4.2 可视化埋点实现\"></a>4.2 可视化埋点实现</h2><h3 id=\"4-2-1-圈选需要监测的View，保存配置\"><a href=\"#4-2-1-圈选需要监测的View，保存配置\" class=\"headerlink\" title=\"4.2.1 圈选需要监测的View，保存配置\"></a>4.2.1 圈选需要监测的View，保存配置</h3><h4 id=\"4-2-1-1-创建WebSocket连接后台\"><a href=\"#4-2-1-1-创建WebSocket连接后台\" class=\"headerlink\" title=\"4.2.1.1 创建WebSocket连接后台\"></a>4.2.1.1 创建WebSocket连接后台</h4><p>采用WebSocket连接是因为要让手机和后台长时间保持连接，是一个<strong>持续的、实时的双向通信</strong>，WebSocket正适合这种场景。</p>\n<p>在Mixpanel和神策SDK里面其实都用到了开源的<a href=\"https://github.com/TooTallNate/Java-WebSocket\" target=\"_blank\" rel=\"noopener\">Java-WebSocket</a>实现。此外，还有一个非常著名的Android同屏工具<a href=\"https://www.vysor.io/\" target=\"_blank\" rel=\"noopener\">Vysor</a>，里面也有一个基于WebSocket的网络框架<a href=\"https://github.com/koush/AndroidAsync\" target=\"_blank\" rel=\"noopener\">AndroidAsync</a>。如果对WebSocket感兴趣，可以看看它们。这里其实只要是用Java实现的WebSocket通信就行。</p>\n<h4 id=\"4-2-1-2-把App界面截图和里面的子View信息发送到后台\"><a href=\"#4-2-1-2-把App界面截图和里面的子View信息发送到后台\" class=\"headerlink\" title=\"4.2.1.2 把App界面截图和里面的子View信息发送到后台\"></a>4.2.1.2 把App界面截图和里面的子View信息发送到后台</h4><p>创建WebSocket连接后，SDK会在主线程中，对App中启动的Activity进行扫描，找到界面的RootView（其实是DecorView）。在查找RootView的同时，会采用反射调用View类<code>createSnapshot</code>方法对RootView进行截图，从而实现了对屏幕的截图。</p>\n<p>截图之后，SDK内部会判断图片的hash值，如果图片发生了变化，会采用<strong>先序</strong>的方式遍历Activity的ViewTree，遍历同时读取View的属性（id、top、left、width、height、class名称、layoutRules等等）。下面举一个栗子：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tKfTcly1fn1f3fcrrkj30rs06twfj.jpg\" alt=\"\"></p>\n<p>一个简单的Activity，ContentView里面有一个LineaLayout，LinearLayout里面放了一个Button。先序遍历Activity的ViewTree后，SDK会把下面这些数据传到WebSocket的服务器（数据有点多，大概有13k，数据主要来自截图）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"snapshot_response\"</span>, </span><br><span class=\"line\">    <span class=\"attr\">\"payload\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"activities\"</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"activity\"</span>: <span class=\"string\">\"com.sensorsdata.analytics.android.demo.MainActivity\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"scale\"</span>: <span class=\"number\">0.3809524</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"serialized_objects\"</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">\"rootObject\"</span>: <span class=\"number\">88528516</span>, </span><br><span class=\"line\">                    <span class=\"attr\">\"objects\"</span>: [</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">88528516</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">-1</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">-1</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">1920</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"com.android.internal.policy.DecorView\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.FrameLayout\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [</span><br><span class=\"line\">                                <span class=\"number\">57495077</span>, </span><br><span class=\"line\">                                <span class=\"number\">150453242</span></span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">57495077</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">16908822</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">1920</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"com.android.internal.widget.ActionBarOverlayLayout\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [</span><br><span class=\"line\">                                <span class=\"number\">12620808</span>, </span><br><span class=\"line\">                                <span class=\"number\">88713121</span></span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">12620808</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">16908290</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"string\">\"android:content\"</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">210</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">1710</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.FrameLayout\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [</span><br><span class=\"line\">                                <span class=\"number\">150314438</span></span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">150314438</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">-1</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">1710</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.LinearLayout\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [</span><br><span class=\"line\">                                <span class=\"number\">104340701</span></span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">104340701</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">2131427422</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"string\">\"buttonTest\"</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">126</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.Button\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.TextView\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [ ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">88713121</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">16908669</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">63</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">147</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"com.android.internal.widget.ActionBarContainer\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.FrameLayout\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [</span><br><span class=\"line\">                                <span class=\"number\">164355104</span>, </span><br><span class=\"line\">                                <span class=\"number\">161393113</span></span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">164355104</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">16908668</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">147</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.Toolbar\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [</span><br><span class=\"line\">                                <span class=\"number\">222758006</span>, </span><br><span class=\"line\">                                <span class=\"number\">64817783</span></span><br><span class=\"line\">                            ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">222758006</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">-1</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">38</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">42</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">553</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">71</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.TextView\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [ ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">64817783</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">-1</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">147</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.ActionMenuView\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.widget.LinearLayout\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [ ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">161393113</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">16908673</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"literal\">null</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">8</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"com.android.internal.widget.ActionBarContextView\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"com.android.internal.widget.AbsActionBarView\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.ViewGroup\"</span>, </span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [ ]</span><br><span class=\"line\">                        &#125;, </span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            <span class=\"attr\">\"hashCode\"</span>: <span class=\"number\">150453242</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"id\"</span>: <span class=\"number\">16908335</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"index\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"sa_id_name\"</span>: <span class=\"string\">\"android:statusBarBackground\"</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"top\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"left\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"width\"</span>: <span class=\"number\">1080</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"height\"</span>: <span class=\"number\">63</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"scrollY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"visibility\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationX\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"translationY\"</span>: <span class=\"number\">0</span>, </span><br><span class=\"line\">                            <span class=\"attr\">\"classes\"</span>: [</span><br><span class=\"line\">                                <span class=\"string\">\"android.view.View\"</span></span><br><span class=\"line\">                            ], </span><br><span class=\"line\">                            <span class=\"attr\">\"subviews\"</span>: [ ]</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    ]</span><br><span class=\"line\">                &#125;, </span><br><span class=\"line\">                <span class=\"attr\">\"image_hash\"</span>: <span class=\"string\">\"785C4DC3B01B4AFA56BA0E3A56CE8657\"</span>, </span><br><span class=\"line\">                <span class=\"attr\">\"screenshot\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ], </span><br><span class=\"line\">        <span class=\"attr\">\"snapshot_time_millis\"</span>: <span class=\"number\">403</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后面的<code>screenshot</code>就是手机的截图，以base64编码。</p>\n<blockquote>\n<p><strong>为了简化分析，在上面的数据里面没有体现View的一些属性，例如Button上显示的text文字，实际上在遍历ViewTree里面每一个View的同时也会上报这个信息，因为我们的Activity和里面View大部分情况下都会是复用的，一个购物的Activity界面，里面的按钮可以显示不同的文字，我们需要统计不同商品的点击次数，就必须要知道按钮上显示的文字是什么。</strong></p>\n</blockquote>\n<p>对于View来讲，关键信息有这些：</p>\n<ul>\n<li>activity：Activity类名</li>\n<li>hashcode：view的hashcode</li>\n<li>id：在Apk中的id</li>\n<li>index：在父控件中的同类元素的顺序，如果是根View，那么为-1，如果父View没有多个同类型的子View，那么为0（例如LinearLayout中只有一个Button）</li>\n<li>sa_id_name：在Apk中的控件的id的字符串名称，例如android:id=”@+id/button2”，结果就是<code>button2</code></li>\n<li>top：距离屏幕上边距</li>\n<li>left：距离屏幕的左边距</li>\n<li>width：宽</li>\n<li>height：高</li>\n<li>classes：View自身以及所有的父类类名，是一个数组，这里决定了一个View到底可以有哪些交互，比如点击、长按等</li>\n<li>subviews：子View的hashcode，是一个数组</li>\n</ul>\n<h4 id=\"4-2-1-3-保存待监测的元素的关键信息\"><a href=\"#4-2-1-3-保存待监测的元素的关键信息\" class=\"headerlink\" title=\"4.2.1.3 保存待监测的元素的关键信息\"></a>4.2.1.3 保存待监测的元素的关键信息</h4><p>将上面收集到数据发送到连接的WebSocket后台，由后台解析之后，可以把App界面的截图展示在Web页面。然后把可以监测的元素以方框的形式添加在界面上提示用户（web页面实现时，我推测只需要用到这个View的left、top、width、height属性在html上加一个div标签，然后设置一个有颜色的border属性即可）。用户可以在这个Web页面点击需要监测的元素，设置这个元素的事件名称（event_type和event_name），点击保存。保存一个需要监测的元素时，需要保存这个元素在当前Activity的ViewTree的路径<code>path</code>，以及这个View在父控件中的<code>index</code>，具体有下面几个信息：</p>\n<ul>\n<li>target_activity：View所在的Activity类名</li>\n<li>event_type：事件类型，例如点击事件</li>\n<li>event_name：事件名称</li>\n<li>trigger_id：事件id</li>\n<li>path：View在ViewTree中查找路径<ul>\n<li>prefix：表示是否需要监测这个View的兄弟元素，当为<code>shortest</code>时，表示只匹配到索引为index那一个元素，否则匹配所有的父控件下面所有的同类子元素</li>\n<li>view_class：view的类名</li>\n<li>index：View在父控件中同类元素的下标索引，<strong>这个属性一定程序上可以对抗ViewTree的更新导致的元素监测失效问题，因为父控件加入一个不同类的元素时，index的值不会发生改变</strong></li>\n<li>id：View在Apk中的id</li>\n<li>sa_id_name：View在Apk中的id的字符串名称</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-2-获取配置，查找View，监测View的行为后上报事件\"><a href=\"#4-2-2-获取配置，查找View，监测View的行为后上报事件\" class=\"headerlink\" title=\"4.2.2 获取配置，查找View，监测View的行为后上报事件\"></a>4.2.2 获取配置，查找View，监测View的行为后上报事件</h3><h4 id=\"4-2-2-1-获取配置，查找View\"><a href=\"#4-2-2-1-获取配置，查找View\" class=\"headerlink\" title=\"4.2.2.1 获取配置，查找View\"></a>4.2.2.1 获取配置，查找View</h4><p>SDK启动时，会从服务器拉取一份JSON格式的配置，保存到sharedPreference里，同时SDK会扫描<code>android.R</code>文件里面的资源id和资源的name并缓存起来。</p>\n<p>SDK得到配置之后，解析成JSON对象，读取<code>event_bindings</code>字段，再进一步读取<code>events</code>字段，这个字段下面包含了一个数组，数组的每个元素都描述了一类事件，并包含了这类事件需要监测的元素所在的Activity和元素的路径。这份配置基本上是这样的一个结构：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">event_bindings: &#123;</span><br><span class=\"line\">    events:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            target_activity: \"\"</span><br><span class=\"line\">            event_name: \"\",</span><br><span class=\"line\">            event_type: \"\",</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            path: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    prefix:</span><br><span class=\"line\">                    view_class:</span><br><span class=\"line\">                    index:</span><br><span class=\"line\">                    id:</span><br><span class=\"line\">                    sa_id_name:</span><br><span class=\"line\">                &#125;, </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ...</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ...</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收到了这份配置之后，SDK会把根据每个event信息，生成一个<code>ViewVisitor</code>。<code>ViewVisitor</code>的作用就是把<code>path</code>数组里面指向的所有View元素都找到，并且根据event_type，<strong>给这个View设置相应的行为监测器</strong>，当这个View发生指定行为时，监测器就会监测到，并上报行为。</p>\n<p>在生成ViewVisitor之后，SDK内部是以<code>Map&lt;activity, ViewVisitor&gt;</code>结构保存它们的，这也比较容易理解，毕竟我们的界面是随着一个一个的Activity被create，onResume之后才被用户看见的嘛。在ViewVisitor对象中还有一个<code>PathFinder</code>对象，这个对象负责在ViewTree中根据path去查找View（这里其实是在一个tree里面查找node的问题）。</p>\n<h4 id=\"4-2-2-2-监测View的行为，上报事件\"><a href=\"#4-2-2-2-监测View的行为，上报事件\" class=\"headerlink\" title=\"4.2.2.2 监测View的行为，上报事件\"></a>4.2.2.2 监测View的行为，上报事件</h4><p><code>ViewVisitor</code>是怎么给View设置监听器，监测元素的产生的行为呢？<strong>答案就是<code>View.AccessibilityDelegate</code>。</strong></p>\n<p>在Android SDK里面，AccessibilityService（无障碍服务）为我们提供了一系列的事件回调，帮助我们指示一些用户界面的状态变化。我们可以派生辅助功能类，进而对不同的AccessibilityEvent进行处理，我们看下AccessibilityEvent里面有哪些事件类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Represents the event of clicking on a &#123;<span class=\"doctag\">@link</span> android.view.View&#125; like</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> android.widget.Button&#125;, &#123;<span class=\"doctag\">@link</span> android.widget.CompoundButton&#125;, etc.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_VIEW_CLICKED = <span class=\"number\">0x00000001</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Represents the event of long clicking on a &#123;<span class=\"doctag\">@link</span> android.view.View&#125; like</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> android.widget.Button&#125;, &#123;<span class=\"doctag\">@link</span> android.widget.CompoundButton&#125;, etc.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_VIEW_LONG_CLICKED = <span class=\"number\">0x00000002</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Represents the event of selecting an item usually in the context of an</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> android.widget.AdapterView&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_VIEW_SELECTED = <span class=\"number\">0x00000004</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Represents the event of setting input focus of a &#123;<span class=\"doctag\">@link</span> android.view.View&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_VIEW_FOCUSED = <span class=\"number\">0x00000008</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Represents the event of changing the text of an &#123;<span class=\"doctag\">@link</span> android.widget.EditText&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_VIEW_TEXT_CHANGED = <span class=\"number\">0x00000010</span>;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>以点击事件<code>TYPE_VIEW_CLICKED</code>为例</strong>，当Activity界面的RootView开始绘制的时候（ViewTreeObserver.OnGlobalLayoutListener的onGlobalLayout回调时），ViewVisitor也会开始寻找指定的View，并给这个View设置新的AccessibilityDelegate。简单看一下这个新的View.AccessibilityDelegate是怎么写的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrackingAccessibilityDelegate</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span>.<span class=\"title\">AccessibilityDelegate</span> </span>&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TrackingAccessibilityDelegate</span><span class=\"params\">(View.AccessibilityDelegate realDelegate)</span> </span>&#123;</span><br><span class=\"line\">                mRealDelegate = realDelegate;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">public</span> View.<span class=\"function\">AccessibilityDelegate <span class=\"title\">getRealDelegate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mRealDelegate;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ...</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendAccessibilityEvent</span><span class=\"params\">(View host, <span class=\"keyword\">int</span> eventType)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (eventType == mEventType) &#123;</span><br><span class=\"line\">                    fireEvent(host); <span class=\"comment\">// 事件上报</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mRealDelegate) &#123;</span><br><span class=\"line\">                    mRealDelegate.sendAccessibilityEvent(host, eventType);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">private</span> View.AccessibilityDelegate mRealDelegate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<p>可以看到在SDK的<code>TrackingAccessibilityDelegate#sendAccessibilityEvent</code>方法里面，发出了事件上报。</p>\n<p>这么说View的点击处理方法中应该要调用<code>sendAccessibilityEvent</code>才行，那么View在点击方法的内部实现里有调用<code>sendAccessibilityEvent</code>方法吗？看一下View处理点击事件 - <code>View.performClick</code>的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">performClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ListenerInfo li = mListenerInfo;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnClickListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        playSoundEffect(SoundEffectConstants.CLICK);</span><br><span class=\"line\">        li.mOnClickListener.onClick(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        result = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendAccessibilityEvent</span><span class=\"params\">(<span class=\"keyword\">int</span> eventType)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mAccessibilityDelegate != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mAccessibilityDelegate.sendAccessibilityEvent(<span class=\"keyword\">this</span>, eventType);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        sendAccessibilityEventInternal(eventType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAccessibilityDelegate</span><span class=\"params\">(@Nullable AccessibilityDelegate delegate)</span> </span>&#123;</span><br><span class=\"line\">    mAccessibilityDelegate = delegate;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由此可见View的点击处理内部确实调用到了<code>sendAccessibilityEvent</code>，所以在RootView开始绘制的时候，给View注册AccessibilityDelegate可以监测到它的点击事件。可视化埋点这里对View的事件监测也是一种<strong>“动态Hook”</strong>的实现，不过没有采用第三章中介绍的反射获取OnClickListener的方案，而是采用了获取AccessibilityDelegate来实现，这种方式反射次数少一些，效率上会更好一些。</p>\n<blockquote>\n<p>在网上看到有网友提出，setAccessibilityDelegate来监测View的点击对大多数厂商的机型和版本都是可以的，但是有部分机型是无法成功捕获监控到点击事件。从View的标识生成，以及监测原理来讲，这个方案的稳定性存在一些疑问。</p>\n</blockquote>\n<h2 id=\"4-3-可视化埋点的难点和优化\"><a href=\"#4-3-可视化埋点的难点和优化\" class=\"headerlink\" title=\"4.3 可视化埋点的难点和优化\"></a>4.3 可视化埋点的难点和优化</h2><p>上面简单分析了Mixpanel和SensorsSDK可视化埋点的基本实现，里面最重要有一个技术点值得仔细琢磨，那就是<strong>如何唯一标识App中的一个View？由于View是长在ViewTree上的一个节点，那么用纵向的路径，以及横向的下标应该可以标识一个View。</strong></p>\n<ul>\n<li>纵向的路径：是指从根View到这个View的父控件的路径上经过的每一个节点</li>\n<li>横向的下标：是指这个View在父控件中的同类元素的下标索引（例如一个LinearLayout中有两个Button，那么第一个Button的下标就是0，第二个Button的下标就是1，这种方式可以抵抗父控件中加入一个非Button类型的元素时对ViewTree的改变，保证仍然可以找到Button，但是无法抵抗父控件中加入同类型的元素）</li>\n</ul>\n<p>上面仅仅提到了标识一个View的基本方法，但是有很多实际场景，会对View的查找造成毁灭性的影响，例如界面中Fragment的变化，ViewTree的变化，ListView中控件的复用等等，这里有两篇网易的博客，里面对一些场景的优化做了详细地说明，可以仔细看看：</p>\n<ul>\n<li><a href=\"http://www.infoq.com/cn/presentations/netease-happy-to-no-burial-point-data-collection-practice-road\" target=\"_blank\" rel=\"noopener\">http://www.infoq.com/cn/presentations/netease-happy-to-no-burial-point-data-collection-practice-road</a></li>\n<li><a href=\"http://www.jianshu.com/p/b5ffe845fe2d\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/b5ffe845fe2d</a></li>\n</ul>\n<h2 id=\"4-4-可视化埋点参考资料\"><a href=\"#4-4-可视化埋点参考资料\" class=\"headerlink\" title=\"4.4 可视化埋点参考资料\"></a>4.4 可视化埋点参考资料</h2><ul>\n<li>sensorsdata git，包含了Android、iOS、js、JAVA等多个版本的SDK：<a href=\"https://github.com/sensorsdata\" target=\"_blank\" rel=\"noopener\">https://github.com/sensorsdata</a></li>\n<li>Mixpanel git，包含了Android、iOS、js、JAVA等多个版本的SDK：<a href=\"https://github.com/mixpanel\" target=\"_blank\" rel=\"noopener\">https://github.com/mixpanel</a></li>\n<li>网易移动端数据收集和分析博客：<a href=\"http://www.jianshu.com/c/ee326e36f556\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/c/ee326e36f556</a></li>\n<li>美团点评前端无痕埋点实践：<a href=\"https://tech.meituan.com/mt-mobile-analytics-practice.html\" target=\"_blank\" rel=\"noopener\">https://tech.meituan.com/mt-mobile-analytics-practice.html</a></li>\n</ul>\n<h1 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h1><p>最后简单总结一下几种方案的优缺点和使用场景，在实际应用中多种方式配合使用，平衡效率和可靠性，适合自己的业务才是最好的。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">埋点方案</th>\n<th style=\"text-align:left\">优点</th>\n<th style=\"text-align:left\">缺点</th>\n<th style=\"text-align:left\">适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">代码埋点</td>\n<td style=\"text-align:left\">1.使用灵活，精确控制发送时机 <br> 2.方便设置自定义业务相关的属性</td>\n<td style=\"text-align:left\">1.埋点成本高，工作量大，必须是技术人员才能完成 <br> 2.更新成本高，一旦上线很难修改。只能通过热修复或者重新发版 <br> 3.对业务代码的侵入大</td>\n<td style=\"text-align:left\">对业务上下文理解要求较高的业务数据，如电商购物这类可能经过多次页面跳转，埋点时还需要带上前面页面中的一些信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全埋点</td>\n<td style=\"text-align:left\">1.开发、维护成本低 <br> 2.可以追溯历史数据 <br> 3.对业务代码侵入小 <br> 4.可以收集到一些额外信息，例如界面的热力图</td>\n<td style=\"text-align:left\">1.高额流量和计算成本 <br> 2.无法灵活收集属性 <br> 3.动态的Hook方式支持的控件有限、事件类型有限，大量事件监测时反射对App运行性能有影响 <br> 4.静态的Hook方式需要第三方编译器参与，打包时间增长</td>\n<td style=\"text-align:left\">上下文相对独立的、通用的数据，如点击热力图，性能监控和日志</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可视化埋点</td>\n<td style=\"text-align:left\">1.开发、维护成本低 <br> 2.可以按需埋点，灵活性好 <br> 3.对业务代码侵入小</td>\n<td style=\"text-align:left\">1.界面的结构发生变化时，圈选的待监测元素可能会失效 <br> 2.支持的控件和事件类型有限 <br> 3.无法灵活地收集到上下文属性</td>\n<td style=\"text-align:left\">上下文相对简单，依靠控件可以获得上下文信息，界面结构比较简单固定，如新闻阅读、游戏分享界面</td>\n</tr>\n</tbody>\n</table>"},{"layout":"post","title":"Gradle实践之自定义打包jar+Log开关自动关闭","date":"2015-10-25T00:00:00.000Z","_content":"\n上一篇博客介绍了[Gradle实践之多渠道自动化打包+版本号管理](http://unclechen.github.io/2015/10/22/Android%20Studio%20Gradle实践之多渠道自动化打包+版本号管理/)。由于我在公司里主要是做SDK开发的，这次我想介绍一下如何使用Gradle打出自己想要的jar包，并根据需要混淆、发布jar包。然后再介绍一下如何在打包的时候将自定义的Log输出工具关闭。\n\n<!-- more -->\n\n# 用Gradle打包出jar文件\n\n前面我们说过，在Android Studio里面使用Gradle来打包应用程序，一般都是build出来一个apk文件。但是有的同学是做实现层的开发，不直接做View层的东西，例如sdk开发主要是给View层开发的同学提供接口，通常是把代码打包成jar，再给开发者使用。\n\n现在有很多github上的开源项目也都是使用Android的library插件打包成aar，再提供给开发者用。这里说到`aar`，它是随着Android Studio的出现而出现的，功能上类似一个library，可以在其他的项目里面调用这个aar提供的接口，aar也是一种zip包，与apk文件非常地相似，用解压工具打开它就会发现里面除了一个 **classes.jar** ，还有 **res、assert、aidl、AndroidManifest.xml** 等等文件，真的和apk太像了，不过apk压缩包里面的classes文件是一个dex文件，aar里面的classes文件还是个jar。\n\n还是以上一篇博客中建立的HelloGradle工程为例，现在向里面再添加一个新的Module。添加方法就是在项目面板的左侧，以`Andrioid`视图查看工程结构，右键，在弹出的菜单中选择`open module settings`，然后选择`new a module`，接着在弹出的对话框中，选择新建一个`Android Library Module`，这里我把它命名为HelloLib。如下图所示：\n\n![New a lib module](/content/images/new-a-lib-module.png)\n\n这时你会发现，我们的HelloGradle工程里，有了两个Module，一个是application类型的Module，一个是library类型的Module。\n\n![Two module](/content/images/two-modules.png)\n\n它们的区别可以在各自的`build.gradle`文件中一目了然。因为application module的build.gradle中引入的是`com.android.application`插件来打包，而library module的build.gradle中引入的是`com.android.library`插件进行打包。\n\n```\napply plugin: 'com.android.library'\n```\n\n可想而知，这个`com.android.library`打包出的来的output一定就是`aar`文件了。这个aar文件位于`build/output/aar/`文件夹下。\n\n那么我们要如何打包出一个jar呢？毕竟现在还有项目是用Eclipse开发的，使用jar文件比较方便，而且jar文件也可以在Android Studio中引入。\n\n首先我们在新建HelloLib Module中new一个class，作为我们的库来提供给app module使用。如下所示，我新建了一个测试类。\n\n```\npackage com.nought.hellolib;\n\nimport android.util.Log;\n\npublic class UncleNought {\n\n    public static void Output() {\n        Log.i(UncleNought.class.getSimpleName(), \"I'm a library!\");\n    }\n}\n\n```\n\n然后在app module的build.gradle文件中添加一行`compile project(':hellolib')`，使得app module依赖我们的HelloLib module。\n\n```\ndependencies {\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:22.2.1'\n    compile 'com.android.support:design:22.2.1'\n    compile project(':hellolib')\n}\n```\n\n这样就可以在app module中调用刚才的测试类了。我们在app module中MainActivity的onCreate方法里调用`UncleNought.Output();`，可以看到输出了Log`I'm a library!`。\n\n![I am a lib](/content/images/i-am-a-lib.png)\n\n接着，我们介绍两种生成jar的方法，有了jar以后，就可以在app module中以jar包的形式来调用HelloLib中的接口。\n\n## 方案1：拷贝默认生成的jar包\n\n说到jar包，其实它就是把java源文件编译出来的class字节码，以一种zip的形式压缩在了一起。Android很大部分的开发都是用java写的，那么我们可以将Android源代码编译出来的class字节码压缩到一个jar包里面，不就是我们想要的jar包吗？没错就是这个，实际上在`com.android.library`插件中，运行build命令是，也会有这样的操作，先把java源代码编译成class文件，再把文件打包成jar，再把jar压缩成dex。这其中就有jar的操作，生成的jar就位于`build/intermediates/bundles/release/classes.jar`。如果你想直接使用这个jar也是可以的，只要自己在HelloLib Module的build.gradle中写一个copy类型的task，把这个classes.jar拷贝到指定的目录下就可以了。下面是一种示例：\n\n\n```\ntask releaseMyLib(type: Copy, dependsOn: ['build']) {\n    from( 'build/intermediates/bundles/release/')\n    into( 'build/libs')\n    include('classes.jar')\n    rename('classes.jar', 'my-lib.jar')\n}\n\n```\n\n在HelloLib的build.gradle脚本添加完上面的task以后，打开Android Studio自带的命令行工具，依次输入下面两行，就可以打出一个my-lib.jar包了。\n\n```\ncd hellolib\ngradle releaseMyLib\n```\n\n这段脚本的含义非常简单，我们自定义了一个名叫releaseMyLib的task，它是Gradle API自带的`copy`类型的任务，这个任务依赖于 `build`任务，前面我们提到过，gradle有很多默认的任务，build便是其中的一个。所以当build任务结束后，会在`build/intermediates/bundles/release/`下生成`classes.jar`文件，我们只要在这之后，把它拷贝出来，重命名为`my-lib.jar`就可以了。\n\n然后把这个jar包拷贝到app module下的libs文件夹中，去掉刚才在app module的build.gradle文件中添加的`compile project(':hellolib')`，重新gradle sync一下，然后尝试运行你会发现和刚才的效果是一样的，这样就打出一个hellolib module的jar了。\n\n但是上面这种做法太偷懒了，实际上这个classes.jar中，有一些是我们不要的类，例如`BuildConfig.class`这样的类。下图是用Java Decompiler反编译看到my-lib.jar里面的内容。\n\n![My lib](/content/images/my-lib.png)\n\n作为一个sdk开发者，很多时候需要自己的jar越小越好，所以我们可以不需要把编译后自动生成的BuildConfig类加入到我们自己的jar包中来，此外有时候我们并不想把所有的类都打到这个my-lib.jar包中，这时应该怎么做呢？\n\n## 方案2：自定义Jar任务打包jar文件\n\n我们知道，Android Studio生成默认的jar包，是把源代码编译之后生成的所有的class字节码都压缩到这个classes.jar中，如果我想只打其中的一部分类该怎么办呢？\n\n答案很简单：只需要在对编译出来的class字节码做Jar操作时，include我自己想要的类（或者exclude掉不想要的类）即可。那么所有的编译好的class字节码都在哪里呢？答案是`build/intermediates/classes/release/`目录下，如下图所示：\n\n![classes](/content/images/output-classes.png)\n\nAndroid Library打包插件在build时，会把所有的java文件编译成class文件，放在这个目录下。所以我们接下来要做的事就是把这里面，所有需要的class，打成一个Jar包即可。下面是一个示例：\n\n```\ntask jarMyLib(type: Jar, dependsOn: ['build']) {\n    archiveName = 'my-lib.jar'\n    from('build/intermediates/classes/release')\n    destinationDir = file('build/libs')\n    exclude('com/nought/hellolib/BuildConfig.class')\n    exclude('com/nought/hellolib/BuildConfig\\$*.class')\n    exclude('**/R.class')\n    exclude('**/R\\$*.class')\n    include('com/nought/hellolib/*.class')\n}\n\n```\n\n同样，打开Android Studio的终端，依次输入下面两行命令：\n\n```\ncd hellolib\ngradle jarMyLib\n\n```\n这样就通过Jar任务，自己打包出了一个jar包。我们可以反编译一下这个jar包看看：\n\n![Jar classes](/content/images/my-jar-lib.png)\n\n果然里面没有BuildCongfig这个类了，把这`my-lib.jar`拷贝到app module下的libs文件夹下，重新Gradle sync一下，再运行这个app module，可以看到和之前方案1中一样的效果了。\n\n这里是一种基本的自定义示例，如果还需要有别的需求，可以参考Gradle官方的DSL，里面介绍了各种Task接收的参数和使用方法。大家可以自行发挥实现自己想要的效果。\n\n## PS 0：如何将依赖的第三方库也打包进来\n\n有一次我在Android开源群里，一个朋友问到“如果除了自己写的类，还想把第三方的OkHttp包打进来怎么办？”。其实这个问题很好解决，Gradle的`Jar`任务是可配置多个`from`来源的，所以我们只需要在上面的代码里添加一行:\n\n```\ntask jarMyLib(type: Jar, dependsOn: ['build']) {\n    archiveName = 'my-lib.jar'\n    from('build/intermediates/classes/release')\n    from(project.zipTree(\"libs/xxx-x.x.x.jar\")) // 添加这一行\n    destinationDir = file('build/libs')\n    exclude('com/nought/hellolib/BuildConfig.class')\n    exclude('com/nought/hellolib/BuildConfig\\$*.class')\n    exclude('**/R.class')\n    exclude('**/R\\$*.class')\n    include('com/nought/hellolib/*.class')\n    include('com/xxx/*.class') // 同时记得加上第三方的package\n```\n\n看上面的加了注释的两行，这样就可以把第三放依赖的jar包添加进来了。\n\n## PS 1：为何要依赖默认的build任务\n\n前面我们自定义`jarMyLib`的时候，都依赖了`build`任务，因为这个任务可以帮我们把所有的java源代码编译成class文件，实际上build任务自己又依赖了很多其他的任务来实现打包。如果你想实现更快速的打包，运行一下`gradle tasks`或者在Android Studio中点击右边的Gradle按钮弹出任务列表的面板，就会看到还有一个`compileReleaseJavaWithJavac`，看名字就知道这个任务是编译所有的release type的java源文件，因为我们可以把上面的代码改为dependsOn这个任务即可，改为`task jarMyLib(type: Jar, dependsOn: ['compileReleaseJavaWithJavac'])`。但是记住了，一定要看清楚自己的gradle插件版本，我这个Android Gradle插件的版本是`com.android.tools.build:gradle:1.3.0`，而`com.android.tools.build:gradle:1.2.3`插件版本中对应的这个Compile任务的名字是叫做`compileReleaseJava`，大家记得不要写错了。\n\n## PS 2：为何不直接自定义compileJava任务\n\n另外大家可能会说，既然都自己自定义Jar任务，为啥不把`compileJava`任务也自定义了，其实也是可以的，这样等于完全不用依赖Android Gradle插件的默认任务了。但有的时候，假设我们的代码中要把aidl打进来，依赖默认的`compileReleaseJavaWithJavac`任务会把aidl生成的class文件也包含在里面，非常方便。如果自己去写JavaCompile任务的话，首先还要把aidl文件生成java文件，再来compile它，会有一点点麻烦。咱们做sdk开发的，不需要打那么多渠道包，直接依赖默认的`compileReleaseJavaWithJavac`其实多花个1-2s不是什么大问题。\n\n## PS 3：混淆自定义的jar包\n\n刚才忘了提，混淆也是比较常见的一个需求，假设我们不是打包apk，在buildTypes闭包里面也没有给release类型的任务设置``为混淆。那么我们还可以自己定义一个混淆任务，话不多说，直接上代码：\n\n```\ndef androidSDKDir = plugins.getPlugin('com.android.library').sdkHandler.getSdkFolder()\ndef androidJarDir = androidSDKDir.toString() + '/platforms/' + \"${android.compileSdkVersion}\" + '/android.jar'\n\ntask proguardMyLib(type: proguard.gradle.ProGuardTask, dependsOn: ['jarMyLib']) {\n    injars('build/libs/my-lib.jar')\n    outjars('build/libs/my-pro-lib.jar')\n    libraryjars(androidJarDir)\n    configuration 'proguard-rules.pro'\n}\n\n```\n\n这里的混淆Task——`proguard.gradle.ProGuardTask`，也是来自Gradle标准的API，查看一下Gradle DSL，就知道怎么用了。injars、outjars和libraryjars以及混淆配置文件proguard-rules.pro这些参数，和原来使用Eclipse开发时是一样的，injars表示输入的需要被混淆的jar包，outsjars表示混淆后输出的jar包，libraryjars表示引用到的jar包不被混淆，`proguard-rules.pro`里面写的是混淆配置，具体就不在这里详细发散了。\n\n最后，还是在终端中进入HelloLib目录，执行`gradle proguardMyLib`，就可以得到混淆以后的jar包`my-pro-lib.jar`了。\n\n```\ncd hellolib\ngradle proguardMyLib\n\n```\n\n同样，我们反编译一下这个`my-pro-lib.jar`，如下图所示：\n\n![Decompile my-pro-lib](/content/images/my-pro-lib.png)\n\n有同学就会说了，这个混淆的后的jar包和原来的jar包没啥区别啊... ...没错，因为我们这个类里面只调用了一句Log API，这个API又是来自于android.jar的，我们在混淆的时候使用libraryjars(android.jar)保证了这个包里面的东西不会被混淆，所以这个示例里面看起来是没有什么变化的。如果你的HelloLib Module写的很复杂，里面代码有很多的话，混淆以后是有明显变化的，自定义打包jar文件就到这里结束了，大家可以自己体验一下。\n\n***\n\n# Gradle自动关闭Log开关\n\n在Android开发中，很多时候我们会自己封装一个Log类，里面设置一个开关，在开发的时候将所有级别的Log全部打开输出。然后在发布应用前，把Log.i和Log.d这类级别的Log关闭，仅留下Log.e类型的输出。这样做是为了防止别人通过log来研究我们的代码，同时也可以把一些不必要给别人看的信息过滤掉。\n\n其实这个需求很早就有，网上的大神们有很多的方法，这里我就举两个例子，说一下我自己的体会吧。\n\n## 方案1：通过BuildConfig类来关闭\n\n前面我们一经发现，当你使用Android Gradle插件打包，执行默认的build任务时，会在`build/intermediates/classes/release`中自动生成一个`BuildConfig.class`，有class就应该有java源代码文件啊，那么这个class文件对应的java文件在哪里呢？答案是`app/build/generated/source/buildConfig/`下。\n\n关于这个生成的类文件，我们可以通过在build.gradle脚本中的buildTypes闭包中指定参数，使得这个类生成出来的时候包含一个我们自定义的boolean类型的静态常量`ENABLE_DEBUG`，直接上代码：\n\n```\nbuildTypes {\n        release {\n            // 不显示log\n            buildConfigField \"boolean\", \"ENABLE_DEBUG\", \"false\"\n            ...\n        }\n \n        debug {\n            // 显示Log\n            buildConfigField \"boolean\", \"ENABLE_DEBUG\", \"true\"\n            ...\n        }\n    }\n\n```\n\n按照上面的脚本编写之后，生成的release版BuildConfig类中就会多出一个常量，即`public static final boolean ENABLE_DEBUG = false;`；而debug版的BuildConfig类中的常量值则为true，即`public static final boolean ENABLE_DEBUG = true;`。你可以分别在源代码中调用这两个常量，最后这两个类分别也会被打包到release和debug版各自的apk文件当中。\n\n当你修改build.gradle脚本以后，按照Android Studio的提示，点击`Gradle Sync`，就可以在之前我们自定义的UncleNought测试类中调用BuildConfig类中常量，可以看到`ENABLE_DEBUG`这个类已经自动生成出来了。下面是一段调用的示例：\n\n```\npackage com.nought.hellolib;\n\nimport android.util.Log;\n\npublic class UncleNought {\n\n    public static void Output() {\n        if (BuildConfig.ENABLE_DEBUG) {\n            Log.i(UncleNought.class.getSimpleName(), \"I'm a library!\");\n        }\n    }\n}\n\n```\n\n咱们可以打个包看一下，在命令行中运行:\n\n```\ngradle releaseMyLib\n```\n\n记住，这里必须执行`releaseMyLib`这个任务，因为我们用到了BuildConfig这个自动生成的类，假如不把它编译到我们的jar包里，那么就没法去引用`BuildConfig`里面的`ENABLE_DEBUG`常量了。打包好了以后，我们通过反编译再看一下这个jar，如下图：\n\n![enable-debug](/content/images/buildconfig-enable-debug.png)\n\n把这个jar包给app module引用一下也会发现，现在Log已经不会输出了。\n\n## 方案2：自定义Log开关\n\n假设我们不想把BuildConfig打包进来，只想在自己的类中定义一个常量，然后在release的时候修改这个动态去常量，应该怎么做呢？这个时候就可以利用gradle强大的能力了，话不多说，一步步看代码。\n\n首先在测试类的代码里添加一个常量`ENABLE_DEBUG`：\n\n```\npackage com.nought.hellolib;\n\nimport android.util.Log;\n\npublic class UncleNought {\n\n    public static boolean ENABLE_DEBUG = true;\n\n    public static void Output() {\n        if (ENABLE_DEBUG) {\n            Log.i(UncleNought.class.getSimpleName(), \"I'm a library!\");\n        }\n    }\n}\n\n```\n\n然后修改我们的HelloLib打包脚本build.gradle文件，在前面的基础上添加：\n\n```\ndef enableLoggerDebug(boolean flag) {\n    def loggerFilePath = \"src/main/java/com/qq/e/comm/util/GDTLogger.java\"\n    def updatedDebug = new File(loggerFilePath).getText('UTF-8')\n            .replaceAll(\"DEBUG_ENABLE\\\\s?=\\\\s?\" + (!flag).toString(), \"DEBUG_ENABLE = \" + flag.toString())\n    new File(loggerFilePath).write(updatedDebug, 'UTF-8')\n    println(flag ? 'GDTLogger.DEBUG_ENABLE : [true]' : 'GDTLogger.DEBUG_ENABLE : [false]')\n}\n\npreBuild {}.doFirst {\n    if (('jarMyLib' in gradle.startParameter.taskNames)) {\n        enableLoggerDebug(false)\n    }\n}\n\njarMyLib {}.doLast {\n    enableLoggerDebug(true)\n}\n```\n\n前面我提过，Gradle兼容Java的语法，所以我就想到，可以用正则表达式替换掉原来代码中的`true`，让它变成`false`。当然我们要保证这该替换必须发生在`complileReleaseJavaWithJavac`之前，然后我们在打包彻底完成以后，再把Log开关打开，即再`false`变回`true`，使得开发环境一直都是可以输出Debug Log的。\n\n可以看到我们在preBuild任务前把开关关闭了，然后在jarMyLib之后，又把开关打开了。`doFirst`和`doLast`都是通过闭包的方式向一个已有的任务里面添加可执行操作的语法。下面我们打开终端进入到HelloLib目录下，执行下面的语句打一个包试试：\n\n```\ngradle jarMyLib\n```\n\n找到我们的jar包，反编译一下看看：\n\n![custom-enable-debug](/content/images/custom-log-enable.png)\n\n果然，虽然我们的代码里是`public static boolean ENABLE_DEBUG = true;`，然而打出来的jar包却是`public static boolean ENABLE_DEBUG = false;`。\n\n是不是很方便，如果你还有类似的动态修改代码的需求，也可以采用这种方法实现。其实还有其他的方式也可以实现同样的效果，在Android打包脚本的buildTypes和productFlavor支持下，我们还可以为不同类型的任务创建不同的源代码或者资源类型的文件，前面的博客就提到过可以为不同渠道包设置不同的`appname`，也可以采用同样的思路实现刚才这个需求，大家看自己的偏好吧，黑猫白猫，只要能抓到老鼠那都是好狗哇，哈哈哈！\n\n最后上一下这个HelloGradle工程的代码示例[https://github.com/unclechen/HelloGradle](https://github.com/unclechen/HelloGradle)，里面有这两篇博客的打包示例，需要的同学可以看看。\n\n\n\n","source":"_posts/Gradle实践之打包jar+Log开关自动关闭.markdown","raw":"---\nlayout: post\ntitle: Gradle实践之自定义打包jar+Log开关自动关闭\ndate: '2015-10-25'\ntags:\n  - Android\n  - 打包\ncategories: \n  - 技术\n---\n\n上一篇博客介绍了[Gradle实践之多渠道自动化打包+版本号管理](http://unclechen.github.io/2015/10/22/Android%20Studio%20Gradle实践之多渠道自动化打包+版本号管理/)。由于我在公司里主要是做SDK开发的，这次我想介绍一下如何使用Gradle打出自己想要的jar包，并根据需要混淆、发布jar包。然后再介绍一下如何在打包的时候将自定义的Log输出工具关闭。\n\n<!-- more -->\n\n# 用Gradle打包出jar文件\n\n前面我们说过，在Android Studio里面使用Gradle来打包应用程序，一般都是build出来一个apk文件。但是有的同学是做实现层的开发，不直接做View层的东西，例如sdk开发主要是给View层开发的同学提供接口，通常是把代码打包成jar，再给开发者使用。\n\n现在有很多github上的开源项目也都是使用Android的library插件打包成aar，再提供给开发者用。这里说到`aar`，它是随着Android Studio的出现而出现的，功能上类似一个library，可以在其他的项目里面调用这个aar提供的接口，aar也是一种zip包，与apk文件非常地相似，用解压工具打开它就会发现里面除了一个 **classes.jar** ，还有 **res、assert、aidl、AndroidManifest.xml** 等等文件，真的和apk太像了，不过apk压缩包里面的classes文件是一个dex文件，aar里面的classes文件还是个jar。\n\n还是以上一篇博客中建立的HelloGradle工程为例，现在向里面再添加一个新的Module。添加方法就是在项目面板的左侧，以`Andrioid`视图查看工程结构，右键，在弹出的菜单中选择`open module settings`，然后选择`new a module`，接着在弹出的对话框中，选择新建一个`Android Library Module`，这里我把它命名为HelloLib。如下图所示：\n\n![New a lib module](/content/images/new-a-lib-module.png)\n\n这时你会发现，我们的HelloGradle工程里，有了两个Module，一个是application类型的Module，一个是library类型的Module。\n\n![Two module](/content/images/two-modules.png)\n\n它们的区别可以在各自的`build.gradle`文件中一目了然。因为application module的build.gradle中引入的是`com.android.application`插件来打包，而library module的build.gradle中引入的是`com.android.library`插件进行打包。\n\n```\napply plugin: 'com.android.library'\n```\n\n可想而知，这个`com.android.library`打包出的来的output一定就是`aar`文件了。这个aar文件位于`build/output/aar/`文件夹下。\n\n那么我们要如何打包出一个jar呢？毕竟现在还有项目是用Eclipse开发的，使用jar文件比较方便，而且jar文件也可以在Android Studio中引入。\n\n首先我们在新建HelloLib Module中new一个class，作为我们的库来提供给app module使用。如下所示，我新建了一个测试类。\n\n```\npackage com.nought.hellolib;\n\nimport android.util.Log;\n\npublic class UncleNought {\n\n    public static void Output() {\n        Log.i(UncleNought.class.getSimpleName(), \"I'm a library!\");\n    }\n}\n\n```\n\n然后在app module的build.gradle文件中添加一行`compile project(':hellolib')`，使得app module依赖我们的HelloLib module。\n\n```\ndependencies {\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:22.2.1'\n    compile 'com.android.support:design:22.2.1'\n    compile project(':hellolib')\n}\n```\n\n这样就可以在app module中调用刚才的测试类了。我们在app module中MainActivity的onCreate方法里调用`UncleNought.Output();`，可以看到输出了Log`I'm a library!`。\n\n![I am a lib](/content/images/i-am-a-lib.png)\n\n接着，我们介绍两种生成jar的方法，有了jar以后，就可以在app module中以jar包的形式来调用HelloLib中的接口。\n\n## 方案1：拷贝默认生成的jar包\n\n说到jar包，其实它就是把java源文件编译出来的class字节码，以一种zip的形式压缩在了一起。Android很大部分的开发都是用java写的，那么我们可以将Android源代码编译出来的class字节码压缩到一个jar包里面，不就是我们想要的jar包吗？没错就是这个，实际上在`com.android.library`插件中，运行build命令是，也会有这样的操作，先把java源代码编译成class文件，再把文件打包成jar，再把jar压缩成dex。这其中就有jar的操作，生成的jar就位于`build/intermediates/bundles/release/classes.jar`。如果你想直接使用这个jar也是可以的，只要自己在HelloLib Module的build.gradle中写一个copy类型的task，把这个classes.jar拷贝到指定的目录下就可以了。下面是一种示例：\n\n\n```\ntask releaseMyLib(type: Copy, dependsOn: ['build']) {\n    from( 'build/intermediates/bundles/release/')\n    into( 'build/libs')\n    include('classes.jar')\n    rename('classes.jar', 'my-lib.jar')\n}\n\n```\n\n在HelloLib的build.gradle脚本添加完上面的task以后，打开Android Studio自带的命令行工具，依次输入下面两行，就可以打出一个my-lib.jar包了。\n\n```\ncd hellolib\ngradle releaseMyLib\n```\n\n这段脚本的含义非常简单，我们自定义了一个名叫releaseMyLib的task，它是Gradle API自带的`copy`类型的任务，这个任务依赖于 `build`任务，前面我们提到过，gradle有很多默认的任务，build便是其中的一个。所以当build任务结束后，会在`build/intermediates/bundles/release/`下生成`classes.jar`文件，我们只要在这之后，把它拷贝出来，重命名为`my-lib.jar`就可以了。\n\n然后把这个jar包拷贝到app module下的libs文件夹中，去掉刚才在app module的build.gradle文件中添加的`compile project(':hellolib')`，重新gradle sync一下，然后尝试运行你会发现和刚才的效果是一样的，这样就打出一个hellolib module的jar了。\n\n但是上面这种做法太偷懒了，实际上这个classes.jar中，有一些是我们不要的类，例如`BuildConfig.class`这样的类。下图是用Java Decompiler反编译看到my-lib.jar里面的内容。\n\n![My lib](/content/images/my-lib.png)\n\n作为一个sdk开发者，很多时候需要自己的jar越小越好，所以我们可以不需要把编译后自动生成的BuildConfig类加入到我们自己的jar包中来，此外有时候我们并不想把所有的类都打到这个my-lib.jar包中，这时应该怎么做呢？\n\n## 方案2：自定义Jar任务打包jar文件\n\n我们知道，Android Studio生成默认的jar包，是把源代码编译之后生成的所有的class字节码都压缩到这个classes.jar中，如果我想只打其中的一部分类该怎么办呢？\n\n答案很简单：只需要在对编译出来的class字节码做Jar操作时，include我自己想要的类（或者exclude掉不想要的类）即可。那么所有的编译好的class字节码都在哪里呢？答案是`build/intermediates/classes/release/`目录下，如下图所示：\n\n![classes](/content/images/output-classes.png)\n\nAndroid Library打包插件在build时，会把所有的java文件编译成class文件，放在这个目录下。所以我们接下来要做的事就是把这里面，所有需要的class，打成一个Jar包即可。下面是一个示例：\n\n```\ntask jarMyLib(type: Jar, dependsOn: ['build']) {\n    archiveName = 'my-lib.jar'\n    from('build/intermediates/classes/release')\n    destinationDir = file('build/libs')\n    exclude('com/nought/hellolib/BuildConfig.class')\n    exclude('com/nought/hellolib/BuildConfig\\$*.class')\n    exclude('**/R.class')\n    exclude('**/R\\$*.class')\n    include('com/nought/hellolib/*.class')\n}\n\n```\n\n同样，打开Android Studio的终端，依次输入下面两行命令：\n\n```\ncd hellolib\ngradle jarMyLib\n\n```\n这样就通过Jar任务，自己打包出了一个jar包。我们可以反编译一下这个jar包看看：\n\n![Jar classes](/content/images/my-jar-lib.png)\n\n果然里面没有BuildCongfig这个类了，把这`my-lib.jar`拷贝到app module下的libs文件夹下，重新Gradle sync一下，再运行这个app module，可以看到和之前方案1中一样的效果了。\n\n这里是一种基本的自定义示例，如果还需要有别的需求，可以参考Gradle官方的DSL，里面介绍了各种Task接收的参数和使用方法。大家可以自行发挥实现自己想要的效果。\n\n## PS 0：如何将依赖的第三方库也打包进来\n\n有一次我在Android开源群里，一个朋友问到“如果除了自己写的类，还想把第三方的OkHttp包打进来怎么办？”。其实这个问题很好解决，Gradle的`Jar`任务是可配置多个`from`来源的，所以我们只需要在上面的代码里添加一行:\n\n```\ntask jarMyLib(type: Jar, dependsOn: ['build']) {\n    archiveName = 'my-lib.jar'\n    from('build/intermediates/classes/release')\n    from(project.zipTree(\"libs/xxx-x.x.x.jar\")) // 添加这一行\n    destinationDir = file('build/libs')\n    exclude('com/nought/hellolib/BuildConfig.class')\n    exclude('com/nought/hellolib/BuildConfig\\$*.class')\n    exclude('**/R.class')\n    exclude('**/R\\$*.class')\n    include('com/nought/hellolib/*.class')\n    include('com/xxx/*.class') // 同时记得加上第三方的package\n```\n\n看上面的加了注释的两行，这样就可以把第三放依赖的jar包添加进来了。\n\n## PS 1：为何要依赖默认的build任务\n\n前面我们自定义`jarMyLib`的时候，都依赖了`build`任务，因为这个任务可以帮我们把所有的java源代码编译成class文件，实际上build任务自己又依赖了很多其他的任务来实现打包。如果你想实现更快速的打包，运行一下`gradle tasks`或者在Android Studio中点击右边的Gradle按钮弹出任务列表的面板，就会看到还有一个`compileReleaseJavaWithJavac`，看名字就知道这个任务是编译所有的release type的java源文件，因为我们可以把上面的代码改为dependsOn这个任务即可，改为`task jarMyLib(type: Jar, dependsOn: ['compileReleaseJavaWithJavac'])`。但是记住了，一定要看清楚自己的gradle插件版本，我这个Android Gradle插件的版本是`com.android.tools.build:gradle:1.3.0`，而`com.android.tools.build:gradle:1.2.3`插件版本中对应的这个Compile任务的名字是叫做`compileReleaseJava`，大家记得不要写错了。\n\n## PS 2：为何不直接自定义compileJava任务\n\n另外大家可能会说，既然都自己自定义Jar任务，为啥不把`compileJava`任务也自定义了，其实也是可以的，这样等于完全不用依赖Android Gradle插件的默认任务了。但有的时候，假设我们的代码中要把aidl打进来，依赖默认的`compileReleaseJavaWithJavac`任务会把aidl生成的class文件也包含在里面，非常方便。如果自己去写JavaCompile任务的话，首先还要把aidl文件生成java文件，再来compile它，会有一点点麻烦。咱们做sdk开发的，不需要打那么多渠道包，直接依赖默认的`compileReleaseJavaWithJavac`其实多花个1-2s不是什么大问题。\n\n## PS 3：混淆自定义的jar包\n\n刚才忘了提，混淆也是比较常见的一个需求，假设我们不是打包apk，在buildTypes闭包里面也没有给release类型的任务设置``为混淆。那么我们还可以自己定义一个混淆任务，话不多说，直接上代码：\n\n```\ndef androidSDKDir = plugins.getPlugin('com.android.library').sdkHandler.getSdkFolder()\ndef androidJarDir = androidSDKDir.toString() + '/platforms/' + \"${android.compileSdkVersion}\" + '/android.jar'\n\ntask proguardMyLib(type: proguard.gradle.ProGuardTask, dependsOn: ['jarMyLib']) {\n    injars('build/libs/my-lib.jar')\n    outjars('build/libs/my-pro-lib.jar')\n    libraryjars(androidJarDir)\n    configuration 'proguard-rules.pro'\n}\n\n```\n\n这里的混淆Task——`proguard.gradle.ProGuardTask`，也是来自Gradle标准的API，查看一下Gradle DSL，就知道怎么用了。injars、outjars和libraryjars以及混淆配置文件proguard-rules.pro这些参数，和原来使用Eclipse开发时是一样的，injars表示输入的需要被混淆的jar包，outsjars表示混淆后输出的jar包，libraryjars表示引用到的jar包不被混淆，`proguard-rules.pro`里面写的是混淆配置，具体就不在这里详细发散了。\n\n最后，还是在终端中进入HelloLib目录，执行`gradle proguardMyLib`，就可以得到混淆以后的jar包`my-pro-lib.jar`了。\n\n```\ncd hellolib\ngradle proguardMyLib\n\n```\n\n同样，我们反编译一下这个`my-pro-lib.jar`，如下图所示：\n\n![Decompile my-pro-lib](/content/images/my-pro-lib.png)\n\n有同学就会说了，这个混淆的后的jar包和原来的jar包没啥区别啊... ...没错，因为我们这个类里面只调用了一句Log API，这个API又是来自于android.jar的，我们在混淆的时候使用libraryjars(android.jar)保证了这个包里面的东西不会被混淆，所以这个示例里面看起来是没有什么变化的。如果你的HelloLib Module写的很复杂，里面代码有很多的话，混淆以后是有明显变化的，自定义打包jar文件就到这里结束了，大家可以自己体验一下。\n\n***\n\n# Gradle自动关闭Log开关\n\n在Android开发中，很多时候我们会自己封装一个Log类，里面设置一个开关，在开发的时候将所有级别的Log全部打开输出。然后在发布应用前，把Log.i和Log.d这类级别的Log关闭，仅留下Log.e类型的输出。这样做是为了防止别人通过log来研究我们的代码，同时也可以把一些不必要给别人看的信息过滤掉。\n\n其实这个需求很早就有，网上的大神们有很多的方法，这里我就举两个例子，说一下我自己的体会吧。\n\n## 方案1：通过BuildConfig类来关闭\n\n前面我们一经发现，当你使用Android Gradle插件打包，执行默认的build任务时，会在`build/intermediates/classes/release`中自动生成一个`BuildConfig.class`，有class就应该有java源代码文件啊，那么这个class文件对应的java文件在哪里呢？答案是`app/build/generated/source/buildConfig/`下。\n\n关于这个生成的类文件，我们可以通过在build.gradle脚本中的buildTypes闭包中指定参数，使得这个类生成出来的时候包含一个我们自定义的boolean类型的静态常量`ENABLE_DEBUG`，直接上代码：\n\n```\nbuildTypes {\n        release {\n            // 不显示log\n            buildConfigField \"boolean\", \"ENABLE_DEBUG\", \"false\"\n            ...\n        }\n \n        debug {\n            // 显示Log\n            buildConfigField \"boolean\", \"ENABLE_DEBUG\", \"true\"\n            ...\n        }\n    }\n\n```\n\n按照上面的脚本编写之后，生成的release版BuildConfig类中就会多出一个常量，即`public static final boolean ENABLE_DEBUG = false;`；而debug版的BuildConfig类中的常量值则为true，即`public static final boolean ENABLE_DEBUG = true;`。你可以分别在源代码中调用这两个常量，最后这两个类分别也会被打包到release和debug版各自的apk文件当中。\n\n当你修改build.gradle脚本以后，按照Android Studio的提示，点击`Gradle Sync`，就可以在之前我们自定义的UncleNought测试类中调用BuildConfig类中常量，可以看到`ENABLE_DEBUG`这个类已经自动生成出来了。下面是一段调用的示例：\n\n```\npackage com.nought.hellolib;\n\nimport android.util.Log;\n\npublic class UncleNought {\n\n    public static void Output() {\n        if (BuildConfig.ENABLE_DEBUG) {\n            Log.i(UncleNought.class.getSimpleName(), \"I'm a library!\");\n        }\n    }\n}\n\n```\n\n咱们可以打个包看一下，在命令行中运行:\n\n```\ngradle releaseMyLib\n```\n\n记住，这里必须执行`releaseMyLib`这个任务，因为我们用到了BuildConfig这个自动生成的类，假如不把它编译到我们的jar包里，那么就没法去引用`BuildConfig`里面的`ENABLE_DEBUG`常量了。打包好了以后，我们通过反编译再看一下这个jar，如下图：\n\n![enable-debug](/content/images/buildconfig-enable-debug.png)\n\n把这个jar包给app module引用一下也会发现，现在Log已经不会输出了。\n\n## 方案2：自定义Log开关\n\n假设我们不想把BuildConfig打包进来，只想在自己的类中定义一个常量，然后在release的时候修改这个动态去常量，应该怎么做呢？这个时候就可以利用gradle强大的能力了，话不多说，一步步看代码。\n\n首先在测试类的代码里添加一个常量`ENABLE_DEBUG`：\n\n```\npackage com.nought.hellolib;\n\nimport android.util.Log;\n\npublic class UncleNought {\n\n    public static boolean ENABLE_DEBUG = true;\n\n    public static void Output() {\n        if (ENABLE_DEBUG) {\n            Log.i(UncleNought.class.getSimpleName(), \"I'm a library!\");\n        }\n    }\n}\n\n```\n\n然后修改我们的HelloLib打包脚本build.gradle文件，在前面的基础上添加：\n\n```\ndef enableLoggerDebug(boolean flag) {\n    def loggerFilePath = \"src/main/java/com/qq/e/comm/util/GDTLogger.java\"\n    def updatedDebug = new File(loggerFilePath).getText('UTF-8')\n            .replaceAll(\"DEBUG_ENABLE\\\\s?=\\\\s?\" + (!flag).toString(), \"DEBUG_ENABLE = \" + flag.toString())\n    new File(loggerFilePath).write(updatedDebug, 'UTF-8')\n    println(flag ? 'GDTLogger.DEBUG_ENABLE : [true]' : 'GDTLogger.DEBUG_ENABLE : [false]')\n}\n\npreBuild {}.doFirst {\n    if (('jarMyLib' in gradle.startParameter.taskNames)) {\n        enableLoggerDebug(false)\n    }\n}\n\njarMyLib {}.doLast {\n    enableLoggerDebug(true)\n}\n```\n\n前面我提过，Gradle兼容Java的语法，所以我就想到，可以用正则表达式替换掉原来代码中的`true`，让它变成`false`。当然我们要保证这该替换必须发生在`complileReleaseJavaWithJavac`之前，然后我们在打包彻底完成以后，再把Log开关打开，即再`false`变回`true`，使得开发环境一直都是可以输出Debug Log的。\n\n可以看到我们在preBuild任务前把开关关闭了，然后在jarMyLib之后，又把开关打开了。`doFirst`和`doLast`都是通过闭包的方式向一个已有的任务里面添加可执行操作的语法。下面我们打开终端进入到HelloLib目录下，执行下面的语句打一个包试试：\n\n```\ngradle jarMyLib\n```\n\n找到我们的jar包，反编译一下看看：\n\n![custom-enable-debug](/content/images/custom-log-enable.png)\n\n果然，虽然我们的代码里是`public static boolean ENABLE_DEBUG = true;`，然而打出来的jar包却是`public static boolean ENABLE_DEBUG = false;`。\n\n是不是很方便，如果你还有类似的动态修改代码的需求，也可以采用这种方法实现。其实还有其他的方式也可以实现同样的效果，在Android打包脚本的buildTypes和productFlavor支持下，我们还可以为不同类型的任务创建不同的源代码或者资源类型的文件，前面的博客就提到过可以为不同渠道包设置不同的`appname`，也可以采用同样的思路实现刚才这个需求，大家看自己的偏好吧，黑猫白猫，只要能抓到老鼠那都是好狗哇，哈哈哈！\n\n最后上一下这个HelloGradle工程的代码示例[https://github.com/unclechen/HelloGradle](https://github.com/unclechen/HelloGradle)，里面有这两篇博客的打包示例，需要的同学可以看看。\n\n\n\n","slug":"Gradle实践之打包jar+Log开关自动关闭","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8e90010mtsxcjxspcbn","content":"<p>上一篇博客介绍了<a href=\"http://unclechen.github.io/2015/10/22/Android%20Studio%20Gradle实践之多渠道自动化打包+版本号管理/\">Gradle实践之多渠道自动化打包+版本号管理</a>。由于我在公司里主要是做SDK开发的，这次我想介绍一下如何使用Gradle打出自己想要的jar包，并根据需要混淆、发布jar包。然后再介绍一下如何在打包的时候将自定义的Log输出工具关闭。</p>\n<a id=\"more\"></a>\n<h1 id=\"用Gradle打包出jar文件\"><a href=\"#用Gradle打包出jar文件\" class=\"headerlink\" title=\"用Gradle打包出jar文件\"></a>用Gradle打包出jar文件</h1><p>前面我们说过，在Android Studio里面使用Gradle来打包应用程序，一般都是build出来一个apk文件。但是有的同学是做实现层的开发，不直接做View层的东西，例如sdk开发主要是给View层开发的同学提供接口，通常是把代码打包成jar，再给开发者使用。</p>\n<p>现在有很多github上的开源项目也都是使用Android的library插件打包成aar，再提供给开发者用。这里说到<code>aar</code>，它是随着Android Studio的出现而出现的，功能上类似一个library，可以在其他的项目里面调用这个aar提供的接口，aar也是一种zip包，与apk文件非常地相似，用解压工具打开它就会发现里面除了一个 <strong>classes.jar</strong> ，还有 <strong>res、assert、aidl、AndroidManifest.xml</strong> 等等文件，真的和apk太像了，不过apk压缩包里面的classes文件是一个dex文件，aar里面的classes文件还是个jar。</p>\n<p>还是以上一篇博客中建立的HelloGradle工程为例，现在向里面再添加一个新的Module。添加方法就是在项目面板的左侧，以<code>Andrioid</code>视图查看工程结构，右键，在弹出的菜单中选择<code>open module settings</code>，然后选择<code>new a module</code>，接着在弹出的对话框中，选择新建一个<code>Android Library Module</code>，这里我把它命名为HelloLib。如下图所示：</p>\n<p><img src=\"/content/images/new-a-lib-module.png\" alt=\"New a lib module\"></p>\n<p>这时你会发现，我们的HelloGradle工程里，有了两个Module，一个是application类型的Module，一个是library类型的Module。</p>\n<p><img src=\"/content/images/two-modules.png\" alt=\"Two module\"></p>\n<p>它们的区别可以在各自的<code>build.gradle</code>文件中一目了然。因为application module的build.gradle中引入的是<code>com.android.application</code>插件来打包，而library module的build.gradle中引入的是<code>com.android.library</code>插件进行打包。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.android.library'</span></span><br></pre></td></tr></table></figure>\n<p>可想而知，这个<code>com.android.library</code>打包出的来的output一定就是<code>aar</code>文件了。这个aar文件位于<code>build/output/aar/</code>文件夹下。</p>\n<p>那么我们要如何打包出一个jar呢？毕竟现在还有项目是用Eclipse开发的，使用jar文件比较方便，而且jar文件也可以在Android Studio中引入。</p>\n<p>首先我们在新建HelloLib Module中new一个class，作为我们的库来提供给app module使用。如下所示，我新建了一个测试类。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nought.hellolib;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UncleNought</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Output() &#123;</span><br><span class=\"line\">        Log.i(UncleNought.<span class=\"keyword\">class</span>.getSimpleName(), <span class=\"string\">\"I'm a library!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在app module的build.gradle文件中添加一行<code>compile project(&#39;:hellolib&#39;)</code>，使得app module依赖我们的HelloLib module。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">fileTree</span>(<span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>], dir: <span class=\"string\">'libs'</span>)</span><br><span class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:appcompat-v7:22.2.1'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:design:22.2.1'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">project</span>(<span class=\"string\">':hellolib'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就可以在app module中调用刚才的测试类了。我们在app module中MainActivity的onCreate方法里调用<code>UncleNought.Output();</code>，可以看到输出了Log<code>I&#39;m a library!</code>。</p>\n<p><img src=\"/content/images/i-am-a-lib.png\" alt=\"I am a lib\"></p>\n<p>接着，我们介绍两种生成jar的方法，有了jar以后，就可以在app module中以jar包的形式来调用HelloLib中的接口。</p>\n<h2 id=\"方案1：拷贝默认生成的jar包\"><a href=\"#方案1：拷贝默认生成的jar包\" class=\"headerlink\" title=\"方案1：拷贝默认生成的jar包\"></a>方案1：拷贝默认生成的jar包</h2><p>说到jar包，其实它就是把java源文件编译出来的class字节码，以一种zip的形式压缩在了一起。Android很大部分的开发都是用java写的，那么我们可以将Android源代码编译出来的class字节码压缩到一个jar包里面，不就是我们想要的jar包吗？没错就是这个，实际上在<code>com.android.library</code>插件中，运行build命令是，也会有这样的操作，先把java源代码编译成class文件，再把文件打包成jar，再把jar压缩成dex。这其中就有jar的操作，生成的jar就位于<code>build/intermediates/bundles/release/classes.jar</code>。如果你想直接使用这个jar也是可以的，只要自己在HelloLib Module的build.gradle中写一个copy类型的task，把这个classes.jar拷贝到指定的目录下就可以了。下面是一种示例：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">task</span> <span class=\"selector-tag\">releaseMyLib</span>(<span class=\"attribute\">type</span>: Copy, <span class=\"attribute\">dependsOn</span>: [<span class=\"string\">'build'</span>]) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>( <span class=\"string\">'build/intermediates/bundles/release/'</span>)</span><br><span class=\"line\">    <span class=\"selector-tag\">into</span>( <span class=\"string\">'build/libs'</span>)</span><br><span class=\"line\">    <span class=\"selector-tag\">include</span>(<span class=\"string\">'classes.jar'</span>)</span><br><span class=\"line\">    <span class=\"selector-tag\">rename</span>(<span class=\"string\">'classes.jar'</span>, <span class=\"string\">'my-lib.jar'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在HelloLib的build.gradle脚本添加完上面的task以后，打开Android Studio自带的命令行工具，依次输入下面两行，就可以打出一个my-lib.jar包了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> hellolib</span><br><span class=\"line\">gradle releaseMyLib</span><br></pre></td></tr></table></figure>\n<p>这段脚本的含义非常简单，我们自定义了一个名叫releaseMyLib的task，它是Gradle API自带的<code>copy</code>类型的任务，这个任务依赖于 <code>build</code>任务，前面我们提到过，gradle有很多默认的任务，build便是其中的一个。所以当build任务结束后，会在<code>build/intermediates/bundles/release/</code>下生成<code>classes.jar</code>文件，我们只要在这之后，把它拷贝出来，重命名为<code>my-lib.jar</code>就可以了。</p>\n<p>然后把这个jar包拷贝到app module下的libs文件夹中，去掉刚才在app module的build.gradle文件中添加的<code>compile project(&#39;:hellolib&#39;)</code>，重新gradle sync一下，然后尝试运行你会发现和刚才的效果是一样的，这样就打出一个hellolib module的jar了。</p>\n<p>但是上面这种做法太偷懒了，实际上这个classes.jar中，有一些是我们不要的类，例如<code>BuildConfig.class</code>这样的类。下图是用Java Decompiler反编译看到my-lib.jar里面的内容。</p>\n<p><img src=\"/content/images/my-lib.png\" alt=\"My lib\"></p>\n<p>作为一个sdk开发者，很多时候需要自己的jar越小越好，所以我们可以不需要把编译后自动生成的BuildConfig类加入到我们自己的jar包中来，此外有时候我们并不想把所有的类都打到这个my-lib.jar包中，这时应该怎么做呢？</p>\n<h2 id=\"方案2：自定义Jar任务打包jar文件\"><a href=\"#方案2：自定义Jar任务打包jar文件\" class=\"headerlink\" title=\"方案2：自定义Jar任务打包jar文件\"></a>方案2：自定义Jar任务打包jar文件</h2><p>我们知道，Android Studio生成默认的jar包，是把源代码编译之后生成的所有的class字节码都压缩到这个classes.jar中，如果我想只打其中的一部分类该怎么办呢？</p>\n<p>答案很简单：只需要在对编译出来的class字节码做Jar操作时，include我自己想要的类（或者exclude掉不想要的类）即可。那么所有的编译好的class字节码都在哪里呢？答案是<code>build/intermediates/classes/release/</code>目录下，如下图所示：</p>\n<p><img src=\"/content/images/output-classes.png\" alt=\"classes\"></p>\n<p>Android Library打包插件在build时，会把所有的java文件编译成class文件，放在这个目录下。所以我们接下来要做的事就是把这里面，所有需要的class，打成一个Jar包即可。下面是一个示例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> jarMyLib(type: Jar, dependsOn: [<span class=\"string\">'build'</span>]) &#123;</span><br><span class=\"line\">    archiveName = <span class=\"string\">'my-lib.jar'</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span>(<span class=\"string\">'build/intermediates/classes/release'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">destinationDir</span> = <span class=\"keyword\">file</span>(<span class=\"string\">'build/libs'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'com/nought/hellolib/BuildConfig.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'com/nought/hellolib/BuildConfig\\$*.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'**/R.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'**/R\\$*.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"string\">'com/nought/hellolib/*.class'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样，打开Android Studio的终端，依次输入下面两行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> hellolib</span><br><span class=\"line\">gradle jarMyLib</span><br></pre></td></tr></table></figure>\n<p>这样就通过Jar任务，自己打包出了一个jar包。我们可以反编译一下这个jar包看看：</p>\n<p><img src=\"/content/images/my-jar-lib.png\" alt=\"Jar classes\"></p>\n<p>果然里面没有BuildCongfig这个类了，把这<code>my-lib.jar</code>拷贝到app module下的libs文件夹下，重新Gradle sync一下，再运行这个app module，可以看到和之前方案1中一样的效果了。</p>\n<p>这里是一种基本的自定义示例，如果还需要有别的需求，可以参考Gradle官方的DSL，里面介绍了各种Task接收的参数和使用方法。大家可以自行发挥实现自己想要的效果。</p>\n<h2 id=\"PS-0：如何将依赖的第三方库也打包进来\"><a href=\"#PS-0：如何将依赖的第三方库也打包进来\" class=\"headerlink\" title=\"PS 0：如何将依赖的第三方库也打包进来\"></a>PS 0：如何将依赖的第三方库也打包进来</h2><p>有一次我在Android开源群里，一个朋友问到“如果除了自己写的类，还想把第三方的OkHttp包打进来怎么办？”。其实这个问题很好解决，Gradle的<code>Jar</code>任务是可配置多个<code>from</code>来源的，所以我们只需要在上面的代码里添加一行:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> jarMyLib(type: Jar, dependsOn: [<span class=\"string\">'build'</span>]) &#123;</span><br><span class=\"line\">    archiveName = <span class=\"string\">'my-lib.jar'</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span>(<span class=\"string\">'build/intermediates/classes/release'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">from</span>(<span class=\"keyword\">project</span>.zipTree(<span class=\"string\">\"libs/xxx-x.x.x.jar\"</span>)) <span class=\"comment\">// 添加这一行</span></span><br><span class=\"line\">    <span class=\"keyword\">destinationDir</span> = <span class=\"keyword\">file</span>(<span class=\"string\">'build/libs'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'com/nought/hellolib/BuildConfig.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'com/nought/hellolib/BuildConfig\\$*.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'**/R.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'**/R\\$*.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"string\">'com/nought/hellolib/*.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"string\">'com/xxx/*.class'</span>) <span class=\"comment\">// 同时记得加上第三方的package</span></span><br></pre></td></tr></table></figure>\n<p>看上面的加了注释的两行，这样就可以把第三放依赖的jar包添加进来了。</p>\n<h2 id=\"PS-1：为何要依赖默认的build任务\"><a href=\"#PS-1：为何要依赖默认的build任务\" class=\"headerlink\" title=\"PS 1：为何要依赖默认的build任务\"></a>PS 1：为何要依赖默认的build任务</h2><p>前面我们自定义<code>jarMyLib</code>的时候，都依赖了<code>build</code>任务，因为这个任务可以帮我们把所有的java源代码编译成class文件，实际上build任务自己又依赖了很多其他的任务来实现打包。如果你想实现更快速的打包，运行一下<code>gradle tasks</code>或者在Android Studio中点击右边的Gradle按钮弹出任务列表的面板，就会看到还有一个<code>compileReleaseJavaWithJavac</code>，看名字就知道这个任务是编译所有的release type的java源文件，因为我们可以把上面的代码改为dependsOn这个任务即可，改为<code>task jarMyLib(type: Jar, dependsOn: [&#39;compileReleaseJavaWithJavac&#39;])</code>。但是记住了，一定要看清楚自己的gradle插件版本，我这个Android Gradle插件的版本是<code>com.android.tools.build:gradle:1.3.0</code>，而<code>com.android.tools.build:gradle:1.2.3</code>插件版本中对应的这个Compile任务的名字是叫做<code>compileReleaseJava</code>，大家记得不要写错了。</p>\n<h2 id=\"PS-2：为何不直接自定义compileJava任务\"><a href=\"#PS-2：为何不直接自定义compileJava任务\" class=\"headerlink\" title=\"PS 2：为何不直接自定义compileJava任务\"></a>PS 2：为何不直接自定义compileJava任务</h2><p>另外大家可能会说，既然都自己自定义Jar任务，为啥不把<code>compileJava</code>任务也自定义了，其实也是可以的，这样等于完全不用依赖Android Gradle插件的默认任务了。但有的时候，假设我们的代码中要把aidl打进来，依赖默认的<code>compileReleaseJavaWithJavac</code>任务会把aidl生成的class文件也包含在里面，非常方便。如果自己去写JavaCompile任务的话，首先还要把aidl文件生成java文件，再来compile它，会有一点点麻烦。咱们做sdk开发的，不需要打那么多渠道包，直接依赖默认的<code>compileReleaseJavaWithJavac</code>其实多花个1-2s不是什么大问题。</p>\n<h2 id=\"PS-3：混淆自定义的jar包\"><a href=\"#PS-3：混淆自定义的jar包\" class=\"headerlink\" title=\"PS 3：混淆自定义的jar包\"></a>PS 3：混淆自定义的jar包</h2><p>刚才忘了提，混淆也是比较常见的一个需求，假设我们不是打包apk，在buildTypes闭包里面也没有给release类型的任务设置``为混淆。那么我们还可以自己定义一个混淆任务，话不多说，直接上代码：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">androidSDKDir</span> = <span class=\"title\">plugins</span>.<span class=\"title\">getPlugin</span><span class=\"params\">(<span class=\"string\">'com.android.library'</span>)</span></span>.sdkHandler.getSdkFolder()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">androidJarDir</span> = <span class=\"title\">androidSDKDir</span>.<span class=\"title\">toString</span><span class=\"params\">()</span></span> + <span class=\"string\">'/platforms/'</span> + <span class=\"string\">\"$&#123;android.compileSdkVersion&#125;\"</span> + <span class=\"string\">'/android.jar'</span></span><br><span class=\"line\"></span><br><span class=\"line\">task proguardMyLib(<span class=\"symbol\">type:</span> proguard.gradle.ProGuardTask, <span class=\"symbol\">dependsOn:</span> [<span class=\"string\">'jarMyLib'</span>]) &#123;</span><br><span class=\"line\">    injars(<span class=\"string\">'build/libs/my-lib.jar'</span>)</span><br><span class=\"line\">    outjars(<span class=\"string\">'build/libs/my-pro-lib.jar'</span>)</span><br><span class=\"line\">    libraryjars(androidJarDir)</span><br><span class=\"line\">    configuration <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的混淆Task——<code>proguard.gradle.ProGuardTask</code>，也是来自Gradle标准的API，查看一下Gradle DSL，就知道怎么用了。injars、outjars和libraryjars以及混淆配置文件proguard-rules.pro这些参数，和原来使用Eclipse开发时是一样的，injars表示输入的需要被混淆的jar包，outsjars表示混淆后输出的jar包，libraryjars表示引用到的jar包不被混淆，<code>proguard-rules.pro</code>里面写的是混淆配置，具体就不在这里详细发散了。</p>\n<p>最后，还是在终端中进入HelloLib目录，执行<code>gradle proguardMyLib</code>，就可以得到混淆以后的jar包<code>my-pro-lib.jar</code>了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> hellolib</span><br><span class=\"line\">gradle proguardMyLib</span><br></pre></td></tr></table></figure>\n<p>同样，我们反编译一下这个<code>my-pro-lib.jar</code>，如下图所示：</p>\n<p><img src=\"/content/images/my-pro-lib.png\" alt=\"Decompile my-pro-lib\"></p>\n<p>有同学就会说了，这个混淆的后的jar包和原来的jar包没啥区别啊… …没错，因为我们这个类里面只调用了一句Log API，这个API又是来自于android.jar的，我们在混淆的时候使用libraryjars(android.jar)保证了这个包里面的东西不会被混淆，所以这个示例里面看起来是没有什么变化的。如果你的HelloLib Module写的很复杂，里面代码有很多的话，混淆以后是有明显变化的，自定义打包jar文件就到这里结束了，大家可以自己体验一下。</p>\n<hr>\n<h1 id=\"Gradle自动关闭Log开关\"><a href=\"#Gradle自动关闭Log开关\" class=\"headerlink\" title=\"Gradle自动关闭Log开关\"></a>Gradle自动关闭Log开关</h1><p>在Android开发中，很多时候我们会自己封装一个Log类，里面设置一个开关，在开发的时候将所有级别的Log全部打开输出。然后在发布应用前，把Log.i和Log.d这类级别的Log关闭，仅留下Log.e类型的输出。这样做是为了防止别人通过log来研究我们的代码，同时也可以把一些不必要给别人看的信息过滤掉。</p>\n<p>其实这个需求很早就有，网上的大神们有很多的方法，这里我就举两个例子，说一下我自己的体会吧。</p>\n<h2 id=\"方案1：通过BuildConfig类来关闭\"><a href=\"#方案1：通过BuildConfig类来关闭\" class=\"headerlink\" title=\"方案1：通过BuildConfig类来关闭\"></a>方案1：通过BuildConfig类来关闭</h2><p>前面我们一经发现，当你使用Android Gradle插件打包，执行默认的build任务时，会在<code>build/intermediates/classes/release</code>中自动生成一个<code>BuildConfig.class</code>，有class就应该有java源代码文件啊，那么这个class文件对应的java文件在哪里呢？答案是<code>app/build/generated/source/buildConfig/</code>下。</p>\n<p>关于这个生成的类文件，我们可以通过在build.gradle脚本中的buildTypes闭包中指定参数，使得这个类生成出来的时候包含一个我们自定义的boolean类型的静态常量<code>ENABLE_DEBUG</code>，直接上代码：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">buildTypes </span>&#123;</span><br><span class=\"line\">        <span class=\"class\">release </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不显示log</span></span><br><span class=\"line\">            buildConfigField <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"ENABLE_DEBUG\"</span>, <span class=\"string\">\"false\"</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"class\">debug </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 显示Log</span></span><br><span class=\"line\">            buildConfigField <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"ENABLE_DEBUG\"</span>, <span class=\"string\">\"true\"</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>按照上面的脚本编写之后，生成的release版BuildConfig类中就会多出一个常量，即<code>public static final boolean ENABLE_DEBUG = false;</code>；而debug版的BuildConfig类中的常量值则为true，即<code>public static final boolean ENABLE_DEBUG = true;</code>。你可以分别在源代码中调用这两个常量，最后这两个类分别也会被打包到release和debug版各自的apk文件当中。</p>\n<p>当你修改build.gradle脚本以后，按照Android Studio的提示，点击<code>Gradle Sync</code>，就可以在之前我们自定义的UncleNought测试类中调用BuildConfig类中常量，可以看到<code>ENABLE_DEBUG</code>这个类已经自动生成出来了。下面是一段调用的示例：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nought.hellolib;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UncleNought</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Output() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (BuildConfig.ENABLE_DEBUG) &#123;</span><br><span class=\"line\">            Log.i(UncleNought.<span class=\"keyword\">class</span>.getSimpleName(), <span class=\"string\">\"I'm a library!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>咱们可以打个包看一下，在命令行中运行:</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gradle releaseMyLib</span></span><br></pre></td></tr></table></figure>\n<p>记住，这里必须执行<code>releaseMyLib</code>这个任务，因为我们用到了BuildConfig这个自动生成的类，假如不把它编译到我们的jar包里，那么就没法去引用<code>BuildConfig</code>里面的<code>ENABLE_DEBUG</code>常量了。打包好了以后，我们通过反编译再看一下这个jar，如下图：</p>\n<p><img src=\"/content/images/buildconfig-enable-debug.png\" alt=\"enable-debug\"></p>\n<p>把这个jar包给app module引用一下也会发现，现在Log已经不会输出了。</p>\n<h2 id=\"方案2：自定义Log开关\"><a href=\"#方案2：自定义Log开关\" class=\"headerlink\" title=\"方案2：自定义Log开关\"></a>方案2：自定义Log开关</h2><p>假设我们不想把BuildConfig打包进来，只想在自己的类中定义一个常量，然后在release的时候修改这个动态去常量，应该怎么做呢？这个时候就可以利用gradle强大的能力了，话不多说，一步步看代码。</p>\n<p>首先在测试类的代码里添加一个常量<code>ENABLE_DEBUG</code>：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nought.hellolib;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UncleNought</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> ENABLE_DEBUG = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Output() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ENABLE_DEBUG) &#123;</span><br><span class=\"line\">            Log.i(UncleNought.<span class=\"keyword\">class</span>.getSimpleName(), <span class=\"string\">\"I'm a library!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后修改我们的HelloLib打包脚本build.gradle文件，在前面的基础上添加：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> enableLoggerDebug(<span class=\"keyword\">boolean</span> flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> loggerFilePath = <span class=\"string\">\"src/main/java/com/qq/e/comm/util/GDTLogger.java\"</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> updatedDebug = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(loggerFilePath).<span class=\"keyword\">getText</span>(<span class=\"string\">'UTF-8'</span>)</span><br><span class=\"line\">            .replaceAll(<span class=\"string\">\"DEBUG_ENABLE\\\\s?=\\\\s?\"</span> + (!flag).toString(), <span class=\"string\">\"DEBUG_ENABLE = \"</span> + flag.toString())</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(loggerFilePath).<span class=\"keyword\">write</span>(updatedDebug, <span class=\"string\">'UTF-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">println</span>(flag ? <span class=\"string\">'GDTLogger.DEBUG_ENABLE : [true]'</span> : <span class=\"string\">'GDTLogger.DEBUG_ENABLE : [false]'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">preBuild &#123;&#125;.<span class=\"keyword\">doFirst</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"string\">'jarMyLib'</span> in gradle.startParameter.taskNames)) &#123;</span><br><span class=\"line\">        enableLoggerDebug(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jarMyLib &#123;&#125;.<span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">    enableLoggerDebug(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前面我提过，Gradle兼容Java的语法，所以我就想到，可以用正则表达式替换掉原来代码中的<code>true</code>，让它变成<code>false</code>。当然我们要保证这该替换必须发生在<code>complileReleaseJavaWithJavac</code>之前，然后我们在打包彻底完成以后，再把Log开关打开，即再<code>false</code>变回<code>true</code>，使得开发环境一直都是可以输出Debug Log的。</p>\n<p>可以看到我们在preBuild任务前把开关关闭了，然后在jarMyLib之后，又把开关打开了。<code>doFirst</code>和<code>doLast</code>都是通过闭包的方式向一个已有的任务里面添加可执行操作的语法。下面我们打开终端进入到HelloLib目录下，执行下面的语句打一个包试试：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gradle jarMyLib</span></span><br></pre></td></tr></table></figure>\n<p>找到我们的jar包，反编译一下看看：</p>\n<p><img src=\"/content/images/custom-log-enable.png\" alt=\"custom-enable-debug\"></p>\n<p>果然，虽然我们的代码里是<code>public static boolean ENABLE_DEBUG = true;</code>，然而打出来的jar包却是<code>public static boolean ENABLE_DEBUG = false;</code>。</p>\n<p>是不是很方便，如果你还有类似的动态修改代码的需求，也可以采用这种方法实现。其实还有其他的方式也可以实现同样的效果，在Android打包脚本的buildTypes和productFlavor支持下，我们还可以为不同类型的任务创建不同的源代码或者资源类型的文件，前面的博客就提到过可以为不同渠道包设置不同的<code>appname</code>，也可以采用同样的思路实现刚才这个需求，大家看自己的偏好吧，黑猫白猫，只要能抓到老鼠那都是好狗哇，哈哈哈！</p>\n<p>最后上一下这个HelloGradle工程的代码示例<a href=\"https://github.com/unclechen/HelloGradle\" target=\"_blank\" rel=\"noopener\">https://github.com/unclechen/HelloGradle</a>，里面有这两篇博客的打包示例，需要的同学可以看看。</p>\n","site":{"data":{}},"excerpt":"<p>上一篇博客介绍了<a href=\"http://unclechen.github.io/2015/10/22/Android%20Studio%20Gradle实践之多渠道自动化打包+版本号管理/\">Gradle实践之多渠道自动化打包+版本号管理</a>。由于我在公司里主要是做SDK开发的，这次我想介绍一下如何使用Gradle打出自己想要的jar包，并根据需要混淆、发布jar包。然后再介绍一下如何在打包的时候将自定义的Log输出工具关闭。</p>","more":"<h1 id=\"用Gradle打包出jar文件\"><a href=\"#用Gradle打包出jar文件\" class=\"headerlink\" title=\"用Gradle打包出jar文件\"></a>用Gradle打包出jar文件</h1><p>前面我们说过，在Android Studio里面使用Gradle来打包应用程序，一般都是build出来一个apk文件。但是有的同学是做实现层的开发，不直接做View层的东西，例如sdk开发主要是给View层开发的同学提供接口，通常是把代码打包成jar，再给开发者使用。</p>\n<p>现在有很多github上的开源项目也都是使用Android的library插件打包成aar，再提供给开发者用。这里说到<code>aar</code>，它是随着Android Studio的出现而出现的，功能上类似一个library，可以在其他的项目里面调用这个aar提供的接口，aar也是一种zip包，与apk文件非常地相似，用解压工具打开它就会发现里面除了一个 <strong>classes.jar</strong> ，还有 <strong>res、assert、aidl、AndroidManifest.xml</strong> 等等文件，真的和apk太像了，不过apk压缩包里面的classes文件是一个dex文件，aar里面的classes文件还是个jar。</p>\n<p>还是以上一篇博客中建立的HelloGradle工程为例，现在向里面再添加一个新的Module。添加方法就是在项目面板的左侧，以<code>Andrioid</code>视图查看工程结构，右键，在弹出的菜单中选择<code>open module settings</code>，然后选择<code>new a module</code>，接着在弹出的对话框中，选择新建一个<code>Android Library Module</code>，这里我把它命名为HelloLib。如下图所示：</p>\n<p><img src=\"/content/images/new-a-lib-module.png\" alt=\"New a lib module\"></p>\n<p>这时你会发现，我们的HelloGradle工程里，有了两个Module，一个是application类型的Module，一个是library类型的Module。</p>\n<p><img src=\"/content/images/two-modules.png\" alt=\"Two module\"></p>\n<p>它们的区别可以在各自的<code>build.gradle</code>文件中一目了然。因为application module的build.gradle中引入的是<code>com.android.application</code>插件来打包，而library module的build.gradle中引入的是<code>com.android.library</code>插件进行打包。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'com.android.library'</span></span><br></pre></td></tr></table></figure>\n<p>可想而知，这个<code>com.android.library</code>打包出的来的output一定就是<code>aar</code>文件了。这个aar文件位于<code>build/output/aar/</code>文件夹下。</p>\n<p>那么我们要如何打包出一个jar呢？毕竟现在还有项目是用Eclipse开发的，使用jar文件比较方便，而且jar文件也可以在Android Studio中引入。</p>\n<p>首先我们在新建HelloLib Module中new一个class，作为我们的库来提供给app module使用。如下所示，我新建了一个测试类。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nought.hellolib;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UncleNought</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Output() &#123;</span><br><span class=\"line\">        Log.i(UncleNought.<span class=\"keyword\">class</span>.getSimpleName(), <span class=\"string\">\"I'm a library!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在app module的build.gradle文件中添加一行<code>compile project(&#39;:hellolib&#39;)</code>，使得app module依赖我们的HelloLib module。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">fileTree</span>(<span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>], dir: <span class=\"string\">'libs'</span>)</span><br><span class=\"line\">    testCompile <span class=\"string\">'junit:junit:4.12'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:appcompat-v7:22.2.1'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.android.support:design:22.2.1'</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">project</span>(<span class=\"string\">':hellolib'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就可以在app module中调用刚才的测试类了。我们在app module中MainActivity的onCreate方法里调用<code>UncleNought.Output();</code>，可以看到输出了Log<code>I&#39;m a library!</code>。</p>\n<p><img src=\"/content/images/i-am-a-lib.png\" alt=\"I am a lib\"></p>\n<p>接着，我们介绍两种生成jar的方法，有了jar以后，就可以在app module中以jar包的形式来调用HelloLib中的接口。</p>\n<h2 id=\"方案1：拷贝默认生成的jar包\"><a href=\"#方案1：拷贝默认生成的jar包\" class=\"headerlink\" title=\"方案1：拷贝默认生成的jar包\"></a>方案1：拷贝默认生成的jar包</h2><p>说到jar包，其实它就是把java源文件编译出来的class字节码，以一种zip的形式压缩在了一起。Android很大部分的开发都是用java写的，那么我们可以将Android源代码编译出来的class字节码压缩到一个jar包里面，不就是我们想要的jar包吗？没错就是这个，实际上在<code>com.android.library</code>插件中，运行build命令是，也会有这样的操作，先把java源代码编译成class文件，再把文件打包成jar，再把jar压缩成dex。这其中就有jar的操作，生成的jar就位于<code>build/intermediates/bundles/release/classes.jar</code>。如果你想直接使用这个jar也是可以的，只要自己在HelloLib Module的build.gradle中写一个copy类型的task，把这个classes.jar拷贝到指定的目录下就可以了。下面是一种示例：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">task</span> <span class=\"selector-tag\">releaseMyLib</span>(<span class=\"attribute\">type</span>: Copy, <span class=\"attribute\">dependsOn</span>: [<span class=\"string\">'build'</span>]) &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">from</span>( <span class=\"string\">'build/intermediates/bundles/release/'</span>)</span><br><span class=\"line\">    <span class=\"selector-tag\">into</span>( <span class=\"string\">'build/libs'</span>)</span><br><span class=\"line\">    <span class=\"selector-tag\">include</span>(<span class=\"string\">'classes.jar'</span>)</span><br><span class=\"line\">    <span class=\"selector-tag\">rename</span>(<span class=\"string\">'classes.jar'</span>, <span class=\"string\">'my-lib.jar'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在HelloLib的build.gradle脚本添加完上面的task以后，打开Android Studio自带的命令行工具，依次输入下面两行，就可以打出一个my-lib.jar包了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> hellolib</span><br><span class=\"line\">gradle releaseMyLib</span><br></pre></td></tr></table></figure>\n<p>这段脚本的含义非常简单，我们自定义了一个名叫releaseMyLib的task，它是Gradle API自带的<code>copy</code>类型的任务，这个任务依赖于 <code>build</code>任务，前面我们提到过，gradle有很多默认的任务，build便是其中的一个。所以当build任务结束后，会在<code>build/intermediates/bundles/release/</code>下生成<code>classes.jar</code>文件，我们只要在这之后，把它拷贝出来，重命名为<code>my-lib.jar</code>就可以了。</p>\n<p>然后把这个jar包拷贝到app module下的libs文件夹中，去掉刚才在app module的build.gradle文件中添加的<code>compile project(&#39;:hellolib&#39;)</code>，重新gradle sync一下，然后尝试运行你会发现和刚才的效果是一样的，这样就打出一个hellolib module的jar了。</p>\n<p>但是上面这种做法太偷懒了，实际上这个classes.jar中，有一些是我们不要的类，例如<code>BuildConfig.class</code>这样的类。下图是用Java Decompiler反编译看到my-lib.jar里面的内容。</p>\n<p><img src=\"/content/images/my-lib.png\" alt=\"My lib\"></p>\n<p>作为一个sdk开发者，很多时候需要自己的jar越小越好，所以我们可以不需要把编译后自动生成的BuildConfig类加入到我们自己的jar包中来，此外有时候我们并不想把所有的类都打到这个my-lib.jar包中，这时应该怎么做呢？</p>\n<h2 id=\"方案2：自定义Jar任务打包jar文件\"><a href=\"#方案2：自定义Jar任务打包jar文件\" class=\"headerlink\" title=\"方案2：自定义Jar任务打包jar文件\"></a>方案2：自定义Jar任务打包jar文件</h2><p>我们知道，Android Studio生成默认的jar包，是把源代码编译之后生成的所有的class字节码都压缩到这个classes.jar中，如果我想只打其中的一部分类该怎么办呢？</p>\n<p>答案很简单：只需要在对编译出来的class字节码做Jar操作时，include我自己想要的类（或者exclude掉不想要的类）即可。那么所有的编译好的class字节码都在哪里呢？答案是<code>build/intermediates/classes/release/</code>目录下，如下图所示：</p>\n<p><img src=\"/content/images/output-classes.png\" alt=\"classes\"></p>\n<p>Android Library打包插件在build时，会把所有的java文件编译成class文件，放在这个目录下。所以我们接下来要做的事就是把这里面，所有需要的class，打成一个Jar包即可。下面是一个示例：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> jarMyLib(type: Jar, dependsOn: [<span class=\"string\">'build'</span>]) &#123;</span><br><span class=\"line\">    archiveName = <span class=\"string\">'my-lib.jar'</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span>(<span class=\"string\">'build/intermediates/classes/release'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">destinationDir</span> = <span class=\"keyword\">file</span>(<span class=\"string\">'build/libs'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'com/nought/hellolib/BuildConfig.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'com/nought/hellolib/BuildConfig\\$*.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'**/R.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'**/R\\$*.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"string\">'com/nought/hellolib/*.class'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样，打开Android Studio的终端，依次输入下面两行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> hellolib</span><br><span class=\"line\">gradle jarMyLib</span><br></pre></td></tr></table></figure>\n<p>这样就通过Jar任务，自己打包出了一个jar包。我们可以反编译一下这个jar包看看：</p>\n<p><img src=\"/content/images/my-jar-lib.png\" alt=\"Jar classes\"></p>\n<p>果然里面没有BuildCongfig这个类了，把这<code>my-lib.jar</code>拷贝到app module下的libs文件夹下，重新Gradle sync一下，再运行这个app module，可以看到和之前方案1中一样的效果了。</p>\n<p>这里是一种基本的自定义示例，如果还需要有别的需求，可以参考Gradle官方的DSL，里面介绍了各种Task接收的参数和使用方法。大家可以自行发挥实现自己想要的效果。</p>\n<h2 id=\"PS-0：如何将依赖的第三方库也打包进来\"><a href=\"#PS-0：如何将依赖的第三方库也打包进来\" class=\"headerlink\" title=\"PS 0：如何将依赖的第三方库也打包进来\"></a>PS 0：如何将依赖的第三方库也打包进来</h2><p>有一次我在Android开源群里，一个朋友问到“如果除了自己写的类，还想把第三方的OkHttp包打进来怎么办？”。其实这个问题很好解决，Gradle的<code>Jar</code>任务是可配置多个<code>from</code>来源的，所以我们只需要在上面的代码里添加一行:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> jarMyLib(type: Jar, dependsOn: [<span class=\"string\">'build'</span>]) &#123;</span><br><span class=\"line\">    archiveName = <span class=\"string\">'my-lib.jar'</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span>(<span class=\"string\">'build/intermediates/classes/release'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">from</span>(<span class=\"keyword\">project</span>.zipTree(<span class=\"string\">\"libs/xxx-x.x.x.jar\"</span>)) <span class=\"comment\">// 添加这一行</span></span><br><span class=\"line\">    <span class=\"keyword\">destinationDir</span> = <span class=\"keyword\">file</span>(<span class=\"string\">'build/libs'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'com/nought/hellolib/BuildConfig.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'com/nought/hellolib/BuildConfig\\$*.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'**/R.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">exclude</span>(<span class=\"string\">'**/R\\$*.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"string\">'com/nought/hellolib/*.class'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"string\">'com/xxx/*.class'</span>) <span class=\"comment\">// 同时记得加上第三方的package</span></span><br></pre></td></tr></table></figure>\n<p>看上面的加了注释的两行，这样就可以把第三放依赖的jar包添加进来了。</p>\n<h2 id=\"PS-1：为何要依赖默认的build任务\"><a href=\"#PS-1：为何要依赖默认的build任务\" class=\"headerlink\" title=\"PS 1：为何要依赖默认的build任务\"></a>PS 1：为何要依赖默认的build任务</h2><p>前面我们自定义<code>jarMyLib</code>的时候，都依赖了<code>build</code>任务，因为这个任务可以帮我们把所有的java源代码编译成class文件，实际上build任务自己又依赖了很多其他的任务来实现打包。如果你想实现更快速的打包，运行一下<code>gradle tasks</code>或者在Android Studio中点击右边的Gradle按钮弹出任务列表的面板，就会看到还有一个<code>compileReleaseJavaWithJavac</code>，看名字就知道这个任务是编译所有的release type的java源文件，因为我们可以把上面的代码改为dependsOn这个任务即可，改为<code>task jarMyLib(type: Jar, dependsOn: [&#39;compileReleaseJavaWithJavac&#39;])</code>。但是记住了，一定要看清楚自己的gradle插件版本，我这个Android Gradle插件的版本是<code>com.android.tools.build:gradle:1.3.0</code>，而<code>com.android.tools.build:gradle:1.2.3</code>插件版本中对应的这个Compile任务的名字是叫做<code>compileReleaseJava</code>，大家记得不要写错了。</p>\n<h2 id=\"PS-2：为何不直接自定义compileJava任务\"><a href=\"#PS-2：为何不直接自定义compileJava任务\" class=\"headerlink\" title=\"PS 2：为何不直接自定义compileJava任务\"></a>PS 2：为何不直接自定义compileJava任务</h2><p>另外大家可能会说，既然都自己自定义Jar任务，为啥不把<code>compileJava</code>任务也自定义了，其实也是可以的，这样等于完全不用依赖Android Gradle插件的默认任务了。但有的时候，假设我们的代码中要把aidl打进来，依赖默认的<code>compileReleaseJavaWithJavac</code>任务会把aidl生成的class文件也包含在里面，非常方便。如果自己去写JavaCompile任务的话，首先还要把aidl文件生成java文件，再来compile它，会有一点点麻烦。咱们做sdk开发的，不需要打那么多渠道包，直接依赖默认的<code>compileReleaseJavaWithJavac</code>其实多花个1-2s不是什么大问题。</p>\n<h2 id=\"PS-3：混淆自定义的jar包\"><a href=\"#PS-3：混淆自定义的jar包\" class=\"headerlink\" title=\"PS 3：混淆自定义的jar包\"></a>PS 3：混淆自定义的jar包</h2><p>刚才忘了提，混淆也是比较常见的一个需求，假设我们不是打包apk，在buildTypes闭包里面也没有给release类型的任务设置``为混淆。那么我们还可以自己定义一个混淆任务，话不多说，直接上代码：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">androidSDKDir</span> = <span class=\"title\">plugins</span>.<span class=\"title\">getPlugin</span><span class=\"params\">(<span class=\"string\">'com.android.library'</span>)</span></span>.sdkHandler.getSdkFolder()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">androidJarDir</span> = <span class=\"title\">androidSDKDir</span>.<span class=\"title\">toString</span><span class=\"params\">()</span></span> + <span class=\"string\">'/platforms/'</span> + <span class=\"string\">\"$&#123;android.compileSdkVersion&#125;\"</span> + <span class=\"string\">'/android.jar'</span></span><br><span class=\"line\"></span><br><span class=\"line\">task proguardMyLib(<span class=\"symbol\">type:</span> proguard.gradle.ProGuardTask, <span class=\"symbol\">dependsOn:</span> [<span class=\"string\">'jarMyLib'</span>]) &#123;</span><br><span class=\"line\">    injars(<span class=\"string\">'build/libs/my-lib.jar'</span>)</span><br><span class=\"line\">    outjars(<span class=\"string\">'build/libs/my-pro-lib.jar'</span>)</span><br><span class=\"line\">    libraryjars(androidJarDir)</span><br><span class=\"line\">    configuration <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的混淆Task——<code>proguard.gradle.ProGuardTask</code>，也是来自Gradle标准的API，查看一下Gradle DSL，就知道怎么用了。injars、outjars和libraryjars以及混淆配置文件proguard-rules.pro这些参数，和原来使用Eclipse开发时是一样的，injars表示输入的需要被混淆的jar包，outsjars表示混淆后输出的jar包，libraryjars表示引用到的jar包不被混淆，<code>proguard-rules.pro</code>里面写的是混淆配置，具体就不在这里详细发散了。</p>\n<p>最后，还是在终端中进入HelloLib目录，执行<code>gradle proguardMyLib</code>，就可以得到混淆以后的jar包<code>my-pro-lib.jar</code>了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> hellolib</span><br><span class=\"line\">gradle proguardMyLib</span><br></pre></td></tr></table></figure>\n<p>同样，我们反编译一下这个<code>my-pro-lib.jar</code>，如下图所示：</p>\n<p><img src=\"/content/images/my-pro-lib.png\" alt=\"Decompile my-pro-lib\"></p>\n<p>有同学就会说了，这个混淆的后的jar包和原来的jar包没啥区别啊… …没错，因为我们这个类里面只调用了一句Log API，这个API又是来自于android.jar的，我们在混淆的时候使用libraryjars(android.jar)保证了这个包里面的东西不会被混淆，所以这个示例里面看起来是没有什么变化的。如果你的HelloLib Module写的很复杂，里面代码有很多的话，混淆以后是有明显变化的，自定义打包jar文件就到这里结束了，大家可以自己体验一下。</p>\n<hr>\n<h1 id=\"Gradle自动关闭Log开关\"><a href=\"#Gradle自动关闭Log开关\" class=\"headerlink\" title=\"Gradle自动关闭Log开关\"></a>Gradle自动关闭Log开关</h1><p>在Android开发中，很多时候我们会自己封装一个Log类，里面设置一个开关，在开发的时候将所有级别的Log全部打开输出。然后在发布应用前，把Log.i和Log.d这类级别的Log关闭，仅留下Log.e类型的输出。这样做是为了防止别人通过log来研究我们的代码，同时也可以把一些不必要给别人看的信息过滤掉。</p>\n<p>其实这个需求很早就有，网上的大神们有很多的方法，这里我就举两个例子，说一下我自己的体会吧。</p>\n<h2 id=\"方案1：通过BuildConfig类来关闭\"><a href=\"#方案1：通过BuildConfig类来关闭\" class=\"headerlink\" title=\"方案1：通过BuildConfig类来关闭\"></a>方案1：通过BuildConfig类来关闭</h2><p>前面我们一经发现，当你使用Android Gradle插件打包，执行默认的build任务时，会在<code>build/intermediates/classes/release</code>中自动生成一个<code>BuildConfig.class</code>，有class就应该有java源代码文件啊，那么这个class文件对应的java文件在哪里呢？答案是<code>app/build/generated/source/buildConfig/</code>下。</p>\n<p>关于这个生成的类文件，我们可以通过在build.gradle脚本中的buildTypes闭包中指定参数，使得这个类生成出来的时候包含一个我们自定义的boolean类型的静态常量<code>ENABLE_DEBUG</code>，直接上代码：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\">buildTypes </span>&#123;</span><br><span class=\"line\">        <span class=\"class\">release </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 不显示log</span></span><br><span class=\"line\">            buildConfigField <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"ENABLE_DEBUG\"</span>, <span class=\"string\">\"false\"</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"class\">debug </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 显示Log</span></span><br><span class=\"line\">            buildConfigField <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"ENABLE_DEBUG\"</span>, <span class=\"string\">\"true\"</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>按照上面的脚本编写之后，生成的release版BuildConfig类中就会多出一个常量，即<code>public static final boolean ENABLE_DEBUG = false;</code>；而debug版的BuildConfig类中的常量值则为true，即<code>public static final boolean ENABLE_DEBUG = true;</code>。你可以分别在源代码中调用这两个常量，最后这两个类分别也会被打包到release和debug版各自的apk文件当中。</p>\n<p>当你修改build.gradle脚本以后，按照Android Studio的提示，点击<code>Gradle Sync</code>，就可以在之前我们自定义的UncleNought测试类中调用BuildConfig类中常量，可以看到<code>ENABLE_DEBUG</code>这个类已经自动生成出来了。下面是一段调用的示例：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nought.hellolib;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UncleNought</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Output() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (BuildConfig.ENABLE_DEBUG) &#123;</span><br><span class=\"line\">            Log.i(UncleNought.<span class=\"keyword\">class</span>.getSimpleName(), <span class=\"string\">\"I'm a library!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>咱们可以打个包看一下，在命令行中运行:</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gradle releaseMyLib</span></span><br></pre></td></tr></table></figure>\n<p>记住，这里必须执行<code>releaseMyLib</code>这个任务，因为我们用到了BuildConfig这个自动生成的类，假如不把它编译到我们的jar包里，那么就没法去引用<code>BuildConfig</code>里面的<code>ENABLE_DEBUG</code>常量了。打包好了以后，我们通过反编译再看一下这个jar，如下图：</p>\n<p><img src=\"/content/images/buildconfig-enable-debug.png\" alt=\"enable-debug\"></p>\n<p>把这个jar包给app module引用一下也会发现，现在Log已经不会输出了。</p>\n<h2 id=\"方案2：自定义Log开关\"><a href=\"#方案2：自定义Log开关\" class=\"headerlink\" title=\"方案2：自定义Log开关\"></a>方案2：自定义Log开关</h2><p>假设我们不想把BuildConfig打包进来，只想在自己的类中定义一个常量，然后在release的时候修改这个动态去常量，应该怎么做呢？这个时候就可以利用gradle强大的能力了，话不多说，一步步看代码。</p>\n<p>首先在测试类的代码里添加一个常量<code>ENABLE_DEBUG</code>：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nought.hellolib;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UncleNought</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> ENABLE_DEBUG = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Output() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ENABLE_DEBUG) &#123;</span><br><span class=\"line\">            Log.i(UncleNought.<span class=\"keyword\">class</span>.getSimpleName(), <span class=\"string\">\"I'm a library!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后修改我们的HelloLib打包脚本build.gradle文件，在前面的基础上添加：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> enableLoggerDebug(<span class=\"keyword\">boolean</span> flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> loggerFilePath = <span class=\"string\">\"src/main/java/com/qq/e/comm/util/GDTLogger.java\"</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> updatedDebug = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(loggerFilePath).<span class=\"keyword\">getText</span>(<span class=\"string\">'UTF-8'</span>)</span><br><span class=\"line\">            .replaceAll(<span class=\"string\">\"DEBUG_ENABLE\\\\s?=\\\\s?\"</span> + (!flag).toString(), <span class=\"string\">\"DEBUG_ENABLE = \"</span> + flag.toString())</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(loggerFilePath).<span class=\"keyword\">write</span>(updatedDebug, <span class=\"string\">'UTF-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">println</span>(flag ? <span class=\"string\">'GDTLogger.DEBUG_ENABLE : [true]'</span> : <span class=\"string\">'GDTLogger.DEBUG_ENABLE : [false]'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">preBuild &#123;&#125;.<span class=\"keyword\">doFirst</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"string\">'jarMyLib'</span> in gradle.startParameter.taskNames)) &#123;</span><br><span class=\"line\">        enableLoggerDebug(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jarMyLib &#123;&#125;.<span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">    enableLoggerDebug(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前面我提过，Gradle兼容Java的语法，所以我就想到，可以用正则表达式替换掉原来代码中的<code>true</code>，让它变成<code>false</code>。当然我们要保证这该替换必须发生在<code>complileReleaseJavaWithJavac</code>之前，然后我们在打包彻底完成以后，再把Log开关打开，即再<code>false</code>变回<code>true</code>，使得开发环境一直都是可以输出Debug Log的。</p>\n<p>可以看到我们在preBuild任务前把开关关闭了，然后在jarMyLib之后，又把开关打开了。<code>doFirst</code>和<code>doLast</code>都是通过闭包的方式向一个已有的任务里面添加可执行操作的语法。下面我们打开终端进入到HelloLib目录下，执行下面的语句打一个包试试：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gradle jarMyLib</span></span><br></pre></td></tr></table></figure>\n<p>找到我们的jar包，反编译一下看看：</p>\n<p><img src=\"/content/images/custom-log-enable.png\" alt=\"custom-enable-debug\"></p>\n<p>果然，虽然我们的代码里是<code>public static boolean ENABLE_DEBUG = true;</code>，然而打出来的jar包却是<code>public static boolean ENABLE_DEBUG = false;</code>。</p>\n<p>是不是很方便，如果你还有类似的动态修改代码的需求，也可以采用这种方法实现。其实还有其他的方式也可以实现同样的效果，在Android打包脚本的buildTypes和productFlavor支持下，我们还可以为不同类型的任务创建不同的源代码或者资源类型的文件，前面的博客就提到过可以为不同渠道包设置不同的<code>appname</code>，也可以采用同样的思路实现刚才这个需求，大家看自己的偏好吧，黑猫白猫，只要能抓到老鼠那都是好狗哇，哈哈哈！</p>\n<p>最后上一下这个HelloGradle工程的代码示例<a href=\"https://github.com/unclechen/HelloGradle\" target=\"_blank\" rel=\"noopener\">https://github.com/unclechen/HelloGradle</a>，里面有这两篇博客的打包示例，需要的同学可以看看。</p>"},{"layout":"post","title":"WebView缓存原理分析和应用","date":"2017-05-13T00:00:00.000Z","_content":"\n# 一、背景\n\n现在的App开发，或多或少都会用到Hybrid模式，到了WebView这边，经常会加载一些js文件（例如和WebView用来Native通信的bridge.js），而这些js文件不会经常发生变化，所以我们希望js在WebView里面加载一次之后，如果js没有发生变化，下次就不用再发起网络请求去加载，从而减少流量和资源的占用。那么有什么方式可以达到这个目的呢？先得从WebView的缓存原理入手。\n\n# 二、WebView的缓存类型\n\nWebView主要包括两类缓存，**一类是浏览器自带的网页数据缓存**，这是所有的浏览器都支持的、由HTTP协议定义的缓存；**另一类是H5缓存**，这是由web页面的开发者设置的，H5缓存主要包括了App Cache、DOM Storage、Local Storage、Web SQL Database 存储机制等，这里我们主要介绍App Cache来缓存js文件。\n\n<!-- more -->\n\n# 三、浏览器自带的网页数据缓存\n\n## 1.工作原理\n\n浏览器缓存机制是通过HTTP协议Header里的Cache-Control（或Expires）和Last-Modified（或 Etag）等字段来控制文件缓存的机制。关于这几个字段的作用和浏览器的缓存更新机制，大家可以看看这两篇文章([H5 缓存机制浅析 移动端 Web 加载性能优化](http://bugly.qq.com/bbs/forum.php?mod=viewthread&tid=267)，[Android：手把手教你构建 WebView 的缓存机制 & 资源预加载方案](http://www.jianshu.com/p/5e7075f4875f))，里面有详细的介绍。下面从我实际应用的角度，介绍一下通常会在HTTP协议中遇到的Header。\n\n这两个字段是**接收响应时，浏览器决定文件是否需要被缓存；或者需要加载文件时，浏览器决定是否需要发出请求**的字段。\n\n- **Cache-Control:max-age=315360000，**这表示缓存时长为315360000秒。如果315360000秒内需要再次请求这个文件，那么浏览器不会发出请求，直接使用本地的缓存的文件。这是HTTP/1.1标准中的字段。\n\n- **Expires: Thu, 31 Dec 2037 23:55:55 GMT，**这表示这个文件的过期时间是2037年12月31日晚上23点55分55秒，在这个时间之前浏览器都不会再次发出请求去获取这个文件。这是HTTP/1.0中的字段，如果客户端和服务器时间不同步会导致缓存出现问题，因此才有了上面的Cache-Control，当它们同时出现在HTTP Response的Header中时，Cache-Control优先级更高。 \n\n\n下面两个字段是**发起请求时，服务器决定文件是否需要更新**的字段。\n\n- **Last-Modified:Wed, 28 Sep 2016 09:24:35 GMT，**这表示这个文件最后的修改时间是2016年9月28日9点24分35秒。这个字段对于浏览器来说，会在下次请求的时候，作为Request Header的If-Modified-Since字段带上。例如浏览器缓存的文件已经超过了Cache-Control（或者Expires），那么需要加载这个文件时，就会发出请求，请求的Header有一个字段为`If-Modified-Since：Wed, 28 Sep 2016 09:24:35 GMT`，服务器接收到请求后，会把文件的Last-Modified时间和这个时间对比，如果时间没变，那么浏览器将返回`304 Not Modified`给浏览器，且content-length肯定是0个字节。如果时间有变化，那么服务器会返回`200 OK`，并返回相应的内容给浏览器。\n\n- **ETag:\"57eb8c5c-129\"，**这是文件的特征串。功能同上面的Last-Modified是一样的。只是在浏览器下次请求时，ETag是作为Request Header中的`If-None-Match:\"57eb8c5c-129\"`字段传到服务器。服务器和最新的文件特征串对比，如果相同那么返回`304 Not Modified`，不同则返回`200 OK`。当ETag和Last-Modified同时出现时，任何一个字段只要生效了，就认为文件是没有更新的。\n\n\n## 2.WebView如何设置才能支持上面的协议\n\n由上面的介绍可知，只要是个主流的、合格的浏览器，都应该能够支持HTTP协议层面的这几个字段。这不是我们开发者可以修改的，也不是我们应该修改的配置。在Android上，我们的WebView也支持这几个字段。但是我们可以通过代码去**设置WebView的Cache Mode**，而使得协议生效或者无效。WebView有下面几个Cache Mode：\n\n- LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据。\n- LOAD_DEFAULT: 根据cache-control决定是否从网络上取数据。 \n- LOAD_CACHE_NORMAL: API level 17中已经废弃，从API level 11开始作用同LOAD_DEFAULT模式 \n- LOAD_NO_CACHE: 不使用缓存，只从网络获取数据。\n- LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。本地没有缓存时才从网络上获取。\n\n设置WebView缓存的Cache Mode示例代码如下：\n\n```\nWebSettings settings = webView.getSettings();\nsettings.setCacheMode(WebSettings.LOAD_DEFAULT);\n```\n\n网上很多人都说根据网络条件去选择Cache Mode，当有网络时，设置为LOAD_DEFAULT，当没有网络时设置为LOAD_CACHE_ELSE_NETWORK。但是在我的业务中，js文件的更新都是非覆盖式的更新，也就是时候每次改变js文件的时候，文件的url地址一定会发生变化，所以我希望浏览器能够缓存下来js，并且一直使用它，那么我就给它只设置为LOAD_CACHE_ELSE_NETWORK。当然如果你要是可以改js的cdn服务器的Cache-Control字段，那也行啊，用LOAD_DEFAULT就ok了。至于文件是应该采用覆盖式or非覆盖式的更新，不是我今天要讨论的内容，在web前端领域，这是一个可以聊聊的topic。\n\n> 关于iOS的WebView，我同事在实际测试的时候竟然发现，控制文件缓存的Response Header是Expires字段。。而且iOS无法针对整个WebView设置Cache Mode，只能针对每一个URLRequest去设置。。后续有机会要学习一下iOS那块的情况。\n\n\n## 3.在手机里面的存储路径\n\n浏览器默认缓存下来的文件是怎么被存储到了哪里呢？这个问题在接触到WebView以来，就一直是一个谜题。这次由于工作的需要，我特意root了两台手机，一台红米1（Android 4.4）和一台小米4c（Android 5.1），在root高系统版本（6.0和7.1）的两台Nexus都以失败告终之后，我决定还是先看看4.4和5.1系统上，WebView自带的缓存存到了哪里。\n\n首先，不用思考就知道，这些文件一定是在**/data/data/包名/**目录下，在我之前的一篇博客里面提到过，这是每一个应用自己的内部存储目录。\n\n接着，我们打开终端，使用adb连接手机，然后按照下面命令操作一下。\n\n```\n// 1.先进入shell\nadb shell\n// 2.开启root账号 \nsu\n// 3.修改文件夹权限\nchmod 777 data/data/你的应用包名/\n// 4.修改子文件夹的权限，因为Android命令行不支持向Linux那样的-R命令实现递归式的chmod。。。\nchmod 777 data/data/你的应用包名/*\n// 5.所以如果你对应用目录层级更深，你就要进一步地chmod。。。\nchmod 777 data/data/你的应用包名/*/*\n// 6.直到终端里提示你说，no such file or directory时，说明chmod完了，所有的内部存储里面的文件夹和文件都可以看到了，如果大家有更好的方法请一定告诉我，多谢了~\n```\n\n- Android 4.4的目录：`/data/data/包名/app_webview/cache/`，如下图所示的第二个文件夹。\n\n![Android4.4系统WebView自带缓存路径](https://ww4.sinaimg.cn/large/006tNc79ly1ffjvarjyijj30jg05k0yr.jpg)\n\n可能你注意到了，第一个文件夹是叫Application Cache，我们后面再说它。\n\n- Android 5.1的目录：`/data/data/包名/cache/org.chromium.android_webview/`下面，如下图所示。\n\n![](https://ww2.sinaimg.cn/large/006tNc79ly1ffjvztg93zj30jg0a247x.jpg)\n\n但是在5.1系统上，`/data/data/包名/app_webview/`文件夹依然存在，只是4.4系统上面存储WebView自带缓存的`app_webview/cache`文件夹不再存在了（注意下App Cache目录还在），如下图所示。\n\n![Android5.1系统WebView自带缓存路径](https://ww3.sinaimg.cn/large/006tNc79ly1ffjw46ygoqj30jg06443v.jpg)\n\n综上所述，WebView自带的浏览器协议支持的缓存，在不同的系统版本上，位置是不一样的。也许除了我root过的4.4、5.1以外，其他版本系统的WebView自带缓存还可能存在于不同的目录里面。\n\n另外一个是关于**缓存文件的存储格式和索引格式**，在不同的手机上可能也有差别，因为之前看到网上的人都说有叫**webview.db**或者**webviewCache.db**的文件，这个文件呢，还不是在`app_webview/cache`或者`org.chromium.android_webview`下面，而是在`/data/data/包名/database/`里面。但是，我这两台root过的手机都没有看到这种文件，而且我把`/data/data/包名/`下面所有的db文件都打开看了，并没有发现有存储url记录的table。。\n\n实际上，以5.1系统为例，我看到了`/data/data/包名/cache/org.chromium.android_webview/`下面有叫**index**和**/index-dir/the-real-index**的文件，以及一堆名称为**md5+下划线+数字**的文件，上面的图中也可以看得到，这块的原理仍然有些疑问，也希望专业的大神可以解答一下。\n\n\n# 四、H5的缓存\n\n讲完了WebView自带的缓存，下面讲一下H5里面的App Cache。这个Cache是由开发Web页面的开发者控制的，而不是由Native去控制的，但是Native里面的WebView也需要我们做一下设置才能支持H5的这个特性。\n\n## 1.工作原理\n\n写Web页面代码时，指定manifest属性即可让页面使用App Cache。通常html页面代码会这么写：\n\n```\n<html manifest=\"xxx.appcache\">\n</html>\n```\n\nxxx.appcache文件用的是相对路径，这时appcache文件的路径是和页面一样的。也可以使用的绝对路径，但是域名要保持和页面一致。\n\n完整的xxx.appcache文件一般包括了3个section，基本格式如下：\n\n```\nCACHE MANIFEST\n# 2017-05-13 v1.0.0\n/bridge.js\n \nNETWORK:\n*\n \nFALLBACK:\n/404.html\n```\n\n- CACHE MANIFEST下面文件就是要被浏览器缓存的文件\n- NETWORK下面的文件就是要被加载的文件\n- FALLBACK下面的文件是目标页面加载失败时的显示的页面\n\n**AppCache工作的原理：**当一个设置了manifest文件的html页面被加载时，CACHE MANIFEST指定的文件就会被缓存到浏览器的App Cache目录下面。当下次加载这个页面时，会首先应用通过manifest已经缓存过的文件，然后发起一个加载xxx.appcache文件的请求到服务器，如果xxx.appcache文件没有被修改过，那么服务器会返回`304 Not Modified`给到浏览器，如果xxx.appcache文件被修改过，那么服务器会返回`200 OK`，并返回新的xxx.appcache文件的内容给浏览器，浏览器收到之后，再把新的xxx.appcache文件中指定的内容加载过来进行缓存。\n\n可以看到，AppCache缓存需要在每次加载页面时都发出一个xxx.appcache的请求去检查manifest文件是不是有更新（byte by byte）。根据这篇文章（[H5 缓存机制浅析 移动端 Web 加载性能优化](http://bugly.qq.com/bbs/forum.php?mod=viewthread&tid=267)）的介绍，AppCache有一些坑的地方，且官方已经不推荐使用了，但目前主流的浏览器依然是支持的。文章里主要提到下面这些坑：\n\n- 要更新缓存的文件，需要更新包含它的 manifest 文件，那怕只加一个空格。常用的方法，是修改 manifest 文件注释中的版本号。如：# 2012-02-21 v1.0.0\n- 被缓存的文件，浏览器是先使用，再通过检查 manifest 文件是否有更新来更新缓存文件。这样缓存文件可能用的不是最新的版本。\n- 在更新缓存过程中，如果有一个文件更新失败，则整个更新会失败。\n- manifest 和引用它的HTML要在相同 HOST。\n- manifest 文件中的文件列表，如果是相对路径，则是相对 manifest 文件的相对路径。\n- manifest 也有可能更新出错，导致缓存文件更新失败。\n- 没有缓存的资源在已经缓存的 HTML 中不能加载，即使有网络。例如：[url=]http://appcache-demo.s3-website-us-east-1.amazonaws.com/without-network/[/url]\n- manifest 文件本身不能被缓存，且 manifest 文件的更新使用的是浏览器缓存机制。所以 manifest 文件的 Cache-Control 缓存时间不能设置太长。\n\n\n## 2.WebView如何设置才能支持AppCache\n\nWebView默认是没有开启AppCache支持的，需要添加下面这几行代码来设置：\n\n```\nWebSettings webSettings = webView.getSettings();\nwebSettings.setAppCacheEnabled(true);\nString cachePath = getApplicationContext().getCacheDir().getPath(); // 把内部私有缓存目录'/data/data/包名/cache/'作为WebView的AppCache的存储路径\nwebSettings.setAppCachePath(cachePath);\nwebSettings.setAppCacheMaxSize(5 * 1024 * 1024);\n```\n\n注意：WebSettings的setAppCacheEnabled和setAppCachePath都必须要调用才行。\n\n\n## 3.存储AppCache的路径\n\n按照Android SDK的API说明，setAppCachePath是可以用来设置AppCache路径的，但是我实际测试发现，不管你怎么设置这个路径，设置到应用自己的内部私有目录还是外部SD卡，都无法生效。AppCache缓存文件最终都会存到`/data/data/包名/app_webview/cache/Application Cache`这个文件夹下面，在上面的Android 4.4和5.1系统目录截图可以看得到，**但是如果你不调用setAppCachePath方法，WebView将不会产生这个目录**。这里有点让我觉得奇怪，我猜测可能从某一个系统版本开始，为了缓存文件的完整性和安全性考虑，SDK实现的时候就吧AppCache缓存目录设置到了内部私有存储。\n\n\n# 五、总结\n\n## 相同点\n\nWebView自带的缓存和AppCache都是可以用来做文件级别的缓存的，基本上比较好地满足对于非覆盖式的js、css等文件更新。\n\n## 不同点\n\n- WebView自带的缓存是是协议层实现的（浏览器内核标准实现，开发者无法改变）；而AppCache是应用层实现的。\n- WebView的缓存目录在不同系统上可能是不同的；而对于AppCache而言，AppCache的存储路径虽然有方法设置，但是最终都存储到了一个固定的内部私有目录下。\n- WebView自带的缓存可以在缓存生效的时候不用再发HTTP请求；而AppCache一定会发出一个manifest文件的请求。\n- WebView自带的缓存可以通过设置CacheMode来改变WebView的缓存机制；而AppCache的缓存策略是由manifest文件控制的，也就是说是由web页面开发者控制的。\n\n\n\n最后说一下，其实很多时候，这两类缓存是共同在工作的，当manifest文件没有控制某些资源加载时，例如我上面写的xxx.appcache文件里，NETWORK section下面用的是*号，意思是所有不缓存的文件都要去网络加载。此时，这些资源就会走到WebView自带的缓存机制去，结合WebView的CacheMode，我们实际上对这些文件进行了一次WebView自带的缓存。搞清楚这两类缓存的原理有利于我们更好的设计自己的页面和App，尽可能减少网络请求，提高App运行效率。\n\n","source":"_posts/WebView缓存原理分析和应用.md","raw":"---\nlayout: post\ntitle: WebView缓存原理分析和应用\ndate: '2017-05-13'\ntags:\n  - Android\n  - WebView\ncategories: \n  - 技术\n---\n\n# 一、背景\n\n现在的App开发，或多或少都会用到Hybrid模式，到了WebView这边，经常会加载一些js文件（例如和WebView用来Native通信的bridge.js），而这些js文件不会经常发生变化，所以我们希望js在WebView里面加载一次之后，如果js没有发生变化，下次就不用再发起网络请求去加载，从而减少流量和资源的占用。那么有什么方式可以达到这个目的呢？先得从WebView的缓存原理入手。\n\n# 二、WebView的缓存类型\n\nWebView主要包括两类缓存，**一类是浏览器自带的网页数据缓存**，这是所有的浏览器都支持的、由HTTP协议定义的缓存；**另一类是H5缓存**，这是由web页面的开发者设置的，H5缓存主要包括了App Cache、DOM Storage、Local Storage、Web SQL Database 存储机制等，这里我们主要介绍App Cache来缓存js文件。\n\n<!-- more -->\n\n# 三、浏览器自带的网页数据缓存\n\n## 1.工作原理\n\n浏览器缓存机制是通过HTTP协议Header里的Cache-Control（或Expires）和Last-Modified（或 Etag）等字段来控制文件缓存的机制。关于这几个字段的作用和浏览器的缓存更新机制，大家可以看看这两篇文章([H5 缓存机制浅析 移动端 Web 加载性能优化](http://bugly.qq.com/bbs/forum.php?mod=viewthread&tid=267)，[Android：手把手教你构建 WebView 的缓存机制 & 资源预加载方案](http://www.jianshu.com/p/5e7075f4875f))，里面有详细的介绍。下面从我实际应用的角度，介绍一下通常会在HTTP协议中遇到的Header。\n\n这两个字段是**接收响应时，浏览器决定文件是否需要被缓存；或者需要加载文件时，浏览器决定是否需要发出请求**的字段。\n\n- **Cache-Control:max-age=315360000，**这表示缓存时长为315360000秒。如果315360000秒内需要再次请求这个文件，那么浏览器不会发出请求，直接使用本地的缓存的文件。这是HTTP/1.1标准中的字段。\n\n- **Expires: Thu, 31 Dec 2037 23:55:55 GMT，**这表示这个文件的过期时间是2037年12月31日晚上23点55分55秒，在这个时间之前浏览器都不会再次发出请求去获取这个文件。这是HTTP/1.0中的字段，如果客户端和服务器时间不同步会导致缓存出现问题，因此才有了上面的Cache-Control，当它们同时出现在HTTP Response的Header中时，Cache-Control优先级更高。 \n\n\n下面两个字段是**发起请求时，服务器决定文件是否需要更新**的字段。\n\n- **Last-Modified:Wed, 28 Sep 2016 09:24:35 GMT，**这表示这个文件最后的修改时间是2016年9月28日9点24分35秒。这个字段对于浏览器来说，会在下次请求的时候，作为Request Header的If-Modified-Since字段带上。例如浏览器缓存的文件已经超过了Cache-Control（或者Expires），那么需要加载这个文件时，就会发出请求，请求的Header有一个字段为`If-Modified-Since：Wed, 28 Sep 2016 09:24:35 GMT`，服务器接收到请求后，会把文件的Last-Modified时间和这个时间对比，如果时间没变，那么浏览器将返回`304 Not Modified`给浏览器，且content-length肯定是0个字节。如果时间有变化，那么服务器会返回`200 OK`，并返回相应的内容给浏览器。\n\n- **ETag:\"57eb8c5c-129\"，**这是文件的特征串。功能同上面的Last-Modified是一样的。只是在浏览器下次请求时，ETag是作为Request Header中的`If-None-Match:\"57eb8c5c-129\"`字段传到服务器。服务器和最新的文件特征串对比，如果相同那么返回`304 Not Modified`，不同则返回`200 OK`。当ETag和Last-Modified同时出现时，任何一个字段只要生效了，就认为文件是没有更新的。\n\n\n## 2.WebView如何设置才能支持上面的协议\n\n由上面的介绍可知，只要是个主流的、合格的浏览器，都应该能够支持HTTP协议层面的这几个字段。这不是我们开发者可以修改的，也不是我们应该修改的配置。在Android上，我们的WebView也支持这几个字段。但是我们可以通过代码去**设置WebView的Cache Mode**，而使得协议生效或者无效。WebView有下面几个Cache Mode：\n\n- LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据。\n- LOAD_DEFAULT: 根据cache-control决定是否从网络上取数据。 \n- LOAD_CACHE_NORMAL: API level 17中已经废弃，从API level 11开始作用同LOAD_DEFAULT模式 \n- LOAD_NO_CACHE: 不使用缓存，只从网络获取数据。\n- LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。本地没有缓存时才从网络上获取。\n\n设置WebView缓存的Cache Mode示例代码如下：\n\n```\nWebSettings settings = webView.getSettings();\nsettings.setCacheMode(WebSettings.LOAD_DEFAULT);\n```\n\n网上很多人都说根据网络条件去选择Cache Mode，当有网络时，设置为LOAD_DEFAULT，当没有网络时设置为LOAD_CACHE_ELSE_NETWORK。但是在我的业务中，js文件的更新都是非覆盖式的更新，也就是时候每次改变js文件的时候，文件的url地址一定会发生变化，所以我希望浏览器能够缓存下来js，并且一直使用它，那么我就给它只设置为LOAD_CACHE_ELSE_NETWORK。当然如果你要是可以改js的cdn服务器的Cache-Control字段，那也行啊，用LOAD_DEFAULT就ok了。至于文件是应该采用覆盖式or非覆盖式的更新，不是我今天要讨论的内容，在web前端领域，这是一个可以聊聊的topic。\n\n> 关于iOS的WebView，我同事在实际测试的时候竟然发现，控制文件缓存的Response Header是Expires字段。。而且iOS无法针对整个WebView设置Cache Mode，只能针对每一个URLRequest去设置。。后续有机会要学习一下iOS那块的情况。\n\n\n## 3.在手机里面的存储路径\n\n浏览器默认缓存下来的文件是怎么被存储到了哪里呢？这个问题在接触到WebView以来，就一直是一个谜题。这次由于工作的需要，我特意root了两台手机，一台红米1（Android 4.4）和一台小米4c（Android 5.1），在root高系统版本（6.0和7.1）的两台Nexus都以失败告终之后，我决定还是先看看4.4和5.1系统上，WebView自带的缓存存到了哪里。\n\n首先，不用思考就知道，这些文件一定是在**/data/data/包名/**目录下，在我之前的一篇博客里面提到过，这是每一个应用自己的内部存储目录。\n\n接着，我们打开终端，使用adb连接手机，然后按照下面命令操作一下。\n\n```\n// 1.先进入shell\nadb shell\n// 2.开启root账号 \nsu\n// 3.修改文件夹权限\nchmod 777 data/data/你的应用包名/\n// 4.修改子文件夹的权限，因为Android命令行不支持向Linux那样的-R命令实现递归式的chmod。。。\nchmod 777 data/data/你的应用包名/*\n// 5.所以如果你对应用目录层级更深，你就要进一步地chmod。。。\nchmod 777 data/data/你的应用包名/*/*\n// 6.直到终端里提示你说，no such file or directory时，说明chmod完了，所有的内部存储里面的文件夹和文件都可以看到了，如果大家有更好的方法请一定告诉我，多谢了~\n```\n\n- Android 4.4的目录：`/data/data/包名/app_webview/cache/`，如下图所示的第二个文件夹。\n\n![Android4.4系统WebView自带缓存路径](https://ww4.sinaimg.cn/large/006tNc79ly1ffjvarjyijj30jg05k0yr.jpg)\n\n可能你注意到了，第一个文件夹是叫Application Cache，我们后面再说它。\n\n- Android 5.1的目录：`/data/data/包名/cache/org.chromium.android_webview/`下面，如下图所示。\n\n![](https://ww2.sinaimg.cn/large/006tNc79ly1ffjvztg93zj30jg0a247x.jpg)\n\n但是在5.1系统上，`/data/data/包名/app_webview/`文件夹依然存在，只是4.4系统上面存储WebView自带缓存的`app_webview/cache`文件夹不再存在了（注意下App Cache目录还在），如下图所示。\n\n![Android5.1系统WebView自带缓存路径](https://ww3.sinaimg.cn/large/006tNc79ly1ffjw46ygoqj30jg06443v.jpg)\n\n综上所述，WebView自带的浏览器协议支持的缓存，在不同的系统版本上，位置是不一样的。也许除了我root过的4.4、5.1以外，其他版本系统的WebView自带缓存还可能存在于不同的目录里面。\n\n另外一个是关于**缓存文件的存储格式和索引格式**，在不同的手机上可能也有差别，因为之前看到网上的人都说有叫**webview.db**或者**webviewCache.db**的文件，这个文件呢，还不是在`app_webview/cache`或者`org.chromium.android_webview`下面，而是在`/data/data/包名/database/`里面。但是，我这两台root过的手机都没有看到这种文件，而且我把`/data/data/包名/`下面所有的db文件都打开看了，并没有发现有存储url记录的table。。\n\n实际上，以5.1系统为例，我看到了`/data/data/包名/cache/org.chromium.android_webview/`下面有叫**index**和**/index-dir/the-real-index**的文件，以及一堆名称为**md5+下划线+数字**的文件，上面的图中也可以看得到，这块的原理仍然有些疑问，也希望专业的大神可以解答一下。\n\n\n# 四、H5的缓存\n\n讲完了WebView自带的缓存，下面讲一下H5里面的App Cache。这个Cache是由开发Web页面的开发者控制的，而不是由Native去控制的，但是Native里面的WebView也需要我们做一下设置才能支持H5的这个特性。\n\n## 1.工作原理\n\n写Web页面代码时，指定manifest属性即可让页面使用App Cache。通常html页面代码会这么写：\n\n```\n<html manifest=\"xxx.appcache\">\n</html>\n```\n\nxxx.appcache文件用的是相对路径，这时appcache文件的路径是和页面一样的。也可以使用的绝对路径，但是域名要保持和页面一致。\n\n完整的xxx.appcache文件一般包括了3个section，基本格式如下：\n\n```\nCACHE MANIFEST\n# 2017-05-13 v1.0.0\n/bridge.js\n \nNETWORK:\n*\n \nFALLBACK:\n/404.html\n```\n\n- CACHE MANIFEST下面文件就是要被浏览器缓存的文件\n- NETWORK下面的文件就是要被加载的文件\n- FALLBACK下面的文件是目标页面加载失败时的显示的页面\n\n**AppCache工作的原理：**当一个设置了manifest文件的html页面被加载时，CACHE MANIFEST指定的文件就会被缓存到浏览器的App Cache目录下面。当下次加载这个页面时，会首先应用通过manifest已经缓存过的文件，然后发起一个加载xxx.appcache文件的请求到服务器，如果xxx.appcache文件没有被修改过，那么服务器会返回`304 Not Modified`给到浏览器，如果xxx.appcache文件被修改过，那么服务器会返回`200 OK`，并返回新的xxx.appcache文件的内容给浏览器，浏览器收到之后，再把新的xxx.appcache文件中指定的内容加载过来进行缓存。\n\n可以看到，AppCache缓存需要在每次加载页面时都发出一个xxx.appcache的请求去检查manifest文件是不是有更新（byte by byte）。根据这篇文章（[H5 缓存机制浅析 移动端 Web 加载性能优化](http://bugly.qq.com/bbs/forum.php?mod=viewthread&tid=267)）的介绍，AppCache有一些坑的地方，且官方已经不推荐使用了，但目前主流的浏览器依然是支持的。文章里主要提到下面这些坑：\n\n- 要更新缓存的文件，需要更新包含它的 manifest 文件，那怕只加一个空格。常用的方法，是修改 manifest 文件注释中的版本号。如：# 2012-02-21 v1.0.0\n- 被缓存的文件，浏览器是先使用，再通过检查 manifest 文件是否有更新来更新缓存文件。这样缓存文件可能用的不是最新的版本。\n- 在更新缓存过程中，如果有一个文件更新失败，则整个更新会失败。\n- manifest 和引用它的HTML要在相同 HOST。\n- manifest 文件中的文件列表，如果是相对路径，则是相对 manifest 文件的相对路径。\n- manifest 也有可能更新出错，导致缓存文件更新失败。\n- 没有缓存的资源在已经缓存的 HTML 中不能加载，即使有网络。例如：[url=]http://appcache-demo.s3-website-us-east-1.amazonaws.com/without-network/[/url]\n- manifest 文件本身不能被缓存，且 manifest 文件的更新使用的是浏览器缓存机制。所以 manifest 文件的 Cache-Control 缓存时间不能设置太长。\n\n\n## 2.WebView如何设置才能支持AppCache\n\nWebView默认是没有开启AppCache支持的，需要添加下面这几行代码来设置：\n\n```\nWebSettings webSettings = webView.getSettings();\nwebSettings.setAppCacheEnabled(true);\nString cachePath = getApplicationContext().getCacheDir().getPath(); // 把内部私有缓存目录'/data/data/包名/cache/'作为WebView的AppCache的存储路径\nwebSettings.setAppCachePath(cachePath);\nwebSettings.setAppCacheMaxSize(5 * 1024 * 1024);\n```\n\n注意：WebSettings的setAppCacheEnabled和setAppCachePath都必须要调用才行。\n\n\n## 3.存储AppCache的路径\n\n按照Android SDK的API说明，setAppCachePath是可以用来设置AppCache路径的，但是我实际测试发现，不管你怎么设置这个路径，设置到应用自己的内部私有目录还是外部SD卡，都无法生效。AppCache缓存文件最终都会存到`/data/data/包名/app_webview/cache/Application Cache`这个文件夹下面，在上面的Android 4.4和5.1系统目录截图可以看得到，**但是如果你不调用setAppCachePath方法，WebView将不会产生这个目录**。这里有点让我觉得奇怪，我猜测可能从某一个系统版本开始，为了缓存文件的完整性和安全性考虑，SDK实现的时候就吧AppCache缓存目录设置到了内部私有存储。\n\n\n# 五、总结\n\n## 相同点\n\nWebView自带的缓存和AppCache都是可以用来做文件级别的缓存的，基本上比较好地满足对于非覆盖式的js、css等文件更新。\n\n## 不同点\n\n- WebView自带的缓存是是协议层实现的（浏览器内核标准实现，开发者无法改变）；而AppCache是应用层实现的。\n- WebView的缓存目录在不同系统上可能是不同的；而对于AppCache而言，AppCache的存储路径虽然有方法设置，但是最终都存储到了一个固定的内部私有目录下。\n- WebView自带的缓存可以在缓存生效的时候不用再发HTTP请求；而AppCache一定会发出一个manifest文件的请求。\n- WebView自带的缓存可以通过设置CacheMode来改变WebView的缓存机制；而AppCache的缓存策略是由manifest文件控制的，也就是说是由web页面开发者控制的。\n\n\n\n最后说一下，其实很多时候，这两类缓存是共同在工作的，当manifest文件没有控制某些资源加载时，例如我上面写的xxx.appcache文件里，NETWORK section下面用的是*号，意思是所有不缓存的文件都要去网络加载。此时，这些资源就会走到WebView自带的缓存机制去，结合WebView的CacheMode，我们实际上对这些文件进行了一次WebView自带的缓存。搞清楚这两类缓存的原理有利于我们更好的设计自己的页面和App，尽可能减少网络请求，提高App运行效率。\n\n","slug":"WebView缓存原理分析和应用","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8ea0013mtsxn887y9cn","content":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>现在的App开发，或多或少都会用到Hybrid模式，到了WebView这边，经常会加载一些js文件（例如和WebView用来Native通信的bridge.js），而这些js文件不会经常发生变化，所以我们希望js在WebView里面加载一次之后，如果js没有发生变化，下次就不用再发起网络请求去加载，从而减少流量和资源的占用。那么有什么方式可以达到这个目的呢？先得从WebView的缓存原理入手。</p>\n<h1 id=\"二、WebView的缓存类型\"><a href=\"#二、WebView的缓存类型\" class=\"headerlink\" title=\"二、WebView的缓存类型\"></a>二、WebView的缓存类型</h1><p>WebView主要包括两类缓存，<strong>一类是浏览器自带的网页数据缓存</strong>，这是所有的浏览器都支持的、由HTTP协议定义的缓存；<strong>另一类是H5缓存</strong>，这是由web页面的开发者设置的，H5缓存主要包括了App Cache、DOM Storage、Local Storage、Web SQL Database 存储机制等，这里我们主要介绍App Cache来缓存js文件。</p>\n<a id=\"more\"></a>\n<h1 id=\"三、浏览器自带的网页数据缓存\"><a href=\"#三、浏览器自带的网页数据缓存\" class=\"headerlink\" title=\"三、浏览器自带的网页数据缓存\"></a>三、浏览器自带的网页数据缓存</h1><h2 id=\"1-工作原理\"><a href=\"#1-工作原理\" class=\"headerlink\" title=\"1.工作原理\"></a>1.工作原理</h2><p>浏览器缓存机制是通过HTTP协议Header里的Cache-Control（或Expires）和Last-Modified（或 Etag）等字段来控制文件缓存的机制。关于这几个字段的作用和浏览器的缓存更新机制，大家可以看看这两篇文章(<a href=\"http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=267\" target=\"_blank\" rel=\"noopener\">H5 缓存机制浅析 移动端 Web 加载性能优化</a>，<a href=\"http://www.jianshu.com/p/5e7075f4875f\" target=\"_blank\" rel=\"noopener\">Android：手把手教你构建 WebView 的缓存机制 &amp; 资源预加载方案</a>)，里面有详细的介绍。下面从我实际应用的角度，介绍一下通常会在HTTP协议中遇到的Header。</p>\n<p>这两个字段是<strong>接收响应时，浏览器决定文件是否需要被缓存；或者需要加载文件时，浏览器决定是否需要发出请求</strong>的字段。</p>\n<ul>\n<li><p><strong>Cache-Control:max-age=315360000，</strong>这表示缓存时长为315360000秒。如果315360000秒内需要再次请求这个文件，那么浏览器不会发出请求，直接使用本地的缓存的文件。这是HTTP/1.1标准中的字段。</p>\n</li>\n<li><p><strong>Expires: Thu, 31 Dec 2037 23:55:55 GMT，</strong>这表示这个文件的过期时间是2037年12月31日晚上23点55分55秒，在这个时间之前浏览器都不会再次发出请求去获取这个文件。这是HTTP/1.0中的字段，如果客户端和服务器时间不同步会导致缓存出现问题，因此才有了上面的Cache-Control，当它们同时出现在HTTP Response的Header中时，Cache-Control优先级更高。 </p>\n</li>\n</ul>\n<p>下面两个字段是<strong>发起请求时，服务器决定文件是否需要更新</strong>的字段。</p>\n<ul>\n<li><p><strong>Last-Modified:Wed, 28 Sep 2016 09:24:35 GMT，</strong>这表示这个文件最后的修改时间是2016年9月28日9点24分35秒。这个字段对于浏览器来说，会在下次请求的时候，作为Request Header的If-Modified-Since字段带上。例如浏览器缓存的文件已经超过了Cache-Control（或者Expires），那么需要加载这个文件时，就会发出请求，请求的Header有一个字段为<code>If-Modified-Since：Wed, 28 Sep 2016 09:24:35 GMT</code>，服务器接收到请求后，会把文件的Last-Modified时间和这个时间对比，如果时间没变，那么浏览器将返回<code>304 Not Modified</code>给浏览器，且content-length肯定是0个字节。如果时间有变化，那么服务器会返回<code>200 OK</code>，并返回相应的内容给浏览器。</p>\n</li>\n<li><p><strong>ETag:”57eb8c5c-129”，</strong>这是文件的特征串。功能同上面的Last-Modified是一样的。只是在浏览器下次请求时，ETag是作为Request Header中的<code>If-None-Match:&quot;57eb8c5c-129&quot;</code>字段传到服务器。服务器和最新的文件特征串对比，如果相同那么返回<code>304 Not Modified</code>，不同则返回<code>200 OK</code>。当ETag和Last-Modified同时出现时，任何一个字段只要生效了，就认为文件是没有更新的。</p>\n</li>\n</ul>\n<h2 id=\"2-WebView如何设置才能支持上面的协议\"><a href=\"#2-WebView如何设置才能支持上面的协议\" class=\"headerlink\" title=\"2.WebView如何设置才能支持上面的协议\"></a>2.WebView如何设置才能支持上面的协议</h2><p>由上面的介绍可知，只要是个主流的、合格的浏览器，都应该能够支持HTTP协议层面的这几个字段。这不是我们开发者可以修改的，也不是我们应该修改的配置。在Android上，我们的WebView也支持这几个字段。但是我们可以通过代码去<strong>设置WebView的Cache Mode</strong>，而使得协议生效或者无效。WebView有下面几个Cache Mode：</p>\n<ul>\n<li>LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据。</li>\n<li>LOAD_DEFAULT: 根据cache-control决定是否从网络上取数据。 </li>\n<li>LOAD_CACHE_NORMAL: API level 17中已经废弃，从API level 11开始作用同LOAD_DEFAULT模式 </li>\n<li>LOAD_NO_CACHE: 不使用缓存，只从网络获取数据。</li>\n<li>LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。本地没有缓存时才从网络上获取。</li>\n</ul>\n<p>设置WebView缓存的Cache Mode示例代码如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSettings<span class=\"built_in\"> settings </span>= webView.getSettings();</span><br><span class=\"line\">settings.setCacheMode(WebSettings.LOAD_DEFAULT);</span><br></pre></td></tr></table></figure>\n<p>网上很多人都说根据网络条件去选择Cache Mode，当有网络时，设置为LOAD_DEFAULT，当没有网络时设置为LOAD_CACHE_ELSE_NETWORK。但是在我的业务中，js文件的更新都是非覆盖式的更新，也就是时候每次改变js文件的时候，文件的url地址一定会发生变化，所以我希望浏览器能够缓存下来js，并且一直使用它，那么我就给它只设置为LOAD_CACHE_ELSE_NETWORK。当然如果你要是可以改js的cdn服务器的Cache-Control字段，那也行啊，用LOAD_DEFAULT就ok了。至于文件是应该采用覆盖式or非覆盖式的更新，不是我今天要讨论的内容，在web前端领域，这是一个可以聊聊的topic。</p>\n<blockquote>\n<p>关于iOS的WebView，我同事在实际测试的时候竟然发现，控制文件缓存的Response Header是Expires字段。。而且iOS无法针对整个WebView设置Cache Mode，只能针对每一个URLRequest去设置。。后续有机会要学习一下iOS那块的情况。</p>\n</blockquote>\n<h2 id=\"3-在手机里面的存储路径\"><a href=\"#3-在手机里面的存储路径\" class=\"headerlink\" title=\"3.在手机里面的存储路径\"></a>3.在手机里面的存储路径</h2><p>浏览器默认缓存下来的文件是怎么被存储到了哪里呢？这个问题在接触到WebView以来，就一直是一个谜题。这次由于工作的需要，我特意root了两台手机，一台红米1（Android 4.4）和一台小米4c（Android 5.1），在root高系统版本（6.0和7.1）的两台Nexus都以失败告终之后，我决定还是先看看4.4和5.1系统上，WebView自带的缓存存到了哪里。</p>\n<p>首先，不用思考就知道，这些文件一定是在<strong>/data/data/包名/</strong>目录下，在我之前的一篇博客里面提到过，这是每一个应用自己的内部存储目录。</p>\n<p>接着，我们打开终端，使用adb连接手机，然后按照下面命令操作一下。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.先进入shell</span></span><br><span class=\"line\">adb shell</span><br><span class=\"line\"><span class=\"comment\">// 2.开启root账号 </span></span><br><span class=\"line\">su</span><br><span class=\"line\"><span class=\"comment\">// 3.修改文件夹权限</span></span><br><span class=\"line\">chmod <span class=\"number\">777</span> <span class=\"keyword\">data</span>/<span class=\"keyword\">data</span>/你的应用包名/</span><br><span class=\"line\"><span class=\"comment\">// 4.修改子文件夹的权限，因为Android命令行不支持向Linux那样的-R命令实现递归式的chmod。。。</span></span><br><span class=\"line\">chmod <span class=\"number\">777</span> <span class=\"keyword\">data</span>/<span class=\"keyword\">data</span>/你的应用包名<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// 5.所以如果你对应用目录层级更深，你就要进一步地chmod。。。</span></span><br><span class=\"line\"><span class=\"comment\">chmod 777 data/data/你的应用包名/*/</span>*</span><br><span class=\"line\"><span class=\"comment\">// 6.直到终端里提示你说，no such file or directory时，说明chmod完了，所有的内部存储里面的文件夹和文件都可以看到了，如果大家有更好的方法请一定告诉我，多谢了~</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Android 4.4的目录：<code>/data/data/包名/app_webview/cache/</code>，如下图所示的第二个文件夹。</li>\n</ul>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79ly1ffjvarjyijj30jg05k0yr.jpg\" alt=\"Android4.4系统WebView自带缓存路径\"></p>\n<p>可能你注意到了，第一个文件夹是叫Application Cache，我们后面再说它。</p>\n<ul>\n<li>Android 5.1的目录：<code>/data/data/包名/cache/org.chromium.android_webview/</code>下面，如下图所示。</li>\n</ul>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1ffjvztg93zj30jg0a247x.jpg\" alt=\"\"></p>\n<p>但是在5.1系统上，<code>/data/data/包名/app_webview/</code>文件夹依然存在，只是4.4系统上面存储WebView自带缓存的<code>app_webview/cache</code>文件夹不再存在了（注意下App Cache目录还在），如下图所示。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79ly1ffjw46ygoqj30jg06443v.jpg\" alt=\"Android5.1系统WebView自带缓存路径\"></p>\n<p>综上所述，WebView自带的浏览器协议支持的缓存，在不同的系统版本上，位置是不一样的。也许除了我root过的4.4、5.1以外，其他版本系统的WebView自带缓存还可能存在于不同的目录里面。</p>\n<p>另外一个是关于<strong>缓存文件的存储格式和索引格式</strong>，在不同的手机上可能也有差别，因为之前看到网上的人都说有叫<strong>webview.db</strong>或者<strong>webviewCache.db</strong>的文件，这个文件呢，还不是在<code>app_webview/cache</code>或者<code>org.chromium.android_webview</code>下面，而是在<code>/data/data/包名/database/</code>里面。但是，我这两台root过的手机都没有看到这种文件，而且我把<code>/data/data/包名/</code>下面所有的db文件都打开看了，并没有发现有存储url记录的table。。</p>\n<p>实际上，以5.1系统为例，我看到了<code>/data/data/包名/cache/org.chromium.android_webview/</code>下面有叫<strong>index</strong>和<strong>/index-dir/the-real-index</strong>的文件，以及一堆名称为<strong>md5+下划线+数字</strong>的文件，上面的图中也可以看得到，这块的原理仍然有些疑问，也希望专业的大神可以解答一下。</p>\n<h1 id=\"四、H5的缓存\"><a href=\"#四、H5的缓存\" class=\"headerlink\" title=\"四、H5的缓存\"></a>四、H5的缓存</h1><p>讲完了WebView自带的缓存，下面讲一下H5里面的App Cache。这个Cache是由开发Web页面的开发者控制的，而不是由Native去控制的，但是Native里面的WebView也需要我们做一下设置才能支持H5的这个特性。</p>\n<h2 id=\"1-工作原理-1\"><a href=\"#1-工作原理-1\" class=\"headerlink\" title=\"1.工作原理\"></a>1.工作原理</h2><p>写Web页面代码时，指定manifest属性即可让页面使用App Cache。通常html页面代码会这么写：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"xxx.appcache\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>xxx.appcache文件用的是相对路径，这时appcache文件的路径是和页面一样的。也可以使用的绝对路径，但是域名要保持和页面一致。</p>\n<p>完整的xxx.appcache文件一般包括了3个section，基本格式如下：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHE MANIFEST</span><br><span class=\"line\"><span class=\"meta\"># 2017-05-13 v1.0.0</span></span><br><span class=\"line\">/bridge.js</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"symbol\">NETWORK:</span></span><br><span class=\"line\">*</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"symbol\">FALLBACK:</span></span><br><span class=\"line\">/<span class=\"number\">404.</span>html</span><br></pre></td></tr></table></figure>\n<ul>\n<li>CACHE MANIFEST下面文件就是要被浏览器缓存的文件</li>\n<li>NETWORK下面的文件就是要被加载的文件</li>\n<li>FALLBACK下面的文件是目标页面加载失败时的显示的页面</li>\n</ul>\n<p><strong>AppCache工作的原理：</strong>当一个设置了manifest文件的html页面被加载时，CACHE MANIFEST指定的文件就会被缓存到浏览器的App Cache目录下面。当下次加载这个页面时，会首先应用通过manifest已经缓存过的文件，然后发起一个加载xxx.appcache文件的请求到服务器，如果xxx.appcache文件没有被修改过，那么服务器会返回<code>304 Not Modified</code>给到浏览器，如果xxx.appcache文件被修改过，那么服务器会返回<code>200 OK</code>，并返回新的xxx.appcache文件的内容给浏览器，浏览器收到之后，再把新的xxx.appcache文件中指定的内容加载过来进行缓存。</p>\n<p>可以看到，AppCache缓存需要在每次加载页面时都发出一个xxx.appcache的请求去检查manifest文件是不是有更新（byte by byte）。根据这篇文章（<a href=\"http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=267\" target=\"_blank\" rel=\"noopener\">H5 缓存机制浅析 移动端 Web 加载性能优化</a>）的介绍，AppCache有一些坑的地方，且官方已经不推荐使用了，但目前主流的浏览器依然是支持的。文章里主要提到下面这些坑：</p>\n<ul>\n<li>要更新缓存的文件，需要更新包含它的 manifest 文件，那怕只加一个空格。常用的方法，是修改 manifest 文件注释中的版本号。如：# 2012-02-21 v1.0.0</li>\n<li>被缓存的文件，浏览器是先使用，再通过检查 manifest 文件是否有更新来更新缓存文件。这样缓存文件可能用的不是最新的版本。</li>\n<li>在更新缓存过程中，如果有一个文件更新失败，则整个更新会失败。</li>\n<li>manifest 和引用它的HTML要在相同 HOST。</li>\n<li>manifest 文件中的文件列表，如果是相对路径，则是相对 manifest 文件的相对路径。</li>\n<li>manifest 也有可能更新出错，导致缓存文件更新失败。</li>\n<li>没有缓存的资源在已经缓存的 HTML 中不能加载，即使有网络。例如：[url=]<a href=\"http://appcache-demo.s3-website-us-east-1.amazonaws.com/without-network/[/url\" target=\"_blank\" rel=\"noopener\">http://appcache-demo.s3-website-us-east-1.amazonaws.com/without-network/[/url</a>]</li>\n<li>manifest 文件本身不能被缓存，且 manifest 文件的更新使用的是浏览器缓存机制。所以 manifest 文件的 Cache-Control 缓存时间不能设置太长。</li>\n</ul>\n<h2 id=\"2-WebView如何设置才能支持AppCache\"><a href=\"#2-WebView如何设置才能支持AppCache\" class=\"headerlink\" title=\"2.WebView如何设置才能支持AppCache\"></a>2.WebView如何设置才能支持AppCache</h2><p>WebView默认是没有开启AppCache支持的，需要添加下面这几行代码来设置：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSettings webSettings = webView.getSettings<span class=\"params\">()</span>;</span><br><span class=\"line\">webSettings.<span class=\"keyword\">set</span>AppCacheEnabled<span class=\"params\">(true)</span>;</span><br><span class=\"line\">String cachePath = getApplicationContext<span class=\"params\">()</span><span class=\"string\">.getCacheDir</span><span class=\"params\">()</span><span class=\"string\">.getPath</span><span class=\"params\">()</span>; <span class=\"string\">//</span> 把内部私有缓存目录'<span class=\"string\">/data/data/</span>包名<span class=\"string\">/cache/</span>'作为WebView的AppCache的存储路径</span><br><span class=\"line\">webSettings.<span class=\"keyword\">set</span>AppCachePath<span class=\"params\">(cachePath)</span>;</span><br><span class=\"line\">webSettings.<span class=\"keyword\">set</span>AppCacheMaxSize<span class=\"params\">(5 * 1024 * 1024)</span>;</span><br></pre></td></tr></table></figure>\n<p>注意：WebSettings的setAppCacheEnabled和setAppCachePath都必须要调用才行。</p>\n<h2 id=\"3-存储AppCache的路径\"><a href=\"#3-存储AppCache的路径\" class=\"headerlink\" title=\"3.存储AppCache的路径\"></a>3.存储AppCache的路径</h2><p>按照Android SDK的API说明，setAppCachePath是可以用来设置AppCache路径的，但是我实际测试发现，不管你怎么设置这个路径，设置到应用自己的内部私有目录还是外部SD卡，都无法生效。AppCache缓存文件最终都会存到<code>/data/data/包名/app_webview/cache/Application Cache</code>这个文件夹下面，在上面的Android 4.4和5.1系统目录截图可以看得到，<strong>但是如果你不调用setAppCachePath方法，WebView将不会产生这个目录</strong>。这里有点让我觉得奇怪，我猜测可能从某一个系统版本开始，为了缓存文件的完整性和安全性考虑，SDK实现的时候就吧AppCache缓存目录设置到了内部私有存储。</p>\n<h1 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h1><h2 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h2><p>WebView自带的缓存和AppCache都是可以用来做文件级别的缓存的，基本上比较好地满足对于非覆盖式的js、css等文件更新。</p>\n<h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><ul>\n<li>WebView自带的缓存是是协议层实现的（浏览器内核标准实现，开发者无法改变）；而AppCache是应用层实现的。</li>\n<li>WebView的缓存目录在不同系统上可能是不同的；而对于AppCache而言，AppCache的存储路径虽然有方法设置，但是最终都存储到了一个固定的内部私有目录下。</li>\n<li>WebView自带的缓存可以在缓存生效的时候不用再发HTTP请求；而AppCache一定会发出一个manifest文件的请求。</li>\n<li>WebView自带的缓存可以通过设置CacheMode来改变WebView的缓存机制；而AppCache的缓存策略是由manifest文件控制的，也就是说是由web页面开发者控制的。</li>\n</ul>\n<p>最后说一下，其实很多时候，这两类缓存是共同在工作的，当manifest文件没有控制某些资源加载时，例如我上面写的xxx.appcache文件里，NETWORK section下面用的是*号，意思是所有不缓存的文件都要去网络加载。此时，这些资源就会走到WebView自带的缓存机制去，结合WebView的CacheMode，我们实际上对这些文件进行了一次WebView自带的缓存。搞清楚这两类缓存的原理有利于我们更好的设计自己的页面和App，尽可能减少网络请求，提高App运行效率。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>现在的App开发，或多或少都会用到Hybrid模式，到了WebView这边，经常会加载一些js文件（例如和WebView用来Native通信的bridge.js），而这些js文件不会经常发生变化，所以我们希望js在WebView里面加载一次之后，如果js没有发生变化，下次就不用再发起网络请求去加载，从而减少流量和资源的占用。那么有什么方式可以达到这个目的呢？先得从WebView的缓存原理入手。</p>\n<h1 id=\"二、WebView的缓存类型\"><a href=\"#二、WebView的缓存类型\" class=\"headerlink\" title=\"二、WebView的缓存类型\"></a>二、WebView的缓存类型</h1><p>WebView主要包括两类缓存，<strong>一类是浏览器自带的网页数据缓存</strong>，这是所有的浏览器都支持的、由HTTP协议定义的缓存；<strong>另一类是H5缓存</strong>，这是由web页面的开发者设置的，H5缓存主要包括了App Cache、DOM Storage、Local Storage、Web SQL Database 存储机制等，这里我们主要介绍App Cache来缓存js文件。</p>","more":"<h1 id=\"三、浏览器自带的网页数据缓存\"><a href=\"#三、浏览器自带的网页数据缓存\" class=\"headerlink\" title=\"三、浏览器自带的网页数据缓存\"></a>三、浏览器自带的网页数据缓存</h1><h2 id=\"1-工作原理\"><a href=\"#1-工作原理\" class=\"headerlink\" title=\"1.工作原理\"></a>1.工作原理</h2><p>浏览器缓存机制是通过HTTP协议Header里的Cache-Control（或Expires）和Last-Modified（或 Etag）等字段来控制文件缓存的机制。关于这几个字段的作用和浏览器的缓存更新机制，大家可以看看这两篇文章(<a href=\"http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=267\" target=\"_blank\" rel=\"noopener\">H5 缓存机制浅析 移动端 Web 加载性能优化</a>，<a href=\"http://www.jianshu.com/p/5e7075f4875f\" target=\"_blank\" rel=\"noopener\">Android：手把手教你构建 WebView 的缓存机制 &amp; 资源预加载方案</a>)，里面有详细的介绍。下面从我实际应用的角度，介绍一下通常会在HTTP协议中遇到的Header。</p>\n<p>这两个字段是<strong>接收响应时，浏览器决定文件是否需要被缓存；或者需要加载文件时，浏览器决定是否需要发出请求</strong>的字段。</p>\n<ul>\n<li><p><strong>Cache-Control:max-age=315360000，</strong>这表示缓存时长为315360000秒。如果315360000秒内需要再次请求这个文件，那么浏览器不会发出请求，直接使用本地的缓存的文件。这是HTTP/1.1标准中的字段。</p>\n</li>\n<li><p><strong>Expires: Thu, 31 Dec 2037 23:55:55 GMT，</strong>这表示这个文件的过期时间是2037年12月31日晚上23点55分55秒，在这个时间之前浏览器都不会再次发出请求去获取这个文件。这是HTTP/1.0中的字段，如果客户端和服务器时间不同步会导致缓存出现问题，因此才有了上面的Cache-Control，当它们同时出现在HTTP Response的Header中时，Cache-Control优先级更高。 </p>\n</li>\n</ul>\n<p>下面两个字段是<strong>发起请求时，服务器决定文件是否需要更新</strong>的字段。</p>\n<ul>\n<li><p><strong>Last-Modified:Wed, 28 Sep 2016 09:24:35 GMT，</strong>这表示这个文件最后的修改时间是2016年9月28日9点24分35秒。这个字段对于浏览器来说，会在下次请求的时候，作为Request Header的If-Modified-Since字段带上。例如浏览器缓存的文件已经超过了Cache-Control（或者Expires），那么需要加载这个文件时，就会发出请求，请求的Header有一个字段为<code>If-Modified-Since：Wed, 28 Sep 2016 09:24:35 GMT</code>，服务器接收到请求后，会把文件的Last-Modified时间和这个时间对比，如果时间没变，那么浏览器将返回<code>304 Not Modified</code>给浏览器，且content-length肯定是0个字节。如果时间有变化，那么服务器会返回<code>200 OK</code>，并返回相应的内容给浏览器。</p>\n</li>\n<li><p><strong>ETag:”57eb8c5c-129”，</strong>这是文件的特征串。功能同上面的Last-Modified是一样的。只是在浏览器下次请求时，ETag是作为Request Header中的<code>If-None-Match:&quot;57eb8c5c-129&quot;</code>字段传到服务器。服务器和最新的文件特征串对比，如果相同那么返回<code>304 Not Modified</code>，不同则返回<code>200 OK</code>。当ETag和Last-Modified同时出现时，任何一个字段只要生效了，就认为文件是没有更新的。</p>\n</li>\n</ul>\n<h2 id=\"2-WebView如何设置才能支持上面的协议\"><a href=\"#2-WebView如何设置才能支持上面的协议\" class=\"headerlink\" title=\"2.WebView如何设置才能支持上面的协议\"></a>2.WebView如何设置才能支持上面的协议</h2><p>由上面的介绍可知，只要是个主流的、合格的浏览器，都应该能够支持HTTP协议层面的这几个字段。这不是我们开发者可以修改的，也不是我们应该修改的配置。在Android上，我们的WebView也支持这几个字段。但是我们可以通过代码去<strong>设置WebView的Cache Mode</strong>，而使得协议生效或者无效。WebView有下面几个Cache Mode：</p>\n<ul>\n<li>LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据。</li>\n<li>LOAD_DEFAULT: 根据cache-control决定是否从网络上取数据。 </li>\n<li>LOAD_CACHE_NORMAL: API level 17中已经废弃，从API level 11开始作用同LOAD_DEFAULT模式 </li>\n<li>LOAD_NO_CACHE: 不使用缓存，只从网络获取数据。</li>\n<li>LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。本地没有缓存时才从网络上获取。</li>\n</ul>\n<p>设置WebView缓存的Cache Mode示例代码如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSettings<span class=\"built_in\"> settings </span>= webView.getSettings();</span><br><span class=\"line\">settings.setCacheMode(WebSettings.LOAD_DEFAULT);</span><br></pre></td></tr></table></figure>\n<p>网上很多人都说根据网络条件去选择Cache Mode，当有网络时，设置为LOAD_DEFAULT，当没有网络时设置为LOAD_CACHE_ELSE_NETWORK。但是在我的业务中，js文件的更新都是非覆盖式的更新，也就是时候每次改变js文件的时候，文件的url地址一定会发生变化，所以我希望浏览器能够缓存下来js，并且一直使用它，那么我就给它只设置为LOAD_CACHE_ELSE_NETWORK。当然如果你要是可以改js的cdn服务器的Cache-Control字段，那也行啊，用LOAD_DEFAULT就ok了。至于文件是应该采用覆盖式or非覆盖式的更新，不是我今天要讨论的内容，在web前端领域，这是一个可以聊聊的topic。</p>\n<blockquote>\n<p>关于iOS的WebView，我同事在实际测试的时候竟然发现，控制文件缓存的Response Header是Expires字段。。而且iOS无法针对整个WebView设置Cache Mode，只能针对每一个URLRequest去设置。。后续有机会要学习一下iOS那块的情况。</p>\n</blockquote>\n<h2 id=\"3-在手机里面的存储路径\"><a href=\"#3-在手机里面的存储路径\" class=\"headerlink\" title=\"3.在手机里面的存储路径\"></a>3.在手机里面的存储路径</h2><p>浏览器默认缓存下来的文件是怎么被存储到了哪里呢？这个问题在接触到WebView以来，就一直是一个谜题。这次由于工作的需要，我特意root了两台手机，一台红米1（Android 4.4）和一台小米4c（Android 5.1），在root高系统版本（6.0和7.1）的两台Nexus都以失败告终之后，我决定还是先看看4.4和5.1系统上，WebView自带的缓存存到了哪里。</p>\n<p>首先，不用思考就知道，这些文件一定是在<strong>/data/data/包名/</strong>目录下，在我之前的一篇博客里面提到过，这是每一个应用自己的内部存储目录。</p>\n<p>接着，我们打开终端，使用adb连接手机，然后按照下面命令操作一下。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.先进入shell</span></span><br><span class=\"line\">adb shell</span><br><span class=\"line\"><span class=\"comment\">// 2.开启root账号 </span></span><br><span class=\"line\">su</span><br><span class=\"line\"><span class=\"comment\">// 3.修改文件夹权限</span></span><br><span class=\"line\">chmod <span class=\"number\">777</span> <span class=\"keyword\">data</span>/<span class=\"keyword\">data</span>/你的应用包名/</span><br><span class=\"line\"><span class=\"comment\">// 4.修改子文件夹的权限，因为Android命令行不支持向Linux那样的-R命令实现递归式的chmod。。。</span></span><br><span class=\"line\">chmod <span class=\"number\">777</span> <span class=\"keyword\">data</span>/<span class=\"keyword\">data</span>/你的应用包名<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// 5.所以如果你对应用目录层级更深，你就要进一步地chmod。。。</span></span><br><span class=\"line\"><span class=\"comment\">chmod 777 data/data/你的应用包名/*/</span>*</span><br><span class=\"line\"><span class=\"comment\">// 6.直到终端里提示你说，no such file or directory时，说明chmod完了，所有的内部存储里面的文件夹和文件都可以看到了，如果大家有更好的方法请一定告诉我，多谢了~</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Android 4.4的目录：<code>/data/data/包名/app_webview/cache/</code>，如下图所示的第二个文件夹。</li>\n</ul>\n<p><img src=\"https://ww4.sinaimg.cn/large/006tNc79ly1ffjvarjyijj30jg05k0yr.jpg\" alt=\"Android4.4系统WebView自带缓存路径\"></p>\n<p>可能你注意到了，第一个文件夹是叫Application Cache，我们后面再说它。</p>\n<ul>\n<li>Android 5.1的目录：<code>/data/data/包名/cache/org.chromium.android_webview/</code>下面，如下图所示。</li>\n</ul>\n<p><img src=\"https://ww2.sinaimg.cn/large/006tNc79ly1ffjvztg93zj30jg0a247x.jpg\" alt=\"\"></p>\n<p>但是在5.1系统上，<code>/data/data/包名/app_webview/</code>文件夹依然存在，只是4.4系统上面存储WebView自带缓存的<code>app_webview/cache</code>文件夹不再存在了（注意下App Cache目录还在），如下图所示。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/006tNc79ly1ffjw46ygoqj30jg06443v.jpg\" alt=\"Android5.1系统WebView自带缓存路径\"></p>\n<p>综上所述，WebView自带的浏览器协议支持的缓存，在不同的系统版本上，位置是不一样的。也许除了我root过的4.4、5.1以外，其他版本系统的WebView自带缓存还可能存在于不同的目录里面。</p>\n<p>另外一个是关于<strong>缓存文件的存储格式和索引格式</strong>，在不同的手机上可能也有差别，因为之前看到网上的人都说有叫<strong>webview.db</strong>或者<strong>webviewCache.db</strong>的文件，这个文件呢，还不是在<code>app_webview/cache</code>或者<code>org.chromium.android_webview</code>下面，而是在<code>/data/data/包名/database/</code>里面。但是，我这两台root过的手机都没有看到这种文件，而且我把<code>/data/data/包名/</code>下面所有的db文件都打开看了，并没有发现有存储url记录的table。。</p>\n<p>实际上，以5.1系统为例，我看到了<code>/data/data/包名/cache/org.chromium.android_webview/</code>下面有叫<strong>index</strong>和<strong>/index-dir/the-real-index</strong>的文件，以及一堆名称为<strong>md5+下划线+数字</strong>的文件，上面的图中也可以看得到，这块的原理仍然有些疑问，也希望专业的大神可以解答一下。</p>\n<h1 id=\"四、H5的缓存\"><a href=\"#四、H5的缓存\" class=\"headerlink\" title=\"四、H5的缓存\"></a>四、H5的缓存</h1><p>讲完了WebView自带的缓存，下面讲一下H5里面的App Cache。这个Cache是由开发Web页面的开发者控制的，而不是由Native去控制的，但是Native里面的WebView也需要我们做一下设置才能支持H5的这个特性。</p>\n<h2 id=\"1-工作原理-1\"><a href=\"#1-工作原理-1\" class=\"headerlink\" title=\"1.工作原理\"></a>1.工作原理</h2><p>写Web页面代码时，指定manifest属性即可让页面使用App Cache。通常html页面代码会这么写：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"xxx.appcache\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>xxx.appcache文件用的是相对路径，这时appcache文件的路径是和页面一样的。也可以使用的绝对路径，但是域名要保持和页面一致。</p>\n<p>完整的xxx.appcache文件一般包括了3个section，基本格式如下：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CACHE MANIFEST</span><br><span class=\"line\"><span class=\"meta\"># 2017-05-13 v1.0.0</span></span><br><span class=\"line\">/bridge.js</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"symbol\">NETWORK:</span></span><br><span class=\"line\">*</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"symbol\">FALLBACK:</span></span><br><span class=\"line\">/<span class=\"number\">404.</span>html</span><br></pre></td></tr></table></figure>\n<ul>\n<li>CACHE MANIFEST下面文件就是要被浏览器缓存的文件</li>\n<li>NETWORK下面的文件就是要被加载的文件</li>\n<li>FALLBACK下面的文件是目标页面加载失败时的显示的页面</li>\n</ul>\n<p><strong>AppCache工作的原理：</strong>当一个设置了manifest文件的html页面被加载时，CACHE MANIFEST指定的文件就会被缓存到浏览器的App Cache目录下面。当下次加载这个页面时，会首先应用通过manifest已经缓存过的文件，然后发起一个加载xxx.appcache文件的请求到服务器，如果xxx.appcache文件没有被修改过，那么服务器会返回<code>304 Not Modified</code>给到浏览器，如果xxx.appcache文件被修改过，那么服务器会返回<code>200 OK</code>，并返回新的xxx.appcache文件的内容给浏览器，浏览器收到之后，再把新的xxx.appcache文件中指定的内容加载过来进行缓存。</p>\n<p>可以看到，AppCache缓存需要在每次加载页面时都发出一个xxx.appcache的请求去检查manifest文件是不是有更新（byte by byte）。根据这篇文章（<a href=\"http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=267\" target=\"_blank\" rel=\"noopener\">H5 缓存机制浅析 移动端 Web 加载性能优化</a>）的介绍，AppCache有一些坑的地方，且官方已经不推荐使用了，但目前主流的浏览器依然是支持的。文章里主要提到下面这些坑：</p>\n<ul>\n<li>要更新缓存的文件，需要更新包含它的 manifest 文件，那怕只加一个空格。常用的方法，是修改 manifest 文件注释中的版本号。如：# 2012-02-21 v1.0.0</li>\n<li>被缓存的文件，浏览器是先使用，再通过检查 manifest 文件是否有更新来更新缓存文件。这样缓存文件可能用的不是最新的版本。</li>\n<li>在更新缓存过程中，如果有一个文件更新失败，则整个更新会失败。</li>\n<li>manifest 和引用它的HTML要在相同 HOST。</li>\n<li>manifest 文件中的文件列表，如果是相对路径，则是相对 manifest 文件的相对路径。</li>\n<li>manifest 也有可能更新出错，导致缓存文件更新失败。</li>\n<li>没有缓存的资源在已经缓存的 HTML 中不能加载，即使有网络。例如：[url=]<a href=\"http://appcache-demo.s3-website-us-east-1.amazonaws.com/without-network/[/url\" target=\"_blank\" rel=\"noopener\">http://appcache-demo.s3-website-us-east-1.amazonaws.com/without-network/[/url</a>]</li>\n<li>manifest 文件本身不能被缓存，且 manifest 文件的更新使用的是浏览器缓存机制。所以 manifest 文件的 Cache-Control 缓存时间不能设置太长。</li>\n</ul>\n<h2 id=\"2-WebView如何设置才能支持AppCache\"><a href=\"#2-WebView如何设置才能支持AppCache\" class=\"headerlink\" title=\"2.WebView如何设置才能支持AppCache\"></a>2.WebView如何设置才能支持AppCache</h2><p>WebView默认是没有开启AppCache支持的，需要添加下面这几行代码来设置：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSettings webSettings = webView.getSettings<span class=\"params\">()</span>;</span><br><span class=\"line\">webSettings.<span class=\"keyword\">set</span>AppCacheEnabled<span class=\"params\">(true)</span>;</span><br><span class=\"line\">String cachePath = getApplicationContext<span class=\"params\">()</span><span class=\"string\">.getCacheDir</span><span class=\"params\">()</span><span class=\"string\">.getPath</span><span class=\"params\">()</span>; <span class=\"string\">//</span> 把内部私有缓存目录'<span class=\"string\">/data/data/</span>包名<span class=\"string\">/cache/</span>'作为WebView的AppCache的存储路径</span><br><span class=\"line\">webSettings.<span class=\"keyword\">set</span>AppCachePath<span class=\"params\">(cachePath)</span>;</span><br><span class=\"line\">webSettings.<span class=\"keyword\">set</span>AppCacheMaxSize<span class=\"params\">(5 * 1024 * 1024)</span>;</span><br></pre></td></tr></table></figure>\n<p>注意：WebSettings的setAppCacheEnabled和setAppCachePath都必须要调用才行。</p>\n<h2 id=\"3-存储AppCache的路径\"><a href=\"#3-存储AppCache的路径\" class=\"headerlink\" title=\"3.存储AppCache的路径\"></a>3.存储AppCache的路径</h2><p>按照Android SDK的API说明，setAppCachePath是可以用来设置AppCache路径的，但是我实际测试发现，不管你怎么设置这个路径，设置到应用自己的内部私有目录还是外部SD卡，都无法生效。AppCache缓存文件最终都会存到<code>/data/data/包名/app_webview/cache/Application Cache</code>这个文件夹下面，在上面的Android 4.4和5.1系统目录截图可以看得到，<strong>但是如果你不调用setAppCachePath方法，WebView将不会产生这个目录</strong>。这里有点让我觉得奇怪，我猜测可能从某一个系统版本开始，为了缓存文件的完整性和安全性考虑，SDK实现的时候就吧AppCache缓存目录设置到了内部私有存储。</p>\n<h1 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h1><h2 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h2><p>WebView自带的缓存和AppCache都是可以用来做文件级别的缓存的，基本上比较好地满足对于非覆盖式的js、css等文件更新。</p>\n<h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><ul>\n<li>WebView自带的缓存是是协议层实现的（浏览器内核标准实现，开发者无法改变）；而AppCache是应用层实现的。</li>\n<li>WebView的缓存目录在不同系统上可能是不同的；而对于AppCache而言，AppCache的存储路径虽然有方法设置，但是最终都存储到了一个固定的内部私有目录下。</li>\n<li>WebView自带的缓存可以在缓存生效的时候不用再发HTTP请求；而AppCache一定会发出一个manifest文件的请求。</li>\n<li>WebView自带的缓存可以通过设置CacheMode来改变WebView的缓存机制；而AppCache的缓存策略是由manifest文件控制的，也就是说是由web页面开发者控制的。</li>\n</ul>\n<p>最后说一下，其实很多时候，这两类缓存是共同在工作的，当manifest文件没有控制某些资源加载时，例如我上面写的xxx.appcache文件里，NETWORK section下面用的是*号，意思是所有不缓存的文件都要去网络加载。此时，这些资源就会走到WebView自带的缓存机制去，结合WebView的CacheMode，我们实际上对这些文件进行了一次WebView自带的缓存。搞清楚这两类缓存的原理有利于我们更好的设计自己的页面和App，尽可能减少网络请求，提高App运行效率。</p>"},{"layout":"post","title":"python利用beautifulsoup+selenium自动翻页抓取网页内容","date":"2016-12-11T00:00:00.000Z","_content":"\n# 一、背景\n\n记录一次周末在家速成的爬虫实现之旅。受人之托，想要把这个页面[http://baike.baidu.com/starrank?fr=lemmaxianhua](http://baike.baidu.com/starrank?fr=lemmaxianhua)的明星排行榜爬取下来。用chrome打开一看，其实就1000条记录。然后“右键菜单”->“检查”，看下网页的结构，也不是特别复杂。所以我目测只要用**python**自带的`urllib2`库打开网页，获取html代码，再交给`BeautifulSoup`库解析html代码，应该就可以快速搞定。\n\n<!-- more -->\n\n![webpage](http://ww3.sinaimg.cn/large/006y8lVagw1famy31l1mvj30go0gjwh6.jpg)\n\n但仔细一看，**点击下一页，网页的url没有任何变化**，只是用js去加载了新的数据，然后动态地改变了table里面的数据。这可和本菜菜以前爬的页面可不一样，所以这次要想办法**模拟翻页，然后重新读取新的html代码，再去解析**。\n\n实现翻页可以有两种办法，**第一种是分析js的实现来模拟翻页。**翻页操作实际上js向后台发出了请求，这里肯定是带着跳转的目的页码请求了后台，然后拿到新数据后重新渲染了html的表格部分。这种方法会更加高效，但难度也会更大一些。因为如果你已经能够模拟请求了，那其实相当于你连人家的服务器接口都已经知道了，那么进一步分析下响应就可以拿到结果了，这甚至不需要再去分析html代码了是不是？**第二种比较简单暴力，也是我这里用的方法，那就是模拟点击网页中的下一页按钮，然后重新读取html代码来解析。**\n\n# 二、思路\n\n在前面已经说了，这里把思路流程化：\n\n- 1.打开网页\n- 2.读取当前页面的html代码，解析列表里面的明星名字\n- 3.***模拟***点击“下一页”\n- 4.重复第2步的工作，直到页面里没有“下一页”的按钮\n\n在这里打开网页和读取网页的html代码，是通过`selenium`实现的；\n解析html代码，是通过`beautifulsoup`实现的。\n\n# 三、实现\n\n## 1.准备工作，安装依赖库\n\n- 安装beautifulsoup\n\n在下用的是mac，所以直接easy_install命令行安装。\n\n```\nsudo easy_install beautifulsoup4\n```\n\n- 安装selenium\n\n还是用easy_install命令装。\n\n```\nsudo easy_install selenium\n```\n\n> 这里selenium版本已经到了3.0.2，想要用这个版本的selenium去打开一个网页，需要用到对应的driver。于是下面我还需要安装一个driver。\n\n- 安装chromedirver\n\n我这里用的是homebrew安装的chromediver，安装完成后**大家记得找到chromediver的安装目录**，我们在下面去写代码的时候会用到的。\n\n\n```\nbrew install chromedirver\n```\n\n\n> 注意：mac下有很多软件管理包，除了我的安装方法，用`pip`之类的去安装，或者直接去官网下载安装程序，都是可以的。但是一定要安装上面的3个程序才行。这里我突然有个想法，要是python也有像gradle一样的构建管理工具多好，讲真，今天我安装这几个依赖的library花的时间比写代码还多呢。。\n\n## 2.分析网页\n\n简单贴一段我要爬的网页的部分html代码，里面我用//写了点注释：\n\n```html\n<div class=\"tables-container\" style=\"height: 1417px\">\n// 本周排行榜，这是我要抓的内容\n<div class=\"ranking-table cur\" data-cat=\"thisWeek\">\n    <table>\n         <thead>\n             <tr>\n                 <th style=\"padding-left: 30px; width: 101px\"><img src=\"http://baike.bdimg.com/static/wiki-activity/starRanking/resource/img/trophy-blue_05c0f47.png\">&nbsp;&nbsp;&nbsp;排名</th>\n                 <th style=\"padding-left: 115px; width: 226px\">明星</th>\n                 <th style=\"padding-left: 50px; width: 175px\"><img src=\"http://baike.bdimg.com/static/wiki-activity/starRanking/resource/img/flower-blue_31b8b3b.png\">&nbsp;&nbsp;&nbsp;鲜花数</th>\n                 <th style=\"padding-left: 80px; width: 154px\">TOP粉丝</th>\n             </tr>\n         </thead>\n         <tbody class=\"list-container\">                           \n             <tr>\n                 <td class=\"star-index star-index-0\"><i>1</i></td>\n                 // 这个td标签，star-name的css class是我要抓的内容\n                 <td class=\"star-name\"><a href=\"/subview/3938672/10939278.htm\" target=\"_blank\"><img src=\"https://imgsa.baidu.com/baike/whcrop%3D100%2C100/sign=b5ae35ac11d8bc3ec65d5088edfb9b2f/8d5494eef01f3a29f4da55589125bc315c607c12.jpg\">王俊凯</a></td>\n                 <td class=\"star-score\">\n                     <span>1790892</span>\n                     <a href=\"javascript:;\" class=\"star-score-sendFlower\" data-lemmaid=\"75850\">送花<i></i></a>\n                 </td>\n                     <td class=\"star-fans\">\n                     <p><i>1</i>183*****630</p>\n                     <p><i>2</i>185*****759</p>\n                     <p><i>3</i>wx526298988</p>\n                 </td>\n             </tr>\n             ...此处省略巨量代码...\n         </tbody>\n     </table>\n// 这里是本周排行榜分页的html代码，可以看到一页20个明星，共有50页\n<div class=\"ranking-pager wgt_horPager wgt_horPager_tpl_noEllipsis\" nslog=\"area\" nslog-type=\"20100105\">\n    <a href=\"javascript:;\" class=\"pTag first disabled\">首页</a>\n    <span class=\"separator disabled\"></span>\n    <a href=\"javascript:;\" class=\"pTag prev disabled\"><em>&lt;</em>上一页</a>\n    <span class=\"separator disabled\"></span>\n    <a href=\"javascript:;\" class=\"pTag cur\">1</a>\n    <a href=\"javascript:;\" class=\"pTag\" p-index=\"2\">2</a>\n    <a href=\"javascript:;\" class=\"pTag\" p-index=\"3\">3</a>\n    <a href=\"javascript:;\" class=\"pTag\" p-index=\"4\">4</a>\n    <a href=\"javascript:;\" class=\"pTag\" p-index=\"5\">5</a>\n    <span class=\"separator\"></span>\n    // 这里就是要模拟点击的下一页按钮\n    <a href=\"javascript:;\" class=\"pTag next\" p-index=\"2\">下一页<em>&gt;</em></a>\n    <span class=\"separator\"></span>\n    <a href=\"javascript:;\" class=\"pTag last\" p-index=\"50\">尾页</a></div>\n</div>\n// 下面开始就是“上周排行榜”，html结构和上面完全类似\n<div class=\"ranking-table\" data-cat=\"lastWeek\">\n<table>\n</table>\n...此处再次省略巨量代码...\n```\n\n## 3.完整代码\n\n```\nimport sys\nimport urllib2\nimport time\nfrom bs4 import BeautifulSoup\nfrom selenium import webdriver\n\nreload(sys)\nsys.setdefaultencoding('utf8') # 设置编码\n\nurl = 'http://baike.baidu.com/starrank?fr=lemmaxianhua'\n\n\ndriver = webdriver.Chrome('/usr/local/Cellar/chromedriver/2.20/bin/chromedriver') # 创建一个driver用于打开网页，记得找到brew安装的chromedriver的位置，在创建driver的时候指定这个位置\ndriver.get(url) # 打开网页\n\nname_counter = 1\npage = 0;\nwhile page < 50: # 共50页，这里是手工指定的\n\tsoup = BeautifulSoup(driver.page_source, \"html.parser\")\n\tcurrent_names = soup.select('div.ranking-table') # 选择器用ranking-table css class，可以取出包含本周、上周的两个table的div标签\n\tfor current_name_list in current_names:\n\t\t# print current_name_list['data-cat']\n\t\tif current_name_list['data-cat'] == 'thisWeek': # 这次我只想抓取本周，如果想抓上周，改一下这里为lastWeek即可\n\t\t\tnames = current_name_list.select('td.star-name > a') # beautifulsoup选择器语法\n\t\t\tcounter = 0;\n\t\t\tfor star_name in names:\n\t\t\t\tcounter = counter + 1;\n\t\t\t\tprint star_name.text # 明星的名字是a标签里面的文本，虽然a标签下面除了文本还有一个与文本同级别的img标签，但是.text输出的只是文本而已\n\t\t\t\tname_counter = name_counter + 1;\n\tdriver.find_element_by_xpath(\"//a[contains(text(),'下一页')]\").click() # selenium的xpath用法，找到包含“下一页”的a标签去点击\n\tpage = page + 1\n\ttime.sleep(2) # 睡2秒让网页加载完再去读它的html代码\n\nprint name_counter # 共爬取得明星的名字数量\ndriver.quit()\n\n```\n\n\n# 四、小结\n\n这里只是简单记录一次稍微复杂点的网页爬取的实现思路，关于selenium和beatifulsoup，还有很多的用法，我还没仔细看过。下面是一些参考资料，以后有机会还要多学习一下。\n\n- [Python爬虫利器二之Beautiful Soup的用法](http://cuiqingcai.com/1319.html)：介绍了安装bs的方法，以及不同的parser，如html5、xml有什么区别。\n- [Beautiful Soup 4.4.0 文档](http://beautifulsoup.readthedocs.io/zh_CN/latest/)：其实bs支持不同语言，这次写python就是因为代码少，但是安装依赖确实是麻烦。\n- [selenium官网](http://www.seleniumhq.org/)：selenium其实有官方的IDE，也支持不同的语言。\n\n\n\n","source":"_posts/python利用beautifulsoup+selenium自动翻页抓取网页内容.md","raw":"---\nlayout: post\ntitle: python利用beautifulsoup+selenium自动翻页抓取网页内容\ndate: '2016-12-11'\ntags:\n  - python\n  - 爬虫\ncategories: \n  - 技术\n---\n\n# 一、背景\n\n记录一次周末在家速成的爬虫实现之旅。受人之托，想要把这个页面[http://baike.baidu.com/starrank?fr=lemmaxianhua](http://baike.baidu.com/starrank?fr=lemmaxianhua)的明星排行榜爬取下来。用chrome打开一看，其实就1000条记录。然后“右键菜单”->“检查”，看下网页的结构，也不是特别复杂。所以我目测只要用**python**自带的`urllib2`库打开网页，获取html代码，再交给`BeautifulSoup`库解析html代码，应该就可以快速搞定。\n\n<!-- more -->\n\n![webpage](http://ww3.sinaimg.cn/large/006y8lVagw1famy31l1mvj30go0gjwh6.jpg)\n\n但仔细一看，**点击下一页，网页的url没有任何变化**，只是用js去加载了新的数据，然后动态地改变了table里面的数据。这可和本菜菜以前爬的页面可不一样，所以这次要想办法**模拟翻页，然后重新读取新的html代码，再去解析**。\n\n实现翻页可以有两种办法，**第一种是分析js的实现来模拟翻页。**翻页操作实际上js向后台发出了请求，这里肯定是带着跳转的目的页码请求了后台，然后拿到新数据后重新渲染了html的表格部分。这种方法会更加高效，但难度也会更大一些。因为如果你已经能够模拟请求了，那其实相当于你连人家的服务器接口都已经知道了，那么进一步分析下响应就可以拿到结果了，这甚至不需要再去分析html代码了是不是？**第二种比较简单暴力，也是我这里用的方法，那就是模拟点击网页中的下一页按钮，然后重新读取html代码来解析。**\n\n# 二、思路\n\n在前面已经说了，这里把思路流程化：\n\n- 1.打开网页\n- 2.读取当前页面的html代码，解析列表里面的明星名字\n- 3.***模拟***点击“下一页”\n- 4.重复第2步的工作，直到页面里没有“下一页”的按钮\n\n在这里打开网页和读取网页的html代码，是通过`selenium`实现的；\n解析html代码，是通过`beautifulsoup`实现的。\n\n# 三、实现\n\n## 1.准备工作，安装依赖库\n\n- 安装beautifulsoup\n\n在下用的是mac，所以直接easy_install命令行安装。\n\n```\nsudo easy_install beautifulsoup4\n```\n\n- 安装selenium\n\n还是用easy_install命令装。\n\n```\nsudo easy_install selenium\n```\n\n> 这里selenium版本已经到了3.0.2，想要用这个版本的selenium去打开一个网页，需要用到对应的driver。于是下面我还需要安装一个driver。\n\n- 安装chromedirver\n\n我这里用的是homebrew安装的chromediver，安装完成后**大家记得找到chromediver的安装目录**，我们在下面去写代码的时候会用到的。\n\n\n```\nbrew install chromedirver\n```\n\n\n> 注意：mac下有很多软件管理包，除了我的安装方法，用`pip`之类的去安装，或者直接去官网下载安装程序，都是可以的。但是一定要安装上面的3个程序才行。这里我突然有个想法，要是python也有像gradle一样的构建管理工具多好，讲真，今天我安装这几个依赖的library花的时间比写代码还多呢。。\n\n## 2.分析网页\n\n简单贴一段我要爬的网页的部分html代码，里面我用//写了点注释：\n\n```html\n<div class=\"tables-container\" style=\"height: 1417px\">\n// 本周排行榜，这是我要抓的内容\n<div class=\"ranking-table cur\" data-cat=\"thisWeek\">\n    <table>\n         <thead>\n             <tr>\n                 <th style=\"padding-left: 30px; width: 101px\"><img src=\"http://baike.bdimg.com/static/wiki-activity/starRanking/resource/img/trophy-blue_05c0f47.png\">&nbsp;&nbsp;&nbsp;排名</th>\n                 <th style=\"padding-left: 115px; width: 226px\">明星</th>\n                 <th style=\"padding-left: 50px; width: 175px\"><img src=\"http://baike.bdimg.com/static/wiki-activity/starRanking/resource/img/flower-blue_31b8b3b.png\">&nbsp;&nbsp;&nbsp;鲜花数</th>\n                 <th style=\"padding-left: 80px; width: 154px\">TOP粉丝</th>\n             </tr>\n         </thead>\n         <tbody class=\"list-container\">                           \n             <tr>\n                 <td class=\"star-index star-index-0\"><i>1</i></td>\n                 // 这个td标签，star-name的css class是我要抓的内容\n                 <td class=\"star-name\"><a href=\"/subview/3938672/10939278.htm\" target=\"_blank\"><img src=\"https://imgsa.baidu.com/baike/whcrop%3D100%2C100/sign=b5ae35ac11d8bc3ec65d5088edfb9b2f/8d5494eef01f3a29f4da55589125bc315c607c12.jpg\">王俊凯</a></td>\n                 <td class=\"star-score\">\n                     <span>1790892</span>\n                     <a href=\"javascript:;\" class=\"star-score-sendFlower\" data-lemmaid=\"75850\">送花<i></i></a>\n                 </td>\n                     <td class=\"star-fans\">\n                     <p><i>1</i>183*****630</p>\n                     <p><i>2</i>185*****759</p>\n                     <p><i>3</i>wx526298988</p>\n                 </td>\n             </tr>\n             ...此处省略巨量代码...\n         </tbody>\n     </table>\n// 这里是本周排行榜分页的html代码，可以看到一页20个明星，共有50页\n<div class=\"ranking-pager wgt_horPager wgt_horPager_tpl_noEllipsis\" nslog=\"area\" nslog-type=\"20100105\">\n    <a href=\"javascript:;\" class=\"pTag first disabled\">首页</a>\n    <span class=\"separator disabled\"></span>\n    <a href=\"javascript:;\" class=\"pTag prev disabled\"><em>&lt;</em>上一页</a>\n    <span class=\"separator disabled\"></span>\n    <a href=\"javascript:;\" class=\"pTag cur\">1</a>\n    <a href=\"javascript:;\" class=\"pTag\" p-index=\"2\">2</a>\n    <a href=\"javascript:;\" class=\"pTag\" p-index=\"3\">3</a>\n    <a href=\"javascript:;\" class=\"pTag\" p-index=\"4\">4</a>\n    <a href=\"javascript:;\" class=\"pTag\" p-index=\"5\">5</a>\n    <span class=\"separator\"></span>\n    // 这里就是要模拟点击的下一页按钮\n    <a href=\"javascript:;\" class=\"pTag next\" p-index=\"2\">下一页<em>&gt;</em></a>\n    <span class=\"separator\"></span>\n    <a href=\"javascript:;\" class=\"pTag last\" p-index=\"50\">尾页</a></div>\n</div>\n// 下面开始就是“上周排行榜”，html结构和上面完全类似\n<div class=\"ranking-table\" data-cat=\"lastWeek\">\n<table>\n</table>\n...此处再次省略巨量代码...\n```\n\n## 3.完整代码\n\n```\nimport sys\nimport urllib2\nimport time\nfrom bs4 import BeautifulSoup\nfrom selenium import webdriver\n\nreload(sys)\nsys.setdefaultencoding('utf8') # 设置编码\n\nurl = 'http://baike.baidu.com/starrank?fr=lemmaxianhua'\n\n\ndriver = webdriver.Chrome('/usr/local/Cellar/chromedriver/2.20/bin/chromedriver') # 创建一个driver用于打开网页，记得找到brew安装的chromedriver的位置，在创建driver的时候指定这个位置\ndriver.get(url) # 打开网页\n\nname_counter = 1\npage = 0;\nwhile page < 50: # 共50页，这里是手工指定的\n\tsoup = BeautifulSoup(driver.page_source, \"html.parser\")\n\tcurrent_names = soup.select('div.ranking-table') # 选择器用ranking-table css class，可以取出包含本周、上周的两个table的div标签\n\tfor current_name_list in current_names:\n\t\t# print current_name_list['data-cat']\n\t\tif current_name_list['data-cat'] == 'thisWeek': # 这次我只想抓取本周，如果想抓上周，改一下这里为lastWeek即可\n\t\t\tnames = current_name_list.select('td.star-name > a') # beautifulsoup选择器语法\n\t\t\tcounter = 0;\n\t\t\tfor star_name in names:\n\t\t\t\tcounter = counter + 1;\n\t\t\t\tprint star_name.text # 明星的名字是a标签里面的文本，虽然a标签下面除了文本还有一个与文本同级别的img标签，但是.text输出的只是文本而已\n\t\t\t\tname_counter = name_counter + 1;\n\tdriver.find_element_by_xpath(\"//a[contains(text(),'下一页')]\").click() # selenium的xpath用法，找到包含“下一页”的a标签去点击\n\tpage = page + 1\n\ttime.sleep(2) # 睡2秒让网页加载完再去读它的html代码\n\nprint name_counter # 共爬取得明星的名字数量\ndriver.quit()\n\n```\n\n\n# 四、小结\n\n这里只是简单记录一次稍微复杂点的网页爬取的实现思路，关于selenium和beatifulsoup，还有很多的用法，我还没仔细看过。下面是一些参考资料，以后有机会还要多学习一下。\n\n- [Python爬虫利器二之Beautiful Soup的用法](http://cuiqingcai.com/1319.html)：介绍了安装bs的方法，以及不同的parser，如html5、xml有什么区别。\n- [Beautiful Soup 4.4.0 文档](http://beautifulsoup.readthedocs.io/zh_CN/latest/)：其实bs支持不同语言，这次写python就是因为代码少，但是安装依赖确实是麻烦。\n- [selenium官网](http://www.seleniumhq.org/)：selenium其实有官方的IDE，也支持不同的语言。\n\n\n\n","slug":"python利用beautifulsoup+selenium自动翻页抓取网页内容","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8eb0016mtsx8g4sgtif","content":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>记录一次周末在家速成的爬虫实现之旅。受人之托，想要把这个页面<a href=\"http://baike.baidu.com/starrank?fr=lemmaxianhua\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/starrank?fr=lemmaxianhua</a>的明星排行榜爬取下来。用chrome打开一看，其实就1000条记录。然后“右键菜单”-&gt;“检查”，看下网页的结构，也不是特别复杂。所以我目测只要用<strong>python</strong>自带的<code>urllib2</code>库打开网页，获取html代码，再交给<code>BeautifulSoup</code>库解析html代码，应该就可以快速搞定。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://ww3.sinaimg.cn/large/006y8lVagw1famy31l1mvj30go0gjwh6.jpg\" alt=\"webpage\"></p>\n<p>但仔细一看，<strong>点击下一页，网页的url没有任何变化</strong>，只是用js去加载了新的数据，然后动态地改变了table里面的数据。这可和本菜菜以前爬的页面可不一样，所以这次要想办法<strong>模拟翻页，然后重新读取新的html代码，再去解析</strong>。</p>\n<p>实现翻页可以有两种办法，<strong>第一种是分析js的实现来模拟翻页。</strong>翻页操作实际上js向后台发出了请求，这里肯定是带着跳转的目的页码请求了后台，然后拿到新数据后重新渲染了html的表格部分。这种方法会更加高效，但难度也会更大一些。因为如果你已经能够模拟请求了，那其实相当于你连人家的服务器接口都已经知道了，那么进一步分析下响应就可以拿到结果了，这甚至不需要再去分析html代码了是不是？<strong>第二种比较简单暴力，也是我这里用的方法，那就是模拟点击网页中的下一页按钮，然后重新读取html代码来解析。</strong></p>\n<h1 id=\"二、思路\"><a href=\"#二、思路\" class=\"headerlink\" title=\"二、思路\"></a>二、思路</h1><p>在前面已经说了，这里把思路流程化：</p>\n<ul>\n<li>1.打开网页</li>\n<li>2.读取当前页面的html代码，解析列表里面的明星名字</li>\n<li>3.<strong><em>模拟</em></strong>点击“下一页”</li>\n<li>4.重复第2步的工作，直到页面里没有“下一页”的按钮</li>\n</ul>\n<p>在这里打开网页和读取网页的html代码，是通过<code>selenium</code>实现的；<br>解析html代码，是通过<code>beautifulsoup</code>实现的。</p>\n<h1 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h1><h2 id=\"1-准备工作，安装依赖库\"><a href=\"#1-准备工作，安装依赖库\" class=\"headerlink\" title=\"1.准备工作，安装依赖库\"></a>1.准备工作，安装依赖库</h2><ul>\n<li>安装beautifulsoup</li>\n</ul>\n<p>在下用的是mac，所以直接easy_install命令行安装。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sudo</span> easy_install beautifulsoup4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装selenium</li>\n</ul>\n<p>还是用easy_install命令装。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sudo</span> easy_install selenium</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里selenium版本已经到了3.0.2，想要用这个版本的selenium去打开一个网页，需要用到对应的driver。于是下面我还需要安装一个driver。</p>\n</blockquote>\n<ul>\n<li>安装chromedirver</li>\n</ul>\n<p>我这里用的是homebrew安装的chromediver，安装完成后<strong>大家记得找到chromediver的安装目录</strong>，我们在下面去写代码的时候会用到的。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>chromedirver</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：mac下有很多软件管理包，除了我的安装方法，用<code>pip</code>之类的去安装，或者直接去官网下载安装程序，都是可以的。但是一定要安装上面的3个程序才行。这里我突然有个想法，要是python也有像gradle一样的构建管理工具多好，讲真，今天我安装这几个依赖的library花的时间比写代码还多呢。。</p>\n</blockquote>\n<h2 id=\"2-分析网页\"><a href=\"#2-分析网页\" class=\"headerlink\" title=\"2.分析网页\"></a>2.分析网页</h2><p>简单贴一段我要爬的网页的部分html代码，里面我用//写了点注释：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tables-container\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 1417px\"</span>&gt;</span></span><br><span class=\"line\">// 本周排行榜，这是我要抓的内容</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ranking-table cur\"</span> <span class=\"attr\">data-cat</span>=<span class=\"string\">\"thisWeek\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-left: 30px; width: 101px\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://baike.bdimg.com/static/wiki-activity/starRanking/resource/img/trophy-blue_05c0f47.png\"</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;排名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-left: 115px; width: 226px\"</span>&gt;</span>明星<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-left: 50px; width: 175px\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://baike.bdimg.com/static/wiki-activity/starRanking/resource/img/flower-blue_31b8b3b.png\"</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;鲜花数<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-left: 80px; width: 154px\"</span>&gt;</span>TOP粉丝<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">tbody</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-container\"</span>&gt;</span>                           </span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"star-index star-index-0\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                 // 这个td标签，star-name的css class是我要抓的内容</span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"star-name\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/subview/3938672/10939278.htm\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://imgsa.baidu.com/baike/whcrop%3D100%2C100/sign=b5ae35ac11d8bc3ec65d5088edfb9b2f/8d5494eef01f3a29f4da55589125bc315c607c12.jpg\"</span>&gt;</span>王俊凯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"star-score\"</span>&gt;</span></span><br><span class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>1790892<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"star-score-sendFlower\"</span> <span class=\"attr\">data-lemmaid</span>=<span class=\"string\">\"75850\"</span>&gt;</span>送花<span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"star-fans\"</span>&gt;</span></span><br><span class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>183*****630<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>185*****759<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>wx526298988<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">             ...此处省略巨量代码...</span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">// 这里是本周排行榜分页的html代码，可以看到一页20个明星，共有50页</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ranking-pager wgt_horPager wgt_horPager_tpl_noEllipsis\"</span> <span class=\"attr\">nslog</span>=<span class=\"string\">\"area\"</span> <span class=\"attr\">nslog-type</span>=<span class=\"string\">\"20100105\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag first disabled\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"separator disabled\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag prev disabled\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>&amp;lt;<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>上一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"separator disabled\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag cur\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag\"</span> <span class=\"attr\">p-index</span>=<span class=\"string\">\"2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag\"</span> <span class=\"attr\">p-index</span>=<span class=\"string\">\"3\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag\"</span> <span class=\"attr\">p-index</span>=<span class=\"string\">\"4\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag\"</span> <span class=\"attr\">p-index</span>=<span class=\"string\">\"5\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"separator\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    // 这里就是要模拟点击的下一页按钮</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag next\"</span> <span class=\"attr\">p-index</span>=<span class=\"string\">\"2\"</span>&gt;</span>下一页<span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"separator\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag last\"</span> <span class=\"attr\">p-index</span>=<span class=\"string\">\"50\"</span>&gt;</span>尾页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">// 下面开始就是“上周排行榜”，html结构和上面完全类似</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ranking-table\"</span> <span class=\"attr\">data-cat</span>=<span class=\"string\">\"lastWeek\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">...此处再次省略巨量代码...</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-完整代码\"><a href=\"#3-完整代码\" class=\"headerlink\" title=\"3.完整代码\"></a>3.完整代码</h2><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf8'</span>) <span class=\"comment\"># 设置编码</span></span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">'http://baike.baidu.com/starrank?fr=lemmaxianhua'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">driver = webdriver.Chrome(<span class=\"string\">'/usr/local/Cellar/chromedriver/2.20/bin/chromedriver'</span>) <span class=\"comment\"># 创建一个driver用于打开网页，记得找到brew安装的chromedriver的位置，在创建driver的时候指定这个位置</span></span><br><span class=\"line\">driver.get(url) <span class=\"comment\"># 打开网页</span></span><br><span class=\"line\"></span><br><span class=\"line\">name_counter = <span class=\"number\">1</span></span><br><span class=\"line\">page = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> page &lt; <span class=\"number\">50</span>: <span class=\"comment\"># 共50页，这里是手工指定的</span></span><br><span class=\"line\">\tsoup = BeautifulSoup(driver.page_source, <span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">\tcurrent_names = soup.select(<span class=\"string\">'div.ranking-table'</span>) <span class=\"comment\"># 选择器用ranking-table css class，可以取出包含本周、上周的两个table的div标签</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> current_name_list <span class=\"keyword\">in</span> current_names:</span><br><span class=\"line\">\t\t<span class=\"comment\"># print current_name_list['data-cat']</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> current_name_list[<span class=\"string\">'data-cat'</span>] == <span class=\"string\">'thisWeek'</span>: <span class=\"comment\"># 这次我只想抓取本周，如果想抓上周，改一下这里为lastWeek即可</span></span><br><span class=\"line\">\t\t\tnames = current_name_list.select(<span class=\"string\">'td.star-name &gt; a'</span>) <span class=\"comment\"># beautifulsoup选择器语法</span></span><br><span class=\"line\">\t\t\tcounter = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> star_name <span class=\"keyword\">in</span> names:</span><br><span class=\"line\">\t\t\t\tcounter = counter + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span> star_name.text <span class=\"comment\"># 明星的名字是a标签里面的文本，虽然a标签下面除了文本还有一个与文本同级别的img标签，但是.text输出的只是文本而已</span></span><br><span class=\"line\">\t\t\t\tname_counter = name_counter + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tdriver.find_element_by_xpath(<span class=\"string\">\"//a[contains(text(),'下一页')]\"</span>).click() <span class=\"comment\"># selenium的xpath用法，找到包含“下一页”的a标签去点击</span></span><br><span class=\"line\">\tpage = page + <span class=\"number\">1</span></span><br><span class=\"line\">\ttime.sleep(<span class=\"number\">2</span>) <span class=\"comment\"># 睡2秒让网页加载完再去读它的html代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> name_counter <span class=\"comment\"># 共爬取得明星的名字数量</span></span><br><span class=\"line\">driver.quit()</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、小结\"><a href=\"#四、小结\" class=\"headerlink\" title=\"四、小结\"></a>四、小结</h1><p>这里只是简单记录一次稍微复杂点的网页爬取的实现思路，关于selenium和beatifulsoup，还有很多的用法，我还没仔细看过。下面是一些参考资料，以后有机会还要多学习一下。</p>\n<ul>\n<li><a href=\"http://cuiqingcai.com/1319.html\" target=\"_blank\" rel=\"noopener\">Python爬虫利器二之Beautiful Soup的用法</a>：介绍了安装bs的方法，以及不同的parser，如html5、xml有什么区别。</li>\n<li><a href=\"http://beautifulsoup.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener\">Beautiful Soup 4.4.0 文档</a>：其实bs支持不同语言，这次写python就是因为代码少，但是安装依赖确实是麻烦。</li>\n<li><a href=\"http://www.seleniumhq.org/\" target=\"_blank\" rel=\"noopener\">selenium官网</a>：selenium其实有官方的IDE，也支持不同的语言。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>记录一次周末在家速成的爬虫实现之旅。受人之托，想要把这个页面<a href=\"http://baike.baidu.com/starrank?fr=lemmaxianhua\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/starrank?fr=lemmaxianhua</a>的明星排行榜爬取下来。用chrome打开一看，其实就1000条记录。然后“右键菜单”-&gt;“检查”，看下网页的结构，也不是特别复杂。所以我目测只要用<strong>python</strong>自带的<code>urllib2</code>库打开网页，获取html代码，再交给<code>BeautifulSoup</code>库解析html代码，应该就可以快速搞定。</p>","more":"<p><img src=\"http://ww3.sinaimg.cn/large/006y8lVagw1famy31l1mvj30go0gjwh6.jpg\" alt=\"webpage\"></p>\n<p>但仔细一看，<strong>点击下一页，网页的url没有任何变化</strong>，只是用js去加载了新的数据，然后动态地改变了table里面的数据。这可和本菜菜以前爬的页面可不一样，所以这次要想办法<strong>模拟翻页，然后重新读取新的html代码，再去解析</strong>。</p>\n<p>实现翻页可以有两种办法，<strong>第一种是分析js的实现来模拟翻页。</strong>翻页操作实际上js向后台发出了请求，这里肯定是带着跳转的目的页码请求了后台，然后拿到新数据后重新渲染了html的表格部分。这种方法会更加高效，但难度也会更大一些。因为如果你已经能够模拟请求了，那其实相当于你连人家的服务器接口都已经知道了，那么进一步分析下响应就可以拿到结果了，这甚至不需要再去分析html代码了是不是？<strong>第二种比较简单暴力，也是我这里用的方法，那就是模拟点击网页中的下一页按钮，然后重新读取html代码来解析。</strong></p>\n<h1 id=\"二、思路\"><a href=\"#二、思路\" class=\"headerlink\" title=\"二、思路\"></a>二、思路</h1><p>在前面已经说了，这里把思路流程化：</p>\n<ul>\n<li>1.打开网页</li>\n<li>2.读取当前页面的html代码，解析列表里面的明星名字</li>\n<li>3.<strong><em>模拟</em></strong>点击“下一页”</li>\n<li>4.重复第2步的工作，直到页面里没有“下一页”的按钮</li>\n</ul>\n<p>在这里打开网页和读取网页的html代码，是通过<code>selenium</code>实现的；<br>解析html代码，是通过<code>beautifulsoup</code>实现的。</p>\n<h1 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h1><h2 id=\"1-准备工作，安装依赖库\"><a href=\"#1-准备工作，安装依赖库\" class=\"headerlink\" title=\"1.准备工作，安装依赖库\"></a>1.准备工作，安装依赖库</h2><ul>\n<li>安装beautifulsoup</li>\n</ul>\n<p>在下用的是mac，所以直接easy_install命令行安装。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sudo</span> easy_install beautifulsoup4</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装selenium</li>\n</ul>\n<p>还是用easy_install命令装。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sudo</span> easy_install selenium</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里selenium版本已经到了3.0.2，想要用这个版本的selenium去打开一个网页，需要用到对应的driver。于是下面我还需要安装一个driver。</p>\n</blockquote>\n<ul>\n<li>安装chromedirver</li>\n</ul>\n<p>我这里用的是homebrew安装的chromediver，安装完成后<strong>大家记得找到chromediver的安装目录</strong>，我们在下面去写代码的时候会用到的。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>chromedirver</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：mac下有很多软件管理包，除了我的安装方法，用<code>pip</code>之类的去安装，或者直接去官网下载安装程序，都是可以的。但是一定要安装上面的3个程序才行。这里我突然有个想法，要是python也有像gradle一样的构建管理工具多好，讲真，今天我安装这几个依赖的library花的时间比写代码还多呢。。</p>\n</blockquote>\n<h2 id=\"2-分析网页\"><a href=\"#2-分析网页\" class=\"headerlink\" title=\"2.分析网页\"></a>2.分析网页</h2><p>简单贴一段我要爬的网页的部分html代码，里面我用//写了点注释：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tables-container\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height: 1417px\"</span>&gt;</span></span><br><span class=\"line\">// 本周排行榜，这是我要抓的内容</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ranking-table cur\"</span> <span class=\"attr\">data-cat</span>=<span class=\"string\">\"thisWeek\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-left: 30px; width: 101px\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://baike.bdimg.com/static/wiki-activity/starRanking/resource/img/trophy-blue_05c0f47.png\"</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;排名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-left: 115px; width: 226px\"</span>&gt;</span>明星<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-left: 50px; width: 175px\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://baike.bdimg.com/static/wiki-activity/starRanking/resource/img/flower-blue_31b8b3b.png\"</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;鲜花数<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">style</span>=<span class=\"string\">\"padding-left: 80px; width: 154px\"</span>&gt;</span>TOP粉丝<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">tbody</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-container\"</span>&gt;</span>                           </span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"star-index star-index-0\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                 // 这个td标签，star-name的css class是我要抓的内容</span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"star-name\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/subview/3938672/10939278.htm\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://imgsa.baidu.com/baike/whcrop%3D100%2C100/sign=b5ae35ac11d8bc3ec65d5088edfb9b2f/8d5494eef01f3a29f4da55589125bc315c607c12.jpg\"</span>&gt;</span>王俊凯<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"star-score\"</span>&gt;</span></span><br><span class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>1790892<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"star-score-sendFlower\"</span> <span class=\"attr\">data-lemmaid</span>=<span class=\"string\">\"75850\"</span>&gt;</span>送花<span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">class</span>=<span class=\"string\">\"star-fans\"</span>&gt;</span></span><br><span class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>183*****630<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>185*****759<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                     <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>wx526298988<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">             ...此处省略巨量代码...</span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">// 这里是本周排行榜分页的html代码，可以看到一页20个明星，共有50页</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ranking-pager wgt_horPager wgt_horPager_tpl_noEllipsis\"</span> <span class=\"attr\">nslog</span>=<span class=\"string\">\"area\"</span> <span class=\"attr\">nslog-type</span>=<span class=\"string\">\"20100105\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag first disabled\"</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"separator disabled\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag prev disabled\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>&amp;lt;<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>上一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"separator disabled\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag cur\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag\"</span> <span class=\"attr\">p-index</span>=<span class=\"string\">\"2\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag\"</span> <span class=\"attr\">p-index</span>=<span class=\"string\">\"3\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag\"</span> <span class=\"attr\">p-index</span>=<span class=\"string\">\"4\"</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag\"</span> <span class=\"attr\">p-index</span>=<span class=\"string\">\"5\"</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"separator\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    // 这里就是要模拟点击的下一页按钮</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag next\"</span> <span class=\"attr\">p-index</span>=<span class=\"string\">\"2\"</span>&gt;</span>下一页<span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>&amp;gt;<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"separator\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pTag last\"</span> <span class=\"attr\">p-index</span>=<span class=\"string\">\"50\"</span>&gt;</span>尾页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">// 下面开始就是“上周排行榜”，html结构和上面完全类似</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ranking-table\"</span> <span class=\"attr\">data-cat</span>=<span class=\"string\">\"lastWeek\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">...此处再次省略巨量代码...</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-完整代码\"><a href=\"#3-完整代码\" class=\"headerlink\" title=\"3.完整代码\"></a>3.完整代码</h2><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf8'</span>) <span class=\"comment\"># 设置编码</span></span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">'http://baike.baidu.com/starrank?fr=lemmaxianhua'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">driver = webdriver.Chrome(<span class=\"string\">'/usr/local/Cellar/chromedriver/2.20/bin/chromedriver'</span>) <span class=\"comment\"># 创建一个driver用于打开网页，记得找到brew安装的chromedriver的位置，在创建driver的时候指定这个位置</span></span><br><span class=\"line\">driver.get(url) <span class=\"comment\"># 打开网页</span></span><br><span class=\"line\"></span><br><span class=\"line\">name_counter = <span class=\"number\">1</span></span><br><span class=\"line\">page = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> page &lt; <span class=\"number\">50</span>: <span class=\"comment\"># 共50页，这里是手工指定的</span></span><br><span class=\"line\">\tsoup = BeautifulSoup(driver.page_source, <span class=\"string\">\"html.parser\"</span>)</span><br><span class=\"line\">\tcurrent_names = soup.select(<span class=\"string\">'div.ranking-table'</span>) <span class=\"comment\"># 选择器用ranking-table css class，可以取出包含本周、上周的两个table的div标签</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> current_name_list <span class=\"keyword\">in</span> current_names:</span><br><span class=\"line\">\t\t<span class=\"comment\"># print current_name_list['data-cat']</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> current_name_list[<span class=\"string\">'data-cat'</span>] == <span class=\"string\">'thisWeek'</span>: <span class=\"comment\"># 这次我只想抓取本周，如果想抓上周，改一下这里为lastWeek即可</span></span><br><span class=\"line\">\t\t\tnames = current_name_list.select(<span class=\"string\">'td.star-name &gt; a'</span>) <span class=\"comment\"># beautifulsoup选择器语法</span></span><br><span class=\"line\">\t\t\tcounter = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> star_name <span class=\"keyword\">in</span> names:</span><br><span class=\"line\">\t\t\t\tcounter = counter + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span> star_name.text <span class=\"comment\"># 明星的名字是a标签里面的文本，虽然a标签下面除了文本还有一个与文本同级别的img标签，但是.text输出的只是文本而已</span></span><br><span class=\"line\">\t\t\t\tname_counter = name_counter + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tdriver.find_element_by_xpath(<span class=\"string\">\"//a[contains(text(),'下一页')]\"</span>).click() <span class=\"comment\"># selenium的xpath用法，找到包含“下一页”的a标签去点击</span></span><br><span class=\"line\">\tpage = page + <span class=\"number\">1</span></span><br><span class=\"line\">\ttime.sleep(<span class=\"number\">2</span>) <span class=\"comment\"># 睡2秒让网页加载完再去读它的html代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> name_counter <span class=\"comment\"># 共爬取得明星的名字数量</span></span><br><span class=\"line\">driver.quit()</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、小结\"><a href=\"#四、小结\" class=\"headerlink\" title=\"四、小结\"></a>四、小结</h1><p>这里只是简单记录一次稍微复杂点的网页爬取的实现思路，关于selenium和beatifulsoup，还有很多的用法，我还没仔细看过。下面是一些参考资料，以后有机会还要多学习一下。</p>\n<ul>\n<li><a href=\"http://cuiqingcai.com/1319.html\" target=\"_blank\" rel=\"noopener\">Python爬虫利器二之Beautiful Soup的用法</a>：介绍了安装bs的方法，以及不同的parser，如html5、xml有什么区别。</li>\n<li><a href=\"http://beautifulsoup.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener\">Beautiful Soup 4.4.0 文档</a>：其实bs支持不同语言，这次写python就是因为代码少，但是安装依赖确实是麻烦。</li>\n<li><a href=\"http://www.seleniumhq.org/\" target=\"_blank\" rel=\"noopener\">selenium官网</a>：selenium其实有官方的IDE，也支持不同的语言。</li>\n</ul>"},{"layout":"post","title":"JS埋点技术分析","date":"2017-12-24T00:00:00.000Z","_content":"\n## 一、背景\n\n[上一篇博客](http://unclechen.github.io/2017/12/18/Android%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/)分析了Android上的埋点SDK技术原理，这次我看看Web页面上的埋点。Web页面上的埋点主要通过JS完成，在JS里面同样有代码埋点、全埋点、可视化埋点三种方案，如果对这几种方案的概念不了解可以看下上一篇博客。由于[mixpanel-js](https://github.com/mixpanel/mixpanel-js)和[Sensors Analytics JavaScript SDK](https://github.com/sensorsdata/sa-sdk-javascript)都开源了自己的SDK，就以它们为例进行分析。\n\n<!-- more -->\n\n## 二、代码埋点\n\n以Mixpanel为例（源码位于`/src/mixpanel-core.js`），看一下里面的实现。\n\n### 2.1 基本用法\n\n埋点之前，需要在head部分嵌入SDK，并调用SDK的初始化接口。以Mixpanel为例，官方介入文档提供的加载、初始化SDK代码如下：\n\n```\n<!-- start Mixpanel --><script type=\"text/javascript\">(function(e,a){if(!a.__SV){var b=window;try{var c,l,i,j=b.location,g=j.hash;c=function(a,b){return(l=a.match(RegExp(b+\"=([^&]*)\")))?l[1]:null};g&&c(g,\"state\")&&(i=JSON.parse(decodeURIComponent(c(g,\"state\"))),\"mpeditor\"===i.action&&(b.sessionStorage.setItem(\"_mpcehash\",g),history.replaceState(i.desiredHash||\"\",e.title,j.pathname+j.search)))}catch(m){}var k,h;window.mixpanel=a;a._i=[];a.init=function(b,c,f){function e(b,a){var c=a.split(\".\");2==c.length&&(b=b[c[0]],a=c[1]);b[a]=function(){b.push([a].concat(Array.prototype.slice.call(arguments,\n0)))}}var d=a;\"undefined\"!==typeof f?d=a[f]=[]:f=\"mixpanel\";d.people=d.people||[];d.toString=function(b){var a=\"mixpanel\";\"mixpanel\"!==f&&(a+=\".\"+f);b||(a+=\" (stub)\");return a};d.people.toString=function(){return d.toString(1)+\".people (stub)\"};k=\"disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user\".split(\" \");\nfor(h=0;h<k.length;h++)e(d,k[h]);a._i.push([b,c,f])};a.__SV=1.2;b=e.createElement(\"script\");b.type=\"text/javascript\";b.async=!0;b.src=\"undefined\"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:\"file:\"===e.location.protocol&&\"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\".match(/^\\/\\//)?\"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\":\"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\";c=e.getElementsByTagName(\"script\")[0];c.parentNode.insertBefore(b,c)}})(document,window.mixpanel||[]);\nmixpanel.init(\"YOUR TOKEN\");</script><!-- end Mixpanel -->\n```\n\n这是一段立即执行的js代码，作用通常是去异步加载真正的JS SDK，然后调用SDK的初始化接口init方法，完成初始化的操作。\n\n初始化的核心代码为\n\n```js\nmixpanel.init('YOUR TOKEN', { your: 'config' }, 'library_name')\n```\n\n也可以简写为\n\n```js\nmixpanel.init(\"YOUR TOKEN\")\n```\n\n\n看下init方里面几个参数的含义：\n\n- 第一个参数是你在后台注册的app token\n- 第二个参数是SDK的配置，传入了一堆key-value，如果不传，SDK内部也有个默认配置，长下面这样：\n\n```js\nvar DEFAULT_CONFIG = {\n    'api_host': HTTP_PROTOCOL + 'api.mixpanel.com',\n    'app_host': HTTP_PROTOCOL + 'mixpanel.com',\n    'autotrack': true, // 是否打开全埋点监测\n    'cdn': HTTP_PROTOCOL + 'cdn.mxpnl.com',\n    'cross_subdomain_cookie': true,\n    'persistence': 'cookie',\n    'persistence_name': '',\n    'cookie_name': '',\n    'loaded': function() {},\n    'store_google': true,\n    'save_referrer': true,\n    'test': false,\n    'verbose': false,\n    'img': false,\n    'track_pageview': true,\n    'debug': false,\n    'track_links_timeout': 300,\n    'cookie_expiration': 365,\n    'upgrade': false,\n    'disable_persistence': false,\n    'disable_cookie': false,\n    'secure_cookie': false,\n    'ip': true,\n    'property_blacklist': []\n};\n```\n\n- 第三个参数是SDK全局变量名\n\n> Mixpanel接入文档：[https://mixpanel.com/help/reference/javascript](https://mixpanel.com/help/reference/javascript)\n\n### 2.2 上报的基本实现\n\n代码埋点的方式通常都会被封装成类似`track(eventName, properties)`的接口，例如在Mixpanel中，可以用`mixpanel.track(\"Played song\", {\"genre\": \"hip-hop\"});`来上报事件。\n\n这里是整个SDK中最重要的地方，使用频率也是最高的。代码位于`/src/mixpanel-core.js`里面，先撇开复杂的逻辑和条件控制，看一下track的基本实现，我稍微加了点注释：\n\n```js\n//  track方法实现\nMixpanelLib.prototype.track = function(event_name, properties, callback) {\n    // 各种边界判断\n    ...\n    // 获取一些公共参数，和用户传入的properties一起encode\n    var truncated_data = _.truncate(data, 255);\n    var json_data = _.JSONEncode(truncated_data);\n    var encoded_data = _.base64Encode(json_data);\n    console.log('MIXPANEL REQUEST:');\n    console.log(truncated_data);\n    // 调用_send_request发送请求\n    this._send_request(\n        this.get_config('api_host') + '/track/',\n        { 'data': encoded_data },\n        this._prepare_callback(callback, truncated_data)\n    );\n    return truncated_data;\n};\n\n// 发送请求的实现，主要用的是XMLHttpRequest，如果浏览器不支持XMLHttpRequest，那么用动态添加img/script标签的方式\nMixpanelLib.prototype._send_request = function(url, data, callback) {\n    // 一些特殊情况的处理\n    ...\n    if ('img' in data) {\n        var img = document.createElement('img');\n        img.src = url;\n        document.body.appendChild(img);\n    } else if (USE_XHR) {\n        try {\n            var req = new XMLHttpRequest();\n            req.open('GET', url, true);\n            // send the mp_optout cookie\n            // withCredentials cannot be modified until after calling .open on Android and Mobile Safari\n            req.withCredentials = true;\n            req.onreadystatechange = function () {\n                if (req.readyState === 4) { // XMLHttpRequest.DONE == 4, except in safari 4\n                    if (req.status === 200) {\n                        if (callback) {\n                            if (verbose_mode) {\n                                callback(_.JSONDecode(req.responseText));\n                            } else {\n                                callback(Number(req.responseText));\n                            }\n                        }\n                    } else {\n                        var error = 'Bad HTTP status: ' + req.status + ' ' + req.statusText;\n                        console.error(error);\n                        if (callback) {\n                            if (verbose_mode) {\n                                callback({status: 0, error: error});\n                            } else {\n                                callback(0);\n                            }\n                        }\n                    }\n                }\n            };\n            req.send(null); // 发送异步请求\n        } catch (e) {\n            console.error(e);\n        }\n    } else {\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.src = url;\n        var s = document.getElementsByTagName('script')[0];\n        s.parentNode.insertBefore(script, s);\n    }\n};\n```\n\n上面就是事件上报代码的核心实现。但是由于Web应用自身的一些特性，比如在追踪页面跳转行为（链接的点击、表单的提交等）时，为了防止数据发送不及时导致的数据丢失，SDK中提供一些诸如`track_links`和`track_forms`特殊方法，这些方法内部用的其实是setTimeout或者等待服务器返回结果之后再让页面跳转。\n\n## 三、全埋点\n\nMixpanel和神策都提供了名为**“AutoTrack”**的方案，只需要在初始化SDK的时候，传入一个参数即可打开这个功能。JS SDK可以自动监测网页中所有的点击、表单submit等事件，这和AndroidSDK里面监听所有按钮的点击有些类似。\n\n### 3.1 自动监测的元素、事件类型\n\n- **神策JS：**设置AutoTrack之后，SDK就会自动追踪页面上的按钮(`a`、`button`、`input`) 这种html标签类型的点击情况，一旦页面某一个按钮发生了点击行为，SDK就会去采集此按钮的一些信息，例如: 这个按钮的标签类型，这个按钮的文本内容，这个按钮的`name`，这个按钮的`id`、`class`名，还有一些按钮特有的属性如`href`等。\n\n- **MixpanelJS：**设置AutoTrack之后，SDK会监测页面上的所有`form表单`、`input标签`、`select和textarea标签`产生的`submit`、`change`、`click`事件，并采集这些标签上的属性一起上报。\n\n### 3.2 全埋点监测的实现\n\n以Mixpanel为例，在`/src/autotrack.js`代码中，把几个关键的方法扣出来看一下（不要问我为什么以Mixpanel为例，因为代码少一些。。。）。\n\n当SDK初始化的时候，会执行autotrack里面的`_addDomEventHandlers`方法，给整个document的`submit`、`change`、`click`事件设置监听器。当监听到这几类事件时，会执行`_trackEvent`方法。\n\n直接看代码，我给代码里面加了一点注释，来说明自动监测上报的过程。\n\n```js\n// SDK初始化时，通过register_event设置需要监听了submit、change、click这3类事件\n// Mixpanel的js sdk代码里面自己封装了一个underscore模块，里面有一些工具方法\n_addDomEventHandlers: function(instance) {\n        var handler = _.bind(function(e) {\n            e = e || window.event;\n            this._trackEvent(e, instance);\n        }, this);\n        _.register_event(document, 'submit', handler, false, true);\n        _.register_event(document, 'change', handler, false, true);\n        _.register_event(document, 'click', handler, false, true);\n    },\n\n// register_event的实现，优先采用addEventListener的方式，如果浏览器不支持会尝试使用onXXX的方式\nvar register_event = function(element, type, handler, oldSchool, useCapture) {\n        if (!element) {\n            console.error('No valid element provided to register_event');\n            return;\n        }\n        if (element.addEventListener && !oldSchool) {\n            element.addEventListener(type, handler, !!useCapture);\n        } else {\n            var ontype = 'on' + type;\n            var old_handler = element[ontype]; // can be undefined\n            element[ontype] = makeHandler(element, handler, old_handler);\n        }\n    };\n\n// 监听到事件发生后，调用_trackEvent方法来上报\n_trackEvent: function(e, instance) {\n        // 首先找到这个事件的target\n        var target = this._getEventTarget(e);\n        if (target.nodeType === TEXT_NODE) {\n            target = target.parentNode;\n        }\n        // 然后判断是不是autotrack要监测的事件，如果不是的话，啥也不干直接返回。\n        if (this._shouldTrackDomEvent(target, e)) {\n            // 如果满足监测条件，那么从当前标签开始，向上追溯到body标签，并记录这条路径上所有的元素到一个数组中\n            var targetElementList = [target];\n            var curEl = target;\n            while (curEl.parentNode && !this._isTag(curEl, 'body')) {\n                targetElementList.push(curEl.parentNode);\n                curEl = curEl.parentNode;\n            }\n            // 按照刚才记录的路径开始遍历（相当于自底向上）\n            var elementsJson = [];\n            var href, elementText, form, explicitNoTrack = false;\n            _.each(targetElementList, function(el, idx) {\n                // if the element or a parent element is an anchor tag\n                // include the href as a property\n                // 读取到a标签或者form标签时，记录它们的属性。\n                if (el.tagName.toLowerCase() === 'a') {\n                    href = el.getAttribute('href');\n                } else if (el.tagName.toLowerCase() === 'form') {\n                    form = el;\n                }\n                // crawl up to max of 5 nodes to populate text content\n                // 读取节点的文本内容，最多往上读个5层\n                if (!elementText && idx < 5 && el.textContent) {\n                    var textContent = _.trim(el.textContent);\n                    if (textContent) {\n                        elementText = textContent.replace(/[\\r\\n]/g, ' ').replace(/[ ]+/g, ' ').substring(0, 255);\n                    }\n                }\n                // allow users to programatically prevent tracking of elements by adding class 'mp-no-track'\n                // 如果不希望某个节点被监测，开发者可以设置一个名为`mp-no-track`的css class\n                var classes = this._getClassName(el).split(' ');\n                if (_.includes(classes, 'mp-no-track')) {\n                    explicitNoTrack = true;\n                }\n                // 读取每个标签的属性，最后这条路径上所有的标签都会被记录下来保存在elementsJson数组中\n                elementsJson.push(this._getPropertiesFromElement(el));\n            }, this);\n\n            // 如果是一个开发者设置了不需要监测的标签，那么直接返回，不上报了\n            if (explicitNoTrack) {\n                return false;\n            }\n\n            // 处理采集到的属性，这里面有几个getXXXProperties(element/elements)方法（_getPropertiesFromElement、_getDefaultProperties、_getCustomProperties、_getFormFieldProperties），就是在读取各种属性\n            var props = _.extend(\n                this._getDefaultProperties(e.type), // 事件的基本属性，包含事件名称、window.location.host、window.location.pathname\n                {\n                    '$elements': elementsJson, // target标签到body标签这条路径上的所有标签及其属性\n                    '$el_attr__href': href, // 采集到的href链接\n                    '$el_text': elementText // target标签的文本内容\n                },\n                this._getCustomProperties(targetElementList) // 读取自定义属性，这里应该是指用户在后台管理界面配置的属性\n            );\n            if (form && (e.type === 'submit' || e.type === 'click')) {\n                _.extend(props, this._getFormFieldProperties(form)); // 读取表单的一些属性\n            }\n            // 调用了代码埋点中介绍的track方法上报一个名为`$web_event`的事件，并带上采集的到的属性\n            instance.track('$web_event', props);\n            return true;\n        }\n    },\n\n// _trackEvent之前，需要判断标签上的发生的事件是不是应该被autotrack监测上报\n_shouldTrackDomEvent: function(element, event) {\n        // html根节点下面的事件不需要监测\n        if (!element || this._isTag(element, 'html') || element.nodeType !== ELEMENT_NODE) {\n            return false;\n        }\n        var tag = element.tagName.toLowerCase();\n        // 查看标签的名字\n        // 如果是html则不监听\n        // 如果是form标签下的submit事件，或者是input->button、input->submit标签的change、click事件，或者是select、textarea标签下的change、click事件，可以监听\n        // 如果是其他标签，监听click事件\n        switch (tag) {\n            case 'html':\n                return false;\n            case 'form':\n                return event.type === 'submit';\n            case 'input':\n                if (['button', 'submit'].indexOf(element.getAttribute('type')) === -1) {\n                    return event.type === 'change';\n                } else {\n                    return event.type === 'click';\n                }\n            case 'select':\n            case 'textarea':\n                return event.type === 'change';\n            default:\n                return event.type === 'click';\n        }\n    },\n```\n\n### 3.3 全埋点小结\n\n可以看到全埋点还是有点暴力的，会采集的数据量也挺大，并且采集到的属性也比较多，可以看到在MixpanelSDK中，如果页面结构比较深，那么数据报过去分析起来可能还是需要花点时间的，同时也会产生大量可能不会使用的数据，对资源也是一种浪费。在神策SDK的接入文档中也提到，建议那些按钮不是很多的，相对简单的页面可以采用这个方法。一般情况下，如果网页上的按钮比较多的话，因为每次按钮的点击都会发数据，数据量很大。\n\n## 四、可视化埋点\n\nMixpanel和神策等平台，都提供了JS可视化埋点功能，与全埋点相比，这种方式可以指定自己想要监测的元素和属性（所有可以点击的元素），既可以做到动态配置，又不会像全埋点那样产生大量的数据（但也有例外，比如Mixpanel的可视化埋点仍然上报了全量点击数据，只是在后台根据可视化配置过滤出实际的数据）。\n\n可视化埋点首先需要进入埋点模式，以Mixpanel为例，可视化埋点的入口在后台管理界面，需要在后台输入需要埋点的页面url，然后再进入我的Web页面，此时就会加载可视化标记的编辑器（代码见`autotrack.js`中的`_maybeLoadEditor`方法，需要注意的是这个页面必须已经嵌入了JS SDK）。\n\n> 这里一定要从平台登录才可以进入可视化编辑状态，这实际上是对安全性的一个保证，试想如果只要嵌入SDK就可以做可视化埋点，那岂不是我的Web应用随便就可以被别人埋点，对我的数据产生干扰了。在Mixpanel JS SDK内部，通常会**判断当前页面的sessionStorge/localStorage中是否有一个开启可视化编辑器标志字段（例如Mixpanel是`_mpcehash`字段）**，读取这个字段，解析到其中的打开可视化编辑器的开关开启之后，就会加载可视化编辑器。由此可见其实从SDK后台管理界面跳转到可视化标记页面时，就是向SessionStorage中写入了相应的标志。\n\n**可视化埋点的两个关键点是：**\n\n- **标记元素，保存配置**：这一步要保存好需要追踪的元素的element_path，以及需要追踪的元素。\n- **下发配置，查找元素，监听点击，上报行为**：这一步要通过element_path找到元素，给它添加一个点击监听器，当点击事件发生时SDK上报事件。\n\n这里最重要的就是：**元素的标记和查找**，不同的SDK就是实现标记和查找的时候稍微有一些差异。\n\n### 4.1 标记元素，保存配置\n\n> MixpanelJS加载可视化编辑器时，需要从`//mixpanel.com/js-bundle/reports/collect-everything/editor.js?_ts={$timestamp}`去加载一个js文件，**这个js差不多可以看成一个独立的标记SDK，**最后这个请求会被重定向到一个cdn地址（`https://cdn4.mxpnl.com/static/asset-cache/3fc4abfdcebcb5121f1ebf143415b232/compiled/reports/collect-everything/editor.min.js`），随便打开这个js看下就有两万多行，因此单独做成了一个按需加载的模块。\n\n由于Mixpanel就没有提供标记SDK的源码，不过从体验和**抓包分析后台下发的配置**，我仍然可以推测出技术实现的细节。\n\n**从体验的角度来讲，**当进入可视化编辑状态时，在开发者web页面上，用户的鼠标经过**可以被点击**的元素（例如a、button标签等）时，这个元素会被一种颜色高亮提示，此时点击一下这个元素，就会弹出一个浮窗，用户填写信息，设置一个事件和一些属性，保存之后就算完成对这个元素的标记操作了，当标记过的元素的配置保存好了以后，这个元素会用另外一种特殊的颜色高亮标识起来。\n\n**从技术的角度来讲，**我看下神策JS SDK中的`vtrack.sdk.js`这个文件，当神策SDK进入可视化标记模式的时候，会去加载`vendor.js`和`vendor.css`，这两个文件可以看作一个标记SDK。那么`vendor.js`代码里是**如何标记需要追踪的元素的**呢？\n\n在`vendor.js`中，有一个`EventDefine`模块，这个模块负责把一个标签处理成我要保存的selector。\n\n**EventDefine**有三个方法：\n\n- getSelfAttr：获取一个标签内的文本内容，举例来说，一个`<p>This is another paragraph.</p>`得到的内容是`This is another paragraph.`。\n- toSelector：把一个标签的tagName、id、classNames解析出来，拼成一个串。举例来说，一个`<div id=\"test\" class=\"uncle chen\"></div>`标签，它的selector是`div#id.uncle.chen`，这个selector是可以直接给jQuery用来查找元素的。\n- toAllSelector：选择一个需要追踪的标签，并给这个标签定义点击时上报的事件（EventDefine），最后将这个事件转成一个selector保存下来，selector就是用于给jQuery来查找元素的选择器，这里需要注意，如果一个元素是在iFrame里面的，那么SDK保存的选择器路径是相对iFrame内部的，而不是最外层的document。\n\n前两个方法都是给`toAllSelector`方法调用的，`toAllSelector`方法是神策的标记SDK的重点，这个方法的实现如下：\n\n```js\n  toAllSelector: function($target, outDocuemnt) {\n      outDocuemnt = outDocuemnt ? $(outDocuemnt) : $(document);\n      var $parent, newSelSize, newSelector, parts, selSize, selector, targetSel;\n      selector = this.toSelector($target, outDocuemnt);\n      $parent = $target.parent();\n      selSize = outDocuemnt.find(selector).length;\n      while ($parent.prop('tagName') !== 'BODY' && selSize !== 1) {\n        newSelector = '' + (this.toSelector($parent)) + ' ' + selector; // 如果向上回溯的话，selector会用空格分开保存\n        newSelSize = outDocuemnt.find(newSelector).length;\n        if (newSelSize < selSize) {\n          selector = newSelector;\n          selSize = newSelSize;\n        }\n        $parent = $parent.parent();\n      }\n      var nthEle = selector;\n      var selfAttr = this.getSelfAttr($target);\n      return {\n        nthEle: nthEle,\n        selfAttr: selfAttr\n      };\n    }\n```\n\n当选中一个标签时，SDK会提取出这个标签的selector，然后用jQuery选择器查找这个selector指向的元素，如果这个selector指向的元素有多个（`selSize !== 1`，也就是说这个元素有着多个兄弟标签），那么还需要进一步去提取其父标签的selector，直到找出可以**唯一**标识这个元素的selector为止，最后将需要追踪的这个元素以{nthEle: nthEle, selfAttr: selfAttr}`，nthEle是selector，selfAttr是文本内容。\n\n**简单总结一下元素的标记，在Web页面中，一个元素的唯一css选择器生成算法，应该记录了从body到这个元素的完整路径，并记录每一个节点是其父亲节点的第几个孩子节点，即这个元素在整个Dom Tree中的深度和下标。此外，为了在一定程度上抵抗Dom Tree的变化，下标应该记录的是这个元素在父节点中相同类型元素的index（nth-of-type），而不是其父节点下面所有孩子节点的index（nth-child）。**\n\n### 4.2 查找元素，监听上报\n\n标记元素，保存配置之后，SDK如何根据配置来监测配置好的元素，并进行上报呢？前面我说到Mixpanel在可视化埋点的上报实现里，仍然保持了全量点击事件上报，并在每个上报中把元素在Dom Tree的完整路径一起上报到了后台，由后台去过滤出可视化事件。\n\n所以这里我看下神策js的代码，在可视化模块`vtrack.sdk.js`中，正常模式下，会去解析后台下发的配置，找到标记过的元素，绑定事件。\n\n**1.下发配置**\n\n```js\n// 进入普通模式时，会从后台的一个接口去拉去标记过的元素（这里也叫“部署”过的元素）的关键信息，然后进行解析\n  enterNormalMode: function() {\n    sd.vtrack_mode = 'normalMode';\n    var me = this;\n    this.getDeployFile().then(function() {\n      me.parseDeployFile(); // 解析配置\n    });\n  },\n```\n\n由于神策的后台代码是走私有化部署的，我没有办法体验，这里看一份诸葛IO平台可视化配置：\n\n```json\n{\n  \"code\": 10001,\n  \"msg\": \"Request success\",\n  \"visual_events\": [\n    {\n      \"event_name\": \"button3333\",\n      \"url\": \"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=kc0vtnal8qahrd2tq5obomukh8\", \n      \"element\": [\n        \"#b\"\n      ],\n      \"attr\": [\n        {\n          \"name\": \"ppp\",\n          \"selector\": \"body>p:eq(0)\"\n        }\n      ],\n      \"app_id\": 56070,\n      \"platform\": 3,\n      \"create_date_time\": \"2018-01-23 17:45:53\",\n      \"hidden\": null,\n      \"stop\": null,\n      \"alias_name\": null,\n      \"edit_url\": \"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=kc0vtnal8qahrd2tq5obomukh8\"\n    },\n    {\n      \"event_name\": \"button点击2222\",\n      \"url\": \"\",\n      \"element\": [\n        \"#b\"\n      ],\n      \"attr\": [],\n      \"app_id\": 56070,\n      \"platform\": 3,\n      \"create_date_time\": \"2018-01-23 17:39:16\",\n      \"hidden\": null,\n      \"stop\": null,\n      \"alias_name\": null,\n      \"edit_url\": \"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=k9d5hjmkqt1ethu1ao51cf4t9e\"\n    },\n    {\n      \"event_name\": \"20180123\",\n      \"url\": \"\",\n      \"element\": [\n        \"#b\"\n      ],\n      \"attr\": [],\n      \"app_id\": 56070,\n      \"platform\": 3,\n      \"create_date_time\": \"2018-01-23 17:08:04\",\n      \"hidden\": null,\n      \"stop\": null,\n      \"alias_name\": null,\n      \"edit_url\": \"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=ir7e9n0scm88b0k2uvotnc4ntd\"\n    },\n    {\n      \"event_name\": \"hello链接点击\",\n      \"url\": \"http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#\",\n      \"element\": [\n        \"body>a:eq(0)\"\n      ],\n      \"attr\": [\n        {\n          \"name\": \"自定义属性\",\n          \"selector\": \"body>p:eq(0)\"\n        }\n      ],\n      \"app_id\": 56070,\n      \"platform\": 3,\n      \"create_date_time\": \"2017-12-22 16:25:29\",\n      \"hidden\": false,\n      \"stop\": false,\n      \"alias_name\": null,\n      \"edit_url\": \"http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#\"\n    }\n  ]\n}\n```\n\n注意，上面这份配置有两个字段，一个是url，另一个是editUrl，editUrl表示标记元素的时候，是在哪一个页面里操作的。url表示应该去哪个url下面查找标记的元素。因为有些情况下，虽然我们是在某一个页面标记的元素，但是我们有很多其他页面和这个页面长得类似，比如商品详情类的页面，所以我们其实希望在所有的商品详情页都可以上报某些事件。所以，如果url为一个具体的值，例如\"[http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#](http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#)\"，说明只应该在这个url对应的页面中查找元素，上报行为即可；如果url=\"\"，说明我们应该在整个Web应用中的所有页面都去依据路径查找元素，上报事件。\n\n**2.解析配置，监测元素**\n\n还是直接看神策代码实现，里面加了点注释：\n\n```js\n  // 解析配置，查看当前页面中是否有元素需要被追踪，把需要追踪的元素的配置保存到requiredData变量中\n  parseDeployFile: function() {\n    this.requireData = this.checkUrl(this.deployData);\n    this.listenEvents();\n  },\n  // 找到元素，绑定点击事件的处理，当元素被点击时，上报事件\n  listenEvents: function() {\n    var data = this.requireData;\n    var me = this;\n    for (var i = 0; i < data.length; i++) {\n      this.getEle(data[i]).on('click', function(ev) {\n        return function() {\n          me.doVTrackAction(ev);\n        }\n      }(data[i]));\n    }\n  },\n  doVTrackAction: function(data) {\n    sd.track(\n      data.eventName,\n      {\n        $from_vtrack: String(data.trigger_id)\n      },\n      {\n        $lib_method: 'vtrack',\n        $lib_detail: String(data.trigger_id)\n      }\n    );\n  },\n  // 通过jQuery的选择器来找到元素，我在前一节的标记操作中知道，标记SDK会把一个定义好的事件eventDefine转化成一个{nthEle: nthEle, selfAttr: selfAttr}结构保存起来，这里去寻找元素的时候和标记那里的逻辑其实是一个逆操作。\n  // 这里要注意，和标记时一样元素，碰到iframe时要特殊处理一下。\n  getEle: function(data) {\n    var ele;\n    if ($(data.nthEle[0]) && $(data.nthEle[0]).prop('tagName') === 'IFRAME') {\n      try {\n        ele = $(data.nthEle[0]).contents().find(data.nthEle.slice(1).join(' '));\n      } catch (e) {\n      }\n      ;\n    } else {\n      ele = $(data.nthEle.join(' '));\n    }\n    if (data.selfAttr && data.selfAttr.text !== void 0) {\n      ele = ele.filter(':contains(' + data.selfAttr.text + ')');\n    }\n    return ele;\n  },\n```\n\n神策查找元素的时候用到了jQuery，而在Mixpanel中没有用jQuery，而是用的`Document.querySelectorAll`这个API。毕竟有很多移动页面为了优化加载速度，不会用jQuery这么重的库。\n\n此外，当追踪一些特殊的标签时，可以考虑用[XPath](http://www.w3school.com.cn/xpath/)去定位，今日头条的广告监测插件其实就用到了XPath。\n\n**3.给事件上报添加属性**\n\n单独把添加属性拿出来讲，是因为它的原理是类似的。前面我们只提到标记一个元素，当它被点击的时候上报事件，但是这样没有在上报事件的同时带上自定义的一些属性。\n\n其实只要是Web页面上出现了的元素，我们都可以把它记录下来，然后在事件发生的时候，查找到这些元素，并把它们的内容作为事件的属性上报上来。我们可以在标记了一个元素的时候，再去标记其他的一些元素（例如一些文本标签），并设置其他这些元素各自所对应的key，当事件发生时，我们可以找到其他这些元素，并获取到其中显示的文本内容，作为各自参数的值，上报到后台。\n\n\n### 4.3 可视化埋点小结\n\n可以看出，在JS上实现可视化埋点不是一件太麻烦的事情，我认为最关键的两件事就是标记元素和查找元素。不过它缺点是只会读取页面上的标签元素的展示出来的属性，也不会像代码埋点的方案那样去理解业务场景，获取上下文（通常在内存里）的一些属性；另外，当页面的结构发生变化的时候，可能要重新进行一次标记操作。有些平台是通过对事件监测的告警来提醒用户的，当事件数量同比大幅减少的时候，大概率是因为某次改版导致页面Dom Tree产生了变化，通过配置下发里面的元素路径找不到之前标记的元素了，这时就应该提醒用户重新标记。\n\n\n## 五、总结\n\n本文从代码埋点、全埋点、可视化埋点三个角度，以Mixpanel、神策数据的JS SDK的源代码，分析了Web页面埋点的实现方案的实现。在流量红利逐渐消失的现在，数据的采集、分析和精细化的运营显得更加重要，下面简单列一个表格对以上三种方式的埋点方案进行对比，还是那句话，三种埋点方式相辅相成，结合业务需求搭配使用，适合自己的才是最好的。\n\n|埋点方案|优点|缺点|适用场景|\n|:---:|:---|:---|:---|\n|代码埋点|可以按照业务上报详细、定制化的数据|需要开发人员参与，更新维护成本高，无法获得历史数据|对上下文理解要求较高的业务数据|\n|全埋点|对发人员依赖低，仅需嵌入一次SDK，可以全量上报通用数据，可以拿到历史数据|数量量太大，占用更多资源，且无法收集业务上下文数据，给后续数据筛选和分析带来一定的难度|上下文相对独立的、通用的数据|\n|可视化埋点|对开发人员依赖低，可以按照业务需求上报数据，对上下文数据有一定收集能力|标记事件有一定的操作难度，事件需要被更新时无法获得历史数据，界面变化时标记的元素可能失效|业务上下文数据相对简单，操作交互比较固定的界面|\n","source":"_posts/JS埋点技术分析.md","raw":"---\nlayout: post\ntitle: JS埋点技术分析\ndate: '2017-12-24'\ntags:\n  - JS\n  - SDK\n  - 埋点\n  - 无埋点\n  - 可视化埋点\n  - 监测\n  - 数据\ncategories:\n  - 技术\n---\n\n## 一、背景\n\n[上一篇博客](http://unclechen.github.io/2017/12/18/Android%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/)分析了Android上的埋点SDK技术原理，这次我看看Web页面上的埋点。Web页面上的埋点主要通过JS完成，在JS里面同样有代码埋点、全埋点、可视化埋点三种方案，如果对这几种方案的概念不了解可以看下上一篇博客。由于[mixpanel-js](https://github.com/mixpanel/mixpanel-js)和[Sensors Analytics JavaScript SDK](https://github.com/sensorsdata/sa-sdk-javascript)都开源了自己的SDK，就以它们为例进行分析。\n\n<!-- more -->\n\n## 二、代码埋点\n\n以Mixpanel为例（源码位于`/src/mixpanel-core.js`），看一下里面的实现。\n\n### 2.1 基本用法\n\n埋点之前，需要在head部分嵌入SDK，并调用SDK的初始化接口。以Mixpanel为例，官方介入文档提供的加载、初始化SDK代码如下：\n\n```\n<!-- start Mixpanel --><script type=\"text/javascript\">(function(e,a){if(!a.__SV){var b=window;try{var c,l,i,j=b.location,g=j.hash;c=function(a,b){return(l=a.match(RegExp(b+\"=([^&]*)\")))?l[1]:null};g&&c(g,\"state\")&&(i=JSON.parse(decodeURIComponent(c(g,\"state\"))),\"mpeditor\"===i.action&&(b.sessionStorage.setItem(\"_mpcehash\",g),history.replaceState(i.desiredHash||\"\",e.title,j.pathname+j.search)))}catch(m){}var k,h;window.mixpanel=a;a._i=[];a.init=function(b,c,f){function e(b,a){var c=a.split(\".\");2==c.length&&(b=b[c[0]],a=c[1]);b[a]=function(){b.push([a].concat(Array.prototype.slice.call(arguments,\n0)))}}var d=a;\"undefined\"!==typeof f?d=a[f]=[]:f=\"mixpanel\";d.people=d.people||[];d.toString=function(b){var a=\"mixpanel\";\"mixpanel\"!==f&&(a+=\".\"+f);b||(a+=\" (stub)\");return a};d.people.toString=function(){return d.toString(1)+\".people (stub)\"};k=\"disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user\".split(\" \");\nfor(h=0;h<k.length;h++)e(d,k[h]);a._i.push([b,c,f])};a.__SV=1.2;b=e.createElement(\"script\");b.type=\"text/javascript\";b.async=!0;b.src=\"undefined\"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:\"file:\"===e.location.protocol&&\"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\".match(/^\\/\\//)?\"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\":\"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\";c=e.getElementsByTagName(\"script\")[0];c.parentNode.insertBefore(b,c)}})(document,window.mixpanel||[]);\nmixpanel.init(\"YOUR TOKEN\");</script><!-- end Mixpanel -->\n```\n\n这是一段立即执行的js代码，作用通常是去异步加载真正的JS SDK，然后调用SDK的初始化接口init方法，完成初始化的操作。\n\n初始化的核心代码为\n\n```js\nmixpanel.init('YOUR TOKEN', { your: 'config' }, 'library_name')\n```\n\n也可以简写为\n\n```js\nmixpanel.init(\"YOUR TOKEN\")\n```\n\n\n看下init方里面几个参数的含义：\n\n- 第一个参数是你在后台注册的app token\n- 第二个参数是SDK的配置，传入了一堆key-value，如果不传，SDK内部也有个默认配置，长下面这样：\n\n```js\nvar DEFAULT_CONFIG = {\n    'api_host': HTTP_PROTOCOL + 'api.mixpanel.com',\n    'app_host': HTTP_PROTOCOL + 'mixpanel.com',\n    'autotrack': true, // 是否打开全埋点监测\n    'cdn': HTTP_PROTOCOL + 'cdn.mxpnl.com',\n    'cross_subdomain_cookie': true,\n    'persistence': 'cookie',\n    'persistence_name': '',\n    'cookie_name': '',\n    'loaded': function() {},\n    'store_google': true,\n    'save_referrer': true,\n    'test': false,\n    'verbose': false,\n    'img': false,\n    'track_pageview': true,\n    'debug': false,\n    'track_links_timeout': 300,\n    'cookie_expiration': 365,\n    'upgrade': false,\n    'disable_persistence': false,\n    'disable_cookie': false,\n    'secure_cookie': false,\n    'ip': true,\n    'property_blacklist': []\n};\n```\n\n- 第三个参数是SDK全局变量名\n\n> Mixpanel接入文档：[https://mixpanel.com/help/reference/javascript](https://mixpanel.com/help/reference/javascript)\n\n### 2.2 上报的基本实现\n\n代码埋点的方式通常都会被封装成类似`track(eventName, properties)`的接口，例如在Mixpanel中，可以用`mixpanel.track(\"Played song\", {\"genre\": \"hip-hop\"});`来上报事件。\n\n这里是整个SDK中最重要的地方，使用频率也是最高的。代码位于`/src/mixpanel-core.js`里面，先撇开复杂的逻辑和条件控制，看一下track的基本实现，我稍微加了点注释：\n\n```js\n//  track方法实现\nMixpanelLib.prototype.track = function(event_name, properties, callback) {\n    // 各种边界判断\n    ...\n    // 获取一些公共参数，和用户传入的properties一起encode\n    var truncated_data = _.truncate(data, 255);\n    var json_data = _.JSONEncode(truncated_data);\n    var encoded_data = _.base64Encode(json_data);\n    console.log('MIXPANEL REQUEST:');\n    console.log(truncated_data);\n    // 调用_send_request发送请求\n    this._send_request(\n        this.get_config('api_host') + '/track/',\n        { 'data': encoded_data },\n        this._prepare_callback(callback, truncated_data)\n    );\n    return truncated_data;\n};\n\n// 发送请求的实现，主要用的是XMLHttpRequest，如果浏览器不支持XMLHttpRequest，那么用动态添加img/script标签的方式\nMixpanelLib.prototype._send_request = function(url, data, callback) {\n    // 一些特殊情况的处理\n    ...\n    if ('img' in data) {\n        var img = document.createElement('img');\n        img.src = url;\n        document.body.appendChild(img);\n    } else if (USE_XHR) {\n        try {\n            var req = new XMLHttpRequest();\n            req.open('GET', url, true);\n            // send the mp_optout cookie\n            // withCredentials cannot be modified until after calling .open on Android and Mobile Safari\n            req.withCredentials = true;\n            req.onreadystatechange = function () {\n                if (req.readyState === 4) { // XMLHttpRequest.DONE == 4, except in safari 4\n                    if (req.status === 200) {\n                        if (callback) {\n                            if (verbose_mode) {\n                                callback(_.JSONDecode(req.responseText));\n                            } else {\n                                callback(Number(req.responseText));\n                            }\n                        }\n                    } else {\n                        var error = 'Bad HTTP status: ' + req.status + ' ' + req.statusText;\n                        console.error(error);\n                        if (callback) {\n                            if (verbose_mode) {\n                                callback({status: 0, error: error});\n                            } else {\n                                callback(0);\n                            }\n                        }\n                    }\n                }\n            };\n            req.send(null); // 发送异步请求\n        } catch (e) {\n            console.error(e);\n        }\n    } else {\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.src = url;\n        var s = document.getElementsByTagName('script')[0];\n        s.parentNode.insertBefore(script, s);\n    }\n};\n```\n\n上面就是事件上报代码的核心实现。但是由于Web应用自身的一些特性，比如在追踪页面跳转行为（链接的点击、表单的提交等）时，为了防止数据发送不及时导致的数据丢失，SDK中提供一些诸如`track_links`和`track_forms`特殊方法，这些方法内部用的其实是setTimeout或者等待服务器返回结果之后再让页面跳转。\n\n## 三、全埋点\n\nMixpanel和神策都提供了名为**“AutoTrack”**的方案，只需要在初始化SDK的时候，传入一个参数即可打开这个功能。JS SDK可以自动监测网页中所有的点击、表单submit等事件，这和AndroidSDK里面监听所有按钮的点击有些类似。\n\n### 3.1 自动监测的元素、事件类型\n\n- **神策JS：**设置AutoTrack之后，SDK就会自动追踪页面上的按钮(`a`、`button`、`input`) 这种html标签类型的点击情况，一旦页面某一个按钮发生了点击行为，SDK就会去采集此按钮的一些信息，例如: 这个按钮的标签类型，这个按钮的文本内容，这个按钮的`name`，这个按钮的`id`、`class`名，还有一些按钮特有的属性如`href`等。\n\n- **MixpanelJS：**设置AutoTrack之后，SDK会监测页面上的所有`form表单`、`input标签`、`select和textarea标签`产生的`submit`、`change`、`click`事件，并采集这些标签上的属性一起上报。\n\n### 3.2 全埋点监测的实现\n\n以Mixpanel为例，在`/src/autotrack.js`代码中，把几个关键的方法扣出来看一下（不要问我为什么以Mixpanel为例，因为代码少一些。。。）。\n\n当SDK初始化的时候，会执行autotrack里面的`_addDomEventHandlers`方法，给整个document的`submit`、`change`、`click`事件设置监听器。当监听到这几类事件时，会执行`_trackEvent`方法。\n\n直接看代码，我给代码里面加了一点注释，来说明自动监测上报的过程。\n\n```js\n// SDK初始化时，通过register_event设置需要监听了submit、change、click这3类事件\n// Mixpanel的js sdk代码里面自己封装了一个underscore模块，里面有一些工具方法\n_addDomEventHandlers: function(instance) {\n        var handler = _.bind(function(e) {\n            e = e || window.event;\n            this._trackEvent(e, instance);\n        }, this);\n        _.register_event(document, 'submit', handler, false, true);\n        _.register_event(document, 'change', handler, false, true);\n        _.register_event(document, 'click', handler, false, true);\n    },\n\n// register_event的实现，优先采用addEventListener的方式，如果浏览器不支持会尝试使用onXXX的方式\nvar register_event = function(element, type, handler, oldSchool, useCapture) {\n        if (!element) {\n            console.error('No valid element provided to register_event');\n            return;\n        }\n        if (element.addEventListener && !oldSchool) {\n            element.addEventListener(type, handler, !!useCapture);\n        } else {\n            var ontype = 'on' + type;\n            var old_handler = element[ontype]; // can be undefined\n            element[ontype] = makeHandler(element, handler, old_handler);\n        }\n    };\n\n// 监听到事件发生后，调用_trackEvent方法来上报\n_trackEvent: function(e, instance) {\n        // 首先找到这个事件的target\n        var target = this._getEventTarget(e);\n        if (target.nodeType === TEXT_NODE) {\n            target = target.parentNode;\n        }\n        // 然后判断是不是autotrack要监测的事件，如果不是的话，啥也不干直接返回。\n        if (this._shouldTrackDomEvent(target, e)) {\n            // 如果满足监测条件，那么从当前标签开始，向上追溯到body标签，并记录这条路径上所有的元素到一个数组中\n            var targetElementList = [target];\n            var curEl = target;\n            while (curEl.parentNode && !this._isTag(curEl, 'body')) {\n                targetElementList.push(curEl.parentNode);\n                curEl = curEl.parentNode;\n            }\n            // 按照刚才记录的路径开始遍历（相当于自底向上）\n            var elementsJson = [];\n            var href, elementText, form, explicitNoTrack = false;\n            _.each(targetElementList, function(el, idx) {\n                // if the element or a parent element is an anchor tag\n                // include the href as a property\n                // 读取到a标签或者form标签时，记录它们的属性。\n                if (el.tagName.toLowerCase() === 'a') {\n                    href = el.getAttribute('href');\n                } else if (el.tagName.toLowerCase() === 'form') {\n                    form = el;\n                }\n                // crawl up to max of 5 nodes to populate text content\n                // 读取节点的文本内容，最多往上读个5层\n                if (!elementText && idx < 5 && el.textContent) {\n                    var textContent = _.trim(el.textContent);\n                    if (textContent) {\n                        elementText = textContent.replace(/[\\r\\n]/g, ' ').replace(/[ ]+/g, ' ').substring(0, 255);\n                    }\n                }\n                // allow users to programatically prevent tracking of elements by adding class 'mp-no-track'\n                // 如果不希望某个节点被监测，开发者可以设置一个名为`mp-no-track`的css class\n                var classes = this._getClassName(el).split(' ');\n                if (_.includes(classes, 'mp-no-track')) {\n                    explicitNoTrack = true;\n                }\n                // 读取每个标签的属性，最后这条路径上所有的标签都会被记录下来保存在elementsJson数组中\n                elementsJson.push(this._getPropertiesFromElement(el));\n            }, this);\n\n            // 如果是一个开发者设置了不需要监测的标签，那么直接返回，不上报了\n            if (explicitNoTrack) {\n                return false;\n            }\n\n            // 处理采集到的属性，这里面有几个getXXXProperties(element/elements)方法（_getPropertiesFromElement、_getDefaultProperties、_getCustomProperties、_getFormFieldProperties），就是在读取各种属性\n            var props = _.extend(\n                this._getDefaultProperties(e.type), // 事件的基本属性，包含事件名称、window.location.host、window.location.pathname\n                {\n                    '$elements': elementsJson, // target标签到body标签这条路径上的所有标签及其属性\n                    '$el_attr__href': href, // 采集到的href链接\n                    '$el_text': elementText // target标签的文本内容\n                },\n                this._getCustomProperties(targetElementList) // 读取自定义属性，这里应该是指用户在后台管理界面配置的属性\n            );\n            if (form && (e.type === 'submit' || e.type === 'click')) {\n                _.extend(props, this._getFormFieldProperties(form)); // 读取表单的一些属性\n            }\n            // 调用了代码埋点中介绍的track方法上报一个名为`$web_event`的事件，并带上采集的到的属性\n            instance.track('$web_event', props);\n            return true;\n        }\n    },\n\n// _trackEvent之前，需要判断标签上的发生的事件是不是应该被autotrack监测上报\n_shouldTrackDomEvent: function(element, event) {\n        // html根节点下面的事件不需要监测\n        if (!element || this._isTag(element, 'html') || element.nodeType !== ELEMENT_NODE) {\n            return false;\n        }\n        var tag = element.tagName.toLowerCase();\n        // 查看标签的名字\n        // 如果是html则不监听\n        // 如果是form标签下的submit事件，或者是input->button、input->submit标签的change、click事件，或者是select、textarea标签下的change、click事件，可以监听\n        // 如果是其他标签，监听click事件\n        switch (tag) {\n            case 'html':\n                return false;\n            case 'form':\n                return event.type === 'submit';\n            case 'input':\n                if (['button', 'submit'].indexOf(element.getAttribute('type')) === -1) {\n                    return event.type === 'change';\n                } else {\n                    return event.type === 'click';\n                }\n            case 'select':\n            case 'textarea':\n                return event.type === 'change';\n            default:\n                return event.type === 'click';\n        }\n    },\n```\n\n### 3.3 全埋点小结\n\n可以看到全埋点还是有点暴力的，会采集的数据量也挺大，并且采集到的属性也比较多，可以看到在MixpanelSDK中，如果页面结构比较深，那么数据报过去分析起来可能还是需要花点时间的，同时也会产生大量可能不会使用的数据，对资源也是一种浪费。在神策SDK的接入文档中也提到，建议那些按钮不是很多的，相对简单的页面可以采用这个方法。一般情况下，如果网页上的按钮比较多的话，因为每次按钮的点击都会发数据，数据量很大。\n\n## 四、可视化埋点\n\nMixpanel和神策等平台，都提供了JS可视化埋点功能，与全埋点相比，这种方式可以指定自己想要监测的元素和属性（所有可以点击的元素），既可以做到动态配置，又不会像全埋点那样产生大量的数据（但也有例外，比如Mixpanel的可视化埋点仍然上报了全量点击数据，只是在后台根据可视化配置过滤出实际的数据）。\n\n可视化埋点首先需要进入埋点模式，以Mixpanel为例，可视化埋点的入口在后台管理界面，需要在后台输入需要埋点的页面url，然后再进入我的Web页面，此时就会加载可视化标记的编辑器（代码见`autotrack.js`中的`_maybeLoadEditor`方法，需要注意的是这个页面必须已经嵌入了JS SDK）。\n\n> 这里一定要从平台登录才可以进入可视化编辑状态，这实际上是对安全性的一个保证，试想如果只要嵌入SDK就可以做可视化埋点，那岂不是我的Web应用随便就可以被别人埋点，对我的数据产生干扰了。在Mixpanel JS SDK内部，通常会**判断当前页面的sessionStorge/localStorage中是否有一个开启可视化编辑器标志字段（例如Mixpanel是`_mpcehash`字段）**，读取这个字段，解析到其中的打开可视化编辑器的开关开启之后，就会加载可视化编辑器。由此可见其实从SDK后台管理界面跳转到可视化标记页面时，就是向SessionStorage中写入了相应的标志。\n\n**可视化埋点的两个关键点是：**\n\n- **标记元素，保存配置**：这一步要保存好需要追踪的元素的element_path，以及需要追踪的元素。\n- **下发配置，查找元素，监听点击，上报行为**：这一步要通过element_path找到元素，给它添加一个点击监听器，当点击事件发生时SDK上报事件。\n\n这里最重要的就是：**元素的标记和查找**，不同的SDK就是实现标记和查找的时候稍微有一些差异。\n\n### 4.1 标记元素，保存配置\n\n> MixpanelJS加载可视化编辑器时，需要从`//mixpanel.com/js-bundle/reports/collect-everything/editor.js?_ts={$timestamp}`去加载一个js文件，**这个js差不多可以看成一个独立的标记SDK，**最后这个请求会被重定向到一个cdn地址（`https://cdn4.mxpnl.com/static/asset-cache/3fc4abfdcebcb5121f1ebf143415b232/compiled/reports/collect-everything/editor.min.js`），随便打开这个js看下就有两万多行，因此单独做成了一个按需加载的模块。\n\n由于Mixpanel就没有提供标记SDK的源码，不过从体验和**抓包分析后台下发的配置**，我仍然可以推测出技术实现的细节。\n\n**从体验的角度来讲，**当进入可视化编辑状态时，在开发者web页面上，用户的鼠标经过**可以被点击**的元素（例如a、button标签等）时，这个元素会被一种颜色高亮提示，此时点击一下这个元素，就会弹出一个浮窗，用户填写信息，设置一个事件和一些属性，保存之后就算完成对这个元素的标记操作了，当标记过的元素的配置保存好了以后，这个元素会用另外一种特殊的颜色高亮标识起来。\n\n**从技术的角度来讲，**我看下神策JS SDK中的`vtrack.sdk.js`这个文件，当神策SDK进入可视化标记模式的时候，会去加载`vendor.js`和`vendor.css`，这两个文件可以看作一个标记SDK。那么`vendor.js`代码里是**如何标记需要追踪的元素的**呢？\n\n在`vendor.js`中，有一个`EventDefine`模块，这个模块负责把一个标签处理成我要保存的selector。\n\n**EventDefine**有三个方法：\n\n- getSelfAttr：获取一个标签内的文本内容，举例来说，一个`<p>This is another paragraph.</p>`得到的内容是`This is another paragraph.`。\n- toSelector：把一个标签的tagName、id、classNames解析出来，拼成一个串。举例来说，一个`<div id=\"test\" class=\"uncle chen\"></div>`标签，它的selector是`div#id.uncle.chen`，这个selector是可以直接给jQuery用来查找元素的。\n- toAllSelector：选择一个需要追踪的标签，并给这个标签定义点击时上报的事件（EventDefine），最后将这个事件转成一个selector保存下来，selector就是用于给jQuery来查找元素的选择器，这里需要注意，如果一个元素是在iFrame里面的，那么SDK保存的选择器路径是相对iFrame内部的，而不是最外层的document。\n\n前两个方法都是给`toAllSelector`方法调用的，`toAllSelector`方法是神策的标记SDK的重点，这个方法的实现如下：\n\n```js\n  toAllSelector: function($target, outDocuemnt) {\n      outDocuemnt = outDocuemnt ? $(outDocuemnt) : $(document);\n      var $parent, newSelSize, newSelector, parts, selSize, selector, targetSel;\n      selector = this.toSelector($target, outDocuemnt);\n      $parent = $target.parent();\n      selSize = outDocuemnt.find(selector).length;\n      while ($parent.prop('tagName') !== 'BODY' && selSize !== 1) {\n        newSelector = '' + (this.toSelector($parent)) + ' ' + selector; // 如果向上回溯的话，selector会用空格分开保存\n        newSelSize = outDocuemnt.find(newSelector).length;\n        if (newSelSize < selSize) {\n          selector = newSelector;\n          selSize = newSelSize;\n        }\n        $parent = $parent.parent();\n      }\n      var nthEle = selector;\n      var selfAttr = this.getSelfAttr($target);\n      return {\n        nthEle: nthEle,\n        selfAttr: selfAttr\n      };\n    }\n```\n\n当选中一个标签时，SDK会提取出这个标签的selector，然后用jQuery选择器查找这个selector指向的元素，如果这个selector指向的元素有多个（`selSize !== 1`，也就是说这个元素有着多个兄弟标签），那么还需要进一步去提取其父标签的selector，直到找出可以**唯一**标识这个元素的selector为止，最后将需要追踪的这个元素以{nthEle: nthEle, selfAttr: selfAttr}`，nthEle是selector，selfAttr是文本内容。\n\n**简单总结一下元素的标记，在Web页面中，一个元素的唯一css选择器生成算法，应该记录了从body到这个元素的完整路径，并记录每一个节点是其父亲节点的第几个孩子节点，即这个元素在整个Dom Tree中的深度和下标。此外，为了在一定程度上抵抗Dom Tree的变化，下标应该记录的是这个元素在父节点中相同类型元素的index（nth-of-type），而不是其父节点下面所有孩子节点的index（nth-child）。**\n\n### 4.2 查找元素，监听上报\n\n标记元素，保存配置之后，SDK如何根据配置来监测配置好的元素，并进行上报呢？前面我说到Mixpanel在可视化埋点的上报实现里，仍然保持了全量点击事件上报，并在每个上报中把元素在Dom Tree的完整路径一起上报到了后台，由后台去过滤出可视化事件。\n\n所以这里我看下神策js的代码，在可视化模块`vtrack.sdk.js`中，正常模式下，会去解析后台下发的配置，找到标记过的元素，绑定事件。\n\n**1.下发配置**\n\n```js\n// 进入普通模式时，会从后台的一个接口去拉去标记过的元素（这里也叫“部署”过的元素）的关键信息，然后进行解析\n  enterNormalMode: function() {\n    sd.vtrack_mode = 'normalMode';\n    var me = this;\n    this.getDeployFile().then(function() {\n      me.parseDeployFile(); // 解析配置\n    });\n  },\n```\n\n由于神策的后台代码是走私有化部署的，我没有办法体验，这里看一份诸葛IO平台可视化配置：\n\n```json\n{\n  \"code\": 10001,\n  \"msg\": \"Request success\",\n  \"visual_events\": [\n    {\n      \"event_name\": \"button3333\",\n      \"url\": \"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=kc0vtnal8qahrd2tq5obomukh8\", \n      \"element\": [\n        \"#b\"\n      ],\n      \"attr\": [\n        {\n          \"name\": \"ppp\",\n          \"selector\": \"body>p:eq(0)\"\n        }\n      ],\n      \"app_id\": 56070,\n      \"platform\": 3,\n      \"create_date_time\": \"2018-01-23 17:45:53\",\n      \"hidden\": null,\n      \"stop\": null,\n      \"alias_name\": null,\n      \"edit_url\": \"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=kc0vtnal8qahrd2tq5obomukh8\"\n    },\n    {\n      \"event_name\": \"button点击2222\",\n      \"url\": \"\",\n      \"element\": [\n        \"#b\"\n      ],\n      \"attr\": [],\n      \"app_id\": 56070,\n      \"platform\": 3,\n      \"create_date_time\": \"2018-01-23 17:39:16\",\n      \"hidden\": null,\n      \"stop\": null,\n      \"alias_name\": null,\n      \"edit_url\": \"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=k9d5hjmkqt1ethu1ao51cf4t9e\"\n    },\n    {\n      \"event_name\": \"20180123\",\n      \"url\": \"\",\n      \"element\": [\n        \"#b\"\n      ],\n      \"attr\": [],\n      \"app_id\": 56070,\n      \"platform\": 3,\n      \"create_date_time\": \"2018-01-23 17:08:04\",\n      \"hidden\": null,\n      \"stop\": null,\n      \"alias_name\": null,\n      \"edit_url\": \"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=ir7e9n0scm88b0k2uvotnc4ntd\"\n    },\n    {\n      \"event_name\": \"hello链接点击\",\n      \"url\": \"http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#\",\n      \"element\": [\n        \"body>a:eq(0)\"\n      ],\n      \"attr\": [\n        {\n          \"name\": \"自定义属性\",\n          \"selector\": \"body>p:eq(0)\"\n        }\n      ],\n      \"app_id\": 56070,\n      \"platform\": 3,\n      \"create_date_time\": \"2017-12-22 16:25:29\",\n      \"hidden\": false,\n      \"stop\": false,\n      \"alias_name\": null,\n      \"edit_url\": \"http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#\"\n    }\n  ]\n}\n```\n\n注意，上面这份配置有两个字段，一个是url，另一个是editUrl，editUrl表示标记元素的时候，是在哪一个页面里操作的。url表示应该去哪个url下面查找标记的元素。因为有些情况下，虽然我们是在某一个页面标记的元素，但是我们有很多其他页面和这个页面长得类似，比如商品详情类的页面，所以我们其实希望在所有的商品详情页都可以上报某些事件。所以，如果url为一个具体的值，例如\"[http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#](http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#)\"，说明只应该在这个url对应的页面中查找元素，上报行为即可；如果url=\"\"，说明我们应该在整个Web应用中的所有页面都去依据路径查找元素，上报事件。\n\n**2.解析配置，监测元素**\n\n还是直接看神策代码实现，里面加了点注释：\n\n```js\n  // 解析配置，查看当前页面中是否有元素需要被追踪，把需要追踪的元素的配置保存到requiredData变量中\n  parseDeployFile: function() {\n    this.requireData = this.checkUrl(this.deployData);\n    this.listenEvents();\n  },\n  // 找到元素，绑定点击事件的处理，当元素被点击时，上报事件\n  listenEvents: function() {\n    var data = this.requireData;\n    var me = this;\n    for (var i = 0; i < data.length; i++) {\n      this.getEle(data[i]).on('click', function(ev) {\n        return function() {\n          me.doVTrackAction(ev);\n        }\n      }(data[i]));\n    }\n  },\n  doVTrackAction: function(data) {\n    sd.track(\n      data.eventName,\n      {\n        $from_vtrack: String(data.trigger_id)\n      },\n      {\n        $lib_method: 'vtrack',\n        $lib_detail: String(data.trigger_id)\n      }\n    );\n  },\n  // 通过jQuery的选择器来找到元素，我在前一节的标记操作中知道，标记SDK会把一个定义好的事件eventDefine转化成一个{nthEle: nthEle, selfAttr: selfAttr}结构保存起来，这里去寻找元素的时候和标记那里的逻辑其实是一个逆操作。\n  // 这里要注意，和标记时一样元素，碰到iframe时要特殊处理一下。\n  getEle: function(data) {\n    var ele;\n    if ($(data.nthEle[0]) && $(data.nthEle[0]).prop('tagName') === 'IFRAME') {\n      try {\n        ele = $(data.nthEle[0]).contents().find(data.nthEle.slice(1).join(' '));\n      } catch (e) {\n      }\n      ;\n    } else {\n      ele = $(data.nthEle.join(' '));\n    }\n    if (data.selfAttr && data.selfAttr.text !== void 0) {\n      ele = ele.filter(':contains(' + data.selfAttr.text + ')');\n    }\n    return ele;\n  },\n```\n\n神策查找元素的时候用到了jQuery，而在Mixpanel中没有用jQuery，而是用的`Document.querySelectorAll`这个API。毕竟有很多移动页面为了优化加载速度，不会用jQuery这么重的库。\n\n此外，当追踪一些特殊的标签时，可以考虑用[XPath](http://www.w3school.com.cn/xpath/)去定位，今日头条的广告监测插件其实就用到了XPath。\n\n**3.给事件上报添加属性**\n\n单独把添加属性拿出来讲，是因为它的原理是类似的。前面我们只提到标记一个元素，当它被点击的时候上报事件，但是这样没有在上报事件的同时带上自定义的一些属性。\n\n其实只要是Web页面上出现了的元素，我们都可以把它记录下来，然后在事件发生的时候，查找到这些元素，并把它们的内容作为事件的属性上报上来。我们可以在标记了一个元素的时候，再去标记其他的一些元素（例如一些文本标签），并设置其他这些元素各自所对应的key，当事件发生时，我们可以找到其他这些元素，并获取到其中显示的文本内容，作为各自参数的值，上报到后台。\n\n\n### 4.3 可视化埋点小结\n\n可以看出，在JS上实现可视化埋点不是一件太麻烦的事情，我认为最关键的两件事就是标记元素和查找元素。不过它缺点是只会读取页面上的标签元素的展示出来的属性，也不会像代码埋点的方案那样去理解业务场景，获取上下文（通常在内存里）的一些属性；另外，当页面的结构发生变化的时候，可能要重新进行一次标记操作。有些平台是通过对事件监测的告警来提醒用户的，当事件数量同比大幅减少的时候，大概率是因为某次改版导致页面Dom Tree产生了变化，通过配置下发里面的元素路径找不到之前标记的元素了，这时就应该提醒用户重新标记。\n\n\n## 五、总结\n\n本文从代码埋点、全埋点、可视化埋点三个角度，以Mixpanel、神策数据的JS SDK的源代码，分析了Web页面埋点的实现方案的实现。在流量红利逐渐消失的现在，数据的采集、分析和精细化的运营显得更加重要，下面简单列一个表格对以上三种方式的埋点方案进行对比，还是那句话，三种埋点方式相辅相成，结合业务需求搭配使用，适合自己的才是最好的。\n\n|埋点方案|优点|缺点|适用场景|\n|:---:|:---|:---|:---|\n|代码埋点|可以按照业务上报详细、定制化的数据|需要开发人员参与，更新维护成本高，无法获得历史数据|对上下文理解要求较高的业务数据|\n|全埋点|对发人员依赖低，仅需嵌入一次SDK，可以全量上报通用数据，可以拿到历史数据|数量量太大，占用更多资源，且无法收集业务上下文数据，给后续数据筛选和分析带来一定的难度|上下文相对独立的、通用的数据|\n|可视化埋点|对开发人员依赖低，可以按照业务需求上报数据，对上下文数据有一定收集能力|标记事件有一定的操作难度，事件需要被更新时无法获得历史数据，界面变化时标记的元素可能失效|业务上下文数据相对简单，操作交互比较固定的界面|\n","slug":"JS埋点技术分析","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8ed001amtsx1uw9fzlc","content":"<h2 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h2><p><a href=\"http://unclechen.github.io/2017/12/18/Android%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/\">上一篇博客</a>分析了Android上的埋点SDK技术原理，这次我看看Web页面上的埋点。Web页面上的埋点主要通过JS完成，在JS里面同样有代码埋点、全埋点、可视化埋点三种方案，如果对这几种方案的概念不了解可以看下上一篇博客。由于<a href=\"https://github.com/mixpanel/mixpanel-js\" target=\"_blank\" rel=\"noopener\">mixpanel-js</a>和<a href=\"https://github.com/sensorsdata/sa-sdk-javascript\" target=\"_blank\" rel=\"noopener\">Sensors Analytics JavaScript SDK</a>都开源了自己的SDK，就以它们为例进行分析。</p>\n<a id=\"more\"></a>\n<h2 id=\"二、代码埋点\"><a href=\"#二、代码埋点\" class=\"headerlink\" title=\"二、代码埋点\"></a>二、代码埋点</h2><p>以Mixpanel为例（源码位于<code>/src/mixpanel-core.js</code>），看一下里面的实现。</p>\n<h3 id=\"2-1-基本用法\"><a href=\"#2-1-基本用法\" class=\"headerlink\" title=\"2.1 基本用法\"></a>2.1 基本用法</h3><p>埋点之前，需要在head部分嵌入SDK，并调用SDK的初始化接口。以Mixpanel为例，官方介入文档提供的加载、初始化SDK代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- start Mixpanel --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,a</span>)</span>&#123;<span class=\"keyword\">if</span>(!a.__SV)&#123;<span class=\"keyword\">var</span> b=<span class=\"built_in\">window</span>;<span class=\"keyword\">try</span>&#123;<span class=\"keyword\">var</span> c,l,i,j=b.location,g=j.hash;c=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span>(l=a.match(<span class=\"built_in\">RegExp</span>(b+<span class=\"string\">\"=([^&amp;]*)\"</span>)))?l[<span class=\"number\">1</span>]:<span class=\"literal\">null</span>&#125;;g&amp;&amp;c(g,<span class=\"string\">\"state\"</span>)&amp;&amp;(i=<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">decodeURIComponent</span>(c(g,<span class=\"string\">\"state\"</span>))),<span class=\"string\">\"mpeditor\"</span>===i.action&amp;&amp;(b.sessionStorage.setItem(<span class=\"string\">\"_mpcehash\"</span>,g),history.replaceState(i.desiredHash||<span class=\"string\">\"\"</span>,e.title,j.pathname+j.search)))&#125;<span class=\"keyword\">catch</span>(m)&#123;&#125;<span class=\"keyword\">var</span> k,h;<span class=\"built_in\">window</span>.mixpanel=a;a._i=[];a.init=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b,c,f</span>)</span>&#123;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">e</span>(<span class=\"params\">b,a</span>)</span>&#123;<span class=\"keyword\">var</span> c=a.split(<span class=\"string\">\".\"</span>);<span class=\"number\">2</span>==c.length&amp;&amp;(b=b[c[<span class=\"number\">0</span>]],a=c[<span class=\"number\">1</span>]);b[a]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;b.push([a].concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"number\">0</span>)))&#125;&#125;<span class=\"keyword\">var</span> d=a;<span class=\"string\">\"undefined\"</span>!==<span class=\"keyword\">typeof</span> f?d=a[f]=[]:f=<span class=\"string\">\"mixpanel\"</span>;d.people=d.people||[];d.toString=<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(b)</span></span>&#123;<span class=\"keyword\">var</span> a=<span class=\"string\">\"mixpanel\"</span>;<span class=\"string\">\"mixpanel\"</span>!==f&amp;&amp;(a+=<span class=\"string\">\".\"</span>+f);b||(a+=<span class=\"string\">\" (stub)\"</span>);<span class=\"keyword\">return</span> a&#125;;d.people.toString=<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> d.toString(<span class=\"number\">1</span>)+<span class=\"string\">\".people (stub)\"</span>&#125;;k=<span class=\"string\">\"disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user\"</span>.split(<span class=\"string\">\" \"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">for</span>(h=<span class=\"number\">0</span>;h&lt;k.length;h++)e(d,k[h]);a._i.push([b,c,f])&#125;;a.__SV=<span class=\"number\">1.2</span>;b=e.createElement(<span class=\"string\">\"script\"</span>);b.type=<span class=\"string\">\"text/javascript\"</span>;b.async=!<span class=\"number\">0</span>;b.src=<span class=\"string\">\"undefined\"</span>!==<span class=\"keyword\">typeof</span> MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:<span class=\"string\">\"file:\"</span>===e.location.protocol&amp;&amp;<span class=\"string\">\"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\"</span>.match(<span class=\"regexp\">/^\\/\\//</span>)?<span class=\"string\">\"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\"</span>:<span class=\"string\">\"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\"</span>;c=e.getElementsByTagName(<span class=\"string\">\"script\"</span>)[<span class=\"number\">0</span>];c.parentNode.insertBefore(b,c)&#125;&#125;)(<span class=\"built_in\">document</span>,<span class=\"built_in\">window</span>.mixpanel||[]);</span></span><br><span class=\"line\"><span class=\"actionscript\">mixpanel.init(<span class=\"string\">\"YOUR TOKEN\"</span>);</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"comment\">&lt;!-- end Mixpanel --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是一段立即执行的js代码，作用通常是去异步加载真正的JS SDK，然后调用SDK的初始化接口init方法，完成初始化的操作。</p>\n<p>初始化的核心代码为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mixpanel.init(<span class=\"string\">'YOUR TOKEN'</span>, &#123; <span class=\"attr\">your</span>: <span class=\"string\">'config'</span> &#125;, <span class=\"string\">'library_name'</span>)</span><br></pre></td></tr></table></figure>\n<p>也可以简写为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mixpanel.init(<span class=\"string\">\"YOUR TOKEN\"</span>)</span><br></pre></td></tr></table></figure>\n<p>看下init方里面几个参数的含义：</p>\n<ul>\n<li>第一个参数是你在后台注册的app token</li>\n<li>第二个参数是SDK的配置，传入了一堆key-value，如果不传，SDK内部也有个默认配置，长下面这样：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DEFAULT_CONFIG = &#123;</span><br><span class=\"line\">    <span class=\"string\">'api_host'</span>: HTTP_PROTOCOL + <span class=\"string\">'api.mixpanel.com'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app_host'</span>: HTTP_PROTOCOL + <span class=\"string\">'mixpanel.com'</span>,</span><br><span class=\"line\">    <span class=\"string\">'autotrack'</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否打开全埋点监测</span></span><br><span class=\"line\">    <span class=\"string\">'cdn'</span>: HTTP_PROTOCOL + <span class=\"string\">'cdn.mxpnl.com'</span>,</span><br><span class=\"line\">    <span class=\"string\">'cross_subdomain_cookie'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">'persistence'</span>: <span class=\"string\">'cookie'</span>,</span><br><span class=\"line\">    <span class=\"string\">'persistence_name'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">    <span class=\"string\">'cookie_name'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">    <span class=\"string\">'loaded'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">    <span class=\"string\">'store_google'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">'save_referrer'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">'test'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'verbose'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'img'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'track_pageview'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">'debug'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'track_links_timeout'</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"string\">'cookie_expiration'</span>: <span class=\"number\">365</span>,</span><br><span class=\"line\">    <span class=\"string\">'upgrade'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'disable_persistence'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'disable_cookie'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'secure_cookie'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'ip'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">'property_blacklist'</span>: []</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第三个参数是SDK全局变量名</li>\n</ul>\n<blockquote>\n<p>Mixpanel接入文档：<a href=\"https://mixpanel.com/help/reference/javascript\" target=\"_blank\" rel=\"noopener\">https://mixpanel.com/help/reference/javascript</a></p>\n</blockquote>\n<h3 id=\"2-2-上报的基本实现\"><a href=\"#2-2-上报的基本实现\" class=\"headerlink\" title=\"2.2 上报的基本实现\"></a>2.2 上报的基本实现</h3><p>代码埋点的方式通常都会被封装成类似<code>track(eventName, properties)</code>的接口，例如在Mixpanel中，可以用<code>mixpanel.track(&quot;Played song&quot;, {&quot;genre&quot;: &quot;hip-hop&quot;});</code>来上报事件。</p>\n<p>这里是整个SDK中最重要的地方，使用频率也是最高的。代码位于<code>/src/mixpanel-core.js</code>里面，先撇开复杂的逻辑和条件控制，看一下track的基本实现，我稍微加了点注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  track方法实现</span></span><br><span class=\"line\">MixpanelLib.prototype.track = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event_name, properties, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 各种边界判断</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 获取一些公共参数，和用户传入的properties一起encode</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> truncated_data = _.truncate(data, <span class=\"number\">255</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> json_data = _.JSONEncode(truncated_data);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> encoded_data = _.base64Encode(json_data);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'MIXPANEL REQUEST:'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(truncated_data);</span><br><span class=\"line\">    <span class=\"comment\">// 调用_send_request发送请求</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._send_request(</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.get_config(<span class=\"string\">'api_host'</span>) + <span class=\"string\">'/track/'</span>,</span><br><span class=\"line\">        &#123; <span class=\"string\">'data'</span>: encoded_data &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._prepare_callback(callback, truncated_data)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> truncated_data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送请求的实现，主要用的是XMLHttpRequest，如果浏览器不支持XMLHttpRequest，那么用动态添加img/script标签的方式</span></span><br><span class=\"line\">MixpanelLib.prototype._send_request = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, data, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一些特殊情况的处理</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'img'</span> <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">        img.src = url;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (USE_XHR) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> req = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">            req.open(<span class=\"string\">'GET'</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">// send the mp_optout cookie</span></span><br><span class=\"line\">            <span class=\"comment\">// withCredentials cannot be modified until after calling .open on Android and Mobile Safari</span></span><br><span class=\"line\">            req.withCredentials = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            req.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (req.readyState === <span class=\"number\">4</span>) &#123; <span class=\"comment\">// XMLHttpRequest.DONE == 4, except in safari 4</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (req.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (verbose_mode) &#123;</span><br><span class=\"line\">                                callback(_.JSONDecode(req.responseText));</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                callback(<span class=\"built_in\">Number</span>(req.responseText));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> error = <span class=\"string\">'Bad HTTP status: '</span> + req.status + <span class=\"string\">' '</span> + req.statusText;</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (verbose_mode) &#123;</span><br><span class=\"line\">                                callback(&#123;<span class=\"attr\">status</span>: <span class=\"number\">0</span>, <span class=\"attr\">error</span>: error&#125;);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                callback(<span class=\"number\">0</span>);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            req.send(<span class=\"literal\">null</span>); <span class=\"comment\">// 发送异步请求</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">        script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">        script.async = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        script.defer = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        script.src = url;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'script'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        s.parentNode.insertBefore(script, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面就是事件上报代码的核心实现。但是由于Web应用自身的一些特性，比如在追踪页面跳转行为（链接的点击、表单的提交等）时，为了防止数据发送不及时导致的数据丢失，SDK中提供一些诸如<code>track_links</code>和<code>track_forms</code>特殊方法，这些方法内部用的其实是setTimeout或者等待服务器返回结果之后再让页面跳转。</p>\n<h2 id=\"三、全埋点\"><a href=\"#三、全埋点\" class=\"headerlink\" title=\"三、全埋点\"></a>三、全埋点</h2><p>Mixpanel和神策都提供了名为<strong>“AutoTrack”</strong>的方案，只需要在初始化SDK的时候，传入一个参数即可打开这个功能。JS SDK可以自动监测网页中所有的点击、表单submit等事件，这和AndroidSDK里面监听所有按钮的点击有些类似。</p>\n<h3 id=\"3-1-自动监测的元素、事件类型\"><a href=\"#3-1-自动监测的元素、事件类型\" class=\"headerlink\" title=\"3.1 自动监测的元素、事件类型\"></a>3.1 自动监测的元素、事件类型</h3><ul>\n<li><p><strong>神策JS：</strong>设置AutoTrack之后，SDK就会自动追踪页面上的按钮(<code>a</code>、<code>button</code>、<code>input</code>) 这种html标签类型的点击情况，一旦页面某一个按钮发生了点击行为，SDK就会去采集此按钮的一些信息，例如: 这个按钮的标签类型，这个按钮的文本内容，这个按钮的<code>name</code>，这个按钮的<code>id</code>、<code>class</code>名，还有一些按钮特有的属性如<code>href</code>等。</p>\n</li>\n<li><p><strong>MixpanelJS：</strong>设置AutoTrack之后，SDK会监测页面上的所有<code>form表单</code>、<code>input标签</code>、<code>select和textarea标签</code>产生的<code>submit</code>、<code>change</code>、<code>click</code>事件，并采集这些标签上的属性一起上报。</p>\n</li>\n</ul>\n<h3 id=\"3-2-全埋点监测的实现\"><a href=\"#3-2-全埋点监测的实现\" class=\"headerlink\" title=\"3.2 全埋点监测的实现\"></a>3.2 全埋点监测的实现</h3><p>以Mixpanel为例，在<code>/src/autotrack.js</code>代码中，把几个关键的方法扣出来看一下（不要问我为什么以Mixpanel为例，因为代码少一些。。。）。</p>\n<p>当SDK初始化的时候，会执行autotrack里面的<code>_addDomEventHandlers</code>方法，给整个document的<code>submit</code>、<code>change</code>、<code>click</code>事件设置监听器。当监听到这几类事件时，会执行<code>_trackEvent</code>方法。</p>\n<p>直接看代码，我给代码里面加了一点注释，来说明自动监测上报的过程。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SDK初始化时，通过register_event设置需要监听了submit、change、click这3类事件</span></span><br><span class=\"line\"><span class=\"comment\">// Mixpanel的js sdk代码里面自己封装了一个underscore模块，里面有一些工具方法</span></span><br><span class=\"line\">_addDomEventHandlers: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">instance</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> handler = _.bind(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._trackEvent(e, instance);</span><br><span class=\"line\">        &#125;, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        _.register_event(<span class=\"built_in\">document</span>, <span class=\"string\">'submit'</span>, handler, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        _.register_event(<span class=\"built_in\">document</span>, <span class=\"string\">'change'</span>, handler, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        _.register_event(<span class=\"built_in\">document</span>, <span class=\"string\">'click'</span>, handler, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// register_event的实现，优先采用addEventListener的方式，如果浏览器不支持会尝试使用onXXX的方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> register_event = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler, oldSchool, useCapture</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!element) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"string\">'No valid element provided to register_event'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element.addEventListener &amp;&amp; !oldSchool) &#123;</span><br><span class=\"line\">            element.addEventListener(type, handler, !!useCapture);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ontype = <span class=\"string\">'on'</span> + type;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> old_handler = element[ontype]; <span class=\"comment\">// can be undefined</span></span><br><span class=\"line\">            element[ontype] = makeHandler(element, handler, old_handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听到事件发生后，调用_trackEvent方法来上报</span></span><br><span class=\"line\">_trackEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, instance</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 首先找到这个事件的target</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>._getEventTarget(e);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.nodeType === TEXT_NODE) &#123;</span><br><span class=\"line\">            target = target.parentNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 然后判断是不是autotrack要监测的事件，如果不是的话，啥也不干直接返回。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._shouldTrackDomEvent(target, e)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果满足监测条件，那么从当前标签开始，向上追溯到body标签，并记录这条路径上所有的元素到一个数组中</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> targetElementList = [target];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> curEl = target;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (curEl.parentNode &amp;&amp; !<span class=\"keyword\">this</span>._isTag(curEl, <span class=\"string\">'body'</span>)) &#123;</span><br><span class=\"line\">                targetElementList.push(curEl.parentNode);</span><br><span class=\"line\">                curEl = curEl.parentNode;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 按照刚才记录的路径开始遍历（相当于自底向上）</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> elementsJson = [];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> href, elementText, form, explicitNoTrack = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            _.each(targetElementList, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, idx</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// if the element or a parent element is an anchor tag</span></span><br><span class=\"line\">                <span class=\"comment\">// include the href as a property</span></span><br><span class=\"line\">                <span class=\"comment\">// 读取到a标签或者form标签时，记录它们的属性。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (el.tagName.toLowerCase() === <span class=\"string\">'a'</span>) &#123;</span><br><span class=\"line\">                    href = el.getAttribute(<span class=\"string\">'href'</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.tagName.toLowerCase() === <span class=\"string\">'form'</span>) &#123;</span><br><span class=\"line\">                    form = el;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// crawl up to max of 5 nodes to populate text content</span></span><br><span class=\"line\">                <span class=\"comment\">// 读取节点的文本内容，最多往上读个5层</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!elementText &amp;&amp; idx &lt; <span class=\"number\">5</span> &amp;&amp; el.textContent) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> textContent = _.trim(el.textContent);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (textContent) &#123;</span><br><span class=\"line\">                        elementText = textContent.replace(<span class=\"regexp\">/[\\r\\n]/g</span>, <span class=\"string\">' '</span>).replace(<span class=\"regexp\">/[ ]+/g</span>, <span class=\"string\">' '</span>).substring(<span class=\"number\">0</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// allow users to programatically prevent tracking of elements by adding class 'mp-no-track'</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果不希望某个节点被监测，开发者可以设置一个名为`mp-no-track`的css class</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> classes = <span class=\"keyword\">this</span>._getClassName(el).split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (_.includes(classes, <span class=\"string\">'mp-no-track'</span>)) &#123;</span><br><span class=\"line\">                    explicitNoTrack = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 读取每个标签的属性，最后这条路径上所有的标签都会被记录下来保存在elementsJson数组中</span></span><br><span class=\"line\">                elementsJson.push(<span class=\"keyword\">this</span>._getPropertiesFromElement(el));</span><br><span class=\"line\">            &#125;, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 如果是一个开发者设置了不需要监测的标签，那么直接返回，不上报了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (explicitNoTrack) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 处理采集到的属性，这里面有几个getXXXProperties(element/elements)方法（_getPropertiesFromElement、_getDefaultProperties、_getCustomProperties、_getFormFieldProperties），就是在读取各种属性</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> props = _.extend(</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._getDefaultProperties(e.type), <span class=\"comment\">// 事件的基本属性，包含事件名称、window.location.host、window.location.pathname</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">'$elements'</span>: elementsJson, <span class=\"comment\">// target标签到body标签这条路径上的所有标签及其属性</span></span><br><span class=\"line\">                    <span class=\"string\">'$el_attr__href'</span>: href, <span class=\"comment\">// 采集到的href链接</span></span><br><span class=\"line\">                    <span class=\"string\">'$el_text'</span>: elementText <span class=\"comment\">// target标签的文本内容</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._getCustomProperties(targetElementList) <span class=\"comment\">// 读取自定义属性，这里应该是指用户在后台管理界面配置的属性</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (form &amp;&amp; (e.type === <span class=\"string\">'submit'</span> || e.type === <span class=\"string\">'click'</span>)) &#123;</span><br><span class=\"line\">                _.extend(props, <span class=\"keyword\">this</span>._getFormFieldProperties(form)); <span class=\"comment\">// 读取表单的一些属性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 调用了代码埋点中介绍的track方法上报一个名为`$web_event`的事件，并带上采集的到的属性</span></span><br><span class=\"line\">            instance.track(<span class=\"string\">'$web_event'</span>, props);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _trackEvent之前，需要判断标签上的发生的事件是不是应该被autotrack监测上报</span></span><br><span class=\"line\">_shouldTrackDomEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// html根节点下面的事件不需要监测</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!element || <span class=\"keyword\">this</span>._isTag(element, <span class=\"string\">'html'</span>) || element.nodeType !== ELEMENT_NODE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tag = element.tagName.toLowerCase();</span><br><span class=\"line\">        <span class=\"comment\">// 查看标签的名字</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果是html则不监听</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果是form标签下的submit事件，或者是input-&gt;button、input-&gt;submit标签的change、click事件，或者是select、textarea标签下的change、click事件，可以监听</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果是其他标签，监听click事件</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (tag) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'html'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'form'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> event.type === <span class=\"string\">'submit'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'input'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ([<span class=\"string\">'button'</span>, <span class=\"string\">'submit'</span>].indexOf(element.getAttribute(<span class=\"string\">'type'</span>)) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> event.type === <span class=\"string\">'change'</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> event.type === <span class=\"string\">'click'</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'select'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'textarea'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> event.type === <span class=\"string\">'change'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> event.type === <span class=\"string\">'click'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-全埋点小结\"><a href=\"#3-3-全埋点小结\" class=\"headerlink\" title=\"3.3 全埋点小结\"></a>3.3 全埋点小结</h3><p>可以看到全埋点还是有点暴力的，会采集的数据量也挺大，并且采集到的属性也比较多，可以看到在MixpanelSDK中，如果页面结构比较深，那么数据报过去分析起来可能还是需要花点时间的，同时也会产生大量可能不会使用的数据，对资源也是一种浪费。在神策SDK的接入文档中也提到，建议那些按钮不是很多的，相对简单的页面可以采用这个方法。一般情况下，如果网页上的按钮比较多的话，因为每次按钮的点击都会发数据，数据量很大。</p>\n<h2 id=\"四、可视化埋点\"><a href=\"#四、可视化埋点\" class=\"headerlink\" title=\"四、可视化埋点\"></a>四、可视化埋点</h2><p>Mixpanel和神策等平台，都提供了JS可视化埋点功能，与全埋点相比，这种方式可以指定自己想要监测的元素和属性（所有可以点击的元素），既可以做到动态配置，又不会像全埋点那样产生大量的数据（但也有例外，比如Mixpanel的可视化埋点仍然上报了全量点击数据，只是在后台根据可视化配置过滤出实际的数据）。</p>\n<p>可视化埋点首先需要进入埋点模式，以Mixpanel为例，可视化埋点的入口在后台管理界面，需要在后台输入需要埋点的页面url，然后再进入我的Web页面，此时就会加载可视化标记的编辑器（代码见<code>autotrack.js</code>中的<code>_maybeLoadEditor</code>方法，需要注意的是这个页面必须已经嵌入了JS SDK）。</p>\n<blockquote>\n<p>这里一定要从平台登录才可以进入可视化编辑状态，这实际上是对安全性的一个保证，试想如果只要嵌入SDK就可以做可视化埋点，那岂不是我的Web应用随便就可以被别人埋点，对我的数据产生干扰了。在Mixpanel JS SDK内部，通常会<strong>判断当前页面的sessionStorge/localStorage中是否有一个开启可视化编辑器标志字段（例如Mixpanel是<code>_mpcehash</code>字段）</strong>，读取这个字段，解析到其中的打开可视化编辑器的开关开启之后，就会加载可视化编辑器。由此可见其实从SDK后台管理界面跳转到可视化标记页面时，就是向SessionStorage中写入了相应的标志。</p>\n</blockquote>\n<p><strong>可视化埋点的两个关键点是：</strong></p>\n<ul>\n<li><strong>标记元素，保存配置</strong>：这一步要保存好需要追踪的元素的element_path，以及需要追踪的元素。</li>\n<li><strong>下发配置，查找元素，监听点击，上报行为</strong>：这一步要通过element_path找到元素，给它添加一个点击监听器，当点击事件发生时SDK上报事件。</li>\n</ul>\n<p>这里最重要的就是：<strong>元素的标记和查找</strong>，不同的SDK就是实现标记和查找的时候稍微有一些差异。</p>\n<h3 id=\"4-1-标记元素，保存配置\"><a href=\"#4-1-标记元素，保存配置\" class=\"headerlink\" title=\"4.1 标记元素，保存配置\"></a>4.1 标记元素，保存配置</h3><blockquote>\n<p>MixpanelJS加载可视化编辑器时，需要从<code>//mixpanel.com/js-bundle/reports/collect-everything/editor.js?_ts={$timestamp}</code>去加载一个js文件，<strong>这个js差不多可以看成一个独立的标记SDK，</strong>最后这个请求会被重定向到一个cdn地址（<code>https://cdn4.mxpnl.com/static/asset-cache/3fc4abfdcebcb5121f1ebf143415b232/compiled/reports/collect-everything/editor.min.js</code>），随便打开这个js看下就有两万多行，因此单独做成了一个按需加载的模块。</p>\n</blockquote>\n<p>由于Mixpanel就没有提供标记SDK的源码，不过从体验和<strong>抓包分析后台下发的配置</strong>，我仍然可以推测出技术实现的细节。</p>\n<p><strong>从体验的角度来讲，</strong>当进入可视化编辑状态时，在开发者web页面上，用户的鼠标经过<strong>可以被点击</strong>的元素（例如a、button标签等）时，这个元素会被一种颜色高亮提示，此时点击一下这个元素，就会弹出一个浮窗，用户填写信息，设置一个事件和一些属性，保存之后就算完成对这个元素的标记操作了，当标记过的元素的配置保存好了以后，这个元素会用另外一种特殊的颜色高亮标识起来。</p>\n<p><strong>从技术的角度来讲，</strong>我看下神策JS SDK中的<code>vtrack.sdk.js</code>这个文件，当神策SDK进入可视化标记模式的时候，会去加载<code>vendor.js</code>和<code>vendor.css</code>，这两个文件可以看作一个标记SDK。那么<code>vendor.js</code>代码里是<strong>如何标记需要追踪的元素的</strong>呢？</p>\n<p>在<code>vendor.js</code>中，有一个<code>EventDefine</code>模块，这个模块负责把一个标签处理成我要保存的selector。</p>\n<p><strong>EventDefine</strong>有三个方法：</p>\n<ul>\n<li>getSelfAttr：获取一个标签内的文本内容，举例来说，一个<code>&lt;p&gt;This is another paragraph.&lt;/p&gt;</code>得到的内容是<code>This is another paragraph.</code>。</li>\n<li>toSelector：把一个标签的tagName、id、classNames解析出来，拼成一个串。举例来说，一个<code>&lt;div id=&quot;test&quot; class=&quot;uncle chen&quot;&gt;&lt;/div&gt;</code>标签，它的selector是<code>div#id.uncle.chen</code>，这个selector是可以直接给jQuery用来查找元素的。</li>\n<li>toAllSelector：选择一个需要追踪的标签，并给这个标签定义点击时上报的事件（EventDefine），最后将这个事件转成一个selector保存下来，selector就是用于给jQuery来查找元素的选择器，这里需要注意，如果一个元素是在iFrame里面的，那么SDK保存的选择器路径是相对iFrame内部的，而不是最外层的document。</li>\n</ul>\n<p>前两个方法都是给<code>toAllSelector</code>方法调用的，<code>toAllSelector</code>方法是神策的标记SDK的重点，这个方法的实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toAllSelector: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$target, outDocuemnt</span>) </span>&#123;</span><br><span class=\"line\">    outDocuemnt = outDocuemnt ? $(outDocuemnt) : $(<span class=\"built_in\">document</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $parent, newSelSize, newSelector, parts, selSize, selector, targetSel;</span><br><span class=\"line\">    selector = <span class=\"keyword\">this</span>.toSelector($target, outDocuemnt);</span><br><span class=\"line\">    $parent = $target.parent();</span><br><span class=\"line\">    selSize = outDocuemnt.find(selector).length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($parent.prop(<span class=\"string\">'tagName'</span>) !== <span class=\"string\">'BODY'</span> &amp;&amp; selSize !== <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      newSelector = <span class=\"string\">''</span> + (<span class=\"keyword\">this</span>.toSelector($parent)) + <span class=\"string\">' '</span> + selector; <span class=\"comment\">// 如果向上回溯的话，selector会用空格分开保存</span></span><br><span class=\"line\">      newSelSize = outDocuemnt.find(newSelector).length;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newSelSize &lt; selSize) &#123;</span><br><span class=\"line\">        selector = newSelector;</span><br><span class=\"line\">        selSize = newSelSize;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      $parent = $parent.parent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nthEle = selector;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> selfAttr = <span class=\"keyword\">this</span>.getSelfAttr($target);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      nthEle: nthEle,</span><br><span class=\"line\">      selfAttr: selfAttr</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>当选中一个标签时，SDK会提取出这个标签的selector，然后用jQuery选择器查找这个selector指向的元素，如果这个selector指向的元素有多个（<code>selSize !== 1</code>，也就是说这个元素有着多个兄弟标签），那么还需要进一步去提取其父标签的selector，直到找出可以<strong>唯一</strong>标识这个元素的selector为止，最后将需要追踪的这个元素以{nthEle: nthEle, selfAttr: selfAttr}`，nthEle是selector，selfAttr是文本内容。</p>\n<p><strong>简单总结一下元素的标记，在Web页面中，一个元素的唯一css选择器生成算法，应该记录了从body到这个元素的完整路径，并记录每一个节点是其父亲节点的第几个孩子节点，即这个元素在整个Dom Tree中的深度和下标。此外，为了在一定程度上抵抗Dom Tree的变化，下标应该记录的是这个元素在父节点中相同类型元素的index（nth-of-type），而不是其父节点下面所有孩子节点的index（nth-child）。</strong></p>\n<h3 id=\"4-2-查找元素，监听上报\"><a href=\"#4-2-查找元素，监听上报\" class=\"headerlink\" title=\"4.2 查找元素，监听上报\"></a>4.2 查找元素，监听上报</h3><p>标记元素，保存配置之后，SDK如何根据配置来监测配置好的元素，并进行上报呢？前面我说到Mixpanel在可视化埋点的上报实现里，仍然保持了全量点击事件上报，并在每个上报中把元素在Dom Tree的完整路径一起上报到了后台，由后台去过滤出可视化事件。</p>\n<p>所以这里我看下神策js的代码，在可视化模块<code>vtrack.sdk.js</code>中，正常模式下，会去解析后台下发的配置，找到标记过的元素，绑定事件。</p>\n<p><strong>1.下发配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 进入普通模式时，会从后台的一个接口去拉去标记过的元素（这里也叫“部署”过的元素）的关键信息，然后进行解析</span></span><br><span class=\"line\">  enterNormalMode: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    sd.vtrack_mode = <span class=\"string\">'normalMode'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getDeployFile().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      me.parseDeployFile(); <span class=\"comment\">// 解析配置</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>由于神策的后台代码是走私有化部署的，我没有办法体验，这里看一份诸葛IO平台可视化配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"code\"</span>: <span class=\"number\">10001</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"Request success\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"visual_events\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"event_name\"</span>: <span class=\"string\">\"button3333\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=kc0vtnal8qahrd2tq5obomukh8\"</span>, </span><br><span class=\"line\">      <span class=\"attr\">\"element\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"#b\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"attr\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ppp\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"body&gt;p:eq(0)\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"app_id\"</span>: <span class=\"number\">56070</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"platform\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"create_date_time\"</span>: <span class=\"string\">\"2018-01-23 17:45:53\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"hidden\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"stop\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"alias_name\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"edit_url\"</span>: <span class=\"string\">\"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=kc0vtnal8qahrd2tq5obomukh8\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"event_name\"</span>: <span class=\"string\">\"button点击2222\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"element\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"#b\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"attr\"</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">\"app_id\"</span>: <span class=\"number\">56070</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"platform\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"create_date_time\"</span>: <span class=\"string\">\"2018-01-23 17:39:16\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"hidden\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"stop\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"alias_name\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"edit_url\"</span>: <span class=\"string\">\"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=k9d5hjmkqt1ethu1ao51cf4t9e\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"event_name\"</span>: <span class=\"string\">\"20180123\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"element\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"#b\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"attr\"</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">\"app_id\"</span>: <span class=\"number\">56070</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"platform\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"create_date_time\"</span>: <span class=\"string\">\"2018-01-23 17:08:04\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"hidden\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"stop\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"alias_name\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"edit_url\"</span>: <span class=\"string\">\"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=ir7e9n0scm88b0k2uvotnc4ntd\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"event_name\"</span>: <span class=\"string\">\"hello链接点击\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"element\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"body&gt;a:eq(0)\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"attr\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"自定义属性\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"body&gt;p:eq(0)\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"app_id\"</span>: <span class=\"number\">56070</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"platform\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"create_date_time\"</span>: <span class=\"string\">\"2017-12-22 16:25:29\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"hidden\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"stop\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"alias_name\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"edit_url\"</span>: <span class=\"string\">\"http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，上面这份配置有两个字段，一个是url，另一个是editUrl，editUrl表示标记元素的时候，是在哪一个页面里操作的。url表示应该去哪个url下面查找标记的元素。因为有些情况下，虽然我们是在某一个页面标记的元素，但是我们有很多其他页面和这个页面长得类似，比如商品详情类的页面，所以我们其实希望在所有的商品详情页都可以上报某些事件。所以，如果url为一个具体的值，例如”<a href=\"http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#\" target=\"_blank\" rel=\"noopener\">http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#</a>“，说明只应该在这个url对应的页面中查找元素，上报行为即可；如果url=””，说明我们应该在整个Web应用中的所有页面都去依据路径查找元素，上报事件。</p>\n<p><strong>2.解析配置，监测元素</strong></p>\n<p>还是直接看神策代码实现，里面加了点注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解析配置，查看当前页面中是否有元素需要被追踪，把需要追踪的元素的配置保存到requiredData变量中</span></span><br><span class=\"line\">parseDeployFile: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.requireData = <span class=\"keyword\">this</span>.checkUrl(<span class=\"keyword\">this</span>.deployData);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.listenEvents();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 找到元素，绑定点击事件的处理，当元素被点击时，上报事件</span></span><br><span class=\"line\">listenEvents: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>.requireData;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getEle(data[i]).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        me.doVTrackAction(ev);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;(data[i]));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">doVTrackAction: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  sd.track(</span><br><span class=\"line\">    data.eventName,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      $from_vtrack: <span class=\"built_in\">String</span>(data.trigger_id)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      $lib_method: <span class=\"string\">'vtrack'</span>,</span><br><span class=\"line\">      $lib_detail: <span class=\"built_in\">String</span>(data.trigger_id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 通过jQuery的选择器来找到元素，我在前一节的标记操作中知道，标记SDK会把一个定义好的事件eventDefine转化成一个&#123;nthEle: nthEle, selfAttr: selfAttr&#125;结构保存起来，这里去寻找元素的时候和标记那里的逻辑其实是一个逆操作。</span></span><br><span class=\"line\"><span class=\"comment\">// 这里要注意，和标记时一样元素，碰到iframe时要特殊处理一下。</span></span><br><span class=\"line\">getEle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ele;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($(data.nthEle[<span class=\"number\">0</span>]) &amp;&amp; $(data.nthEle[<span class=\"number\">0</span>]).prop(<span class=\"string\">'tagName'</span>) === <span class=\"string\">'IFRAME'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      ele = $(data.nthEle[<span class=\"number\">0</span>]).contents().find(data.nthEle.slice(<span class=\"number\">1</span>).join(<span class=\"string\">' '</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ele = $(data.nthEle.join(<span class=\"string\">' '</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data.selfAttr &amp;&amp; data.selfAttr.text !== <span class=\"keyword\">void</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    ele = ele.filter(<span class=\"string\">':contains('</span> + data.selfAttr.text + <span class=\"string\">')'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>神策查找元素的时候用到了jQuery，而在Mixpanel中没有用jQuery，而是用的<code>Document.querySelectorAll</code>这个API。毕竟有很多移动页面为了优化加载速度，不会用jQuery这么重的库。</p>\n<p>此外，当追踪一些特殊的标签时，可以考虑用<a href=\"http://www.w3school.com.cn/xpath/\" target=\"_blank\" rel=\"noopener\">XPath</a>去定位，今日头条的广告监测插件其实就用到了XPath。</p>\n<p><strong>3.给事件上报添加属性</strong></p>\n<p>单独把添加属性拿出来讲，是因为它的原理是类似的。前面我们只提到标记一个元素，当它被点击的时候上报事件，但是这样没有在上报事件的同时带上自定义的一些属性。</p>\n<p>其实只要是Web页面上出现了的元素，我们都可以把它记录下来，然后在事件发生的时候，查找到这些元素，并把它们的内容作为事件的属性上报上来。我们可以在标记了一个元素的时候，再去标记其他的一些元素（例如一些文本标签），并设置其他这些元素各自所对应的key，当事件发生时，我们可以找到其他这些元素，并获取到其中显示的文本内容，作为各自参数的值，上报到后台。</p>\n<h3 id=\"4-3-可视化埋点小结\"><a href=\"#4-3-可视化埋点小结\" class=\"headerlink\" title=\"4.3 可视化埋点小结\"></a>4.3 可视化埋点小结</h3><p>可以看出，在JS上实现可视化埋点不是一件太麻烦的事情，我认为最关键的两件事就是标记元素和查找元素。不过它缺点是只会读取页面上的标签元素的展示出来的属性，也不会像代码埋点的方案那样去理解业务场景，获取上下文（通常在内存里）的一些属性；另外，当页面的结构发生变化的时候，可能要重新进行一次标记操作。有些平台是通过对事件监测的告警来提醒用户的，当事件数量同比大幅减少的时候，大概率是因为某次改版导致页面Dom Tree产生了变化，通过配置下发里面的元素路径找不到之前标记的元素了，这时就应该提醒用户重新标记。</p>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>本文从代码埋点、全埋点、可视化埋点三个角度，以Mixpanel、神策数据的JS SDK的源代码，分析了Web页面埋点的实现方案的实现。在流量红利逐渐消失的现在，数据的采集、分析和精细化的运营显得更加重要，下面简单列一个表格对以上三种方式的埋点方案进行对比，还是那句话，三种埋点方式相辅相成，结合业务需求搭配使用，适合自己的才是最好的。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">埋点方案</th>\n<th style=\"text-align:left\">优点</th>\n<th style=\"text-align:left\">缺点</th>\n<th style=\"text-align:left\">适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">代码埋点</td>\n<td style=\"text-align:left\">可以按照业务上报详细、定制化的数据</td>\n<td style=\"text-align:left\">需要开发人员参与，更新维护成本高，无法获得历史数据</td>\n<td style=\"text-align:left\">对上下文理解要求较高的业务数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全埋点</td>\n<td style=\"text-align:left\">对发人员依赖低，仅需嵌入一次SDK，可以全量上报通用数据，可以拿到历史数据</td>\n<td style=\"text-align:left\">数量量太大，占用更多资源，且无法收集业务上下文数据，给后续数据筛选和分析带来一定的难度</td>\n<td style=\"text-align:left\">上下文相对独立的、通用的数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可视化埋点</td>\n<td style=\"text-align:left\">对开发人员依赖低，可以按照业务需求上报数据，对上下文数据有一定收集能力</td>\n<td style=\"text-align:left\">标记事件有一定的操作难度，事件需要被更新时无法获得历史数据，界面变化时标记的元素可能失效</td>\n<td style=\"text-align:left\">业务上下文数据相对简单，操作交互比较固定的界面</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h2><p><a href=\"http://unclechen.github.io/2017/12/18/Android%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/\">上一篇博客</a>分析了Android上的埋点SDK技术原理，这次我看看Web页面上的埋点。Web页面上的埋点主要通过JS完成，在JS里面同样有代码埋点、全埋点、可视化埋点三种方案，如果对这几种方案的概念不了解可以看下上一篇博客。由于<a href=\"https://github.com/mixpanel/mixpanel-js\" target=\"_blank\" rel=\"noopener\">mixpanel-js</a>和<a href=\"https://github.com/sensorsdata/sa-sdk-javascript\" target=\"_blank\" rel=\"noopener\">Sensors Analytics JavaScript SDK</a>都开源了自己的SDK，就以它们为例进行分析。</p>","more":"<h2 id=\"二、代码埋点\"><a href=\"#二、代码埋点\" class=\"headerlink\" title=\"二、代码埋点\"></a>二、代码埋点</h2><p>以Mixpanel为例（源码位于<code>/src/mixpanel-core.js</code>），看一下里面的实现。</p>\n<h3 id=\"2-1-基本用法\"><a href=\"#2-1-基本用法\" class=\"headerlink\" title=\"2.1 基本用法\"></a>2.1 基本用法</h3><p>埋点之前，需要在head部分嵌入SDK，并调用SDK的初始化接口。以Mixpanel为例，官方介入文档提供的加载、初始化SDK代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- start Mixpanel --&gt;</span><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,a</span>)</span>&#123;<span class=\"keyword\">if</span>(!a.__SV)&#123;<span class=\"keyword\">var</span> b=<span class=\"built_in\">window</span>;<span class=\"keyword\">try</span>&#123;<span class=\"keyword\">var</span> c,l,i,j=b.location,g=j.hash;c=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span>(l=a.match(<span class=\"built_in\">RegExp</span>(b+<span class=\"string\">\"=([^&amp;]*)\"</span>)))?l[<span class=\"number\">1</span>]:<span class=\"literal\">null</span>&#125;;g&amp;&amp;c(g,<span class=\"string\">\"state\"</span>)&amp;&amp;(i=<span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">decodeURIComponent</span>(c(g,<span class=\"string\">\"state\"</span>))),<span class=\"string\">\"mpeditor\"</span>===i.action&amp;&amp;(b.sessionStorage.setItem(<span class=\"string\">\"_mpcehash\"</span>,g),history.replaceState(i.desiredHash||<span class=\"string\">\"\"</span>,e.title,j.pathname+j.search)))&#125;<span class=\"keyword\">catch</span>(m)&#123;&#125;<span class=\"keyword\">var</span> k,h;<span class=\"built_in\">window</span>.mixpanel=a;a._i=[];a.init=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b,c,f</span>)</span>&#123;<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">e</span>(<span class=\"params\">b,a</span>)</span>&#123;<span class=\"keyword\">var</span> c=a.split(<span class=\"string\">\".\"</span>);<span class=\"number\">2</span>==c.length&amp;&amp;(b=b[c[<span class=\"number\">0</span>]],a=c[<span class=\"number\">1</span>]);b[a]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;b.push([a].concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"number\">0</span>)))&#125;&#125;<span class=\"keyword\">var</span> d=a;<span class=\"string\">\"undefined\"</span>!==<span class=\"keyword\">typeof</span> f?d=a[f]=[]:f=<span class=\"string\">\"mixpanel\"</span>;d.people=d.people||[];d.toString=<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(b)</span></span>&#123;<span class=\"keyword\">var</span> a=<span class=\"string\">\"mixpanel\"</span>;<span class=\"string\">\"mixpanel\"</span>!==f&amp;&amp;(a+=<span class=\"string\">\".\"</span>+f);b||(a+=<span class=\"string\">\" (stub)\"</span>);<span class=\"keyword\">return</span> a&#125;;d.people.toString=<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> d.toString(<span class=\"number\">1</span>)+<span class=\"string\">\".people (stub)\"</span>&#125;;k=<span class=\"string\">\"disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user\"</span>.split(<span class=\"string\">\" \"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">for</span>(h=<span class=\"number\">0</span>;h&lt;k.length;h++)e(d,k[h]);a._i.push([b,c,f])&#125;;a.__SV=<span class=\"number\">1.2</span>;b=e.createElement(<span class=\"string\">\"script\"</span>);b.type=<span class=\"string\">\"text/javascript\"</span>;b.async=!<span class=\"number\">0</span>;b.src=<span class=\"string\">\"undefined\"</span>!==<span class=\"keyword\">typeof</span> MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:<span class=\"string\">\"file:\"</span>===e.location.protocol&amp;&amp;<span class=\"string\">\"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\"</span>.match(<span class=\"regexp\">/^\\/\\//</span>)?<span class=\"string\">\"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\"</span>:<span class=\"string\">\"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js\"</span>;c=e.getElementsByTagName(<span class=\"string\">\"script\"</span>)[<span class=\"number\">0</span>];c.parentNode.insertBefore(b,c)&#125;&#125;)(<span class=\"built_in\">document</span>,<span class=\"built_in\">window</span>.mixpanel||[]);</span></span><br><span class=\"line\"><span class=\"actionscript\">mixpanel.init(<span class=\"string\">\"YOUR TOKEN\"</span>);</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span><span class=\"comment\">&lt;!-- end Mixpanel --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是一段立即执行的js代码，作用通常是去异步加载真正的JS SDK，然后调用SDK的初始化接口init方法，完成初始化的操作。</p>\n<p>初始化的核心代码为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mixpanel.init(<span class=\"string\">'YOUR TOKEN'</span>, &#123; <span class=\"attr\">your</span>: <span class=\"string\">'config'</span> &#125;, <span class=\"string\">'library_name'</span>)</span><br></pre></td></tr></table></figure>\n<p>也可以简写为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mixpanel.init(<span class=\"string\">\"YOUR TOKEN\"</span>)</span><br></pre></td></tr></table></figure>\n<p>看下init方里面几个参数的含义：</p>\n<ul>\n<li>第一个参数是你在后台注册的app token</li>\n<li>第二个参数是SDK的配置，传入了一堆key-value，如果不传，SDK内部也有个默认配置，长下面这样：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> DEFAULT_CONFIG = &#123;</span><br><span class=\"line\">    <span class=\"string\">'api_host'</span>: HTTP_PROTOCOL + <span class=\"string\">'api.mixpanel.com'</span>,</span><br><span class=\"line\">    <span class=\"string\">'app_host'</span>: HTTP_PROTOCOL + <span class=\"string\">'mixpanel.com'</span>,</span><br><span class=\"line\">    <span class=\"string\">'autotrack'</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否打开全埋点监测</span></span><br><span class=\"line\">    <span class=\"string\">'cdn'</span>: HTTP_PROTOCOL + <span class=\"string\">'cdn.mxpnl.com'</span>,</span><br><span class=\"line\">    <span class=\"string\">'cross_subdomain_cookie'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">'persistence'</span>: <span class=\"string\">'cookie'</span>,</span><br><span class=\"line\">    <span class=\"string\">'persistence_name'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">    <span class=\"string\">'cookie_name'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">    <span class=\"string\">'loaded'</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">    <span class=\"string\">'store_google'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">'save_referrer'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">'test'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'verbose'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'img'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'track_pageview'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">'debug'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'track_links_timeout'</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"string\">'cookie_expiration'</span>: <span class=\"number\">365</span>,</span><br><span class=\"line\">    <span class=\"string\">'upgrade'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'disable_persistence'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'disable_cookie'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'secure_cookie'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'ip'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">'property_blacklist'</span>: []</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第三个参数是SDK全局变量名</li>\n</ul>\n<blockquote>\n<p>Mixpanel接入文档：<a href=\"https://mixpanel.com/help/reference/javascript\" target=\"_blank\" rel=\"noopener\">https://mixpanel.com/help/reference/javascript</a></p>\n</blockquote>\n<h3 id=\"2-2-上报的基本实现\"><a href=\"#2-2-上报的基本实现\" class=\"headerlink\" title=\"2.2 上报的基本实现\"></a>2.2 上报的基本实现</h3><p>代码埋点的方式通常都会被封装成类似<code>track(eventName, properties)</code>的接口，例如在Mixpanel中，可以用<code>mixpanel.track(&quot;Played song&quot;, {&quot;genre&quot;: &quot;hip-hop&quot;});</code>来上报事件。</p>\n<p>这里是整个SDK中最重要的地方，使用频率也是最高的。代码位于<code>/src/mixpanel-core.js</code>里面，先撇开复杂的逻辑和条件控制，看一下track的基本实现，我稍微加了点注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  track方法实现</span></span><br><span class=\"line\">MixpanelLib.prototype.track = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event_name, properties, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 各种边界判断</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 获取一些公共参数，和用户传入的properties一起encode</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> truncated_data = _.truncate(data, <span class=\"number\">255</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> json_data = _.JSONEncode(truncated_data);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> encoded_data = _.base64Encode(json_data);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'MIXPANEL REQUEST:'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(truncated_data);</span><br><span class=\"line\">    <span class=\"comment\">// 调用_send_request发送请求</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._send_request(</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.get_config(<span class=\"string\">'api_host'</span>) + <span class=\"string\">'/track/'</span>,</span><br><span class=\"line\">        &#123; <span class=\"string\">'data'</span>: encoded_data &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._prepare_callback(callback, truncated_data)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> truncated_data;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送请求的实现，主要用的是XMLHttpRequest，如果浏览器不支持XMLHttpRequest，那么用动态添加img/script标签的方式</span></span><br><span class=\"line\">MixpanelLib.prototype._send_request = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, data, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一些特殊情况的处理</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'img'</span> <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">        img.src = url;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(img);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (USE_XHR) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> req = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">            req.open(<span class=\"string\">'GET'</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">// send the mp_optout cookie</span></span><br><span class=\"line\">            <span class=\"comment\">// withCredentials cannot be modified until after calling .open on Android and Mobile Safari</span></span><br><span class=\"line\">            req.withCredentials = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            req.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (req.readyState === <span class=\"number\">4</span>) &#123; <span class=\"comment\">// XMLHttpRequest.DONE == 4, except in safari 4</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (req.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (verbose_mode) &#123;</span><br><span class=\"line\">                                callback(_.JSONDecode(req.responseText));</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                callback(<span class=\"built_in\">Number</span>(req.responseText));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">var</span> error = <span class=\"string\">'Bad HTTP status: '</span> + req.status + <span class=\"string\">' '</span> + req.statusText;</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (verbose_mode) &#123;</span><br><span class=\"line\">                                callback(&#123;<span class=\"attr\">status</span>: <span class=\"number\">0</span>, <span class=\"attr\">error</span>: error&#125;);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                callback(<span class=\"number\">0</span>);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            req.send(<span class=\"literal\">null</span>); <span class=\"comment\">// 发送异步请求</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">        script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">        script.async = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        script.defer = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        script.src = url;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'script'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        s.parentNode.insertBefore(script, s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面就是事件上报代码的核心实现。但是由于Web应用自身的一些特性，比如在追踪页面跳转行为（链接的点击、表单的提交等）时，为了防止数据发送不及时导致的数据丢失，SDK中提供一些诸如<code>track_links</code>和<code>track_forms</code>特殊方法，这些方法内部用的其实是setTimeout或者等待服务器返回结果之后再让页面跳转。</p>\n<h2 id=\"三、全埋点\"><a href=\"#三、全埋点\" class=\"headerlink\" title=\"三、全埋点\"></a>三、全埋点</h2><p>Mixpanel和神策都提供了名为<strong>“AutoTrack”</strong>的方案，只需要在初始化SDK的时候，传入一个参数即可打开这个功能。JS SDK可以自动监测网页中所有的点击、表单submit等事件，这和AndroidSDK里面监听所有按钮的点击有些类似。</p>\n<h3 id=\"3-1-自动监测的元素、事件类型\"><a href=\"#3-1-自动监测的元素、事件类型\" class=\"headerlink\" title=\"3.1 自动监测的元素、事件类型\"></a>3.1 自动监测的元素、事件类型</h3><ul>\n<li><p><strong>神策JS：</strong>设置AutoTrack之后，SDK就会自动追踪页面上的按钮(<code>a</code>、<code>button</code>、<code>input</code>) 这种html标签类型的点击情况，一旦页面某一个按钮发生了点击行为，SDK就会去采集此按钮的一些信息，例如: 这个按钮的标签类型，这个按钮的文本内容，这个按钮的<code>name</code>，这个按钮的<code>id</code>、<code>class</code>名，还有一些按钮特有的属性如<code>href</code>等。</p>\n</li>\n<li><p><strong>MixpanelJS：</strong>设置AutoTrack之后，SDK会监测页面上的所有<code>form表单</code>、<code>input标签</code>、<code>select和textarea标签</code>产生的<code>submit</code>、<code>change</code>、<code>click</code>事件，并采集这些标签上的属性一起上报。</p>\n</li>\n</ul>\n<h3 id=\"3-2-全埋点监测的实现\"><a href=\"#3-2-全埋点监测的实现\" class=\"headerlink\" title=\"3.2 全埋点监测的实现\"></a>3.2 全埋点监测的实现</h3><p>以Mixpanel为例，在<code>/src/autotrack.js</code>代码中，把几个关键的方法扣出来看一下（不要问我为什么以Mixpanel为例，因为代码少一些。。。）。</p>\n<p>当SDK初始化的时候，会执行autotrack里面的<code>_addDomEventHandlers</code>方法，给整个document的<code>submit</code>、<code>change</code>、<code>click</code>事件设置监听器。当监听到这几类事件时，会执行<code>_trackEvent</code>方法。</p>\n<p>直接看代码，我给代码里面加了一点注释，来说明自动监测上报的过程。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SDK初始化时，通过register_event设置需要监听了submit、change、click这3类事件</span></span><br><span class=\"line\"><span class=\"comment\">// Mixpanel的js sdk代码里面自己封装了一个underscore模块，里面有一些工具方法</span></span><br><span class=\"line\">_addDomEventHandlers: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">instance</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> handler = _.bind(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._trackEvent(e, instance);</span><br><span class=\"line\">        &#125;, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        _.register_event(<span class=\"built_in\">document</span>, <span class=\"string\">'submit'</span>, handler, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        _.register_event(<span class=\"built_in\">document</span>, <span class=\"string\">'change'</span>, handler, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        _.register_event(<span class=\"built_in\">document</span>, <span class=\"string\">'click'</span>, handler, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// register_event的实现，优先采用addEventListener的方式，如果浏览器不支持会尝试使用onXXX的方式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> register_event = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler, oldSchool, useCapture</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!element) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(<span class=\"string\">'No valid element provided to register_event'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element.addEventListener &amp;&amp; !oldSchool) &#123;</span><br><span class=\"line\">            element.addEventListener(type, handler, !!useCapture);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ontype = <span class=\"string\">'on'</span> + type;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> old_handler = element[ontype]; <span class=\"comment\">// can be undefined</span></span><br><span class=\"line\">            element[ontype] = makeHandler(element, handler, old_handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听到事件发生后，调用_trackEvent方法来上报</span></span><br><span class=\"line\">_trackEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, instance</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 首先找到这个事件的target</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>._getEventTarget(e);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.nodeType === TEXT_NODE) &#123;</span><br><span class=\"line\">            target = target.parentNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 然后判断是不是autotrack要监测的事件，如果不是的话，啥也不干直接返回。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._shouldTrackDomEvent(target, e)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果满足监测条件，那么从当前标签开始，向上追溯到body标签，并记录这条路径上所有的元素到一个数组中</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> targetElementList = [target];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> curEl = target;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (curEl.parentNode &amp;&amp; !<span class=\"keyword\">this</span>._isTag(curEl, <span class=\"string\">'body'</span>)) &#123;</span><br><span class=\"line\">                targetElementList.push(curEl.parentNode);</span><br><span class=\"line\">                curEl = curEl.parentNode;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 按照刚才记录的路径开始遍历（相当于自底向上）</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> elementsJson = [];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> href, elementText, form, explicitNoTrack = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            _.each(targetElementList, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, idx</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// if the element or a parent element is an anchor tag</span></span><br><span class=\"line\">                <span class=\"comment\">// include the href as a property</span></span><br><span class=\"line\">                <span class=\"comment\">// 读取到a标签或者form标签时，记录它们的属性。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (el.tagName.toLowerCase() === <span class=\"string\">'a'</span>) &#123;</span><br><span class=\"line\">                    href = el.getAttribute(<span class=\"string\">'href'</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.tagName.toLowerCase() === <span class=\"string\">'form'</span>) &#123;</span><br><span class=\"line\">                    form = el;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// crawl up to max of 5 nodes to populate text content</span></span><br><span class=\"line\">                <span class=\"comment\">// 读取节点的文本内容，最多往上读个5层</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!elementText &amp;&amp; idx &lt; <span class=\"number\">5</span> &amp;&amp; el.textContent) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> textContent = _.trim(el.textContent);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (textContent) &#123;</span><br><span class=\"line\">                        elementText = textContent.replace(<span class=\"regexp\">/[\\r\\n]/g</span>, <span class=\"string\">' '</span>).replace(<span class=\"regexp\">/[ ]+/g</span>, <span class=\"string\">' '</span>).substring(<span class=\"number\">0</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// allow users to programatically prevent tracking of elements by adding class 'mp-no-track'</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果不希望某个节点被监测，开发者可以设置一个名为`mp-no-track`的css class</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> classes = <span class=\"keyword\">this</span>._getClassName(el).split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (_.includes(classes, <span class=\"string\">'mp-no-track'</span>)) &#123;</span><br><span class=\"line\">                    explicitNoTrack = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 读取每个标签的属性，最后这条路径上所有的标签都会被记录下来保存在elementsJson数组中</span></span><br><span class=\"line\">                elementsJson.push(<span class=\"keyword\">this</span>._getPropertiesFromElement(el));</span><br><span class=\"line\">            &#125;, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 如果是一个开发者设置了不需要监测的标签，那么直接返回，不上报了</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (explicitNoTrack) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 处理采集到的属性，这里面有几个getXXXProperties(element/elements)方法（_getPropertiesFromElement、_getDefaultProperties、_getCustomProperties、_getFormFieldProperties），就是在读取各种属性</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> props = _.extend(</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._getDefaultProperties(e.type), <span class=\"comment\">// 事件的基本属性，包含事件名称、window.location.host、window.location.pathname</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"string\">'$elements'</span>: elementsJson, <span class=\"comment\">// target标签到body标签这条路径上的所有标签及其属性</span></span><br><span class=\"line\">                    <span class=\"string\">'$el_attr__href'</span>: href, <span class=\"comment\">// 采集到的href链接</span></span><br><span class=\"line\">                    <span class=\"string\">'$el_text'</span>: elementText <span class=\"comment\">// target标签的文本内容</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">this</span>._getCustomProperties(targetElementList) <span class=\"comment\">// 读取自定义属性，这里应该是指用户在后台管理界面配置的属性</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (form &amp;&amp; (e.type === <span class=\"string\">'submit'</span> || e.type === <span class=\"string\">'click'</span>)) &#123;</span><br><span class=\"line\">                _.extend(props, <span class=\"keyword\">this</span>._getFormFieldProperties(form)); <span class=\"comment\">// 读取表单的一些属性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 调用了代码埋点中介绍的track方法上报一个名为`$web_event`的事件，并带上采集的到的属性</span></span><br><span class=\"line\">            instance.track(<span class=\"string\">'$web_event'</span>, props);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _trackEvent之前，需要判断标签上的发生的事件是不是应该被autotrack监测上报</span></span><br><span class=\"line\">_shouldTrackDomEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// html根节点下面的事件不需要监测</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!element || <span class=\"keyword\">this</span>._isTag(element, <span class=\"string\">'html'</span>) || element.nodeType !== ELEMENT_NODE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tag = element.tagName.toLowerCase();</span><br><span class=\"line\">        <span class=\"comment\">// 查看标签的名字</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果是html则不监听</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果是form标签下的submit事件，或者是input-&gt;button、input-&gt;submit标签的change、click事件，或者是select、textarea标签下的change、click事件，可以监听</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果是其他标签，监听click事件</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (tag) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'html'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'form'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> event.type === <span class=\"string\">'submit'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'input'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ([<span class=\"string\">'button'</span>, <span class=\"string\">'submit'</span>].indexOf(element.getAttribute(<span class=\"string\">'type'</span>)) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> event.type === <span class=\"string\">'change'</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> event.type === <span class=\"string\">'click'</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'select'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'textarea'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> event.type === <span class=\"string\">'change'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> event.type === <span class=\"string\">'click'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-全埋点小结\"><a href=\"#3-3-全埋点小结\" class=\"headerlink\" title=\"3.3 全埋点小结\"></a>3.3 全埋点小结</h3><p>可以看到全埋点还是有点暴力的，会采集的数据量也挺大，并且采集到的属性也比较多，可以看到在MixpanelSDK中，如果页面结构比较深，那么数据报过去分析起来可能还是需要花点时间的，同时也会产生大量可能不会使用的数据，对资源也是一种浪费。在神策SDK的接入文档中也提到，建议那些按钮不是很多的，相对简单的页面可以采用这个方法。一般情况下，如果网页上的按钮比较多的话，因为每次按钮的点击都会发数据，数据量很大。</p>\n<h2 id=\"四、可视化埋点\"><a href=\"#四、可视化埋点\" class=\"headerlink\" title=\"四、可视化埋点\"></a>四、可视化埋点</h2><p>Mixpanel和神策等平台，都提供了JS可视化埋点功能，与全埋点相比，这种方式可以指定自己想要监测的元素和属性（所有可以点击的元素），既可以做到动态配置，又不会像全埋点那样产生大量的数据（但也有例外，比如Mixpanel的可视化埋点仍然上报了全量点击数据，只是在后台根据可视化配置过滤出实际的数据）。</p>\n<p>可视化埋点首先需要进入埋点模式，以Mixpanel为例，可视化埋点的入口在后台管理界面，需要在后台输入需要埋点的页面url，然后再进入我的Web页面，此时就会加载可视化标记的编辑器（代码见<code>autotrack.js</code>中的<code>_maybeLoadEditor</code>方法，需要注意的是这个页面必须已经嵌入了JS SDK）。</p>\n<blockquote>\n<p>这里一定要从平台登录才可以进入可视化编辑状态，这实际上是对安全性的一个保证，试想如果只要嵌入SDK就可以做可视化埋点，那岂不是我的Web应用随便就可以被别人埋点，对我的数据产生干扰了。在Mixpanel JS SDK内部，通常会<strong>判断当前页面的sessionStorge/localStorage中是否有一个开启可视化编辑器标志字段（例如Mixpanel是<code>_mpcehash</code>字段）</strong>，读取这个字段，解析到其中的打开可视化编辑器的开关开启之后，就会加载可视化编辑器。由此可见其实从SDK后台管理界面跳转到可视化标记页面时，就是向SessionStorage中写入了相应的标志。</p>\n</blockquote>\n<p><strong>可视化埋点的两个关键点是：</strong></p>\n<ul>\n<li><strong>标记元素，保存配置</strong>：这一步要保存好需要追踪的元素的element_path，以及需要追踪的元素。</li>\n<li><strong>下发配置，查找元素，监听点击，上报行为</strong>：这一步要通过element_path找到元素，给它添加一个点击监听器，当点击事件发生时SDK上报事件。</li>\n</ul>\n<p>这里最重要的就是：<strong>元素的标记和查找</strong>，不同的SDK就是实现标记和查找的时候稍微有一些差异。</p>\n<h3 id=\"4-1-标记元素，保存配置\"><a href=\"#4-1-标记元素，保存配置\" class=\"headerlink\" title=\"4.1 标记元素，保存配置\"></a>4.1 标记元素，保存配置</h3><blockquote>\n<p>MixpanelJS加载可视化编辑器时，需要从<code>//mixpanel.com/js-bundle/reports/collect-everything/editor.js?_ts={$timestamp}</code>去加载一个js文件，<strong>这个js差不多可以看成一个独立的标记SDK，</strong>最后这个请求会被重定向到一个cdn地址（<code>https://cdn4.mxpnl.com/static/asset-cache/3fc4abfdcebcb5121f1ebf143415b232/compiled/reports/collect-everything/editor.min.js</code>），随便打开这个js看下就有两万多行，因此单独做成了一个按需加载的模块。</p>\n</blockquote>\n<p>由于Mixpanel就没有提供标记SDK的源码，不过从体验和<strong>抓包分析后台下发的配置</strong>，我仍然可以推测出技术实现的细节。</p>\n<p><strong>从体验的角度来讲，</strong>当进入可视化编辑状态时，在开发者web页面上，用户的鼠标经过<strong>可以被点击</strong>的元素（例如a、button标签等）时，这个元素会被一种颜色高亮提示，此时点击一下这个元素，就会弹出一个浮窗，用户填写信息，设置一个事件和一些属性，保存之后就算完成对这个元素的标记操作了，当标记过的元素的配置保存好了以后，这个元素会用另外一种特殊的颜色高亮标识起来。</p>\n<p><strong>从技术的角度来讲，</strong>我看下神策JS SDK中的<code>vtrack.sdk.js</code>这个文件，当神策SDK进入可视化标记模式的时候，会去加载<code>vendor.js</code>和<code>vendor.css</code>，这两个文件可以看作一个标记SDK。那么<code>vendor.js</code>代码里是<strong>如何标记需要追踪的元素的</strong>呢？</p>\n<p>在<code>vendor.js</code>中，有一个<code>EventDefine</code>模块，这个模块负责把一个标签处理成我要保存的selector。</p>\n<p><strong>EventDefine</strong>有三个方法：</p>\n<ul>\n<li>getSelfAttr：获取一个标签内的文本内容，举例来说，一个<code>&lt;p&gt;This is another paragraph.&lt;/p&gt;</code>得到的内容是<code>This is another paragraph.</code>。</li>\n<li>toSelector：把一个标签的tagName、id、classNames解析出来，拼成一个串。举例来说，一个<code>&lt;div id=&quot;test&quot; class=&quot;uncle chen&quot;&gt;&lt;/div&gt;</code>标签，它的selector是<code>div#id.uncle.chen</code>，这个selector是可以直接给jQuery用来查找元素的。</li>\n<li>toAllSelector：选择一个需要追踪的标签，并给这个标签定义点击时上报的事件（EventDefine），最后将这个事件转成一个selector保存下来，selector就是用于给jQuery来查找元素的选择器，这里需要注意，如果一个元素是在iFrame里面的，那么SDK保存的选择器路径是相对iFrame内部的，而不是最外层的document。</li>\n</ul>\n<p>前两个方法都是给<code>toAllSelector</code>方法调用的，<code>toAllSelector</code>方法是神策的标记SDK的重点，这个方法的实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toAllSelector: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$target, outDocuemnt</span>) </span>&#123;</span><br><span class=\"line\">    outDocuemnt = outDocuemnt ? $(outDocuemnt) : $(<span class=\"built_in\">document</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $parent, newSelSize, newSelector, parts, selSize, selector, targetSel;</span><br><span class=\"line\">    selector = <span class=\"keyword\">this</span>.toSelector($target, outDocuemnt);</span><br><span class=\"line\">    $parent = $target.parent();</span><br><span class=\"line\">    selSize = outDocuemnt.find(selector).length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($parent.prop(<span class=\"string\">'tagName'</span>) !== <span class=\"string\">'BODY'</span> &amp;&amp; selSize !== <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      newSelector = <span class=\"string\">''</span> + (<span class=\"keyword\">this</span>.toSelector($parent)) + <span class=\"string\">' '</span> + selector; <span class=\"comment\">// 如果向上回溯的话，selector会用空格分开保存</span></span><br><span class=\"line\">      newSelSize = outDocuemnt.find(newSelector).length;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newSelSize &lt; selSize) &#123;</span><br><span class=\"line\">        selector = newSelector;</span><br><span class=\"line\">        selSize = newSelSize;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      $parent = $parent.parent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nthEle = selector;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> selfAttr = <span class=\"keyword\">this</span>.getSelfAttr($target);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      nthEle: nthEle,</span><br><span class=\"line\">      selfAttr: selfAttr</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>当选中一个标签时，SDK会提取出这个标签的selector，然后用jQuery选择器查找这个selector指向的元素，如果这个selector指向的元素有多个（<code>selSize !== 1</code>，也就是说这个元素有着多个兄弟标签），那么还需要进一步去提取其父标签的selector，直到找出可以<strong>唯一</strong>标识这个元素的selector为止，最后将需要追踪的这个元素以{nthEle: nthEle, selfAttr: selfAttr}`，nthEle是selector，selfAttr是文本内容。</p>\n<p><strong>简单总结一下元素的标记，在Web页面中，一个元素的唯一css选择器生成算法，应该记录了从body到这个元素的完整路径，并记录每一个节点是其父亲节点的第几个孩子节点，即这个元素在整个Dom Tree中的深度和下标。此外，为了在一定程度上抵抗Dom Tree的变化，下标应该记录的是这个元素在父节点中相同类型元素的index（nth-of-type），而不是其父节点下面所有孩子节点的index（nth-child）。</strong></p>\n<h3 id=\"4-2-查找元素，监听上报\"><a href=\"#4-2-查找元素，监听上报\" class=\"headerlink\" title=\"4.2 查找元素，监听上报\"></a>4.2 查找元素，监听上报</h3><p>标记元素，保存配置之后，SDK如何根据配置来监测配置好的元素，并进行上报呢？前面我说到Mixpanel在可视化埋点的上报实现里，仍然保持了全量点击事件上报，并在每个上报中把元素在Dom Tree的完整路径一起上报到了后台，由后台去过滤出可视化事件。</p>\n<p>所以这里我看下神策js的代码，在可视化模块<code>vtrack.sdk.js</code>中，正常模式下，会去解析后台下发的配置，找到标记过的元素，绑定事件。</p>\n<p><strong>1.下发配置</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 进入普通模式时，会从后台的一个接口去拉去标记过的元素（这里也叫“部署”过的元素）的关键信息，然后进行解析</span></span><br><span class=\"line\">  enterNormalMode: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    sd.vtrack_mode = <span class=\"string\">'normalMode'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getDeployFile().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      me.parseDeployFile(); <span class=\"comment\">// 解析配置</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>由于神策的后台代码是走私有化部署的，我没有办法体验，这里看一份诸葛IO平台可视化配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"code\"</span>: <span class=\"number\">10001</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"Request success\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"visual_events\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"event_name\"</span>: <span class=\"string\">\"button3333\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=kc0vtnal8qahrd2tq5obomukh8\"</span>, </span><br><span class=\"line\">      <span class=\"attr\">\"element\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"#b\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"attr\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ppp\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"body&gt;p:eq(0)\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"app_id\"</span>: <span class=\"number\">56070</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"platform\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"create_date_time\"</span>: <span class=\"string\">\"2018-01-23 17:45:53\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"hidden\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"stop\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"alias_name\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"edit_url\"</span>: <span class=\"string\">\"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=kc0vtnal8qahrd2tq5obomukh8\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"event_name\"</span>: <span class=\"string\">\"button点击2222\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"element\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"#b\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"attr\"</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">\"app_id\"</span>: <span class=\"number\">56070</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"platform\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"create_date_time\"</span>: <span class=\"string\">\"2018-01-23 17:39:16\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"hidden\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"stop\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"alias_name\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"edit_url\"</span>: <span class=\"string\">\"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=k9d5hjmkqt1ethu1ao51cf4t9e\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"event_name\"</span>: <span class=\"string\">\"20180123\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"element\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"#b\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"attr\"</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">\"app_id\"</span>: <span class=\"number\">56070</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"platform\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"create_date_time\"</span>: <span class=\"string\">\"2018-01-23 17:08:04\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"hidden\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"stop\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"alias_name\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"edit_url\"</span>: <span class=\"string\">\"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=ir7e9n0scm88b0k2uvotnc4ntd\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"event_name\"</span>: <span class=\"string\">\"hello链接点击\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"element\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"body&gt;a:eq(0)\"</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"attr\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"自定义属性\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"body&gt;p:eq(0)\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">\"app_id\"</span>: <span class=\"number\">56070</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"platform\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"create_date_time\"</span>: <span class=\"string\">\"2017-12-22 16:25:29\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"hidden\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"stop\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"alias_name\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"edit_url\"</span>: <span class=\"string\">\"http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，上面这份配置有两个字段，一个是url，另一个是editUrl，editUrl表示标记元素的时候，是在哪一个页面里操作的。url表示应该去哪个url下面查找标记的元素。因为有些情况下，虽然我们是在某一个页面标记的元素，但是我们有很多其他页面和这个页面长得类似，比如商品详情类的页面，所以我们其实希望在所有的商品详情页都可以上报某些事件。所以，如果url为一个具体的值，例如”<a href=\"http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#\" target=\"_blank\" rel=\"noopener\">http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#</a>“，说明只应该在这个url对应的页面中查找元素，上报行为即可；如果url=””，说明我们应该在整个Web应用中的所有页面都去依据路径查找元素，上报事件。</p>\n<p><strong>2.解析配置，监测元素</strong></p>\n<p>还是直接看神策代码实现，里面加了点注释：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解析配置，查看当前页面中是否有元素需要被追踪，把需要追踪的元素的配置保存到requiredData变量中</span></span><br><span class=\"line\">parseDeployFile: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.requireData = <span class=\"keyword\">this</span>.checkUrl(<span class=\"keyword\">this</span>.deployData);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.listenEvents();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 找到元素，绑定点击事件的处理，当元素被点击时，上报事件</span></span><br><span class=\"line\">listenEvents: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"keyword\">this</span>.requireData;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; data.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getEle(data[i]).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        me.doVTrackAction(ev);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;(data[i]));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">doVTrackAction: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  sd.track(</span><br><span class=\"line\">    data.eventName,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      $from_vtrack: <span class=\"built_in\">String</span>(data.trigger_id)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      $lib_method: <span class=\"string\">'vtrack'</span>,</span><br><span class=\"line\">      $lib_detail: <span class=\"built_in\">String</span>(data.trigger_id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 通过jQuery的选择器来找到元素，我在前一节的标记操作中知道，标记SDK会把一个定义好的事件eventDefine转化成一个&#123;nthEle: nthEle, selfAttr: selfAttr&#125;结构保存起来，这里去寻找元素的时候和标记那里的逻辑其实是一个逆操作。</span></span><br><span class=\"line\"><span class=\"comment\">// 这里要注意，和标记时一样元素，碰到iframe时要特殊处理一下。</span></span><br><span class=\"line\">getEle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ele;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($(data.nthEle[<span class=\"number\">0</span>]) &amp;&amp; $(data.nthEle[<span class=\"number\">0</span>]).prop(<span class=\"string\">'tagName'</span>) === <span class=\"string\">'IFRAME'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      ele = $(data.nthEle[<span class=\"number\">0</span>]).contents().find(data.nthEle.slice(<span class=\"number\">1</span>).join(<span class=\"string\">' '</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ele = $(data.nthEle.join(<span class=\"string\">' '</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data.selfAttr &amp;&amp; data.selfAttr.text !== <span class=\"keyword\">void</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    ele = ele.filter(<span class=\"string\">':contains('</span> + data.selfAttr.text + <span class=\"string\">')'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>神策查找元素的时候用到了jQuery，而在Mixpanel中没有用jQuery，而是用的<code>Document.querySelectorAll</code>这个API。毕竟有很多移动页面为了优化加载速度，不会用jQuery这么重的库。</p>\n<p>此外，当追踪一些特殊的标签时，可以考虑用<a href=\"http://www.w3school.com.cn/xpath/\" target=\"_blank\" rel=\"noopener\">XPath</a>去定位，今日头条的广告监测插件其实就用到了XPath。</p>\n<p><strong>3.给事件上报添加属性</strong></p>\n<p>单独把添加属性拿出来讲，是因为它的原理是类似的。前面我们只提到标记一个元素，当它被点击的时候上报事件，但是这样没有在上报事件的同时带上自定义的一些属性。</p>\n<p>其实只要是Web页面上出现了的元素，我们都可以把它记录下来，然后在事件发生的时候，查找到这些元素，并把它们的内容作为事件的属性上报上来。我们可以在标记了一个元素的时候，再去标记其他的一些元素（例如一些文本标签），并设置其他这些元素各自所对应的key，当事件发生时，我们可以找到其他这些元素，并获取到其中显示的文本内容，作为各自参数的值，上报到后台。</p>\n<h3 id=\"4-3-可视化埋点小结\"><a href=\"#4-3-可视化埋点小结\" class=\"headerlink\" title=\"4.3 可视化埋点小结\"></a>4.3 可视化埋点小结</h3><p>可以看出，在JS上实现可视化埋点不是一件太麻烦的事情，我认为最关键的两件事就是标记元素和查找元素。不过它缺点是只会读取页面上的标签元素的展示出来的属性，也不会像代码埋点的方案那样去理解业务场景，获取上下文（通常在内存里）的一些属性；另外，当页面的结构发生变化的时候，可能要重新进行一次标记操作。有些平台是通过对事件监测的告警来提醒用户的，当事件数量同比大幅减少的时候，大概率是因为某次改版导致页面Dom Tree产生了变化，通过配置下发里面的元素路径找不到之前标记的元素了，这时就应该提醒用户重新标记。</p>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>本文从代码埋点、全埋点、可视化埋点三个角度，以Mixpanel、神策数据的JS SDK的源代码，分析了Web页面埋点的实现方案的实现。在流量红利逐渐消失的现在，数据的采集、分析和精细化的运营显得更加重要，下面简单列一个表格对以上三种方式的埋点方案进行对比，还是那句话，三种埋点方式相辅相成，结合业务需求搭配使用，适合自己的才是最好的。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">埋点方案</th>\n<th style=\"text-align:left\">优点</th>\n<th style=\"text-align:left\">缺点</th>\n<th style=\"text-align:left\">适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">代码埋点</td>\n<td style=\"text-align:left\">可以按照业务上报详细、定制化的数据</td>\n<td style=\"text-align:left\">需要开发人员参与，更新维护成本高，无法获得历史数据</td>\n<td style=\"text-align:left\">对上下文理解要求较高的业务数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">全埋点</td>\n<td style=\"text-align:left\">对发人员依赖低，仅需嵌入一次SDK，可以全量上报通用数据，可以拿到历史数据</td>\n<td style=\"text-align:left\">数量量太大，占用更多资源，且无法收集业务上下文数据，给后续数据筛选和分析带来一定的难度</td>\n<td style=\"text-align:left\">上下文相对独立的、通用的数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可视化埋点</td>\n<td style=\"text-align:left\">对开发人员依赖低，可以按照业务需求上报数据，对上下文数据有一定收集能力</td>\n<td style=\"text-align:left\">标记事件有一定的操作难度，事件需要被更新时无法获得历史数据，界面变化时标记的元素可能失效</td>\n<td style=\"text-align:left\">业务上下文数据相对简单，操作交互比较固定的界面</td>\n</tr>\n</tbody>\n</table>"},{"layout":"post","title":"不写代码，快速实现px转换成dp","date":"2016-08-21T00:00:00.000Z","_content":"\n有很多朋友在实际的工作中，会遇到设计同事给了一张设计图，上面只有px标注的距离和尺寸。产品看到设计稿后，就拿给iOS和Android的开发，说就按这个做。iOS开发可能还好，虽然也有9种屏幕，但那毕竟是两只手数的来的。但是Android开发可能是心中无数只草泥马奔腾 + 一脸懵逼。。\n\n其实我们只要把px转换成dp就可以了，两步走：\n\n- 第1步：确认设计稿中的屏幕dpi是多少\n- 第2步：根据dpi，将px值转换成dp值\n\n<!-- more -->\n\n# 方法1：不写代码，快速实现\n\n不管哪种方法，请先记住下面这个dpi范围对照表：\n\n- 0dpi ~ 120dpi：ldpi\n\n- 120dpi ~ 160dpi：mdpi\n\n- 160dpi ~ 240dpi：hdpi\n\n- 240dpi ~ 320dpi：xhdpi\n\n- 320dpi ~ 480dpi：xxhdpi\n\n- 480dpi ~ 640dpi：xxxhdpi\n\n\n\n## 第1步 - 确认手机屏幕的DPI\n\n写代码不是万能的，假如设计师给的稿子里面用的屏幕，是我们手上没有的呢？或者我们根本不确定它这个设计稿上的屏幕是什么手机呢？？上哪儿去写代码run？\n\n（1）网上找一下这个手机的屏幕分辨率和尺寸（如果这个手机真实存在的话。。可能有些设计师给的就是iphone的设计稿。。）。或者如果设计师可以给你的话，那就是最好的。\n\n（2）得到了宽、高像素，用勾股定理计算出对角线的像素值，再除以屏幕尺寸就得到了屏幕的dpi，然后根据上面的表格，即可得到你手机是哪个dpi的了。\n\n> tips：其实很多网上列出手机参数的时候，除了**主屏分辨率**，一般也会列出**屏幕像素密度**，但一般都是拿ppi作为单位的。 所以如果设计稿里面是真实存在的机器，一般可以不用自己计算了。\n\n\n## 第2步 - 把PX值转换成DP值\n\n直接上利器：[android_dp_px_calculator](http://labs.rampinteractive.co.uk/android_dp_px_calculator/)\n\n![android_dp_px_calculator](http://ww2.sinaimg.cn/large/006y8lVagw1f70nuqvhiqj30go0dqgnb.jpg)\n\n这个利器是一个开发者已经做好的工具，显然选择一个dpi，然后输入px值，就自动生成dp值了。反之亦可。如果能在开发之前就能搞定px转dp，心里还是比较爽的。\n\n> 其实可以看到这个工具原理很简单：如果可以确定屏幕的dpi是**xxh-dpi**的，那么也就确定了density = 3，此时`dp = px/3`，其实是很简单的计算。我们只需要知道`density = dpi/160`。\n\n***\n\n# 方法2：通过写代码自己实现\n\n还是两步走，不过都要靠写代码run。\n\n## 第1步 - 确认手机屏幕的DPI\n\n找到设计师给的设计稿手机型号，写几行代码，run一下。得到横纵方向的xdpi，ydpi，通常，这两个值应该接近，至少也是在上面列出的同一个dpi范围的。\n\n```\n// 这两行是从郭神的博客里看到的\nfloat xdpi = getResources().getDisplayMetrics().xdpi;\nfloat ydpi = getResources().getDisplayMetrics().ydpi;\n\n// 后来发现其实有更直接的方法，具体返回值待确认\nfloat density = getResources().getDisplayMetrics().density;\nint densityDpi = getResources().getDisplayMetrics().densityDpi;\n```\n\n\n## 第2步 - 把PX值转换成DP值\n\n相信很多人都写过这段代码，直接用当前运行中的手机的屏幕密度来转换px和dp。\n\n```\npublic class PxUtils {\n\n    public static int px2dp(Context context, float pxValue) {\n        float scale = context.getResources().getDisplayMetrics().density;\n        return (int) (pxValue / scale + 0.5f);\n    }\n\n    public static int dp2px(Context context, float dpValue) {\n        float scale = context.getResources().getDisplayMetrics().density;\n        return (int) (dpValue * scale + 0.5f);\n    }\n\n    public static int px2sp(Context context, float pxValue) {\n        float fontScale = context.getResources().getDisplayMetrics().scaledDensity;\n        return (int) (pxValue / fontScale + 0.5f);\n    }\n\n    public static int sp2px(Context context, float spValue) {\n        float fontScale = context.getResources().getDisplayMetrics().scaledDensity;\n        return (int) (spValue * fontScale + 0.5f);\n    }\n\n}\n\n```\n\n***\n\n# 知识总结\n\n基础知识不能丢，把一些基本概念记录一下。\n\n- dip：Density independent pixels，设备无关像素。\n- dp：等于dip。\n- px：物理像素。\n- dpi：dots per inch，直译就是每英寸多少个像素。常见取值为`120`，`160`，`240`，`320`，`480`，`640`，，也可以叫像素密度。\n- density：屏幕密度，`density = dpi / 160px`。所以它的常见取值为`0.75`，`1`，`1.5`，`2`，`3`，`4`，对应着Android工程里面的`ldpi`，`mdpi`，`hdpi`，`xhdpi`，`xxhdpi`，`xxxhdpi`。\n- 分辨率：横纵2个方向的像素点的数量，常见取值`1080x1920`这样的，表示宽度有1080个像素点，高度有1920个像素点。\n- 屏幕尺寸：屏幕对角线的长度。\n\n关于屏幕适配的问题，更多细节参考官网：[https://developer.android.com/guide/practices/screens_support.html](https://developer.android.com/guide/practices/screens_support.html)\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/不写代码实现px转换成dp.md","raw":"---\nlayout: post\ntitle: 不写代码，快速实现px转换成dp\ndate: '2016-08-21'\ntags:\n  - Android\n  - 适配\n  - 微技巧\ncategories: \n  - 技术\n---\n\n有很多朋友在实际的工作中，会遇到设计同事给了一张设计图，上面只有px标注的距离和尺寸。产品看到设计稿后，就拿给iOS和Android的开发，说就按这个做。iOS开发可能还好，虽然也有9种屏幕，但那毕竟是两只手数的来的。但是Android开发可能是心中无数只草泥马奔腾 + 一脸懵逼。。\n\n其实我们只要把px转换成dp就可以了，两步走：\n\n- 第1步：确认设计稿中的屏幕dpi是多少\n- 第2步：根据dpi，将px值转换成dp值\n\n<!-- more -->\n\n# 方法1：不写代码，快速实现\n\n不管哪种方法，请先记住下面这个dpi范围对照表：\n\n- 0dpi ~ 120dpi：ldpi\n\n- 120dpi ~ 160dpi：mdpi\n\n- 160dpi ~ 240dpi：hdpi\n\n- 240dpi ~ 320dpi：xhdpi\n\n- 320dpi ~ 480dpi：xxhdpi\n\n- 480dpi ~ 640dpi：xxxhdpi\n\n\n\n## 第1步 - 确认手机屏幕的DPI\n\n写代码不是万能的，假如设计师给的稿子里面用的屏幕，是我们手上没有的呢？或者我们根本不确定它这个设计稿上的屏幕是什么手机呢？？上哪儿去写代码run？\n\n（1）网上找一下这个手机的屏幕分辨率和尺寸（如果这个手机真实存在的话。。可能有些设计师给的就是iphone的设计稿。。）。或者如果设计师可以给你的话，那就是最好的。\n\n（2）得到了宽、高像素，用勾股定理计算出对角线的像素值，再除以屏幕尺寸就得到了屏幕的dpi，然后根据上面的表格，即可得到你手机是哪个dpi的了。\n\n> tips：其实很多网上列出手机参数的时候，除了**主屏分辨率**，一般也会列出**屏幕像素密度**，但一般都是拿ppi作为单位的。 所以如果设计稿里面是真实存在的机器，一般可以不用自己计算了。\n\n\n## 第2步 - 把PX值转换成DP值\n\n直接上利器：[android_dp_px_calculator](http://labs.rampinteractive.co.uk/android_dp_px_calculator/)\n\n![android_dp_px_calculator](http://ww2.sinaimg.cn/large/006y8lVagw1f70nuqvhiqj30go0dqgnb.jpg)\n\n这个利器是一个开发者已经做好的工具，显然选择一个dpi，然后输入px值，就自动生成dp值了。反之亦可。如果能在开发之前就能搞定px转dp，心里还是比较爽的。\n\n> 其实可以看到这个工具原理很简单：如果可以确定屏幕的dpi是**xxh-dpi**的，那么也就确定了density = 3，此时`dp = px/3`，其实是很简单的计算。我们只需要知道`density = dpi/160`。\n\n***\n\n# 方法2：通过写代码自己实现\n\n还是两步走，不过都要靠写代码run。\n\n## 第1步 - 确认手机屏幕的DPI\n\n找到设计师给的设计稿手机型号，写几行代码，run一下。得到横纵方向的xdpi，ydpi，通常，这两个值应该接近，至少也是在上面列出的同一个dpi范围的。\n\n```\n// 这两行是从郭神的博客里看到的\nfloat xdpi = getResources().getDisplayMetrics().xdpi;\nfloat ydpi = getResources().getDisplayMetrics().ydpi;\n\n// 后来发现其实有更直接的方法，具体返回值待确认\nfloat density = getResources().getDisplayMetrics().density;\nint densityDpi = getResources().getDisplayMetrics().densityDpi;\n```\n\n\n## 第2步 - 把PX值转换成DP值\n\n相信很多人都写过这段代码，直接用当前运行中的手机的屏幕密度来转换px和dp。\n\n```\npublic class PxUtils {\n\n    public static int px2dp(Context context, float pxValue) {\n        float scale = context.getResources().getDisplayMetrics().density;\n        return (int) (pxValue / scale + 0.5f);\n    }\n\n    public static int dp2px(Context context, float dpValue) {\n        float scale = context.getResources().getDisplayMetrics().density;\n        return (int) (dpValue * scale + 0.5f);\n    }\n\n    public static int px2sp(Context context, float pxValue) {\n        float fontScale = context.getResources().getDisplayMetrics().scaledDensity;\n        return (int) (pxValue / fontScale + 0.5f);\n    }\n\n    public static int sp2px(Context context, float spValue) {\n        float fontScale = context.getResources().getDisplayMetrics().scaledDensity;\n        return (int) (spValue * fontScale + 0.5f);\n    }\n\n}\n\n```\n\n***\n\n# 知识总结\n\n基础知识不能丢，把一些基本概念记录一下。\n\n- dip：Density independent pixels，设备无关像素。\n- dp：等于dip。\n- px：物理像素。\n- dpi：dots per inch，直译就是每英寸多少个像素。常见取值为`120`，`160`，`240`，`320`，`480`，`640`，，也可以叫像素密度。\n- density：屏幕密度，`density = dpi / 160px`。所以它的常见取值为`0.75`，`1`，`1.5`，`2`，`3`，`4`，对应着Android工程里面的`ldpi`，`mdpi`，`hdpi`，`xhdpi`，`xxhdpi`，`xxxhdpi`。\n- 分辨率：横纵2个方向的像素点的数量，常见取值`1080x1920`这样的，表示宽度有1080个像素点，高度有1920个像素点。\n- 屏幕尺寸：屏幕对角线的长度。\n\n关于屏幕适配的问题，更多细节参考官网：[https://developer.android.com/guide/practices/screens_support.html](https://developer.android.com/guide/practices/screens_support.html)\n\n\n\n\n\n\n\n\n\n\n","slug":"不写代码实现px转换成dp","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8ee001dmtsx8zgoa65b","content":"<p>有很多朋友在实际的工作中，会遇到设计同事给了一张设计图，上面只有px标注的距离和尺寸。产品看到设计稿后，就拿给iOS和Android的开发，说就按这个做。iOS开发可能还好，虽然也有9种屏幕，但那毕竟是两只手数的来的。但是Android开发可能是心中无数只草泥马奔腾 + 一脸懵逼。。</p>\n<p>其实我们只要把px转换成dp就可以了，两步走：</p>\n<ul>\n<li>第1步：确认设计稿中的屏幕dpi是多少</li>\n<li>第2步：根据dpi，将px值转换成dp值</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"方法1：不写代码，快速实现\"><a href=\"#方法1：不写代码，快速实现\" class=\"headerlink\" title=\"方法1：不写代码，快速实现\"></a>方法1：不写代码，快速实现</h1><p>不管哪种方法，请先记住下面这个dpi范围对照表：</p>\n<ul>\n<li><p>0dpi ~ 120dpi：ldpi</p>\n</li>\n<li><p>120dpi ~ 160dpi：mdpi</p>\n</li>\n<li><p>160dpi ~ 240dpi：hdpi</p>\n</li>\n<li><p>240dpi ~ 320dpi：xhdpi</p>\n</li>\n<li><p>320dpi ~ 480dpi：xxhdpi</p>\n</li>\n<li><p>480dpi ~ 640dpi：xxxhdpi</p>\n</li>\n</ul>\n<h2 id=\"第1步-确认手机屏幕的DPI\"><a href=\"#第1步-确认手机屏幕的DPI\" class=\"headerlink\" title=\"第1步 - 确认手机屏幕的DPI\"></a>第1步 - 确认手机屏幕的DPI</h2><p>写代码不是万能的，假如设计师给的稿子里面用的屏幕，是我们手上没有的呢？或者我们根本不确定它这个设计稿上的屏幕是什么手机呢？？上哪儿去写代码run？</p>\n<p>（1）网上找一下这个手机的屏幕分辨率和尺寸（如果这个手机真实存在的话。。可能有些设计师给的就是iphone的设计稿。。）。或者如果设计师可以给你的话，那就是最好的。</p>\n<p>（2）得到了宽、高像素，用勾股定理计算出对角线的像素值，再除以屏幕尺寸就得到了屏幕的dpi，然后根据上面的表格，即可得到你手机是哪个dpi的了。</p>\n<blockquote>\n<p>tips：其实很多网上列出手机参数的时候，除了<strong>主屏分辨率</strong>，一般也会列出<strong>屏幕像素密度</strong>，但一般都是拿ppi作为单位的。 所以如果设计稿里面是真实存在的机器，一般可以不用自己计算了。</p>\n</blockquote>\n<h2 id=\"第2步-把PX值转换成DP值\"><a href=\"#第2步-把PX值转换成DP值\" class=\"headerlink\" title=\"第2步 - 把PX值转换成DP值\"></a>第2步 - 把PX值转换成DP值</h2><p>直接上利器：<a href=\"http://labs.rampinteractive.co.uk/android_dp_px_calculator/\" target=\"_blank\" rel=\"noopener\">android_dp_px_calculator</a></p>\n<p><img src=\"http://ww2.sinaimg.cn/large/006y8lVagw1f70nuqvhiqj30go0dqgnb.jpg\" alt=\"android_dp_px_calculator\"></p>\n<p>这个利器是一个开发者已经做好的工具，显然选择一个dpi，然后输入px值，就自动生成dp值了。反之亦可。如果能在开发之前就能搞定px转dp，心里还是比较爽的。</p>\n<blockquote>\n<p>其实可以看到这个工具原理很简单：如果可以确定屏幕的dpi是<strong>xxh-dpi</strong>的，那么也就确定了density = 3，此时<code>dp = px/3</code>，其实是很简单的计算。我们只需要知道<code>density = dpi/160</code>。</p>\n</blockquote>\n<hr>\n<h1 id=\"方法2：通过写代码自己实现\"><a href=\"#方法2：通过写代码自己实现\" class=\"headerlink\" title=\"方法2：通过写代码自己实现\"></a>方法2：通过写代码自己实现</h1><p>还是两步走，不过都要靠写代码run。</p>\n<h2 id=\"第1步-确认手机屏幕的DPI-1\"><a href=\"#第1步-确认手机屏幕的DPI-1\" class=\"headerlink\" title=\"第1步 - 确认手机屏幕的DPI\"></a>第1步 - 确认手机屏幕的DPI</h2><p>找到设计师给的设计稿手机型号，写几行代码，run一下。得到横纵方向的xdpi，ydpi，通常，这两个值应该接近，至少也是在上面列出的同一个dpi范围的。</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span> 这两行是从郭神的博客里看到的</span><br><span class=\"line\">float xdpi = getResources<span class=\"params\">()</span><span class=\"string\">.getDisplayMetrics</span><span class=\"params\">()</span><span class=\"string\">.xdpi</span>;</span><br><span class=\"line\">float ydpi = getResources<span class=\"params\">()</span><span class=\"string\">.getDisplayMetrics</span><span class=\"params\">()</span><span class=\"string\">.ydpi</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> 后来发现其实有更直接的方法，具体返回值待确认</span><br><span class=\"line\">float density = getResources<span class=\"params\">()</span><span class=\"string\">.getDisplayMetrics</span><span class=\"params\">()</span><span class=\"string\">.density</span>;</span><br><span class=\"line\">int densityDpi = getResources<span class=\"params\">()</span><span class=\"string\">.getDisplayMetrics</span><span class=\"params\">()</span><span class=\"string\">.densityDpi</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第2步-把PX值转换成DP值-1\"><a href=\"#第2步-把PX值转换成DP值-1\" class=\"headerlink\" title=\"第2步 - 把PX值转换成DP值\"></a>第2步 - 把PX值转换成DP值</h2><p>相信很多人都写过这段代码，直接用当前运行中的手机的屏幕密度来转换px和dp。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PxUtils</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">px2dp</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> pxValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scale = context.getResources().getDisplayMetrics().density;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (pxValue / scale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">dp2px</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> dpValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scale = context.getResources().getDisplayMetrics().density;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (dpValue * scale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">px2sp</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> pxValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (pxValue / fontScale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sp2px</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> spValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (spValue * fontScale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"知识总结\"><a href=\"#知识总结\" class=\"headerlink\" title=\"知识总结\"></a>知识总结</h1><p>基础知识不能丢，把一些基本概念记录一下。</p>\n<ul>\n<li>dip：Density independent pixels，设备无关像素。</li>\n<li>dp：等于dip。</li>\n<li>px：物理像素。</li>\n<li>dpi：dots per inch，直译就是每英寸多少个像素。常见取值为<code>120</code>，<code>160</code>，<code>240</code>，<code>320</code>，<code>480</code>，<code>640</code>，，也可以叫像素密度。</li>\n<li>density：屏幕密度，<code>density = dpi / 160px</code>。所以它的常见取值为<code>0.75</code>，<code>1</code>，<code>1.5</code>，<code>2</code>，<code>3</code>，<code>4</code>，对应着Android工程里面的<code>ldpi</code>，<code>mdpi</code>，<code>hdpi</code>，<code>xhdpi</code>，<code>xxhdpi</code>，<code>xxxhdpi</code>。</li>\n<li>分辨率：横纵2个方向的像素点的数量，常见取值<code>1080x1920</code>这样的，表示宽度有1080个像素点，高度有1920个像素点。</li>\n<li>屏幕尺寸：屏幕对角线的长度。</li>\n</ul>\n<p>关于屏幕适配的问题，更多细节参考官网：<a href=\"https://developer.android.com/guide/practices/screens_support.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/guide/practices/screens_support.html</a></p>\n","site":{"data":{}},"excerpt":"<p>有很多朋友在实际的工作中，会遇到设计同事给了一张设计图，上面只有px标注的距离和尺寸。产品看到设计稿后，就拿给iOS和Android的开发，说就按这个做。iOS开发可能还好，虽然也有9种屏幕，但那毕竟是两只手数的来的。但是Android开发可能是心中无数只草泥马奔腾 + 一脸懵逼。。</p>\n<p>其实我们只要把px转换成dp就可以了，两步走：</p>\n<ul>\n<li>第1步：确认设计稿中的屏幕dpi是多少</li>\n<li>第2步：根据dpi，将px值转换成dp值</li>\n</ul>","more":"<h1 id=\"方法1：不写代码，快速实现\"><a href=\"#方法1：不写代码，快速实现\" class=\"headerlink\" title=\"方法1：不写代码，快速实现\"></a>方法1：不写代码，快速实现</h1><p>不管哪种方法，请先记住下面这个dpi范围对照表：</p>\n<ul>\n<li><p>0dpi ~ 120dpi：ldpi</p>\n</li>\n<li><p>120dpi ~ 160dpi：mdpi</p>\n</li>\n<li><p>160dpi ~ 240dpi：hdpi</p>\n</li>\n<li><p>240dpi ~ 320dpi：xhdpi</p>\n</li>\n<li><p>320dpi ~ 480dpi：xxhdpi</p>\n</li>\n<li><p>480dpi ~ 640dpi：xxxhdpi</p>\n</li>\n</ul>\n<h2 id=\"第1步-确认手机屏幕的DPI\"><a href=\"#第1步-确认手机屏幕的DPI\" class=\"headerlink\" title=\"第1步 - 确认手机屏幕的DPI\"></a>第1步 - 确认手机屏幕的DPI</h2><p>写代码不是万能的，假如设计师给的稿子里面用的屏幕，是我们手上没有的呢？或者我们根本不确定它这个设计稿上的屏幕是什么手机呢？？上哪儿去写代码run？</p>\n<p>（1）网上找一下这个手机的屏幕分辨率和尺寸（如果这个手机真实存在的话。。可能有些设计师给的就是iphone的设计稿。。）。或者如果设计师可以给你的话，那就是最好的。</p>\n<p>（2）得到了宽、高像素，用勾股定理计算出对角线的像素值，再除以屏幕尺寸就得到了屏幕的dpi，然后根据上面的表格，即可得到你手机是哪个dpi的了。</p>\n<blockquote>\n<p>tips：其实很多网上列出手机参数的时候，除了<strong>主屏分辨率</strong>，一般也会列出<strong>屏幕像素密度</strong>，但一般都是拿ppi作为单位的。 所以如果设计稿里面是真实存在的机器，一般可以不用自己计算了。</p>\n</blockquote>\n<h2 id=\"第2步-把PX值转换成DP值\"><a href=\"#第2步-把PX值转换成DP值\" class=\"headerlink\" title=\"第2步 - 把PX值转换成DP值\"></a>第2步 - 把PX值转换成DP值</h2><p>直接上利器：<a href=\"http://labs.rampinteractive.co.uk/android_dp_px_calculator/\" target=\"_blank\" rel=\"noopener\">android_dp_px_calculator</a></p>\n<p><img src=\"http://ww2.sinaimg.cn/large/006y8lVagw1f70nuqvhiqj30go0dqgnb.jpg\" alt=\"android_dp_px_calculator\"></p>\n<p>这个利器是一个开发者已经做好的工具，显然选择一个dpi，然后输入px值，就自动生成dp值了。反之亦可。如果能在开发之前就能搞定px转dp，心里还是比较爽的。</p>\n<blockquote>\n<p>其实可以看到这个工具原理很简单：如果可以确定屏幕的dpi是<strong>xxh-dpi</strong>的，那么也就确定了density = 3，此时<code>dp = px/3</code>，其实是很简单的计算。我们只需要知道<code>density = dpi/160</code>。</p>\n</blockquote>\n<hr>\n<h1 id=\"方法2：通过写代码自己实现\"><a href=\"#方法2：通过写代码自己实现\" class=\"headerlink\" title=\"方法2：通过写代码自己实现\"></a>方法2：通过写代码自己实现</h1><p>还是两步走，不过都要靠写代码run。</p>\n<h2 id=\"第1步-确认手机屏幕的DPI-1\"><a href=\"#第1步-确认手机屏幕的DPI-1\" class=\"headerlink\" title=\"第1步 - 确认手机屏幕的DPI\"></a>第1步 - 确认手机屏幕的DPI</h2><p>找到设计师给的设计稿手机型号，写几行代码，run一下。得到横纵方向的xdpi，ydpi，通常，这两个值应该接近，至少也是在上面列出的同一个dpi范围的。</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span> 这两行是从郭神的博客里看到的</span><br><span class=\"line\">float xdpi = getResources<span class=\"params\">()</span><span class=\"string\">.getDisplayMetrics</span><span class=\"params\">()</span><span class=\"string\">.xdpi</span>;</span><br><span class=\"line\">float ydpi = getResources<span class=\"params\">()</span><span class=\"string\">.getDisplayMetrics</span><span class=\"params\">()</span><span class=\"string\">.ydpi</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> 后来发现其实有更直接的方法，具体返回值待确认</span><br><span class=\"line\">float density = getResources<span class=\"params\">()</span><span class=\"string\">.getDisplayMetrics</span><span class=\"params\">()</span><span class=\"string\">.density</span>;</span><br><span class=\"line\">int densityDpi = getResources<span class=\"params\">()</span><span class=\"string\">.getDisplayMetrics</span><span class=\"params\">()</span><span class=\"string\">.densityDpi</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第2步-把PX值转换成DP值-1\"><a href=\"#第2步-把PX值转换成DP值-1\" class=\"headerlink\" title=\"第2步 - 把PX值转换成DP值\"></a>第2步 - 把PX值转换成DP值</h2><p>相信很多人都写过这段代码，直接用当前运行中的手机的屏幕密度来转换px和dp。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PxUtils</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">px2dp</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> pxValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scale = context.getResources().getDisplayMetrics().density;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (pxValue / scale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">dp2px</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> dpValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scale = context.getResources().getDisplayMetrics().density;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (dpValue * scale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">px2sp</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> pxValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (pxValue / fontScale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sp2px</span><span class=\"params\">(Context context, <span class=\"keyword\">float</span> spValue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (spValue * fontScale + <span class=\"number\">0.5f</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"知识总结\"><a href=\"#知识总结\" class=\"headerlink\" title=\"知识总结\"></a>知识总结</h1><p>基础知识不能丢，把一些基本概念记录一下。</p>\n<ul>\n<li>dip：Density independent pixels，设备无关像素。</li>\n<li>dp：等于dip。</li>\n<li>px：物理像素。</li>\n<li>dpi：dots per inch，直译就是每英寸多少个像素。常见取值为<code>120</code>，<code>160</code>，<code>240</code>，<code>320</code>，<code>480</code>，<code>640</code>，，也可以叫像素密度。</li>\n<li>density：屏幕密度，<code>density = dpi / 160px</code>。所以它的常见取值为<code>0.75</code>，<code>1</code>，<code>1.5</code>，<code>2</code>，<code>3</code>，<code>4</code>，对应着Android工程里面的<code>ldpi</code>，<code>mdpi</code>，<code>hdpi</code>，<code>xhdpi</code>，<code>xxhdpi</code>，<code>xxxhdpi</code>。</li>\n<li>分辨率：横纵2个方向的像素点的数量，常见取值<code>1080x1920</code>这样的，表示宽度有1080个像素点，高度有1920个像素点。</li>\n<li>屏幕尺寸：屏幕对角线的长度。</li>\n</ul>\n<p>关于屏幕适配的问题，更多细节参考官网：<a href=\"https://developer.android.com/guide/practices/screens_support.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/guide/practices/screens_support.html</a></p>"},{"layout":"post","title":"使用Play框架编写Web应用","date":"2018-05-13T00:00:00.000Z","_content":"\n## 一、Play框架简介\n\n[Play](https://www.playframework.com/)是一个Full-Stack的Web应用开发框架，使用它可以快速编写自己的Web应用，也可以使用它来编写RESTful API。与现在非常流行的Spring全家桶相比，Play略显小众，但它的设计思想天生就是分布式、异步的，也得到许多开发者的认可，在实际生产环境中也有像Linkedin这样的大公司采用。对于一个没有开发过Web应用或者后台应用的开发者来讲，学习和使用Play框架也许是一个不错的选择。\n\n<!-- more -->\n\n可能有些接触过Scala语言的开发者，或多或少听过Play这个框架，也知道Play框架大部分代码是使用Scala开发的。不禁会有疑问，是不是一定要学会Scala才可以使用Play呢？这个疑问我也有过，但是据使用过Play的开发者介绍，在Play框架中使用Java语言开发Web应用的过程中，基本上是不会需要你真正去学习Scala的。Play框架本身对Java的支持非常全面，不用担心自己不会Scala。我举一个例子，做过Android开发的同学，一定记得在2014年，我们从Eclipse切换的Android Studio时，需要将自己的ant.xml打包脚本移植到gradle脚本。当时我还在实习，完全是一个菜鸟，也不懂groovy，而且那时候网上关于gradle的资料也非常的少，但是即使这样，我依然能够把一个ant编写的打包脚本移植到gradle，如此类比一下，相信大家应该心里有数了。\n\n## 二、环境搭建\n\n我使用的Play版本是2.6.x，系统是macosx 10.12.5。配置环境的时候，推荐按照[官方文档](https://www.playframework.com/documentation/2.6.x/Home)操作。\n\n### JDK\n\nPlay 2.6.x要求必须是Java 8，现在使用到的SBT版本是1.x。\n\n### SBT\n\nSBT(simple-build tool)，Play默认使用的构建工具。可以用homebrew安装，也可以手动下载sbt程序到电脑。\n\n> 提醒一下，我在mac osx 10.12上运行`brew install sbt@1`时，提示需要安装9.x版本的xcode，才可以用brew安装sbt。所以我采用了手动下载sbt，然后配置环境变量的方法，使得电脑上可以使用`sbt`命令。但是请记住一点，手动安装的sbt，目录是你自己放的文件目录，而不是默认的`usr/local/sbt`，如果你需要修改`sbtopt`这种配置文件的话，记得在自己正确的目录下操作。\n\n### Intellij IDEA\n\n安装IDEA后，还需要安装Scala插件。关于IDE的设置，请参考[这里](https://www.playframework.com/documentation/2.6.x/IDE)。\n\n> 尽量安装新版的IDEA和对应版本的Scala插件，亲测2017.2的IDEA安装插件后可能会有BUG。\n\n## 三、认识Play项目的结构\n\nPlay框架的文档很全面，如果要全面深入地学习Play，可以仔细阅读官方的Document。这里可以从Play的示例[play-java-starter-example](https://github.com/playframework/play-java-starter-example)入手，开始认识Play框架的结构，并了解如何使用Play来开发Web应用。\n\n使用idea的`Import Project`导入play-java-started-example工程，记得在import wizard中选择`Import project from external model`的`SBT project`，然后点击下一步。导入项目后，进入终端输入`sbt run`就可以让这个项目运行起来了。\n\n> 注意：sbt第一次运行时比较慢，需要耐心等待。\n\n根据console的提示，在浏览器中打开`http://localhost:9000`，我们可以看到一个Web欢迎页面。\n\n---\n\n搞定上面的准备工作之后，我们开始看Play应用的目录是如何组织起来的，进而分析一下我们在浏览器中输入`http://localhost:9000`之后，Play是如何工作的。\n\n下面是来自[Play官方文档中的Anatomy of a Play application](https://www.playframework.com/documentation/2.6.x/Anatomy)。\n\n```\napp                      → Application sources\n └ assets                → Compiled asset sources\n    └ stylesheets        → Typically LESS CSS sources\n    └ javascripts        → Typically CoffeeScript sources\n └ controllers           → Application controllers\n └ models                → Application business layer\n └ views                 → Templates\nbuild.sbt                → Application build script\nconf                     → Configurations files and other non-compiled resources (on classpath)\n └ application.conf      → Main configuration file\n └ routes                → Routes definition\ndist                     → Arbitrary files to be included in your projects distribution\npublic                   → Public assets\n └ stylesheets           → CSS files\n └ javascripts           → Javascript files\n └ images                → Image files\nproject                  → sbt configuration files\n └ build.properties      → Marker for sbt project\n └ plugins.sbt           → sbt plugins including the declaration for Play itself\nlib                      → Unmanaged libraries dependencies\nlogs                     → Logs folder\n └ application.log       → Default log file\ntarget                   → Generated stuff\n └ resolution-cache      → Info about dependencies\n └ scala-2.11\n    └ api                → Generated API docs\n    └ classes            → Compiled class files\n    └ routes             → Sources generated from routes\n    └ twirl              → Sources generated from templates\n └ universal             → Application packaging\n └ web                   → Compiled web assets\ntest                     → source folder for unit or functional tests\n```\n\nPlay框架采用了MVC架构，把Web应用分成模型层、控制层和视图层。每个层次对应的文件存放在不同的目录下面，下面依次介绍一下关键的几个目录。\n\n### `app/`目录\n\n存放着所有的Java源代码代码、Scala源代码、模板和编译后的资源文件（如LESS CSS、CoffeeScript）。在这个目录下，一般会有三个默认的package：controllers、models、views。\n\n> 和以往我们看到的代码package不同的是，play默认的package layout没有`com.youcompany`这样的前缀。不过我们如果想添加前缀也完全是OK的。包括`app/assets`目录，完全也是可选的。\n\n### `public/`目录\n\n`public/`目录下面存放的是一些静态资源文件，这个目录默认被分成3个子目录，分别用来存放我们的js、css、image这3类文件。\n\n> 在一个新创建的应用中，`public/`目录默认会被映射到`assets`这个URL路径下，需要的话我们也可以手动修改。\n\n### `conf/`目录\n\n顾名思义，这个目录下面放的是配置文件，Play中主要用两类配置文件：\n\n- `application.conf`：整个应用的配置参数，例如db连接参数、缓存策略等配置\n- `routes`：路由定义\n\n\n### `build.sbt`文件\n\n项目的构建脚本，主要的构建配置都在这里，例如项目依赖的jar包、应用的版本号等等。不过`project/`目录下的`.scala`文件也会对项目的配置起作用。这个文件有点类似于我们的`build.gradle`。\n\n### `lib/`目录\n\n这个目录用于存放一些以来的外部jar包等等，是一个可选目录。不过一般我们都可以在`build.sbt`中添加依赖。\n\n### `project/`目录\n\n前面就说到这个目录下的scala文件也会对项目配置起作用。这里包含两个sbt构建配置文件：\n\n- `plugin.sbt`：定义了需要用到哪些sbt插件。我感觉有点类似于`build.gradle`里面写的`apply 'idea'`。\n- `build.properties`：定义了sbt的版本。我感觉有点类似于的`gradle-wrapper.properties`。\n\n### `target/`目录\n\n这个目录存放着工程构建完以后生成的文件，从这里可以了解到代码经过sbt构建后，最终变成了什么样的结果。主要包括下面几个子目录：\n\n- `classes/`：编译后的class文件（来自Java和Scala源码）\n- `classes_managed`：`classes/`目录下组织好的其他子目录，包含框架生成的class文件，例如routes和template引擎生成的class文件。\n- `resource_managed`：组织好的、生成的资源，比如编译过的LESS CSS、CoffeeScript结果。\n- `src_managed`：组织好的生成的代码文件，例如模板引擎生成的Scala文件。\n- `web/`：sbt-web任务生成的资源文件，例如来自`app/assets`和`public`文件夹里面的文件。\n\n> Play应用默认的文件组织结构与SBT默认的并不相同。如果我们想用SBT默认的代码和文件组织结构，可以禁用掉PlayLayoutPlugin。但是这有一定的风险。\n\n通过上面应用组织结构，可以看到其实Play框架采用的也是**约定优于配置**的规范，让我们集中精力在程序的开发上面，而不是去写太多的配置文件。\n\n\n## 四、使用Play开发Web应用\n\n在上面我们运行`sbt run`命令后，可以访问[http://localhost:9000](http://localhost:9000)来访问这个示例程序，看到了一个Welcome Page。\n\nPlay框架是一个典型的MVC架构，下面分析一下这个示例工程是工作起来的，从而了解怎么使用Play开发Web应用。\n\n### 定义路由和Controller\n\n前面介绍了`conf/routes`文件定义了整个应用的路由，也就是说我们在浏览器输入的url（request），经过这个文件的映射，会交给相应的Controller处理，然后返回结果给浏览器。看一下`routes`文件的内容：\n\n```\n# Routes\n# This file defines all application routes (Higher priority routes first)\n# ~~~~\n\n# An example controller showing a sample home page\nGET     /                           controllers.HomeController.index\n\n# 省略其他路由配置\n... \n```\n\n所以当访问`http://localhost:9000`时，会交给`app/controllers/HomeController.index()`方法来处理这个请求，并得到结果返回给浏览器。\n\n### 模板引擎\n\n下面看一下`HomeController.index`方法是如何渲染出Html页面来的。\n\n```\npublic Result index() {\n    return ok(index.render(\"Your new application is ready.\"));\n}\n```\n\n这里调用了`ok`方法来返回一个`Result`对象，我们仔细分析一下这个方法的签名。\n\n先看`ok`方法的返回值类型`Result`，在Play中，`Result`类可以理解为一个定义了http响应的数据结构，包含了响应的HTTP Status Code和的content。那`ok`方法是哪里定义的呢？原来`HomeController`继承了`Controller`类，`Controller`类继承了`Results`类，而`ok`方法是`Results`类里面定义的，这个方法可以返回一个Result对象。\n\n再看`ok`方法的参数，这个参数是`Content`类，它定义了响应的contentType和body。这里的Content是由`index.render`方法生成的。\n\n接着我们再看`index.render`是如何生成的`Content`的，这里的`index`类，并不是我们写的，而是Play生成的，使用idea可以很容易找到它在`target/scala-2.12/twirl/main/views/html/index.template.scala`这个scala文件里，这个文件定义了一个scala里面的单例（我们可以暂时不要纠结这个Scala文件里面`object index ....`是怎么生成一个单例对象的，只需要知道这个文件是从`app/views/index.scala.html`生成的）。好了，我们知道`index`对象是Play生成的，看看它的`render`方法，这个方法接收一个`String类型`的参数，然后返回了前面的`Content`。\n\n所以我们浏览器展示Html的是`app/views/index.scala.html`这个模板渲染出来，这是[Play模板引擎](https://www.playframework.com/documentation/2.6.13/ScalaTemplates)的工作了，我们看下里面有什么内容。\n\n```\n@*\n * This template takes a single argument, a String containing a\n * message to display.\n *@\n@(message: String)\n\n@*\n * Call the `main` template with two arguments. The first\n * argument is a `String` with the title of the page, the second\n * argument is an `Html` object containing the body of the page.\n *@\n@main(\"Welcome to Play\") {\n\n    @*\n     * Get an `Html` object by calling the built-in Play welcome\n     * template and passing a `String` message.\n     *@\n    @welcome(message, style = \"java\")\n\n}\n```\n\nPlay内置了基于Scala语言的Twirl模板引擎，跟着注释就可以了解这个模板是怎么被渲染成我们看到的html的。\n\n首先`index`模板接收了一个字符串作为参数（`Your new application is ready.`），然后把两个参数传递给了`main`模板，一个是字符串`Welcome to Play`，另一个是调用`welcome`模板生成的`Html`对象。`welcome`模板接收了`Your new application is ready.`参数和`style=\"java\"`参数，然后渲染成了Html对象。打开`Welcome.scala.html`可以看到一些Html标签以及传入的第一个参数被放在了最上方的<section>里面。\n\n> 我们可以看到其实Play框架帮我们生成的很多文件，都是基于Scala的，因此学习一下Scala对我们理解Play框架非常有帮助。\n\n\n### 小结\n\n以上就是从play-java-start-example这个示例工程来了解如何使用Play开发Web应用，这个示例比较简单，甚至没有涉及到model层的代码。开发一个完整的应用，还需要学习更多知识，比如[filters拦截器](https://www.playframework.com/documentation/2.6.x/Filters)、异步处理、状态保持、如何集成ORM框架、支持WebSocket、编写RESTFul APIs、安全以及使用其他的模板引擎等等。\n\n## 五、其他话题\n\n### Play框架与React集成\n\n现在前端开发中有很多都转向了React，我们也可以使用Play框架和React一起编写Web应用。毕竟模板引擎这么多，如果如果已经会使用React开发Web前端，没有必要非得用到Play里面的模板引擎。因此使用React替换掉Play的模板引擎做的工作，是完全没有问题的。\n\n### 相关资料\n\n- [官方文档Home](https://www.playframework.com/documentation/2.6.x/Home)\n- [官方的Tutorials](https://www.playframework.com/documentation/2.6.x/Tutorials)\n- [Play Starter Examples](https://playframework.com/download/#starters)\n- [Play工程的结构剖析](https://www.playframework.com/documentation/2.6.x/Anatomy)\n\n### 全栈开发\n\n关于全栈，一个对技术有追求，乐于学习进步的人，不应拘泥于只学习某一项技能。有机会要多去熟悉一些其他的技术，做一个“T型”人才，全栈开发是很好的一个实践。除了像Play这样的框架，Ruby on Rails、Python Django，甚至NodeJS，都可以值得了解和学习的全栈框架。\n\n我认为在学习某一个方向的技术时，需要学习它里面编程的思维方式，并找到一个方向上不同技术之间的共同点，比如学习编程语言的时候，我们都会学习数据类型、流程、异常处理等等；客户端或者前端，核心的基础知识是图形界面开发，从大学时候学的MFC，到现在的Android、iOS、小程序、快应用、React、Vue、Flutter，都需要处理界面的生命周期，比如`初始化 -> 展现 - > 消失 -> 销毁`；而后端开发，一般都是在处理请求的生命周期，即把一个request变成一个response，比如`路由 -> 处理请求参数 -> 处理响应 -> 返回给客户端`。希望大家都可以学习进步，走在技术时代的前面！\n\n最后放上两个我个人觉得不错的学习资料，来自极客时间（InfoQ下面的极客帮面向广告互联网从业者做的一个应用，里面有一些老司机的分享，也有一些付费的知识分析）。最近我看到两个不错的、体系化的分享，与大家分享一下，下面是我的邀请链接，我已经开始学习，觉得帮助还是挺大的。\n\n![](https://ws3.sinaimg.cn/large/006tKfTcly1fr9zxjidkgj31gi1a64bg.jpg)\n\n\n\n","source":"_posts/使用Play框架编写Web应用.md","raw":"---\nlayout: post\ntitle: 使用Play框架编写Web应用\ndate: '2018-05-13'\ntags:\n  - Java Web\n  - 后端\ncategories:\n  - 技术\n---\n\n## 一、Play框架简介\n\n[Play](https://www.playframework.com/)是一个Full-Stack的Web应用开发框架，使用它可以快速编写自己的Web应用，也可以使用它来编写RESTful API。与现在非常流行的Spring全家桶相比，Play略显小众，但它的设计思想天生就是分布式、异步的，也得到许多开发者的认可，在实际生产环境中也有像Linkedin这样的大公司采用。对于一个没有开发过Web应用或者后台应用的开发者来讲，学习和使用Play框架也许是一个不错的选择。\n\n<!-- more -->\n\n可能有些接触过Scala语言的开发者，或多或少听过Play这个框架，也知道Play框架大部分代码是使用Scala开发的。不禁会有疑问，是不是一定要学会Scala才可以使用Play呢？这个疑问我也有过，但是据使用过Play的开发者介绍，在Play框架中使用Java语言开发Web应用的过程中，基本上是不会需要你真正去学习Scala的。Play框架本身对Java的支持非常全面，不用担心自己不会Scala。我举一个例子，做过Android开发的同学，一定记得在2014年，我们从Eclipse切换的Android Studio时，需要将自己的ant.xml打包脚本移植到gradle脚本。当时我还在实习，完全是一个菜鸟，也不懂groovy，而且那时候网上关于gradle的资料也非常的少，但是即使这样，我依然能够把一个ant编写的打包脚本移植到gradle，如此类比一下，相信大家应该心里有数了。\n\n## 二、环境搭建\n\n我使用的Play版本是2.6.x，系统是macosx 10.12.5。配置环境的时候，推荐按照[官方文档](https://www.playframework.com/documentation/2.6.x/Home)操作。\n\n### JDK\n\nPlay 2.6.x要求必须是Java 8，现在使用到的SBT版本是1.x。\n\n### SBT\n\nSBT(simple-build tool)，Play默认使用的构建工具。可以用homebrew安装，也可以手动下载sbt程序到电脑。\n\n> 提醒一下，我在mac osx 10.12上运行`brew install sbt@1`时，提示需要安装9.x版本的xcode，才可以用brew安装sbt。所以我采用了手动下载sbt，然后配置环境变量的方法，使得电脑上可以使用`sbt`命令。但是请记住一点，手动安装的sbt，目录是你自己放的文件目录，而不是默认的`usr/local/sbt`，如果你需要修改`sbtopt`这种配置文件的话，记得在自己正确的目录下操作。\n\n### Intellij IDEA\n\n安装IDEA后，还需要安装Scala插件。关于IDE的设置，请参考[这里](https://www.playframework.com/documentation/2.6.x/IDE)。\n\n> 尽量安装新版的IDEA和对应版本的Scala插件，亲测2017.2的IDEA安装插件后可能会有BUG。\n\n## 三、认识Play项目的结构\n\nPlay框架的文档很全面，如果要全面深入地学习Play，可以仔细阅读官方的Document。这里可以从Play的示例[play-java-starter-example](https://github.com/playframework/play-java-starter-example)入手，开始认识Play框架的结构，并了解如何使用Play来开发Web应用。\n\n使用idea的`Import Project`导入play-java-started-example工程，记得在import wizard中选择`Import project from external model`的`SBT project`，然后点击下一步。导入项目后，进入终端输入`sbt run`就可以让这个项目运行起来了。\n\n> 注意：sbt第一次运行时比较慢，需要耐心等待。\n\n根据console的提示，在浏览器中打开`http://localhost:9000`，我们可以看到一个Web欢迎页面。\n\n---\n\n搞定上面的准备工作之后，我们开始看Play应用的目录是如何组织起来的，进而分析一下我们在浏览器中输入`http://localhost:9000`之后，Play是如何工作的。\n\n下面是来自[Play官方文档中的Anatomy of a Play application](https://www.playframework.com/documentation/2.6.x/Anatomy)。\n\n```\napp                      → Application sources\n └ assets                → Compiled asset sources\n    └ stylesheets        → Typically LESS CSS sources\n    └ javascripts        → Typically CoffeeScript sources\n └ controllers           → Application controllers\n └ models                → Application business layer\n └ views                 → Templates\nbuild.sbt                → Application build script\nconf                     → Configurations files and other non-compiled resources (on classpath)\n └ application.conf      → Main configuration file\n └ routes                → Routes definition\ndist                     → Arbitrary files to be included in your projects distribution\npublic                   → Public assets\n └ stylesheets           → CSS files\n └ javascripts           → Javascript files\n └ images                → Image files\nproject                  → sbt configuration files\n └ build.properties      → Marker for sbt project\n └ plugins.sbt           → sbt plugins including the declaration for Play itself\nlib                      → Unmanaged libraries dependencies\nlogs                     → Logs folder\n └ application.log       → Default log file\ntarget                   → Generated stuff\n └ resolution-cache      → Info about dependencies\n └ scala-2.11\n    └ api                → Generated API docs\n    └ classes            → Compiled class files\n    └ routes             → Sources generated from routes\n    └ twirl              → Sources generated from templates\n └ universal             → Application packaging\n └ web                   → Compiled web assets\ntest                     → source folder for unit or functional tests\n```\n\nPlay框架采用了MVC架构，把Web应用分成模型层、控制层和视图层。每个层次对应的文件存放在不同的目录下面，下面依次介绍一下关键的几个目录。\n\n### `app/`目录\n\n存放着所有的Java源代码代码、Scala源代码、模板和编译后的资源文件（如LESS CSS、CoffeeScript）。在这个目录下，一般会有三个默认的package：controllers、models、views。\n\n> 和以往我们看到的代码package不同的是，play默认的package layout没有`com.youcompany`这样的前缀。不过我们如果想添加前缀也完全是OK的。包括`app/assets`目录，完全也是可选的。\n\n### `public/`目录\n\n`public/`目录下面存放的是一些静态资源文件，这个目录默认被分成3个子目录，分别用来存放我们的js、css、image这3类文件。\n\n> 在一个新创建的应用中，`public/`目录默认会被映射到`assets`这个URL路径下，需要的话我们也可以手动修改。\n\n### `conf/`目录\n\n顾名思义，这个目录下面放的是配置文件，Play中主要用两类配置文件：\n\n- `application.conf`：整个应用的配置参数，例如db连接参数、缓存策略等配置\n- `routes`：路由定义\n\n\n### `build.sbt`文件\n\n项目的构建脚本，主要的构建配置都在这里，例如项目依赖的jar包、应用的版本号等等。不过`project/`目录下的`.scala`文件也会对项目的配置起作用。这个文件有点类似于我们的`build.gradle`。\n\n### `lib/`目录\n\n这个目录用于存放一些以来的外部jar包等等，是一个可选目录。不过一般我们都可以在`build.sbt`中添加依赖。\n\n### `project/`目录\n\n前面就说到这个目录下的scala文件也会对项目配置起作用。这里包含两个sbt构建配置文件：\n\n- `plugin.sbt`：定义了需要用到哪些sbt插件。我感觉有点类似于`build.gradle`里面写的`apply 'idea'`。\n- `build.properties`：定义了sbt的版本。我感觉有点类似于的`gradle-wrapper.properties`。\n\n### `target/`目录\n\n这个目录存放着工程构建完以后生成的文件，从这里可以了解到代码经过sbt构建后，最终变成了什么样的结果。主要包括下面几个子目录：\n\n- `classes/`：编译后的class文件（来自Java和Scala源码）\n- `classes_managed`：`classes/`目录下组织好的其他子目录，包含框架生成的class文件，例如routes和template引擎生成的class文件。\n- `resource_managed`：组织好的、生成的资源，比如编译过的LESS CSS、CoffeeScript结果。\n- `src_managed`：组织好的生成的代码文件，例如模板引擎生成的Scala文件。\n- `web/`：sbt-web任务生成的资源文件，例如来自`app/assets`和`public`文件夹里面的文件。\n\n> Play应用默认的文件组织结构与SBT默认的并不相同。如果我们想用SBT默认的代码和文件组织结构，可以禁用掉PlayLayoutPlugin。但是这有一定的风险。\n\n通过上面应用组织结构，可以看到其实Play框架采用的也是**约定优于配置**的规范，让我们集中精力在程序的开发上面，而不是去写太多的配置文件。\n\n\n## 四、使用Play开发Web应用\n\n在上面我们运行`sbt run`命令后，可以访问[http://localhost:9000](http://localhost:9000)来访问这个示例程序，看到了一个Welcome Page。\n\nPlay框架是一个典型的MVC架构，下面分析一下这个示例工程是工作起来的，从而了解怎么使用Play开发Web应用。\n\n### 定义路由和Controller\n\n前面介绍了`conf/routes`文件定义了整个应用的路由，也就是说我们在浏览器输入的url（request），经过这个文件的映射，会交给相应的Controller处理，然后返回结果给浏览器。看一下`routes`文件的内容：\n\n```\n# Routes\n# This file defines all application routes (Higher priority routes first)\n# ~~~~\n\n# An example controller showing a sample home page\nGET     /                           controllers.HomeController.index\n\n# 省略其他路由配置\n... \n```\n\n所以当访问`http://localhost:9000`时，会交给`app/controllers/HomeController.index()`方法来处理这个请求，并得到结果返回给浏览器。\n\n### 模板引擎\n\n下面看一下`HomeController.index`方法是如何渲染出Html页面来的。\n\n```\npublic Result index() {\n    return ok(index.render(\"Your new application is ready.\"));\n}\n```\n\n这里调用了`ok`方法来返回一个`Result`对象，我们仔细分析一下这个方法的签名。\n\n先看`ok`方法的返回值类型`Result`，在Play中，`Result`类可以理解为一个定义了http响应的数据结构，包含了响应的HTTP Status Code和的content。那`ok`方法是哪里定义的呢？原来`HomeController`继承了`Controller`类，`Controller`类继承了`Results`类，而`ok`方法是`Results`类里面定义的，这个方法可以返回一个Result对象。\n\n再看`ok`方法的参数，这个参数是`Content`类，它定义了响应的contentType和body。这里的Content是由`index.render`方法生成的。\n\n接着我们再看`index.render`是如何生成的`Content`的，这里的`index`类，并不是我们写的，而是Play生成的，使用idea可以很容易找到它在`target/scala-2.12/twirl/main/views/html/index.template.scala`这个scala文件里，这个文件定义了一个scala里面的单例（我们可以暂时不要纠结这个Scala文件里面`object index ....`是怎么生成一个单例对象的，只需要知道这个文件是从`app/views/index.scala.html`生成的）。好了，我们知道`index`对象是Play生成的，看看它的`render`方法，这个方法接收一个`String类型`的参数，然后返回了前面的`Content`。\n\n所以我们浏览器展示Html的是`app/views/index.scala.html`这个模板渲染出来，这是[Play模板引擎](https://www.playframework.com/documentation/2.6.13/ScalaTemplates)的工作了，我们看下里面有什么内容。\n\n```\n@*\n * This template takes a single argument, a String containing a\n * message to display.\n *@\n@(message: String)\n\n@*\n * Call the `main` template with two arguments. The first\n * argument is a `String` with the title of the page, the second\n * argument is an `Html` object containing the body of the page.\n *@\n@main(\"Welcome to Play\") {\n\n    @*\n     * Get an `Html` object by calling the built-in Play welcome\n     * template and passing a `String` message.\n     *@\n    @welcome(message, style = \"java\")\n\n}\n```\n\nPlay内置了基于Scala语言的Twirl模板引擎，跟着注释就可以了解这个模板是怎么被渲染成我们看到的html的。\n\n首先`index`模板接收了一个字符串作为参数（`Your new application is ready.`），然后把两个参数传递给了`main`模板，一个是字符串`Welcome to Play`，另一个是调用`welcome`模板生成的`Html`对象。`welcome`模板接收了`Your new application is ready.`参数和`style=\"java\"`参数，然后渲染成了Html对象。打开`Welcome.scala.html`可以看到一些Html标签以及传入的第一个参数被放在了最上方的<section>里面。\n\n> 我们可以看到其实Play框架帮我们生成的很多文件，都是基于Scala的，因此学习一下Scala对我们理解Play框架非常有帮助。\n\n\n### 小结\n\n以上就是从play-java-start-example这个示例工程来了解如何使用Play开发Web应用，这个示例比较简单，甚至没有涉及到model层的代码。开发一个完整的应用，还需要学习更多知识，比如[filters拦截器](https://www.playframework.com/documentation/2.6.x/Filters)、异步处理、状态保持、如何集成ORM框架、支持WebSocket、编写RESTFul APIs、安全以及使用其他的模板引擎等等。\n\n## 五、其他话题\n\n### Play框架与React集成\n\n现在前端开发中有很多都转向了React，我们也可以使用Play框架和React一起编写Web应用。毕竟模板引擎这么多，如果如果已经会使用React开发Web前端，没有必要非得用到Play里面的模板引擎。因此使用React替换掉Play的模板引擎做的工作，是完全没有问题的。\n\n### 相关资料\n\n- [官方文档Home](https://www.playframework.com/documentation/2.6.x/Home)\n- [官方的Tutorials](https://www.playframework.com/documentation/2.6.x/Tutorials)\n- [Play Starter Examples](https://playframework.com/download/#starters)\n- [Play工程的结构剖析](https://www.playframework.com/documentation/2.6.x/Anatomy)\n\n### 全栈开发\n\n关于全栈，一个对技术有追求，乐于学习进步的人，不应拘泥于只学习某一项技能。有机会要多去熟悉一些其他的技术，做一个“T型”人才，全栈开发是很好的一个实践。除了像Play这样的框架，Ruby on Rails、Python Django，甚至NodeJS，都可以值得了解和学习的全栈框架。\n\n我认为在学习某一个方向的技术时，需要学习它里面编程的思维方式，并找到一个方向上不同技术之间的共同点，比如学习编程语言的时候，我们都会学习数据类型、流程、异常处理等等；客户端或者前端，核心的基础知识是图形界面开发，从大学时候学的MFC，到现在的Android、iOS、小程序、快应用、React、Vue、Flutter，都需要处理界面的生命周期，比如`初始化 -> 展现 - > 消失 -> 销毁`；而后端开发，一般都是在处理请求的生命周期，即把一个request变成一个response，比如`路由 -> 处理请求参数 -> 处理响应 -> 返回给客户端`。希望大家都可以学习进步，走在技术时代的前面！\n\n最后放上两个我个人觉得不错的学习资料，来自极客时间（InfoQ下面的极客帮面向广告互联网从业者做的一个应用，里面有一些老司机的分享，也有一些付费的知识分析）。最近我看到两个不错的、体系化的分享，与大家分享一下，下面是我的邀请链接，我已经开始学习，觉得帮助还是挺大的。\n\n![](https://ws3.sinaimg.cn/large/006tKfTcly1fr9zxjidkgj31gi1a64bg.jpg)\n\n\n\n","slug":"使用Play框架编写Web应用","published":1,"updated":"2018-05-13T12:43:17.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8ef001gmtsxsmdopttu","content":"<h2 id=\"一、Play框架简介\"><a href=\"#一、Play框架简介\" class=\"headerlink\" title=\"一、Play框架简介\"></a>一、Play框架简介</h2><p><a href=\"https://www.playframework.com/\" target=\"_blank\" rel=\"noopener\">Play</a>是一个Full-Stack的Web应用开发框架，使用它可以快速编写自己的Web应用，也可以使用它来编写RESTful API。与现在非常流行的Spring全家桶相比，Play略显小众，但它的设计思想天生就是分布式、异步的，也得到许多开发者的认可，在实际生产环境中也有像Linkedin这样的大公司采用。对于一个没有开发过Web应用或者后台应用的开发者来讲，学习和使用Play框架也许是一个不错的选择。</p>\n<a id=\"more\"></a>\n<p>可能有些接触过Scala语言的开发者，或多或少听过Play这个框架，也知道Play框架大部分代码是使用Scala开发的。不禁会有疑问，是不是一定要学会Scala才可以使用Play呢？这个疑问我也有过，但是据使用过Play的开发者介绍，在Play框架中使用Java语言开发Web应用的过程中，基本上是不会需要你真正去学习Scala的。Play框架本身对Java的支持非常全面，不用担心自己不会Scala。我举一个例子，做过Android开发的同学，一定记得在2014年，我们从Eclipse切换的Android Studio时，需要将自己的ant.xml打包脚本移植到gradle脚本。当时我还在实习，完全是一个菜鸟，也不懂groovy，而且那时候网上关于gradle的资料也非常的少，但是即使这样，我依然能够把一个ant编写的打包脚本移植到gradle，如此类比一下，相信大家应该心里有数了。</p>\n<h2 id=\"二、环境搭建\"><a href=\"#二、环境搭建\" class=\"headerlink\" title=\"二、环境搭建\"></a>二、环境搭建</h2><p>我使用的Play版本是2.6.x，系统是macosx 10.12.5。配置环境的时候，推荐按照<a href=\"https://www.playframework.com/documentation/2.6.x/Home\" target=\"_blank\" rel=\"noopener\">官方文档</a>操作。</p>\n<h3 id=\"JDK\"><a href=\"#JDK\" class=\"headerlink\" title=\"JDK\"></a>JDK</h3><p>Play 2.6.x要求必须是Java 8，现在使用到的SBT版本是1.x。</p>\n<h3 id=\"SBT\"><a href=\"#SBT\" class=\"headerlink\" title=\"SBT\"></a>SBT</h3><p>SBT(simple-build tool)，Play默认使用的构建工具。可以用homebrew安装，也可以手动下载sbt程序到电脑。</p>\n<blockquote>\n<p>提醒一下，我在mac osx 10.12上运行<code>brew install sbt@1</code>时，提示需要安装9.x版本的xcode，才可以用brew安装sbt。所以我采用了手动下载sbt，然后配置环境变量的方法，使得电脑上可以使用<code>sbt</code>命令。但是请记住一点，手动安装的sbt，目录是你自己放的文件目录，而不是默认的<code>usr/local/sbt</code>，如果你需要修改<code>sbtopt</code>这种配置文件的话，记得在自己正确的目录下操作。</p>\n</blockquote>\n<h3 id=\"Intellij-IDEA\"><a href=\"#Intellij-IDEA\" class=\"headerlink\" title=\"Intellij IDEA\"></a>Intellij IDEA</h3><p>安装IDEA后，还需要安装Scala插件。关于IDE的设置，请参考<a href=\"https://www.playframework.com/documentation/2.6.x/IDE\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<blockquote>\n<p>尽量安装新版的IDEA和对应版本的Scala插件，亲测2017.2的IDEA安装插件后可能会有BUG。</p>\n</blockquote>\n<h2 id=\"三、认识Play项目的结构\"><a href=\"#三、认识Play项目的结构\" class=\"headerlink\" title=\"三、认识Play项目的结构\"></a>三、认识Play项目的结构</h2><p>Play框架的文档很全面，如果要全面深入地学习Play，可以仔细阅读官方的Document。这里可以从Play的示例<a href=\"https://github.com/playframework/play-java-starter-example\" target=\"_blank\" rel=\"noopener\">play-java-starter-example</a>入手，开始认识Play框架的结构，并了解如何使用Play来开发Web应用。</p>\n<p>使用idea的<code>Import Project</code>导入play-java-started-example工程，记得在import wizard中选择<code>Import project from external model</code>的<code>SBT project</code>，然后点击下一步。导入项目后，进入终端输入<code>sbt run</code>就可以让这个项目运行起来了。</p>\n<blockquote>\n<p>注意：sbt第一次运行时比较慢，需要耐心等待。</p>\n</blockquote>\n<p>根据console的提示，在浏览器中打开<code>http://localhost:9000</code>，我们可以看到一个Web欢迎页面。</p>\n<hr>\n<p>搞定上面的准备工作之后，我们开始看Play应用的目录是如何组织起来的，进而分析一下我们在浏览器中输入<code>http://localhost:9000</code>之后，Play是如何工作的。</p>\n<p>下面是来自<a href=\"https://www.playframework.com/documentation/2.6.x/Anatomy\" target=\"_blank\" rel=\"noopener\">Play官方文档中的Anatomy of a Play application</a>。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app                      → Application sources</span><br><span class=\"line\"> └ assets                → Compiled asset sources</span><br><span class=\"line\">    └ stylesheets        → Typically LESS CSS sources</span><br><span class=\"line\">    └ javascripts        → Typically CoffeeScript sources</span><br><span class=\"line\"> └ controllers           → Application controllers</span><br><span class=\"line\"> └ models                → Application business layer</span><br><span class=\"line\"> └ views                 → Templates</span><br><span class=\"line\">build.sbt                → Application build script</span><br><span class=\"line\">conf                     → Configurations files <span class=\"keyword\">and</span> other non-compiled resources (on classpath)</span><br><span class=\"line\"> └ application.conf      → Main configuration file</span><br><span class=\"line\"> └ routes                → Routes definition</span><br><span class=\"line\">dist                     → Arbitrary files <span class=\"keyword\">to</span> be included <span class=\"keyword\">in</span> your projects distribution</span><br><span class=\"line\">public                   → Public assets</span><br><span class=\"line\"> └ stylesheets           → CSS files</span><br><span class=\"line\"> └ javascripts           → Javascript files</span><br><span class=\"line\"> └ images                → Image files</span><br><span class=\"line\">project                  → sbt configuration files</span><br><span class=\"line\"> └ build.properties      → Marker <span class=\"keyword\">for</span> sbt project</span><br><span class=\"line\"> └ plugins.sbt           → sbt plugins including the declaration <span class=\"keyword\">for</span> Play itself</span><br><span class=\"line\">lib                      → Unmanaged libraries dependencies</span><br><span class=\"line\">logs                     → Logs folder</span><br><span class=\"line\"> └ application.log       →<span class=\"built_in\"> Default </span>log file</span><br><span class=\"line\">target                   → Generated stuff</span><br><span class=\"line\"> └ resolution-cache      → <span class=\"builtin-name\">Info</span> about dependencies</span><br><span class=\"line\"> └ scala-2.11</span><br><span class=\"line\">    └ api                → Generated API docs</span><br><span class=\"line\">    └ classes            → Compiled class files</span><br><span class=\"line\">    └ routes             → Sources generated <span class=\"keyword\">from</span> routes</span><br><span class=\"line\">    └ twirl              → Sources generated <span class=\"keyword\">from</span> templates</span><br><span class=\"line\"> └ universal             → Application packaging</span><br><span class=\"line\"> └ web                   → Compiled web assets</span><br><span class=\"line\">test                     → source folder <span class=\"keyword\">for</span> unit <span class=\"keyword\">or</span> functional tests</span><br></pre></td></tr></table></figure>\n<p>Play框架采用了MVC架构，把Web应用分成模型层、控制层和视图层。每个层次对应的文件存放在不同的目录下面，下面依次介绍一下关键的几个目录。</p>\n<h3 id=\"app-目录\"><a href=\"#app-目录\" class=\"headerlink\" title=\"app/目录\"></a><code>app/</code>目录</h3><p>存放着所有的Java源代码代码、Scala源代码、模板和编译后的资源文件（如LESS CSS、CoffeeScript）。在这个目录下，一般会有三个默认的package：controllers、models、views。</p>\n<blockquote>\n<p>和以往我们看到的代码package不同的是，play默认的package layout没有<code>com.youcompany</code>这样的前缀。不过我们如果想添加前缀也完全是OK的。包括<code>app/assets</code>目录，完全也是可选的。</p>\n</blockquote>\n<h3 id=\"public-目录\"><a href=\"#public-目录\" class=\"headerlink\" title=\"public/目录\"></a><code>public/</code>目录</h3><p><code>public/</code>目录下面存放的是一些静态资源文件，这个目录默认被分成3个子目录，分别用来存放我们的js、css、image这3类文件。</p>\n<blockquote>\n<p>在一个新创建的应用中，<code>public/</code>目录默认会被映射到<code>assets</code>这个URL路径下，需要的话我们也可以手动修改。</p>\n</blockquote>\n<h3 id=\"conf-目录\"><a href=\"#conf-目录\" class=\"headerlink\" title=\"conf/目录\"></a><code>conf/</code>目录</h3><p>顾名思义，这个目录下面放的是配置文件，Play中主要用两类配置文件：</p>\n<ul>\n<li><code>application.conf</code>：整个应用的配置参数，例如db连接参数、缓存策略等配置</li>\n<li><code>routes</code>：路由定义</li>\n</ul>\n<h3 id=\"build-sbt文件\"><a href=\"#build-sbt文件\" class=\"headerlink\" title=\"build.sbt文件\"></a><code>build.sbt</code>文件</h3><p>项目的构建脚本，主要的构建配置都在这里，例如项目依赖的jar包、应用的版本号等等。不过<code>project/</code>目录下的<code>.scala</code>文件也会对项目的配置起作用。这个文件有点类似于我们的<code>build.gradle</code>。</p>\n<h3 id=\"lib-目录\"><a href=\"#lib-目录\" class=\"headerlink\" title=\"lib/目录\"></a><code>lib/</code>目录</h3><p>这个目录用于存放一些以来的外部jar包等等，是一个可选目录。不过一般我们都可以在<code>build.sbt</code>中添加依赖。</p>\n<h3 id=\"project-目录\"><a href=\"#project-目录\" class=\"headerlink\" title=\"project/目录\"></a><code>project/</code>目录</h3><p>前面就说到这个目录下的scala文件也会对项目配置起作用。这里包含两个sbt构建配置文件：</p>\n<ul>\n<li><code>plugin.sbt</code>：定义了需要用到哪些sbt插件。我感觉有点类似于<code>build.gradle</code>里面写的<code>apply &#39;idea&#39;</code>。</li>\n<li><code>build.properties</code>：定义了sbt的版本。我感觉有点类似于的<code>gradle-wrapper.properties</code>。</li>\n</ul>\n<h3 id=\"target-目录\"><a href=\"#target-目录\" class=\"headerlink\" title=\"target/目录\"></a><code>target/</code>目录</h3><p>这个目录存放着工程构建完以后生成的文件，从这里可以了解到代码经过sbt构建后，最终变成了什么样的结果。主要包括下面几个子目录：</p>\n<ul>\n<li><code>classes/</code>：编译后的class文件（来自Java和Scala源码）</li>\n<li><code>classes_managed</code>：<code>classes/</code>目录下组织好的其他子目录，包含框架生成的class文件，例如routes和template引擎生成的class文件。</li>\n<li><code>resource_managed</code>：组织好的、生成的资源，比如编译过的LESS CSS、CoffeeScript结果。</li>\n<li><code>src_managed</code>：组织好的生成的代码文件，例如模板引擎生成的Scala文件。</li>\n<li><code>web/</code>：sbt-web任务生成的资源文件，例如来自<code>app/assets</code>和<code>public</code>文件夹里面的文件。</li>\n</ul>\n<blockquote>\n<p>Play应用默认的文件组织结构与SBT默认的并不相同。如果我们想用SBT默认的代码和文件组织结构，可以禁用掉PlayLayoutPlugin。但是这有一定的风险。</p>\n</blockquote>\n<p>通过上面应用组织结构，可以看到其实Play框架采用的也是<strong>约定优于配置</strong>的规范，让我们集中精力在程序的开发上面，而不是去写太多的配置文件。</p>\n<h2 id=\"四、使用Play开发Web应用\"><a href=\"#四、使用Play开发Web应用\" class=\"headerlink\" title=\"四、使用Play开发Web应用\"></a>四、使用Play开发Web应用</h2><p>在上面我们运行<code>sbt run</code>命令后，可以访问<a href=\"http://localhost:9000\" target=\"_blank\" rel=\"noopener\">http://localhost:9000</a>来访问这个示例程序，看到了一个Welcome Page。</p>\n<p>Play框架是一个典型的MVC架构，下面分析一下这个示例工程是工作起来的，从而了解怎么使用Play开发Web应用。</p>\n<h3 id=\"定义路由和Controller\"><a href=\"#定义路由和Controller\" class=\"headerlink\" title=\"定义路由和Controller\"></a>定义路由和Controller</h3><p>前面介绍了<code>conf/routes</code>文件定义了整个应用的路由，也就是说我们在浏览器输入的url（request），经过这个文件的映射，会交给相应的Controller处理，然后返回结果给浏览器。看一下<code>routes</code>文件的内容：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Routes</span></span><br><span class=\"line\"><span class=\"comment\"># This file defines all application routes (Higher priority routes first)</span></span><br><span class=\"line\"><span class=\"comment\"># ~~~~</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># An example controller showing a sample home page</span></span><br><span class=\"line\"><span class=\"builtin-name\">GET</span>     /                           controllers.HomeController.index</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 省略其他路由配置</span></span><br><span class=\"line\"><span class=\"built_in\">..</span>.</span><br></pre></td></tr></table></figure>\n<p>所以当访问<code>http://localhost:9000</code>时，会交给<code>app/controllers/HomeController.index()</code>方法来处理这个请求，并得到结果返回给浏览器。</p>\n<h3 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h3><p>下面看一下<code>HomeController.index</code>方法是如何渲染出Html页面来的。</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"keyword\">index</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ok(<span class=\"keyword\">index</span>.render(<span class=\"string\">\"Your new application is ready.\"</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里调用了<code>ok</code>方法来返回一个<code>Result</code>对象，我们仔细分析一下这个方法的签名。</p>\n<p>先看<code>ok</code>方法的返回值类型<code>Result</code>，在Play中，<code>Result</code>类可以理解为一个定义了http响应的数据结构，包含了响应的HTTP Status Code和的content。那<code>ok</code>方法是哪里定义的呢？原来<code>HomeController</code>继承了<code>Controller</code>类，<code>Controller</code>类继承了<code>Results</code>类，而<code>ok</code>方法是<code>Results</code>类里面定义的，这个方法可以返回一个Result对象。</p>\n<p>再看<code>ok</code>方法的参数，这个参数是<code>Content</code>类，它定义了响应的contentType和body。这里的Content是由<code>index.render</code>方法生成的。</p>\n<p>接着我们再看<code>index.render</code>是如何生成的<code>Content</code>的，这里的<code>index</code>类，并不是我们写的，而是Play生成的，使用idea可以很容易找到它在<code>target/scala-2.12/twirl/main/views/html/index.template.scala</code>这个scala文件里，这个文件定义了一个scala里面的单例（我们可以暂时不要纠结这个Scala文件里面<code>object index ....</code>是怎么生成一个单例对象的，只需要知道这个文件是从<code>app/views/index.scala.html</code>生成的）。好了，我们知道<code>index</code>对象是Play生成的，看看它的<code>render</code>方法，这个方法接收一个<code>String类型</code>的参数，然后返回了前面的<code>Content</code>。</p>\n<p>所以我们浏览器展示Html的是<code>app/views/index.scala.html</code>这个模板渲染出来，这是<a href=\"https://www.playframework.com/documentation/2.6.13/ScalaTemplates\" target=\"_blank\" rel=\"noopener\">Play模板引擎</a>的工作了，我们看下里面有什么内容。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@*</span><br><span class=\"line\"> * This template takes a single argument, a String containing a</span><br><span class=\"line\"> * message to display.</span><br><span class=\"line\"> *@</span><br><span class=\"line\">@(message: String)</span><br><span class=\"line\"></span><br><span class=\"line\">@*</span><br><span class=\"line\"> * Call the `<span class=\"javascript\">main</span>` template with two arguments. The first</span><br><span class=\"line\"> * argument <span class=\"keyword\">is</span> a `<span class=\"javascript\"><span class=\"built_in\">String</span></span>` with the title <span class=\"keyword\">of</span> the page, the second</span><br><span class=\"line\"> * argument <span class=\"keyword\">is</span> an `<span class=\"javascript\">Html</span>` object containing the body <span class=\"keyword\">of</span> the page.</span><br><span class=\"line\"> *@</span><br><span class=\"line\">@main(<span class=\"string\">\"Welcome to Play\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @*</span><br><span class=\"line\">     * Get an `<span class=\"javascript\">Html</span>` object <span class=\"keyword\">by</span> calling the built-<span class=\"keyword\">in</span> Play welcome</span><br><span class=\"line\">     * template <span class=\"keyword\">and</span> passing a `<span class=\"javascript\"><span class=\"built_in\">String</span></span>` message.</span><br><span class=\"line\">     *@</span><br><span class=\"line\">    @welcome(message, style = <span class=\"string\">\"java\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Play内置了基于Scala语言的Twirl模板引擎，跟着注释就可以了解这个模板是怎么被渲染成我们看到的html的。</p>\n<p>首先<code>index</code>模板接收了一个字符串作为参数（<code>Your new application is ready.</code>），然后把两个参数传递给了<code>main</code>模板，一个是字符串<code>Welcome to Play</code>，另一个是调用<code>welcome</code>模板生成的<code>Html</code>对象。<code>welcome</code>模板接收了<code>Your new application is ready.</code>参数和<code>style=&quot;java&quot;</code>参数，然后渲染成了Html对象。打开<code>Welcome.scala.html</code>可以看到一些Html标签以及传入的第一个参数被放在了最上方的<section>里面。</section></p>\n<blockquote>\n<p>我们可以看到其实Play框架帮我们生成的很多文件，都是基于Scala的，因此学习一下Scala对我们理解Play框架非常有帮助。</p>\n</blockquote>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>以上就是从play-java-start-example这个示例工程来了解如何使用Play开发Web应用，这个示例比较简单，甚至没有涉及到model层的代码。开发一个完整的应用，还需要学习更多知识，比如<a href=\"https://www.playframework.com/documentation/2.6.x/Filters\" target=\"_blank\" rel=\"noopener\">filters拦截器</a>、异步处理、状态保持、如何集成ORM框架、支持WebSocket、编写RESTFul APIs、安全以及使用其他的模板引擎等等。</p>\n<h2 id=\"五、其他话题\"><a href=\"#五、其他话题\" class=\"headerlink\" title=\"五、其他话题\"></a>五、其他话题</h2><h3 id=\"Play框架与React集成\"><a href=\"#Play框架与React集成\" class=\"headerlink\" title=\"Play框架与React集成\"></a>Play框架与React集成</h3><p>现在前端开发中有很多都转向了React，我们也可以使用Play框架和React一起编写Web应用。毕竟模板引擎这么多，如果如果已经会使用React开发Web前端，没有必要非得用到Play里面的模板引擎。因此使用React替换掉Play的模板引擎做的工作，是完全没有问题的。</p>\n<h3 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h3><ul>\n<li><a href=\"https://www.playframework.com/documentation/2.6.x/Home\" target=\"_blank\" rel=\"noopener\">官方文档Home</a></li>\n<li><a href=\"https://www.playframework.com/documentation/2.6.x/Tutorials\" target=\"_blank\" rel=\"noopener\">官方的Tutorials</a></li>\n<li><a href=\"https://playframework.com/download/#starters\" target=\"_blank\" rel=\"noopener\">Play Starter Examples</a></li>\n<li><a href=\"https://www.playframework.com/documentation/2.6.x/Anatomy\" target=\"_blank\" rel=\"noopener\">Play工程的结构剖析</a></li>\n</ul>\n<h3 id=\"全栈开发\"><a href=\"#全栈开发\" class=\"headerlink\" title=\"全栈开发\"></a>全栈开发</h3><p>关于全栈，一个对技术有追求，乐于学习进步的人，不应拘泥于只学习某一项技能。有机会要多去熟悉一些其他的技术，做一个“T型”人才，全栈开发是很好的一个实践。除了像Play这样的框架，Ruby on Rails、Python Django，甚至NodeJS，都可以值得了解和学习的全栈框架。</p>\n<p>我认为在学习某一个方向的技术时，需要学习它里面编程的思维方式，并找到一个方向上不同技术之间的共同点，比如学习编程语言的时候，我们都会学习数据类型、流程、异常处理等等；客户端或者前端，核心的基础知识是图形界面开发，从大学时候学的MFC，到现在的Android、iOS、小程序、快应用、React、Vue、Flutter，都需要处理界面的生命周期，比如<code>初始化 -&gt; 展现 - &gt; 消失 -&gt; 销毁</code>；而后端开发，一般都是在处理请求的生命周期，即把一个request变成一个response，比如<code>路由 -&gt; 处理请求参数 -&gt; 处理响应 -&gt; 返回给客户端</code>。希望大家都可以学习进步，走在技术时代的前面！</p>\n<p>最后放上两个我个人觉得不错的学习资料，来自极客时间（InfoQ下面的极客帮面向广告互联网从业者做的一个应用，里面有一些老司机的分享，也有一些付费的知识分析）。最近我看到两个不错的、体系化的分享，与大家分享一下，下面是我的邀请链接，我已经开始学习，觉得帮助还是挺大的。</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcly1fr9zxjidkgj31gi1a64bg.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、Play框架简介\"><a href=\"#一、Play框架简介\" class=\"headerlink\" title=\"一、Play框架简介\"></a>一、Play框架简介</h2><p><a href=\"https://www.playframework.com/\" target=\"_blank\" rel=\"noopener\">Play</a>是一个Full-Stack的Web应用开发框架，使用它可以快速编写自己的Web应用，也可以使用它来编写RESTful API。与现在非常流行的Spring全家桶相比，Play略显小众，但它的设计思想天生就是分布式、异步的，也得到许多开发者的认可，在实际生产环境中也有像Linkedin这样的大公司采用。对于一个没有开发过Web应用或者后台应用的开发者来讲，学习和使用Play框架也许是一个不错的选择。</p>","more":"<p>可能有些接触过Scala语言的开发者，或多或少听过Play这个框架，也知道Play框架大部分代码是使用Scala开发的。不禁会有疑问，是不是一定要学会Scala才可以使用Play呢？这个疑问我也有过，但是据使用过Play的开发者介绍，在Play框架中使用Java语言开发Web应用的过程中，基本上是不会需要你真正去学习Scala的。Play框架本身对Java的支持非常全面，不用担心自己不会Scala。我举一个例子，做过Android开发的同学，一定记得在2014年，我们从Eclipse切换的Android Studio时，需要将自己的ant.xml打包脚本移植到gradle脚本。当时我还在实习，完全是一个菜鸟，也不懂groovy，而且那时候网上关于gradle的资料也非常的少，但是即使这样，我依然能够把一个ant编写的打包脚本移植到gradle，如此类比一下，相信大家应该心里有数了。</p>\n<h2 id=\"二、环境搭建\"><a href=\"#二、环境搭建\" class=\"headerlink\" title=\"二、环境搭建\"></a>二、环境搭建</h2><p>我使用的Play版本是2.6.x，系统是macosx 10.12.5。配置环境的时候，推荐按照<a href=\"https://www.playframework.com/documentation/2.6.x/Home\" target=\"_blank\" rel=\"noopener\">官方文档</a>操作。</p>\n<h3 id=\"JDK\"><a href=\"#JDK\" class=\"headerlink\" title=\"JDK\"></a>JDK</h3><p>Play 2.6.x要求必须是Java 8，现在使用到的SBT版本是1.x。</p>\n<h3 id=\"SBT\"><a href=\"#SBT\" class=\"headerlink\" title=\"SBT\"></a>SBT</h3><p>SBT(simple-build tool)，Play默认使用的构建工具。可以用homebrew安装，也可以手动下载sbt程序到电脑。</p>\n<blockquote>\n<p>提醒一下，我在mac osx 10.12上运行<code>brew install sbt@1</code>时，提示需要安装9.x版本的xcode，才可以用brew安装sbt。所以我采用了手动下载sbt，然后配置环境变量的方法，使得电脑上可以使用<code>sbt</code>命令。但是请记住一点，手动安装的sbt，目录是你自己放的文件目录，而不是默认的<code>usr/local/sbt</code>，如果你需要修改<code>sbtopt</code>这种配置文件的话，记得在自己正确的目录下操作。</p>\n</blockquote>\n<h3 id=\"Intellij-IDEA\"><a href=\"#Intellij-IDEA\" class=\"headerlink\" title=\"Intellij IDEA\"></a>Intellij IDEA</h3><p>安装IDEA后，还需要安装Scala插件。关于IDE的设置，请参考<a href=\"https://www.playframework.com/documentation/2.6.x/IDE\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<blockquote>\n<p>尽量安装新版的IDEA和对应版本的Scala插件，亲测2017.2的IDEA安装插件后可能会有BUG。</p>\n</blockquote>\n<h2 id=\"三、认识Play项目的结构\"><a href=\"#三、认识Play项目的结构\" class=\"headerlink\" title=\"三、认识Play项目的结构\"></a>三、认识Play项目的结构</h2><p>Play框架的文档很全面，如果要全面深入地学习Play，可以仔细阅读官方的Document。这里可以从Play的示例<a href=\"https://github.com/playframework/play-java-starter-example\" target=\"_blank\" rel=\"noopener\">play-java-starter-example</a>入手，开始认识Play框架的结构，并了解如何使用Play来开发Web应用。</p>\n<p>使用idea的<code>Import Project</code>导入play-java-started-example工程，记得在import wizard中选择<code>Import project from external model</code>的<code>SBT project</code>，然后点击下一步。导入项目后，进入终端输入<code>sbt run</code>就可以让这个项目运行起来了。</p>\n<blockquote>\n<p>注意：sbt第一次运行时比较慢，需要耐心等待。</p>\n</blockquote>\n<p>根据console的提示，在浏览器中打开<code>http://localhost:9000</code>，我们可以看到一个Web欢迎页面。</p>\n<hr>\n<p>搞定上面的准备工作之后，我们开始看Play应用的目录是如何组织起来的，进而分析一下我们在浏览器中输入<code>http://localhost:9000</code>之后，Play是如何工作的。</p>\n<p>下面是来自<a href=\"https://www.playframework.com/documentation/2.6.x/Anatomy\" target=\"_blank\" rel=\"noopener\">Play官方文档中的Anatomy of a Play application</a>。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app                      → Application sources</span><br><span class=\"line\"> └ assets                → Compiled asset sources</span><br><span class=\"line\">    └ stylesheets        → Typically LESS CSS sources</span><br><span class=\"line\">    └ javascripts        → Typically CoffeeScript sources</span><br><span class=\"line\"> └ controllers           → Application controllers</span><br><span class=\"line\"> └ models                → Application business layer</span><br><span class=\"line\"> └ views                 → Templates</span><br><span class=\"line\">build.sbt                → Application build script</span><br><span class=\"line\">conf                     → Configurations files <span class=\"keyword\">and</span> other non-compiled resources (on classpath)</span><br><span class=\"line\"> └ application.conf      → Main configuration file</span><br><span class=\"line\"> └ routes                → Routes definition</span><br><span class=\"line\">dist                     → Arbitrary files <span class=\"keyword\">to</span> be included <span class=\"keyword\">in</span> your projects distribution</span><br><span class=\"line\">public                   → Public assets</span><br><span class=\"line\"> └ stylesheets           → CSS files</span><br><span class=\"line\"> └ javascripts           → Javascript files</span><br><span class=\"line\"> └ images                → Image files</span><br><span class=\"line\">project                  → sbt configuration files</span><br><span class=\"line\"> └ build.properties      → Marker <span class=\"keyword\">for</span> sbt project</span><br><span class=\"line\"> └ plugins.sbt           → sbt plugins including the declaration <span class=\"keyword\">for</span> Play itself</span><br><span class=\"line\">lib                      → Unmanaged libraries dependencies</span><br><span class=\"line\">logs                     → Logs folder</span><br><span class=\"line\"> └ application.log       →<span class=\"built_in\"> Default </span>log file</span><br><span class=\"line\">target                   → Generated stuff</span><br><span class=\"line\"> └ resolution-cache      → <span class=\"builtin-name\">Info</span> about dependencies</span><br><span class=\"line\"> └ scala-2.11</span><br><span class=\"line\">    └ api                → Generated API docs</span><br><span class=\"line\">    └ classes            → Compiled class files</span><br><span class=\"line\">    └ routes             → Sources generated <span class=\"keyword\">from</span> routes</span><br><span class=\"line\">    └ twirl              → Sources generated <span class=\"keyword\">from</span> templates</span><br><span class=\"line\"> └ universal             → Application packaging</span><br><span class=\"line\"> └ web                   → Compiled web assets</span><br><span class=\"line\">test                     → source folder <span class=\"keyword\">for</span> unit <span class=\"keyword\">or</span> functional tests</span><br></pre></td></tr></table></figure>\n<p>Play框架采用了MVC架构，把Web应用分成模型层、控制层和视图层。每个层次对应的文件存放在不同的目录下面，下面依次介绍一下关键的几个目录。</p>\n<h3 id=\"app-目录\"><a href=\"#app-目录\" class=\"headerlink\" title=\"app/目录\"></a><code>app/</code>目录</h3><p>存放着所有的Java源代码代码、Scala源代码、模板和编译后的资源文件（如LESS CSS、CoffeeScript）。在这个目录下，一般会有三个默认的package：controllers、models、views。</p>\n<blockquote>\n<p>和以往我们看到的代码package不同的是，play默认的package layout没有<code>com.youcompany</code>这样的前缀。不过我们如果想添加前缀也完全是OK的。包括<code>app/assets</code>目录，完全也是可选的。</p>\n</blockquote>\n<h3 id=\"public-目录\"><a href=\"#public-目录\" class=\"headerlink\" title=\"public/目录\"></a><code>public/</code>目录</h3><p><code>public/</code>目录下面存放的是一些静态资源文件，这个目录默认被分成3个子目录，分别用来存放我们的js、css、image这3类文件。</p>\n<blockquote>\n<p>在一个新创建的应用中，<code>public/</code>目录默认会被映射到<code>assets</code>这个URL路径下，需要的话我们也可以手动修改。</p>\n</blockquote>\n<h3 id=\"conf-目录\"><a href=\"#conf-目录\" class=\"headerlink\" title=\"conf/目录\"></a><code>conf/</code>目录</h3><p>顾名思义，这个目录下面放的是配置文件，Play中主要用两类配置文件：</p>\n<ul>\n<li><code>application.conf</code>：整个应用的配置参数，例如db连接参数、缓存策略等配置</li>\n<li><code>routes</code>：路由定义</li>\n</ul>\n<h3 id=\"build-sbt文件\"><a href=\"#build-sbt文件\" class=\"headerlink\" title=\"build.sbt文件\"></a><code>build.sbt</code>文件</h3><p>项目的构建脚本，主要的构建配置都在这里，例如项目依赖的jar包、应用的版本号等等。不过<code>project/</code>目录下的<code>.scala</code>文件也会对项目的配置起作用。这个文件有点类似于我们的<code>build.gradle</code>。</p>\n<h3 id=\"lib-目录\"><a href=\"#lib-目录\" class=\"headerlink\" title=\"lib/目录\"></a><code>lib/</code>目录</h3><p>这个目录用于存放一些以来的外部jar包等等，是一个可选目录。不过一般我们都可以在<code>build.sbt</code>中添加依赖。</p>\n<h3 id=\"project-目录\"><a href=\"#project-目录\" class=\"headerlink\" title=\"project/目录\"></a><code>project/</code>目录</h3><p>前面就说到这个目录下的scala文件也会对项目配置起作用。这里包含两个sbt构建配置文件：</p>\n<ul>\n<li><code>plugin.sbt</code>：定义了需要用到哪些sbt插件。我感觉有点类似于<code>build.gradle</code>里面写的<code>apply &#39;idea&#39;</code>。</li>\n<li><code>build.properties</code>：定义了sbt的版本。我感觉有点类似于的<code>gradle-wrapper.properties</code>。</li>\n</ul>\n<h3 id=\"target-目录\"><a href=\"#target-目录\" class=\"headerlink\" title=\"target/目录\"></a><code>target/</code>目录</h3><p>这个目录存放着工程构建完以后生成的文件，从这里可以了解到代码经过sbt构建后，最终变成了什么样的结果。主要包括下面几个子目录：</p>\n<ul>\n<li><code>classes/</code>：编译后的class文件（来自Java和Scala源码）</li>\n<li><code>classes_managed</code>：<code>classes/</code>目录下组织好的其他子目录，包含框架生成的class文件，例如routes和template引擎生成的class文件。</li>\n<li><code>resource_managed</code>：组织好的、生成的资源，比如编译过的LESS CSS、CoffeeScript结果。</li>\n<li><code>src_managed</code>：组织好的生成的代码文件，例如模板引擎生成的Scala文件。</li>\n<li><code>web/</code>：sbt-web任务生成的资源文件，例如来自<code>app/assets</code>和<code>public</code>文件夹里面的文件。</li>\n</ul>\n<blockquote>\n<p>Play应用默认的文件组织结构与SBT默认的并不相同。如果我们想用SBT默认的代码和文件组织结构，可以禁用掉PlayLayoutPlugin。但是这有一定的风险。</p>\n</blockquote>\n<p>通过上面应用组织结构，可以看到其实Play框架采用的也是<strong>约定优于配置</strong>的规范，让我们集中精力在程序的开发上面，而不是去写太多的配置文件。</p>\n<h2 id=\"四、使用Play开发Web应用\"><a href=\"#四、使用Play开发Web应用\" class=\"headerlink\" title=\"四、使用Play开发Web应用\"></a>四、使用Play开发Web应用</h2><p>在上面我们运行<code>sbt run</code>命令后，可以访问<a href=\"http://localhost:9000\" target=\"_blank\" rel=\"noopener\">http://localhost:9000</a>来访问这个示例程序，看到了一个Welcome Page。</p>\n<p>Play框架是一个典型的MVC架构，下面分析一下这个示例工程是工作起来的，从而了解怎么使用Play开发Web应用。</p>\n<h3 id=\"定义路由和Controller\"><a href=\"#定义路由和Controller\" class=\"headerlink\" title=\"定义路由和Controller\"></a>定义路由和Controller</h3><p>前面介绍了<code>conf/routes</code>文件定义了整个应用的路由，也就是说我们在浏览器输入的url（request），经过这个文件的映射，会交给相应的Controller处理，然后返回结果给浏览器。看一下<code>routes</code>文件的内容：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Routes</span></span><br><span class=\"line\"><span class=\"comment\"># This file defines all application routes (Higher priority routes first)</span></span><br><span class=\"line\"><span class=\"comment\"># ~~~~</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># An example controller showing a sample home page</span></span><br><span class=\"line\"><span class=\"builtin-name\">GET</span>     /                           controllers.HomeController.index</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 省略其他路由配置</span></span><br><span class=\"line\"><span class=\"built_in\">..</span>.</span><br></pre></td></tr></table></figure>\n<p>所以当访问<code>http://localhost:9000</code>时，会交给<code>app/controllers/HomeController.index()</code>方法来处理这个请求，并得到结果返回给浏览器。</p>\n<h3 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h3><p>下面看一下<code>HomeController.index</code>方法是如何渲染出Html页面来的。</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Result <span class=\"keyword\">index</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ok(<span class=\"keyword\">index</span>.render(<span class=\"string\">\"Your new application is ready.\"</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里调用了<code>ok</code>方法来返回一个<code>Result</code>对象，我们仔细分析一下这个方法的签名。</p>\n<p>先看<code>ok</code>方法的返回值类型<code>Result</code>，在Play中，<code>Result</code>类可以理解为一个定义了http响应的数据结构，包含了响应的HTTP Status Code和的content。那<code>ok</code>方法是哪里定义的呢？原来<code>HomeController</code>继承了<code>Controller</code>类，<code>Controller</code>类继承了<code>Results</code>类，而<code>ok</code>方法是<code>Results</code>类里面定义的，这个方法可以返回一个Result对象。</p>\n<p>再看<code>ok</code>方法的参数，这个参数是<code>Content</code>类，它定义了响应的contentType和body。这里的Content是由<code>index.render</code>方法生成的。</p>\n<p>接着我们再看<code>index.render</code>是如何生成的<code>Content</code>的，这里的<code>index</code>类，并不是我们写的，而是Play生成的，使用idea可以很容易找到它在<code>target/scala-2.12/twirl/main/views/html/index.template.scala</code>这个scala文件里，这个文件定义了一个scala里面的单例（我们可以暂时不要纠结这个Scala文件里面<code>object index ....</code>是怎么生成一个单例对象的，只需要知道这个文件是从<code>app/views/index.scala.html</code>生成的）。好了，我们知道<code>index</code>对象是Play生成的，看看它的<code>render</code>方法，这个方法接收一个<code>String类型</code>的参数，然后返回了前面的<code>Content</code>。</p>\n<p>所以我们浏览器展示Html的是<code>app/views/index.scala.html</code>这个模板渲染出来，这是<a href=\"https://www.playframework.com/documentation/2.6.13/ScalaTemplates\" target=\"_blank\" rel=\"noopener\">Play模板引擎</a>的工作了，我们看下里面有什么内容。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@*</span><br><span class=\"line\"> * This template takes a single argument, a String containing a</span><br><span class=\"line\"> * message to display.</span><br><span class=\"line\"> *@</span><br><span class=\"line\">@(message: String)</span><br><span class=\"line\"></span><br><span class=\"line\">@*</span><br><span class=\"line\"> * Call the `<span class=\"javascript\">main</span>` template with two arguments. The first</span><br><span class=\"line\"> * argument <span class=\"keyword\">is</span> a `<span class=\"javascript\"><span class=\"built_in\">String</span></span>` with the title <span class=\"keyword\">of</span> the page, the second</span><br><span class=\"line\"> * argument <span class=\"keyword\">is</span> an `<span class=\"javascript\">Html</span>` object containing the body <span class=\"keyword\">of</span> the page.</span><br><span class=\"line\"> *@</span><br><span class=\"line\">@main(<span class=\"string\">\"Welcome to Play\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @*</span><br><span class=\"line\">     * Get an `<span class=\"javascript\">Html</span>` object <span class=\"keyword\">by</span> calling the built-<span class=\"keyword\">in</span> Play welcome</span><br><span class=\"line\">     * template <span class=\"keyword\">and</span> passing a `<span class=\"javascript\"><span class=\"built_in\">String</span></span>` message.</span><br><span class=\"line\">     *@</span><br><span class=\"line\">    @welcome(message, style = <span class=\"string\">\"java\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Play内置了基于Scala语言的Twirl模板引擎，跟着注释就可以了解这个模板是怎么被渲染成我们看到的html的。</p>\n<p>首先<code>index</code>模板接收了一个字符串作为参数（<code>Your new application is ready.</code>），然后把两个参数传递给了<code>main</code>模板，一个是字符串<code>Welcome to Play</code>，另一个是调用<code>welcome</code>模板生成的<code>Html</code>对象。<code>welcome</code>模板接收了<code>Your new application is ready.</code>参数和<code>style=&quot;java&quot;</code>参数，然后渲染成了Html对象。打开<code>Welcome.scala.html</code>可以看到一些Html标签以及传入的第一个参数被放在了最上方的<section>里面。</section></p>\n<blockquote>\n<p>我们可以看到其实Play框架帮我们生成的很多文件，都是基于Scala的，因此学习一下Scala对我们理解Play框架非常有帮助。</p>\n</blockquote>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>以上就是从play-java-start-example这个示例工程来了解如何使用Play开发Web应用，这个示例比较简单，甚至没有涉及到model层的代码。开发一个完整的应用，还需要学习更多知识，比如<a href=\"https://www.playframework.com/documentation/2.6.x/Filters\" target=\"_blank\" rel=\"noopener\">filters拦截器</a>、异步处理、状态保持、如何集成ORM框架、支持WebSocket、编写RESTFul APIs、安全以及使用其他的模板引擎等等。</p>\n<h2 id=\"五、其他话题\"><a href=\"#五、其他话题\" class=\"headerlink\" title=\"五、其他话题\"></a>五、其他话题</h2><h3 id=\"Play框架与React集成\"><a href=\"#Play框架与React集成\" class=\"headerlink\" title=\"Play框架与React集成\"></a>Play框架与React集成</h3><p>现在前端开发中有很多都转向了React，我们也可以使用Play框架和React一起编写Web应用。毕竟模板引擎这么多，如果如果已经会使用React开发Web前端，没有必要非得用到Play里面的模板引擎。因此使用React替换掉Play的模板引擎做的工作，是完全没有问题的。</p>\n<h3 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h3><ul>\n<li><a href=\"https://www.playframework.com/documentation/2.6.x/Home\" target=\"_blank\" rel=\"noopener\">官方文档Home</a></li>\n<li><a href=\"https://www.playframework.com/documentation/2.6.x/Tutorials\" target=\"_blank\" rel=\"noopener\">官方的Tutorials</a></li>\n<li><a href=\"https://playframework.com/download/#starters\" target=\"_blank\" rel=\"noopener\">Play Starter Examples</a></li>\n<li><a href=\"https://www.playframework.com/documentation/2.6.x/Anatomy\" target=\"_blank\" rel=\"noopener\">Play工程的结构剖析</a></li>\n</ul>\n<h3 id=\"全栈开发\"><a href=\"#全栈开发\" class=\"headerlink\" title=\"全栈开发\"></a>全栈开发</h3><p>关于全栈，一个对技术有追求，乐于学习进步的人，不应拘泥于只学习某一项技能。有机会要多去熟悉一些其他的技术，做一个“T型”人才，全栈开发是很好的一个实践。除了像Play这样的框架，Ruby on Rails、Python Django，甚至NodeJS，都可以值得了解和学习的全栈框架。</p>\n<p>我认为在学习某一个方向的技术时，需要学习它里面编程的思维方式，并找到一个方向上不同技术之间的共同点，比如学习编程语言的时候，我们都会学习数据类型、流程、异常处理等等；客户端或者前端，核心的基础知识是图形界面开发，从大学时候学的MFC，到现在的Android、iOS、小程序、快应用、React、Vue、Flutter，都需要处理界面的生命周期，比如<code>初始化 -&gt; 展现 - &gt; 消失 -&gt; 销毁</code>；而后端开发，一般都是在处理请求的生命周期，即把一个request变成一个response，比如<code>路由 -&gt; 处理请求参数 -&gt; 处理响应 -&gt; 返回给客户端</code>。希望大家都可以学习进步，走在技术时代的前面！</p>\n<p>最后放上两个我个人觉得不错的学习资料，来自极客时间（InfoQ下面的极客帮面向广告互联网从业者做的一个应用，里面有一些老司机的分享，也有一些付费的知识分析）。最近我看到两个不错的、体系化的分享，与大家分享一下，下面是我的邀请链接，我已经开始学习，觉得帮助还是挺大的。</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcly1fr9zxjidkgj31gi1a64bg.jpg\" alt=\"\"></p>"},{"layout":"post","title":"使用React.js开发Chrome插件","date":"2017-06-16T00:00:00.000Z","_content":"\n# 一、背景\n\n相信看到这篇文章的人应该都用过Chrome插件吧，最近刚好有个这方面的需求，我就把Chrome插件的相关知识学习了一下，发现其实Chrome插件的开发和大前端Web开发的底子是一样的，无非就是runtime只限于Chrome浏览器，并且可以调用Chrome提供的一些`chrome.*` API来实现一些基于Chrome浏览器的小功能。这里非要类比的话，我理解`chrome.*` API就像我们开发Hybird应用一样，需要有一个bridge层来提供底层原生的能力给js。我是做Android开发出生的，这只是我的个人理解，可能对大Web技术的理解还是不够。\n\n其实Chrome上的插件，从UI上主要分成两类：一类是浏览器按钮（[BrowserAction](https://crxdoc-zh.appspot.com/extensions/browserAction)），另一类是页面按钮（[PageAction](https://crxdoc-zh.appspot.com/extensions/pageAction)）。两者的开发大同小异，我这里今天主要介绍的主角不是Chrome插件开发，而是**如何使用React.js来开发Chrome插件**，本文先简单介绍下Chrome插件的开发和ReactJS，最后介绍如何采用Facebook官方推荐的creat-react-app脚手架来开发Chrome插件。\n\n<!-- more -->\n\n# 二、Chrome插件开发基础知识\n\n下面是我看的几篇教程，简单看一下应该就可以算Chrome插件速成了：\n\n- [入门：建立 Chrome 扩展程序](https://crxdoc-zh.appspot.com/extensions/getstarted)\n- [Chrome 扩展开发文档](https://wizardforcel.gitbooks.io/chrome-doc/content/)\n- [Chrome扩展及应用开发](http://www.ituring.com.cn/book/miniarticle/60223)\n\n简单来说，一个最基本Chrome插件应用需要有一个manifest.json清单文件，这个文件一般长这样：\n\n```json\n{\n  \"manifest_version\": 2,\n\n  \"name\": \"One-click Kittens\",\n  \"description\": \"This extension demonstrates a browser action with kittens.\",\n  \"version\": \"1.0\",\n\n  \"permissions\": [\n    \"https://secure.flickr.com/\"\n  ],\n  \"browser_action\": {\n    \"default_icon\": \"icon.png\",\n    \"default_popup\": \"popup.html\"\n  }\n}\n```\n\n这个文件里描述了插件应用的一些属性，如名称、版本、需要的权限、界面的对应的html文件名等等。额！！乍一看怎么和AndroidManifest.xml的**功能**这么像啊？是的大兄弟！！恭喜你对技术的理解已经融会贯通了！\n\n根据manifest.json文件可以看到，一个Chrome插件最少得有：manifest.json文件，icon.png图标和popup.html文件。当然文件名可以随便改，只要和manifest.json里声明的一致就行。\n\n这里就不浪费时间具体说怎么开发插件了，各路前端大牛比我强100倍。但我只强调一点，那就是popup.html中引用的js文件只能是外部引入，不能在popup.html文件里面写js代码。所以一般我们还有见到popup.js文件。另外如果你想知道自己使用的插件有什么秘密，完全可以去Chrome浏览器的安装目录下面把它们给扒出来。。\n\n# 三、React JS基础知识\n\nReact.js不需要多说了吧，从React这个词在技术界诞生起，就是一颗明星，连我这种死抱着Native技术的人都不得不去学习它。。\n\n简单扯两句React JS的话题（React Native下次再说），作为一个Android App/SDK开发，我没有开发过太多传统意义上的Web页面，但是经过我学习了大概一周多的时间，我发现React JS开发Web页面的思路其实和客户端很像，不去用jQuery/Zepto啊操作DOM，而是关注数据本身，以数据驱动去改变界面。重构写好了静态html后，哪块地方需要变化，你就把哪里变成一个变量放到组件的State/Props里面（至于组件怎么切分，哪个数据放State，哪个放Prop不是今天要讨论的话题），然后就只用关注数据的变化，然后setState一下界面就可以刷新了。理解了这一点，就会发现其实开发Web页面很简单。比起操作DOM，一些模板引擎之类的东西，我认为React这个思想非常容易接受，写起来也很舒服，完全没有那种混乱的感觉，而且现在ReactJS生态圈非常大，诸如Redux这类的库使得ReactJS越发的犀利，很多公司早就用得飞起了。\n\n扯得有点远了，ReactJS开发我推荐大家就看[Facebook官方的示例](https://facebook.github.io/react/docs/hello-world.html)就够了。英文不好的朋友可以看看[阮一峰老师的博客](http://www.ruanyifeng.com/blog/2015/03/react)，或者看看[这篇入门教程](https://github.com/kdchang/reactjs101)也是阔以的。\n\n# 四、应该用哪个脚手架？\n\n当然是Facebook官方推荐的[creat-react-app](https://github.com/facebookincubator/create-react-app)。打开终端，依次输入：\n\n```shell\nnpm install -g create-react-app\n\ncreate-react-app my-app\ncd my-app/\n```\n\n然后就在`my-app`下面看到这些文件了。\n\n```shell\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  .gitignore\n  public/\n    favicon.ico\n    index.html\n    manifest.json\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n    registerServiceWorker.js\n```\n\n到此为止，是一个标准的ReactJS编写WebApp的步骤，在终端输入`npm start`，就可以在浏览器中访问本地的localServer了。\n\n## 1.怎么让这个项目支持Chrome插件开发呢？\n\n前面介绍了，Chrome插件最重要的文件就是manifest.json清单文件。我们先看下脚手架给我们默认生成的manifest.json长啥样：\n\n```json\n{\n  \"short_name\": \"React App\",\n  \"name\": \"Create React App Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    }\n  ],\n  \"start_url\": \"./index.html\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n```\n\n对于一个普通的WebApp来说，manifest.json文件在缓存、离线模式以及最新的PWA场景下会起作用，但是这里我们是要开发Chrome插件，那么把它原来的内容通通删掉，改成你的Chrome插件所需要的格式和内容就好了。例如可以改成这样：\n\n```json\n{\n  \"manifest_version\": 2,\n  \"name\": \"MyChromeExt\",\n  \"description\": \"My first chrome extension.\",\n  \"version\": \"1.0.0\",\n  \"icons\": {\n\t\t\"16\": \"img/icon-16.png\",\n\t\t\"128\": \"img/icon-128.png\"\n\t},\n  \"browser_action\": {\n    \"default_icon\": {\n\t\t\t\"19\": \"img/icon-19.png\",\n\t\t\t\"38\": \"img/icon-38.png\"\n\t\t},\n    \"default_title\": \"MyChromeExt\",\n    \"default_popup\": \"index.html\"\n  },\n  \"permissions\": [\n    \"tabs\"\n  ],\n  \"background\": {\n    \"scripts\": [\"background.js\"]\n  }\n}\n```\n\n这里尽可能对脚手架的东西做最小的改动，把default_popup的文件名改成了`index.html`，因为脚手架默认会把js文件都打包到一个main.js文件中，并在index.html中插入这个main.js。\n\n我们运行一下`npm run build`命令，就会发现生成了一个`my-app/build`目录，这个目录就是我们可以在[chrome://extensions/](chrome://extensions/)去加载的插件目录，当然也可以用Chrome把这个目录打包成一个crx插件。\n\n使用creat-react-app脚手架开发Chrome插件的基本方法就是这样了，但是在实际中我们会遇到很多的问题，有时甚至会想要运行[npm run eject](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#available-scripts)，然后去完全自定义`webpack.config.js`来实现打包。\n\n## 2.background.js怎么打包？\n\n我们在开发插件的时候，非常可能需要用到后台的background.js，原因如下：\n\n> 注意：不要在popup页面的js空间变量中保存数据。由于popup页面只在用户点击图标时才会开启，当用户关闭这个页面时就会停止，并没有一个从始至终的实例分配给popup页面。所以每当用户打开popup页面时，它都是崭新的，之前保存在变量中的数据都会消失。如果需要通过popup页面保存用户的数据，可以通过通信将数据交给后台页面（background页面）处理，或者通过localStorage和chrome.storage将数据保存在用户的硬盘上。\n\n\n所以background.js最后也是要进入到我们的发布文件夹下面的，这里建议还是要坚持**最低程度地修改**脚手架的设置，建议不要npm run eject之后来修改webpack的配置，因为实在是真的有点复杂。\n\n这次修改下`package.json`文件：\n\n```json\n{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"react-scripts\": \"1.0.7\"\n  },\n  \"dependencies\": {\n    \"react\": \"^15.6.1\",\n    \"react-dom\": \"^15.6.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\",\n    \"build-chrome-ext\": \"react-scripts build && cp src/background.js build/background.js\"\n  }\n}\n```\n\n可以看到我们添加了一个命令`npm run build-chrome-ext`，并把background.js丢到了build目录下。如果你还有其他的js，我建议在`my-app/src`下建立一个`my-app/src/chrome`文件夹，专用于存在chrome相关其他js代码，然后在build的时候统一丢到build里面。如果要minify这些js，同样可以采用`&&`方式去添加命令。修改\n\n## 3.需要注意的细节\n\n由于使用了一些`chrome.*` API，我们需要在编译js的时候将`chrome`这个全局对象声明一下。\n\ncreat-react-app这个脚手架在**非eject模式**下，没办法修改ESlint的配置来添加global对象，只能在用到了 `chrome.*` API的代码处添加 `// eslint-disable-line` 注释来实现保证编译通过。\n\n如果你已经`npm run eject`了，在**eject模式**下，可以在`package.json`文件里配置ESLint：\n\n```\n\"eslintConfig\": {\n\"extends\": \"react-app\",\n\"globals\": {\n  \"chrome\": true\n  }\n}\n```\n\n\n# 五、其他脚手架推荐\n\n除了自己改造Facebook推荐的[creat-react-app](https://github.com/facebookincubator/create-react-app)外，下面两个脚手架也算是用户比较多的，专门用于开发Chrome插件的脚手架。\n\n- [https://github.com/jhen0409/react-chrome-extension-boilerplate](https://github.com/jhen0409/react-chrome-extension-boilerplate)：默认支持ReactJS，基于webpack。\n- [https://github.com/yeoman/generator-chrome-extension](https://github.com/yeoman/generator-chrome-extension)：没有默认支持ReactJS，需要自己修改，基于gulp打包。\n\n\n\n\n","source":"_posts/使用ReactJS开发Chrome插件.md","raw":"---\nlayout: post\ntitle: 使用React.js开发Chrome插件\ndate: '2017-06-16'\ntags:\n  - React\n  - Chrome插件\n  - Web\ncategories: \n  - 技术\n---\n\n# 一、背景\n\n相信看到这篇文章的人应该都用过Chrome插件吧，最近刚好有个这方面的需求，我就把Chrome插件的相关知识学习了一下，发现其实Chrome插件的开发和大前端Web开发的底子是一样的，无非就是runtime只限于Chrome浏览器，并且可以调用Chrome提供的一些`chrome.*` API来实现一些基于Chrome浏览器的小功能。这里非要类比的话，我理解`chrome.*` API就像我们开发Hybird应用一样，需要有一个bridge层来提供底层原生的能力给js。我是做Android开发出生的，这只是我的个人理解，可能对大Web技术的理解还是不够。\n\n其实Chrome上的插件，从UI上主要分成两类：一类是浏览器按钮（[BrowserAction](https://crxdoc-zh.appspot.com/extensions/browserAction)），另一类是页面按钮（[PageAction](https://crxdoc-zh.appspot.com/extensions/pageAction)）。两者的开发大同小异，我这里今天主要介绍的主角不是Chrome插件开发，而是**如何使用React.js来开发Chrome插件**，本文先简单介绍下Chrome插件的开发和ReactJS，最后介绍如何采用Facebook官方推荐的creat-react-app脚手架来开发Chrome插件。\n\n<!-- more -->\n\n# 二、Chrome插件开发基础知识\n\n下面是我看的几篇教程，简单看一下应该就可以算Chrome插件速成了：\n\n- [入门：建立 Chrome 扩展程序](https://crxdoc-zh.appspot.com/extensions/getstarted)\n- [Chrome 扩展开发文档](https://wizardforcel.gitbooks.io/chrome-doc/content/)\n- [Chrome扩展及应用开发](http://www.ituring.com.cn/book/miniarticle/60223)\n\n简单来说，一个最基本Chrome插件应用需要有一个manifest.json清单文件，这个文件一般长这样：\n\n```json\n{\n  \"manifest_version\": 2,\n\n  \"name\": \"One-click Kittens\",\n  \"description\": \"This extension demonstrates a browser action with kittens.\",\n  \"version\": \"1.0\",\n\n  \"permissions\": [\n    \"https://secure.flickr.com/\"\n  ],\n  \"browser_action\": {\n    \"default_icon\": \"icon.png\",\n    \"default_popup\": \"popup.html\"\n  }\n}\n```\n\n这个文件里描述了插件应用的一些属性，如名称、版本、需要的权限、界面的对应的html文件名等等。额！！乍一看怎么和AndroidManifest.xml的**功能**这么像啊？是的大兄弟！！恭喜你对技术的理解已经融会贯通了！\n\n根据manifest.json文件可以看到，一个Chrome插件最少得有：manifest.json文件，icon.png图标和popup.html文件。当然文件名可以随便改，只要和manifest.json里声明的一致就行。\n\n这里就不浪费时间具体说怎么开发插件了，各路前端大牛比我强100倍。但我只强调一点，那就是popup.html中引用的js文件只能是外部引入，不能在popup.html文件里面写js代码。所以一般我们还有见到popup.js文件。另外如果你想知道自己使用的插件有什么秘密，完全可以去Chrome浏览器的安装目录下面把它们给扒出来。。\n\n# 三、React JS基础知识\n\nReact.js不需要多说了吧，从React这个词在技术界诞生起，就是一颗明星，连我这种死抱着Native技术的人都不得不去学习它。。\n\n简单扯两句React JS的话题（React Native下次再说），作为一个Android App/SDK开发，我没有开发过太多传统意义上的Web页面，但是经过我学习了大概一周多的时间，我发现React JS开发Web页面的思路其实和客户端很像，不去用jQuery/Zepto啊操作DOM，而是关注数据本身，以数据驱动去改变界面。重构写好了静态html后，哪块地方需要变化，你就把哪里变成一个变量放到组件的State/Props里面（至于组件怎么切分，哪个数据放State，哪个放Prop不是今天要讨论的话题），然后就只用关注数据的变化，然后setState一下界面就可以刷新了。理解了这一点，就会发现其实开发Web页面很简单。比起操作DOM，一些模板引擎之类的东西，我认为React这个思想非常容易接受，写起来也很舒服，完全没有那种混乱的感觉，而且现在ReactJS生态圈非常大，诸如Redux这类的库使得ReactJS越发的犀利，很多公司早就用得飞起了。\n\n扯得有点远了，ReactJS开发我推荐大家就看[Facebook官方的示例](https://facebook.github.io/react/docs/hello-world.html)就够了。英文不好的朋友可以看看[阮一峰老师的博客](http://www.ruanyifeng.com/blog/2015/03/react)，或者看看[这篇入门教程](https://github.com/kdchang/reactjs101)也是阔以的。\n\n# 四、应该用哪个脚手架？\n\n当然是Facebook官方推荐的[creat-react-app](https://github.com/facebookincubator/create-react-app)。打开终端，依次输入：\n\n```shell\nnpm install -g create-react-app\n\ncreate-react-app my-app\ncd my-app/\n```\n\n然后就在`my-app`下面看到这些文件了。\n\n```shell\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  .gitignore\n  public/\n    favicon.ico\n    index.html\n    manifest.json\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n    registerServiceWorker.js\n```\n\n到此为止，是一个标准的ReactJS编写WebApp的步骤，在终端输入`npm start`，就可以在浏览器中访问本地的localServer了。\n\n## 1.怎么让这个项目支持Chrome插件开发呢？\n\n前面介绍了，Chrome插件最重要的文件就是manifest.json清单文件。我们先看下脚手架给我们默认生成的manifest.json长啥样：\n\n```json\n{\n  \"short_name\": \"React App\",\n  \"name\": \"Create React App Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    }\n  ],\n  \"start_url\": \"./index.html\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n```\n\n对于一个普通的WebApp来说，manifest.json文件在缓存、离线模式以及最新的PWA场景下会起作用，但是这里我们是要开发Chrome插件，那么把它原来的内容通通删掉，改成你的Chrome插件所需要的格式和内容就好了。例如可以改成这样：\n\n```json\n{\n  \"manifest_version\": 2,\n  \"name\": \"MyChromeExt\",\n  \"description\": \"My first chrome extension.\",\n  \"version\": \"1.0.0\",\n  \"icons\": {\n\t\t\"16\": \"img/icon-16.png\",\n\t\t\"128\": \"img/icon-128.png\"\n\t},\n  \"browser_action\": {\n    \"default_icon\": {\n\t\t\t\"19\": \"img/icon-19.png\",\n\t\t\t\"38\": \"img/icon-38.png\"\n\t\t},\n    \"default_title\": \"MyChromeExt\",\n    \"default_popup\": \"index.html\"\n  },\n  \"permissions\": [\n    \"tabs\"\n  ],\n  \"background\": {\n    \"scripts\": [\"background.js\"]\n  }\n}\n```\n\n这里尽可能对脚手架的东西做最小的改动，把default_popup的文件名改成了`index.html`，因为脚手架默认会把js文件都打包到一个main.js文件中，并在index.html中插入这个main.js。\n\n我们运行一下`npm run build`命令，就会发现生成了一个`my-app/build`目录，这个目录就是我们可以在[chrome://extensions/](chrome://extensions/)去加载的插件目录，当然也可以用Chrome把这个目录打包成一个crx插件。\n\n使用creat-react-app脚手架开发Chrome插件的基本方法就是这样了，但是在实际中我们会遇到很多的问题，有时甚至会想要运行[npm run eject](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#available-scripts)，然后去完全自定义`webpack.config.js`来实现打包。\n\n## 2.background.js怎么打包？\n\n我们在开发插件的时候，非常可能需要用到后台的background.js，原因如下：\n\n> 注意：不要在popup页面的js空间变量中保存数据。由于popup页面只在用户点击图标时才会开启，当用户关闭这个页面时就会停止，并没有一个从始至终的实例分配给popup页面。所以每当用户打开popup页面时，它都是崭新的，之前保存在变量中的数据都会消失。如果需要通过popup页面保存用户的数据，可以通过通信将数据交给后台页面（background页面）处理，或者通过localStorage和chrome.storage将数据保存在用户的硬盘上。\n\n\n所以background.js最后也是要进入到我们的发布文件夹下面的，这里建议还是要坚持**最低程度地修改**脚手架的设置，建议不要npm run eject之后来修改webpack的配置，因为实在是真的有点复杂。\n\n这次修改下`package.json`文件：\n\n```json\n{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"react-scripts\": \"1.0.7\"\n  },\n  \"dependencies\": {\n    \"react\": \"^15.6.1\",\n    \"react-dom\": \"^15.6.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\",\n    \"build-chrome-ext\": \"react-scripts build && cp src/background.js build/background.js\"\n  }\n}\n```\n\n可以看到我们添加了一个命令`npm run build-chrome-ext`，并把background.js丢到了build目录下。如果你还有其他的js，我建议在`my-app/src`下建立一个`my-app/src/chrome`文件夹，专用于存在chrome相关其他js代码，然后在build的时候统一丢到build里面。如果要minify这些js，同样可以采用`&&`方式去添加命令。修改\n\n## 3.需要注意的细节\n\n由于使用了一些`chrome.*` API，我们需要在编译js的时候将`chrome`这个全局对象声明一下。\n\ncreat-react-app这个脚手架在**非eject模式**下，没办法修改ESlint的配置来添加global对象，只能在用到了 `chrome.*` API的代码处添加 `// eslint-disable-line` 注释来实现保证编译通过。\n\n如果你已经`npm run eject`了，在**eject模式**下，可以在`package.json`文件里配置ESLint：\n\n```\n\"eslintConfig\": {\n\"extends\": \"react-app\",\n\"globals\": {\n  \"chrome\": true\n  }\n}\n```\n\n\n# 五、其他脚手架推荐\n\n除了自己改造Facebook推荐的[creat-react-app](https://github.com/facebookincubator/create-react-app)外，下面两个脚手架也算是用户比较多的，专门用于开发Chrome插件的脚手架。\n\n- [https://github.com/jhen0409/react-chrome-extension-boilerplate](https://github.com/jhen0409/react-chrome-extension-boilerplate)：默认支持ReactJS，基于webpack。\n- [https://github.com/yeoman/generator-chrome-extension](https://github.com/yeoman/generator-chrome-extension)：没有默认支持ReactJS，需要自己修改，基于gulp打包。\n\n\n\n\n","slug":"使用ReactJS开发Chrome插件","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8eg001imtsx9esq2b9v","content":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>相信看到这篇文章的人应该都用过Chrome插件吧，最近刚好有个这方面的需求，我就把Chrome插件的相关知识学习了一下，发现其实Chrome插件的开发和大前端Web开发的底子是一样的，无非就是runtime只限于Chrome浏览器，并且可以调用Chrome提供的一些<code>chrome.*</code> API来实现一些基于Chrome浏览器的小功能。这里非要类比的话，我理解<code>chrome.*</code> API就像我们开发Hybird应用一样，需要有一个bridge层来提供底层原生的能力给js。我是做Android开发出生的，这只是我的个人理解，可能对大Web技术的理解还是不够。</p>\n<p>其实Chrome上的插件，从UI上主要分成两类：一类是浏览器按钮（<a href=\"https://crxdoc-zh.appspot.com/extensions/browserAction\" target=\"_blank\" rel=\"noopener\">BrowserAction</a>），另一类是页面按钮（<a href=\"https://crxdoc-zh.appspot.com/extensions/pageAction\" target=\"_blank\" rel=\"noopener\">PageAction</a>）。两者的开发大同小异，我这里今天主要介绍的主角不是Chrome插件开发，而是<strong>如何使用React.js来开发Chrome插件</strong>，本文先简单介绍下Chrome插件的开发和ReactJS，最后介绍如何采用Facebook官方推荐的creat-react-app脚手架来开发Chrome插件。</p>\n<a id=\"more\"></a>\n<h1 id=\"二、Chrome插件开发基础知识\"><a href=\"#二、Chrome插件开发基础知识\" class=\"headerlink\" title=\"二、Chrome插件开发基础知识\"></a>二、Chrome插件开发基础知识</h1><p>下面是我看的几篇教程，简单看一下应该就可以算Chrome插件速成了：</p>\n<ul>\n<li><a href=\"https://crxdoc-zh.appspot.com/extensions/getstarted\" target=\"_blank\" rel=\"noopener\">入门：建立 Chrome 扩展程序</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/chrome-doc/content/\" target=\"_blank\" rel=\"noopener\">Chrome 扩展开发文档</a></li>\n<li><a href=\"http://www.ituring.com.cn/book/miniarticle/60223\" target=\"_blank\" rel=\"noopener\">Chrome扩展及应用开发</a></li>\n</ul>\n<p>简单来说，一个最基本Chrome插件应用需要有一个manifest.json清单文件，这个文件一般长这样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"manifest_version\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"One-click Kittens\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"This extension demonstrates a browser action with kittens.\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">\"permissions\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"https://secure.flickr.com/\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"browser_action\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"default_icon\"</span>: <span class=\"string\">\"icon.png\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"default_popup\"</span>: <span class=\"string\">\"popup.html\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个文件里描述了插件应用的一些属性，如名称、版本、需要的权限、界面的对应的html文件名等等。额！！乍一看怎么和AndroidManifest.xml的<strong>功能</strong>这么像啊？是的大兄弟！！恭喜你对技术的理解已经融会贯通了！</p>\n<p>根据manifest.json文件可以看到，一个Chrome插件最少得有：manifest.json文件，icon.png图标和popup.html文件。当然文件名可以随便改，只要和manifest.json里声明的一致就行。</p>\n<p>这里就不浪费时间具体说怎么开发插件了，各路前端大牛比我强100倍。但我只强调一点，那就是popup.html中引用的js文件只能是外部引入，不能在popup.html文件里面写js代码。所以一般我们还有见到popup.js文件。另外如果你想知道自己使用的插件有什么秘密，完全可以去Chrome浏览器的安装目录下面把它们给扒出来。。</p>\n<h1 id=\"三、React-JS基础知识\"><a href=\"#三、React-JS基础知识\" class=\"headerlink\" title=\"三、React JS基础知识\"></a>三、React JS基础知识</h1><p>React.js不需要多说了吧，从React这个词在技术界诞生起，就是一颗明星，连我这种死抱着Native技术的人都不得不去学习它。。</p>\n<p>简单扯两句React JS的话题（React Native下次再说），作为一个Android App/SDK开发，我没有开发过太多传统意义上的Web页面，但是经过我学习了大概一周多的时间，我发现React JS开发Web页面的思路其实和客户端很像，不去用jQuery/Zepto啊操作DOM，而是关注数据本身，以数据驱动去改变界面。重构写好了静态html后，哪块地方需要变化，你就把哪里变成一个变量放到组件的State/Props里面（至于组件怎么切分，哪个数据放State，哪个放Prop不是今天要讨论的话题），然后就只用关注数据的变化，然后setState一下界面就可以刷新了。理解了这一点，就会发现其实开发Web页面很简单。比起操作DOM，一些模板引擎之类的东西，我认为React这个思想非常容易接受，写起来也很舒服，完全没有那种混乱的感觉，而且现在ReactJS生态圈非常大，诸如Redux这类的库使得ReactJS越发的犀利，很多公司早就用得飞起了。</p>\n<p>扯得有点远了，ReactJS开发我推荐大家就看<a href=\"https://facebook.github.io/react/docs/hello-world.html\" target=\"_blank\" rel=\"noopener\">Facebook官方的示例</a>就够了。英文不好的朋友可以看看<a href=\"http://www.ruanyifeng.com/blog/2015/03/react\" target=\"_blank\" rel=\"noopener\">阮一峰老师的博客</a>，或者看看<a href=\"https://github.com/kdchang/reactjs101\" target=\"_blank\" rel=\"noopener\">这篇入门教程</a>也是阔以的。</p>\n<h1 id=\"四、应该用哪个脚手架？\"><a href=\"#四、应该用哪个脚手架？\" class=\"headerlink\" title=\"四、应该用哪个脚手架？\"></a>四、应该用哪个脚手架？</h1><p>当然是Facebook官方推荐的<a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"noopener\">creat-react-app</a>。打开终端，依次输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br><span class=\"line\"></span><br><span class=\"line\">create-react-app my-app</span><br><span class=\"line\">cd my-app/</span><br></pre></td></tr></table></figure>\n<p>然后就在<code>my-app</code>下面看到这些文件了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-app/</span><br><span class=\"line\">  README.md</span><br><span class=\"line\">  node_modules/</span><br><span class=\"line\">  package.json</span><br><span class=\"line\">  .gitignore</span><br><span class=\"line\">  public/</span><br><span class=\"line\">    favicon.ico</span><br><span class=\"line\">    index.html</span><br><span class=\"line\">    manifest.json</span><br><span class=\"line\">  src/</span><br><span class=\"line\">    App.css</span><br><span class=\"line\">    App.js</span><br><span class=\"line\">    App.test.js</span><br><span class=\"line\">    index.css</span><br><span class=\"line\">    index.js</span><br><span class=\"line\">    logo.svg</span><br><span class=\"line\">    registerServiceWorker.js</span><br></pre></td></tr></table></figure>\n<p>到此为止，是一个标准的ReactJS编写WebApp的步骤，在终端输入<code>npm start</code>，就可以在浏览器中访问本地的localServer了。</p>\n<h2 id=\"1-怎么让这个项目支持Chrome插件开发呢？\"><a href=\"#1-怎么让这个项目支持Chrome插件开发呢？\" class=\"headerlink\" title=\"1.怎么让这个项目支持Chrome插件开发呢？\"></a>1.怎么让这个项目支持Chrome插件开发呢？</h2><p>前面介绍了，Chrome插件最重要的文件就是manifest.json清单文件。我们先看下脚手架给我们默认生成的manifest.json长啥样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"short_name\"</span>: <span class=\"string\">\"React App\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Create React App Sample\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"icons\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"favicon.ico\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"192x192\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"start_url\"</span>: <span class=\"string\">\"./index.html\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"display\"</span>: <span class=\"string\">\"standalone\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"theme_color\"</span>: <span class=\"string\">\"#000000\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"background_color\"</span>: <span class=\"string\">\"#ffffff\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于一个普通的WebApp来说，manifest.json文件在缓存、离线模式以及最新的PWA场景下会起作用，但是这里我们是要开发Chrome插件，那么把它原来的内容通通删掉，改成你的Chrome插件所需要的格式和内容就好了。例如可以改成这样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"manifest_version\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"MyChromeExt\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"My first chrome extension.\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"icons\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"16\"</span>: <span class=\"string\">\"img/icon-16.png\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"128\"</span>: <span class=\"string\">\"img/icon-128.png\"</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"browser_action\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"default_icon\"</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"19\"</span>: <span class=\"string\">\"img/icon-19.png\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"38\"</span>: <span class=\"string\">\"img/icon-38.png\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"default_title\"</span>: <span class=\"string\">\"MyChromeExt\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"default_popup\"</span>: <span class=\"string\">\"index.html\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"permissions\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"tabs\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"background\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: [<span class=\"string\">\"background.js\"</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里尽可能对脚手架的东西做最小的改动，把default_popup的文件名改成了<code>index.html</code>，因为脚手架默认会把js文件都打包到一个main.js文件中，并在index.html中插入这个main.js。</p>\n<p>我们运行一下<code>npm run build</code>命令，就会发现生成了一个<code>my-app/build</code>目录，这个目录就是我们可以在<a href=\"chrome://extensions/\" target=\"_blank\" rel=\"noopener\">chrome://extensions/</a>去加载的插件目录，当然也可以用Chrome把这个目录打包成一个crx插件。</p>\n<p>使用creat-react-app脚手架开发Chrome插件的基本方法就是这样了，但是在实际中我们会遇到很多的问题，有时甚至会想要运行<a href=\"https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#available-scripts\" target=\"_blank\" rel=\"noopener\">npm run eject</a>，然后去完全自定义<code>webpack.config.js</code>来实现打包。</p>\n<h2 id=\"2-background-js怎么打包？\"><a href=\"#2-background-js怎么打包？\" class=\"headerlink\" title=\"2.background.js怎么打包？\"></a>2.background.js怎么打包？</h2><p>我们在开发插件的时候，非常可能需要用到后台的background.js，原因如下：</p>\n<blockquote>\n<p>注意：不要在popup页面的js空间变量中保存数据。由于popup页面只在用户点击图标时才会开启，当用户关闭这个页面时就会停止，并没有一个从始至终的实例分配给popup页面。所以每当用户打开popup页面时，它都是崭新的，之前保存在变量中的数据都会消失。如果需要通过popup页面保存用户的数据，可以通过通信将数据交给后台页面（background页面）处理，或者通过localStorage和chrome.storage将数据保存在用户的硬盘上。</p>\n</blockquote>\n<p>所以background.js最后也是要进入到我们的发布文件夹下面的，这里建议还是要坚持<strong>最低程度地修改</strong>脚手架的设置，建议不要npm run eject之后来修改webpack的配置，因为实在是真的有点复杂。</p>\n<p>这次修改下<code>package.json</code>文件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my-app\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"react-scripts\"</span>: <span class=\"string\">\"1.0.7\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^15.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^15.6.1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"react-scripts start\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"react-scripts build\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"react-scripts test --env=jsdom\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eject\"</span>: <span class=\"string\">\"react-scripts eject\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build-chrome-ext\"</span>: <span class=\"string\">\"react-scripts build &amp;&amp; cp src/background.js build/background.js\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到我们添加了一个命令<code>npm run build-chrome-ext</code>，并把background.js丢到了build目录下。如果你还有其他的js，我建议在<code>my-app/src</code>下建立一个<code>my-app/src/chrome</code>文件夹，专用于存在chrome相关其他js代码，然后在build的时候统一丢到build里面。如果要minify这些js，同样可以采用<code>&amp;&amp;</code>方式去添加命令。修改</p>\n<h2 id=\"3-需要注意的细节\"><a href=\"#3-需要注意的细节\" class=\"headerlink\" title=\"3.需要注意的细节\"></a>3.需要注意的细节</h2><p>由于使用了一些<code>chrome.*</code> API，我们需要在编译js的时候将<code>chrome</code>这个全局对象声明一下。</p>\n<p>creat-react-app这个脚手架在<strong>非eject模式</strong>下，没办法修改ESlint的配置来添加global对象，只能在用到了 <code>chrome.*</code> API的代码处添加 <code>// eslint-disable-line</code> 注释来实现保证编译通过。</p>\n<p>如果你已经<code>npm run eject</code>了，在<strong>eject模式</strong>下，可以在<code>package.json</code>文件里配置ESLint：</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"eslintConfig\"</span>: &#123;</span><br><span class=\"line\"><span class=\"string\">\"extends\"</span>: <span class=\"string\">\"react-app\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"globals\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"chrome\"</span>: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"五、其他脚手架推荐\"><a href=\"#五、其他脚手架推荐\" class=\"headerlink\" title=\"五、其他脚手架推荐\"></a>五、其他脚手架推荐</h1><p>除了自己改造Facebook推荐的<a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"noopener\">creat-react-app</a>外，下面两个脚手架也算是用户比较多的，专门用于开发Chrome插件的脚手架。</p>\n<ul>\n<li><a href=\"https://github.com/jhen0409/react-chrome-extension-boilerplate\" target=\"_blank\" rel=\"noopener\">https://github.com/jhen0409/react-chrome-extension-boilerplate</a>：默认支持ReactJS，基于webpack。</li>\n<li><a href=\"https://github.com/yeoman/generator-chrome-extension\" target=\"_blank\" rel=\"noopener\">https://github.com/yeoman/generator-chrome-extension</a>：没有默认支持ReactJS，需要自己修改，基于gulp打包。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>相信看到这篇文章的人应该都用过Chrome插件吧，最近刚好有个这方面的需求，我就把Chrome插件的相关知识学习了一下，发现其实Chrome插件的开发和大前端Web开发的底子是一样的，无非就是runtime只限于Chrome浏览器，并且可以调用Chrome提供的一些<code>chrome.*</code> API来实现一些基于Chrome浏览器的小功能。这里非要类比的话，我理解<code>chrome.*</code> API就像我们开发Hybird应用一样，需要有一个bridge层来提供底层原生的能力给js。我是做Android开发出生的，这只是我的个人理解，可能对大Web技术的理解还是不够。</p>\n<p>其实Chrome上的插件，从UI上主要分成两类：一类是浏览器按钮（<a href=\"https://crxdoc-zh.appspot.com/extensions/browserAction\" target=\"_blank\" rel=\"noopener\">BrowserAction</a>），另一类是页面按钮（<a href=\"https://crxdoc-zh.appspot.com/extensions/pageAction\" target=\"_blank\" rel=\"noopener\">PageAction</a>）。两者的开发大同小异，我这里今天主要介绍的主角不是Chrome插件开发，而是<strong>如何使用React.js来开发Chrome插件</strong>，本文先简单介绍下Chrome插件的开发和ReactJS，最后介绍如何采用Facebook官方推荐的creat-react-app脚手架来开发Chrome插件。</p>","more":"<h1 id=\"二、Chrome插件开发基础知识\"><a href=\"#二、Chrome插件开发基础知识\" class=\"headerlink\" title=\"二、Chrome插件开发基础知识\"></a>二、Chrome插件开发基础知识</h1><p>下面是我看的几篇教程，简单看一下应该就可以算Chrome插件速成了：</p>\n<ul>\n<li><a href=\"https://crxdoc-zh.appspot.com/extensions/getstarted\" target=\"_blank\" rel=\"noopener\">入门：建立 Chrome 扩展程序</a></li>\n<li><a href=\"https://wizardforcel.gitbooks.io/chrome-doc/content/\" target=\"_blank\" rel=\"noopener\">Chrome 扩展开发文档</a></li>\n<li><a href=\"http://www.ituring.com.cn/book/miniarticle/60223\" target=\"_blank\" rel=\"noopener\">Chrome扩展及应用开发</a></li>\n</ul>\n<p>简单来说，一个最基本Chrome插件应用需要有一个manifest.json清单文件，这个文件一般长这样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"manifest_version\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"One-click Kittens\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"This extension demonstrates a browser action with kittens.\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">\"permissions\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"https://secure.flickr.com/\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"browser_action\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"default_icon\"</span>: <span class=\"string\">\"icon.png\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"default_popup\"</span>: <span class=\"string\">\"popup.html\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个文件里描述了插件应用的一些属性，如名称、版本、需要的权限、界面的对应的html文件名等等。额！！乍一看怎么和AndroidManifest.xml的<strong>功能</strong>这么像啊？是的大兄弟！！恭喜你对技术的理解已经融会贯通了！</p>\n<p>根据manifest.json文件可以看到，一个Chrome插件最少得有：manifest.json文件，icon.png图标和popup.html文件。当然文件名可以随便改，只要和manifest.json里声明的一致就行。</p>\n<p>这里就不浪费时间具体说怎么开发插件了，各路前端大牛比我强100倍。但我只强调一点，那就是popup.html中引用的js文件只能是外部引入，不能在popup.html文件里面写js代码。所以一般我们还有见到popup.js文件。另外如果你想知道自己使用的插件有什么秘密，完全可以去Chrome浏览器的安装目录下面把它们给扒出来。。</p>\n<h1 id=\"三、React-JS基础知识\"><a href=\"#三、React-JS基础知识\" class=\"headerlink\" title=\"三、React JS基础知识\"></a>三、React JS基础知识</h1><p>React.js不需要多说了吧，从React这个词在技术界诞生起，就是一颗明星，连我这种死抱着Native技术的人都不得不去学习它。。</p>\n<p>简单扯两句React JS的话题（React Native下次再说），作为一个Android App/SDK开发，我没有开发过太多传统意义上的Web页面，但是经过我学习了大概一周多的时间，我发现React JS开发Web页面的思路其实和客户端很像，不去用jQuery/Zepto啊操作DOM，而是关注数据本身，以数据驱动去改变界面。重构写好了静态html后，哪块地方需要变化，你就把哪里变成一个变量放到组件的State/Props里面（至于组件怎么切分，哪个数据放State，哪个放Prop不是今天要讨论的话题），然后就只用关注数据的变化，然后setState一下界面就可以刷新了。理解了这一点，就会发现其实开发Web页面很简单。比起操作DOM，一些模板引擎之类的东西，我认为React这个思想非常容易接受，写起来也很舒服，完全没有那种混乱的感觉，而且现在ReactJS生态圈非常大，诸如Redux这类的库使得ReactJS越发的犀利，很多公司早就用得飞起了。</p>\n<p>扯得有点远了，ReactJS开发我推荐大家就看<a href=\"https://facebook.github.io/react/docs/hello-world.html\" target=\"_blank\" rel=\"noopener\">Facebook官方的示例</a>就够了。英文不好的朋友可以看看<a href=\"http://www.ruanyifeng.com/blog/2015/03/react\" target=\"_blank\" rel=\"noopener\">阮一峰老师的博客</a>，或者看看<a href=\"https://github.com/kdchang/reactjs101\" target=\"_blank\" rel=\"noopener\">这篇入门教程</a>也是阔以的。</p>\n<h1 id=\"四、应该用哪个脚手架？\"><a href=\"#四、应该用哪个脚手架？\" class=\"headerlink\" title=\"四、应该用哪个脚手架？\"></a>四、应该用哪个脚手架？</h1><p>当然是Facebook官方推荐的<a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"noopener\">creat-react-app</a>。打开终端，依次输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br><span class=\"line\"></span><br><span class=\"line\">create-react-app my-app</span><br><span class=\"line\">cd my-app/</span><br></pre></td></tr></table></figure>\n<p>然后就在<code>my-app</code>下面看到这些文件了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-app/</span><br><span class=\"line\">  README.md</span><br><span class=\"line\">  node_modules/</span><br><span class=\"line\">  package.json</span><br><span class=\"line\">  .gitignore</span><br><span class=\"line\">  public/</span><br><span class=\"line\">    favicon.ico</span><br><span class=\"line\">    index.html</span><br><span class=\"line\">    manifest.json</span><br><span class=\"line\">  src/</span><br><span class=\"line\">    App.css</span><br><span class=\"line\">    App.js</span><br><span class=\"line\">    App.test.js</span><br><span class=\"line\">    index.css</span><br><span class=\"line\">    index.js</span><br><span class=\"line\">    logo.svg</span><br><span class=\"line\">    registerServiceWorker.js</span><br></pre></td></tr></table></figure>\n<p>到此为止，是一个标准的ReactJS编写WebApp的步骤，在终端输入<code>npm start</code>，就可以在浏览器中访问本地的localServer了。</p>\n<h2 id=\"1-怎么让这个项目支持Chrome插件开发呢？\"><a href=\"#1-怎么让这个项目支持Chrome插件开发呢？\" class=\"headerlink\" title=\"1.怎么让这个项目支持Chrome插件开发呢？\"></a>1.怎么让这个项目支持Chrome插件开发呢？</h2><p>前面介绍了，Chrome插件最重要的文件就是manifest.json清单文件。我们先看下脚手架给我们默认生成的manifest.json长啥样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"short_name\"</span>: <span class=\"string\">\"React App\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Create React App Sample\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"icons\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"favicon.ico\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"192x192\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"start_url\"</span>: <span class=\"string\">\"./index.html\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"display\"</span>: <span class=\"string\">\"standalone\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"theme_color\"</span>: <span class=\"string\">\"#000000\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"background_color\"</span>: <span class=\"string\">\"#ffffff\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于一个普通的WebApp来说，manifest.json文件在缓存、离线模式以及最新的PWA场景下会起作用，但是这里我们是要开发Chrome插件，那么把它原来的内容通通删掉，改成你的Chrome插件所需要的格式和内容就好了。例如可以改成这样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"manifest_version\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"MyChromeExt\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"My first chrome extension.\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"icons\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"16\"</span>: <span class=\"string\">\"img/icon-16.png\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"128\"</span>: <span class=\"string\">\"img/icon-128.png\"</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"browser_action\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"default_icon\"</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"19\"</span>: <span class=\"string\">\"img/icon-19.png\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"38\"</span>: <span class=\"string\">\"img/icon-38.png\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"default_title\"</span>: <span class=\"string\">\"MyChromeExt\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"default_popup\"</span>: <span class=\"string\">\"index.html\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"permissions\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"tabs\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"background\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: [<span class=\"string\">\"background.js\"</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里尽可能对脚手架的东西做最小的改动，把default_popup的文件名改成了<code>index.html</code>，因为脚手架默认会把js文件都打包到一个main.js文件中，并在index.html中插入这个main.js。</p>\n<p>我们运行一下<code>npm run build</code>命令，就会发现生成了一个<code>my-app/build</code>目录，这个目录就是我们可以在<a href=\"chrome://extensions/\" target=\"_blank\" rel=\"noopener\">chrome://extensions/</a>去加载的插件目录，当然也可以用Chrome把这个目录打包成一个crx插件。</p>\n<p>使用creat-react-app脚手架开发Chrome插件的基本方法就是这样了，但是在实际中我们会遇到很多的问题，有时甚至会想要运行<a href=\"https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#available-scripts\" target=\"_blank\" rel=\"noopener\">npm run eject</a>，然后去完全自定义<code>webpack.config.js</code>来实现打包。</p>\n<h2 id=\"2-background-js怎么打包？\"><a href=\"#2-background-js怎么打包？\" class=\"headerlink\" title=\"2.background.js怎么打包？\"></a>2.background.js怎么打包？</h2><p>我们在开发插件的时候，非常可能需要用到后台的background.js，原因如下：</p>\n<blockquote>\n<p>注意：不要在popup页面的js空间变量中保存数据。由于popup页面只在用户点击图标时才会开启，当用户关闭这个页面时就会停止，并没有一个从始至终的实例分配给popup页面。所以每当用户打开popup页面时，它都是崭新的，之前保存在变量中的数据都会消失。如果需要通过popup页面保存用户的数据，可以通过通信将数据交给后台页面（background页面）处理，或者通过localStorage和chrome.storage将数据保存在用户的硬盘上。</p>\n</blockquote>\n<p>所以background.js最后也是要进入到我们的发布文件夹下面的，这里建议还是要坚持<strong>最低程度地修改</strong>脚手架的设置，建议不要npm run eject之后来修改webpack的配置，因为实在是真的有点复杂。</p>\n<p>这次修改下<code>package.json</code>文件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my-app\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"react-scripts\"</span>: <span class=\"string\">\"1.0.7\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^15.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^15.6.1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"react-scripts start\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"react-scripts build\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"react-scripts test --env=jsdom\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eject\"</span>: <span class=\"string\">\"react-scripts eject\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build-chrome-ext\"</span>: <span class=\"string\">\"react-scripts build &amp;&amp; cp src/background.js build/background.js\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到我们添加了一个命令<code>npm run build-chrome-ext</code>，并把background.js丢到了build目录下。如果你还有其他的js，我建议在<code>my-app/src</code>下建立一个<code>my-app/src/chrome</code>文件夹，专用于存在chrome相关其他js代码，然后在build的时候统一丢到build里面。如果要minify这些js，同样可以采用<code>&amp;&amp;</code>方式去添加命令。修改</p>\n<h2 id=\"3-需要注意的细节\"><a href=\"#3-需要注意的细节\" class=\"headerlink\" title=\"3.需要注意的细节\"></a>3.需要注意的细节</h2><p>由于使用了一些<code>chrome.*</code> API，我们需要在编译js的时候将<code>chrome</code>这个全局对象声明一下。</p>\n<p>creat-react-app这个脚手架在<strong>非eject模式</strong>下，没办法修改ESlint的配置来添加global对象，只能在用到了 <code>chrome.*</code> API的代码处添加 <code>// eslint-disable-line</code> 注释来实现保证编译通过。</p>\n<p>如果你已经<code>npm run eject</code>了，在<strong>eject模式</strong>下，可以在<code>package.json</code>文件里配置ESLint：</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"eslintConfig\"</span>: &#123;</span><br><span class=\"line\"><span class=\"string\">\"extends\"</span>: <span class=\"string\">\"react-app\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"globals\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"chrome\"</span>: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"五、其他脚手架推荐\"><a href=\"#五、其他脚手架推荐\" class=\"headerlink\" title=\"五、其他脚手架推荐\"></a>五、其他脚手架推荐</h1><p>除了自己改造Facebook推荐的<a href=\"https://github.com/facebookincubator/create-react-app\" target=\"_blank\" rel=\"noopener\">creat-react-app</a>外，下面两个脚手架也算是用户比较多的，专门用于开发Chrome插件的脚手架。</p>\n<ul>\n<li><a href=\"https://github.com/jhen0409/react-chrome-extension-boilerplate\" target=\"_blank\" rel=\"noopener\">https://github.com/jhen0409/react-chrome-extension-boilerplate</a>：默认支持ReactJS，基于webpack。</li>\n<li><a href=\"https://github.com/yeoman/generator-chrome-extension\" target=\"_blank\" rel=\"noopener\">https://github.com/yeoman/generator-chrome-extension</a>：没有默认支持ReactJS，需要自己修改，基于gulp打包。</li>\n</ul>"},{"layout":"post","title":"使用前端开发利器Fiddler调试手机程序","date":"2015-04-30T00:00:00.000Z","_content":"\n\n[Fiddler](http://www.telerik.com/fiddler)是一个非常好用的web前端调试工具，它能记录客户端和服务器的http和https所有请求和响应，允许监视、设置断点，修改输入输出数据。与其他的抓包工具，例如wireshark、firebug等不同，Fiddler可以允许你在调试CGI接口时，修改返回的数据，也就是可以**构造请求**和**模拟响应**。\n\n<!-- more -->\n\n此外，Fiddler还可以支持模拟低速网络（如手机网络）过滤请求等等，安装了**Willow**插件以后你还可以轻松实现修改Host等操作。可惜的是目前Fiddler只支持Windows系统，没办法，毕竟是基于`.net框架`开发的嘛。\n\n# 1. Fiddler的安装和配置\n\n* 下载安装：从官网下载Fiddler，现在的版本应该是Fiddler4：[http://www.telerik.com/download/fiddler](http://www.telerik.com/download/fiddler)。\n\n**注意**：由于Fiddler4是基于`.net框架`的，所以需要在自己的电脑上先安装`.NetFrameWork`，安装好了以后，就可以下载Fiddler4进行安装了。\n\n* 配置：打开将Fiddler，在菜单中选择`Tools->Fiddler Options`，如下图所示把Fiddler设为全局的监听，再把浏览器或者软件的的http proxy设置为`127.0.0.1`，端口设为`8888`。选择ok后，关闭Fiddler并重新打开Fiddler，就可以用Fiddler抓取本地所有的流量了。\n\n![fiddler setup](/content/images/fiddlerSetup.png)\n\n# 2. 抓取手机数据包\n\n抓取手机数据包和抓去电脑上的数据包一样，只需要将手机的代理设置为Fiddler。\n\n具体操作：让手机连接的wifi和你安装Fiddler的电脑处于同一网段，然后在手机的wifi设置中，选择高级选项，设置代理，指向你电脑的ip，端口设置为8888即可。\n\n![fiddler Wifi Setup](/content/images/fiddlerWifiSetup.png)\n\n如上图所示，我电脑的ip是`10.4.66.135`，于是在手机连上wifi以后，勾选**`高级选项`**，**代理**选择**`手动`**，**代理服务器主机名**输入`10.4.66.135`，**代理服务器端口**输入`8888`，点击保存即可。\n\n配置好以后，手机上所有网络请求和响应都会走Fiddler代理，这样就可以分析手机的网络流量了。我们在手机上打开一个大家熟悉的地址`www.baidu.com`，可以看到抓取的数据流量包了，Fiddler的工具栏看起来很复杂，如下图所示，稍微熟悉一下之后就会发现其实很简单。左侧界面是数据包按照时间顺序的列表，右边是对应每一个包的解析，我们可以看到详细的http header头文件以及表单、json数据等等。\n\n![fiddler baidu](/content/images/fiddlerBaidu.png)\n\n# 3. 修改网络响应response\n\n有的时候我们调试程序的时候，需要服务器返回新格式的数据，或者有时候发现原来的服务器上的某个js/css文件有问题，需要修改。如果这时我们要求同事帮忙修改文件，重新发布的话，将会非常麻烦，也可能会影响到现有的线上环境。对大公司来说，这不仅效率低下，而且一不小心就可能酿成大事故。所以通常的做法是在测试环境进行修改，然后等测试通过以后，再部署到线上环境中去。\n\n但是有了Fiddler之后，我们可以直接在本地客户端进行调试了。通过Fiddler修改HTTP数据的特性，替换服务器发给我们的回包，等本地客户端调试通过以后再确认发布。说了一堆没用的，我们直接进入实战。\n\n使用Fiddler修改网络响应包有两种操作：\n\n* 使用**AutoResponder**对回包进行重定向\n* 使用**Willow**插件管理重定向规则\n\n这两种操作方法是一样的，都是对服务器返回的数据包（下面简称**回包**）进行规则的设置，使得回包被替换成我们指定的文件。不过Willow插件用起来比较方便，所以我们一般都会安装Willow插件。\n\n现在我们以Willow插件为例介绍这个非常好用的回包替换功能，我这里安装的是1.4版的Willow，支持Fiddler4.0版本。安装了Willow插件的Fiddler，在右侧的网络数据解析界面上会多出一个Willow标签菜单，如下图所示。\n\n![fiddler willow](/content/images/fiddlerWillow.png)\n\n从图上看出，Willow的图标是一个小树，当回包重定向功能开启时，这颗小树会变成**绿色**，普通状态下小树是**灰色**的。\n\n在下面的列表中，**Fiddler**、**Temp 1**、**unclenought**等都是一个一个的`Willow project`，这些`project`对应的是一组一组的规则，这里我们添加一个`unclenought`的project。在Willow菜单内右键可以选择**Add Project**、**Edit Project**以及**Add Rule**等等。\n\n![fiddler willow menus](/content/images/fiddlerWillowMenus.png)\n\n其中我们最常用就是**Add Rule**功能了，通过这个我们可以设置一些规则，将回包进行重定向。右键选择**Add Rule**以后，我们在**Match**栏填写**正则表达式**来匹配网络请求，**Action**栏选择我们本地的一个文件来替换**match**栏对应的请求的回包,这里我选择了自己写的一个`hello fiddler.html`测试文件。记住，规则保存好了以后，**必须勾选Willow菜单左上角的小勾**，使得回包替换功能开启，确保Willow小树的图标变成了**绿色**的！\n\n![fiddler willow rule](/content/images/fiddlerWillowRule.png)\n\n`hello fiddler.html`文件的代码如下：\n\n```\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>hello fiddler</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    </head>\n    \n    <body>\n    hello fiddler\n    </body>\n</html>\n```\n\n此时我们在打开手机浏览器输入`m.baidu.com`以后，不会再看到正常的百度首页，而是本地文件的`hello fiddler.html`测试页面了。\n\n![hello fiddler](/content/images/helloFiddler.png)\n\n再回到Fiddler左侧的流量包界面，我们可以看到命中的数据包被标注为**黄色**了。因此我们判断自己定义的规则是否生效，可以看看数据包是不是被标为**黄色**了。此外由于，Fiddler回包替换的规则支持正则表达式，所以有时写的规则不一定是完全正确的，大家要多检查下rule中设置规则。\n\n![hello fiddler](/content/images/fiddlerCatchU.png)\n\n此外Fiddler还支持修改**Host**的功能，通过Willow插件可以一键修改，方法也是在Willow菜单下，右键点选一个project，选择**Add Host**，填写需要替换**domain**和**ip**地址即可。关于Fiddler的基本使用就介绍这些，至于断点调试等等，以后有机会再补充！\n","source":"_posts/使用前端开发利器Fiddler调试手机程序.markdown","raw":"---\nlayout: post\ntitle: 使用前端开发利器Fiddler调试手机程序\ndate: '2015-04-30'\nphoto: '/content/images/cover/helloFiddler.jpg'\ntags:\n  - 调试\n  - 网络\ncategories: \n  - 技术\n---\n\n\n[Fiddler](http://www.telerik.com/fiddler)是一个非常好用的web前端调试工具，它能记录客户端和服务器的http和https所有请求和响应，允许监视、设置断点，修改输入输出数据。与其他的抓包工具，例如wireshark、firebug等不同，Fiddler可以允许你在调试CGI接口时，修改返回的数据，也就是可以**构造请求**和**模拟响应**。\n\n<!-- more -->\n\n此外，Fiddler还可以支持模拟低速网络（如手机网络）过滤请求等等，安装了**Willow**插件以后你还可以轻松实现修改Host等操作。可惜的是目前Fiddler只支持Windows系统，没办法，毕竟是基于`.net框架`开发的嘛。\n\n# 1. Fiddler的安装和配置\n\n* 下载安装：从官网下载Fiddler，现在的版本应该是Fiddler4：[http://www.telerik.com/download/fiddler](http://www.telerik.com/download/fiddler)。\n\n**注意**：由于Fiddler4是基于`.net框架`的，所以需要在自己的电脑上先安装`.NetFrameWork`，安装好了以后，就可以下载Fiddler4进行安装了。\n\n* 配置：打开将Fiddler，在菜单中选择`Tools->Fiddler Options`，如下图所示把Fiddler设为全局的监听，再把浏览器或者软件的的http proxy设置为`127.0.0.1`，端口设为`8888`。选择ok后，关闭Fiddler并重新打开Fiddler，就可以用Fiddler抓取本地所有的流量了。\n\n![fiddler setup](/content/images/fiddlerSetup.png)\n\n# 2. 抓取手机数据包\n\n抓取手机数据包和抓去电脑上的数据包一样，只需要将手机的代理设置为Fiddler。\n\n具体操作：让手机连接的wifi和你安装Fiddler的电脑处于同一网段，然后在手机的wifi设置中，选择高级选项，设置代理，指向你电脑的ip，端口设置为8888即可。\n\n![fiddler Wifi Setup](/content/images/fiddlerWifiSetup.png)\n\n如上图所示，我电脑的ip是`10.4.66.135`，于是在手机连上wifi以后，勾选**`高级选项`**，**代理**选择**`手动`**，**代理服务器主机名**输入`10.4.66.135`，**代理服务器端口**输入`8888`，点击保存即可。\n\n配置好以后，手机上所有网络请求和响应都会走Fiddler代理，这样就可以分析手机的网络流量了。我们在手机上打开一个大家熟悉的地址`www.baidu.com`，可以看到抓取的数据流量包了，Fiddler的工具栏看起来很复杂，如下图所示，稍微熟悉一下之后就会发现其实很简单。左侧界面是数据包按照时间顺序的列表，右边是对应每一个包的解析，我们可以看到详细的http header头文件以及表单、json数据等等。\n\n![fiddler baidu](/content/images/fiddlerBaidu.png)\n\n# 3. 修改网络响应response\n\n有的时候我们调试程序的时候，需要服务器返回新格式的数据，或者有时候发现原来的服务器上的某个js/css文件有问题，需要修改。如果这时我们要求同事帮忙修改文件，重新发布的话，将会非常麻烦，也可能会影响到现有的线上环境。对大公司来说，这不仅效率低下，而且一不小心就可能酿成大事故。所以通常的做法是在测试环境进行修改，然后等测试通过以后，再部署到线上环境中去。\n\n但是有了Fiddler之后，我们可以直接在本地客户端进行调试了。通过Fiddler修改HTTP数据的特性，替换服务器发给我们的回包，等本地客户端调试通过以后再确认发布。说了一堆没用的，我们直接进入实战。\n\n使用Fiddler修改网络响应包有两种操作：\n\n* 使用**AutoResponder**对回包进行重定向\n* 使用**Willow**插件管理重定向规则\n\n这两种操作方法是一样的，都是对服务器返回的数据包（下面简称**回包**）进行规则的设置，使得回包被替换成我们指定的文件。不过Willow插件用起来比较方便，所以我们一般都会安装Willow插件。\n\n现在我们以Willow插件为例介绍这个非常好用的回包替换功能，我这里安装的是1.4版的Willow，支持Fiddler4.0版本。安装了Willow插件的Fiddler，在右侧的网络数据解析界面上会多出一个Willow标签菜单，如下图所示。\n\n![fiddler willow](/content/images/fiddlerWillow.png)\n\n从图上看出，Willow的图标是一个小树，当回包重定向功能开启时，这颗小树会变成**绿色**，普通状态下小树是**灰色**的。\n\n在下面的列表中，**Fiddler**、**Temp 1**、**unclenought**等都是一个一个的`Willow project`，这些`project`对应的是一组一组的规则，这里我们添加一个`unclenought`的project。在Willow菜单内右键可以选择**Add Project**、**Edit Project**以及**Add Rule**等等。\n\n![fiddler willow menus](/content/images/fiddlerWillowMenus.png)\n\n其中我们最常用就是**Add Rule**功能了，通过这个我们可以设置一些规则，将回包进行重定向。右键选择**Add Rule**以后，我们在**Match**栏填写**正则表达式**来匹配网络请求，**Action**栏选择我们本地的一个文件来替换**match**栏对应的请求的回包,这里我选择了自己写的一个`hello fiddler.html`测试文件。记住，规则保存好了以后，**必须勾选Willow菜单左上角的小勾**，使得回包替换功能开启，确保Willow小树的图标变成了**绿色**的！\n\n![fiddler willow rule](/content/images/fiddlerWillowRule.png)\n\n`hello fiddler.html`文件的代码如下：\n\n```\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n    <head>\n        <meta charset=\"utf-8\">\n        <title>hello fiddler</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    </head>\n    \n    <body>\n    hello fiddler\n    </body>\n</html>\n```\n\n此时我们在打开手机浏览器输入`m.baidu.com`以后，不会再看到正常的百度首页，而是本地文件的`hello fiddler.html`测试页面了。\n\n![hello fiddler](/content/images/helloFiddler.png)\n\n再回到Fiddler左侧的流量包界面，我们可以看到命中的数据包被标注为**黄色**了。因此我们判断自己定义的规则是否生效，可以看看数据包是不是被标为**黄色**了。此外由于，Fiddler回包替换的规则支持正则表达式，所以有时写的规则不一定是完全正确的，大家要多检查下rule中设置规则。\n\n![hello fiddler](/content/images/fiddlerCatchU.png)\n\n此外Fiddler还支持修改**Host**的功能，通过Willow插件可以一键修改，方法也是在Willow菜单下，右键点选一个project，选择**Add Host**，填写需要替换**domain**和**ip**地址即可。关于Fiddler的基本使用就介绍这些，至于断点调试等等，以后有机会再补充！\n","slug":"使用前端开发利器Fiddler调试手机程序","published":1,"updated":"2018-05-13T07:13:37.000Z","photos":["/content/images/cover/helloFiddler.jpg"],"comments":1,"link":"","_id":"cjh4tf8ei001lmtsxaz3p1zfc","content":"<p><a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\">Fiddler</a>是一个非常好用的web前端调试工具，它能记录客户端和服务器的http和https所有请求和响应，允许监视、设置断点，修改输入输出数据。与其他的抓包工具，例如wireshark、firebug等不同，Fiddler可以允许你在调试CGI接口时，修改返回的数据，也就是可以<strong>构造请求</strong>和<strong>模拟响应</strong>。</p>\n<a id=\"more\"></a>\n<p>此外，Fiddler还可以支持模拟低速网络（如手机网络）过滤请求等等，安装了<strong>Willow</strong>插件以后你还可以轻松实现修改Host等操作。可惜的是目前Fiddler只支持Windows系统，没办法，毕竟是基于<code>.net框架</code>开发的嘛。</p>\n<h1 id=\"1-Fiddler的安装和配置\"><a href=\"#1-Fiddler的安装和配置\" class=\"headerlink\" title=\"1. Fiddler的安装和配置\"></a>1. Fiddler的安装和配置</h1><ul>\n<li>下载安装：从官网下载Fiddler，现在的版本应该是Fiddler4：<a href=\"http://www.telerik.com/download/fiddler\" target=\"_blank\" rel=\"noopener\">http://www.telerik.com/download/fiddler</a>。</li>\n</ul>\n<p><strong>注意</strong>：由于Fiddler4是基于<code>.net框架</code>的，所以需要在自己的电脑上先安装<code>.NetFrameWork</code>，安装好了以后，就可以下载Fiddler4进行安装了。</p>\n<ul>\n<li>配置：打开将Fiddler，在菜单中选择<code>Tools-&gt;Fiddler Options</code>，如下图所示把Fiddler设为全局的监听，再把浏览器或者软件的的http proxy设置为<code>127.0.0.1</code>，端口设为<code>8888</code>。选择ok后，关闭Fiddler并重新打开Fiddler，就可以用Fiddler抓取本地所有的流量了。</li>\n</ul>\n<p><img src=\"/content/images/fiddlerSetup.png\" alt=\"fiddler setup\"></p>\n<h1 id=\"2-抓取手机数据包\"><a href=\"#2-抓取手机数据包\" class=\"headerlink\" title=\"2. 抓取手机数据包\"></a>2. 抓取手机数据包</h1><p>抓取手机数据包和抓去电脑上的数据包一样，只需要将手机的代理设置为Fiddler。</p>\n<p>具体操作：让手机连接的wifi和你安装Fiddler的电脑处于同一网段，然后在手机的wifi设置中，选择高级选项，设置代理，指向你电脑的ip，端口设置为8888即可。</p>\n<p><img src=\"/content/images/fiddlerWifiSetup.png\" alt=\"fiddler Wifi Setup\"></p>\n<p>如上图所示，我电脑的ip是<code>10.4.66.135</code>，于是在手机连上wifi以后，勾选<strong><code>高级选项</code></strong>，<strong>代理</strong>选择<strong><code>手动</code></strong>，<strong>代理服务器主机名</strong>输入<code>10.4.66.135</code>，<strong>代理服务器端口</strong>输入<code>8888</code>，点击保存即可。</p>\n<p>配置好以后，手机上所有网络请求和响应都会走Fiddler代理，这样就可以分析手机的网络流量了。我们在手机上打开一个大家熟悉的地址<code>www.baidu.com</code>，可以看到抓取的数据流量包了，Fiddler的工具栏看起来很复杂，如下图所示，稍微熟悉一下之后就会发现其实很简单。左侧界面是数据包按照时间顺序的列表，右边是对应每一个包的解析，我们可以看到详细的http header头文件以及表单、json数据等等。</p>\n<p><img src=\"/content/images/fiddlerBaidu.png\" alt=\"fiddler baidu\"></p>\n<h1 id=\"3-修改网络响应response\"><a href=\"#3-修改网络响应response\" class=\"headerlink\" title=\"3. 修改网络响应response\"></a>3. 修改网络响应response</h1><p>有的时候我们调试程序的时候，需要服务器返回新格式的数据，或者有时候发现原来的服务器上的某个js/css文件有问题，需要修改。如果这时我们要求同事帮忙修改文件，重新发布的话，将会非常麻烦，也可能会影响到现有的线上环境。对大公司来说，这不仅效率低下，而且一不小心就可能酿成大事故。所以通常的做法是在测试环境进行修改，然后等测试通过以后，再部署到线上环境中去。</p>\n<p>但是有了Fiddler之后，我们可以直接在本地客户端进行调试了。通过Fiddler修改HTTP数据的特性，替换服务器发给我们的回包，等本地客户端调试通过以后再确认发布。说了一堆没用的，我们直接进入实战。</p>\n<p>使用Fiddler修改网络响应包有两种操作：</p>\n<ul>\n<li>使用<strong>AutoResponder</strong>对回包进行重定向</li>\n<li>使用<strong>Willow</strong>插件管理重定向规则</li>\n</ul>\n<p>这两种操作方法是一样的，都是对服务器返回的数据包（下面简称<strong>回包</strong>）进行规则的设置，使得回包被替换成我们指定的文件。不过Willow插件用起来比较方便，所以我们一般都会安装Willow插件。</p>\n<p>现在我们以Willow插件为例介绍这个非常好用的回包替换功能，我这里安装的是1.4版的Willow，支持Fiddler4.0版本。安装了Willow插件的Fiddler，在右侧的网络数据解析界面上会多出一个Willow标签菜单，如下图所示。</p>\n<p><img src=\"/content/images/fiddlerWillow.png\" alt=\"fiddler willow\"></p>\n<p>从图上看出，Willow的图标是一个小树，当回包重定向功能开启时，这颗小树会变成<strong>绿色</strong>，普通状态下小树是<strong>灰色</strong>的。</p>\n<p>在下面的列表中，<strong>Fiddler</strong>、<strong>Temp 1</strong>、<strong>unclenought</strong>等都是一个一个的<code>Willow project</code>，这些<code>project</code>对应的是一组一组的规则，这里我们添加一个<code>unclenought</code>的project。在Willow菜单内右键可以选择<strong>Add Project</strong>、<strong>Edit Project</strong>以及<strong>Add Rule</strong>等等。</p>\n<p><img src=\"/content/images/fiddlerWillowMenus.png\" alt=\"fiddler willow menus\"></p>\n<p>其中我们最常用就是<strong>Add Rule</strong>功能了，通过这个我们可以设置一些规则，将回包进行重定向。右键选择<strong>Add Rule</strong>以后，我们在<strong>Match</strong>栏填写<strong>正则表达式</strong>来匹配网络请求，<strong>Action</strong>栏选择我们本地的一个文件来替换<strong>match</strong>栏对应的请求的回包,这里我选择了自己写的一个<code>hello fiddler.html</code>测试文件。记住，规则保存好了以后，<strong>必须勾选Willow菜单左上角的小勾</strong>，使得回包替换功能开启，确保Willow小树的图标变成了<strong>绿色</strong>的！</p>\n<p><img src=\"/content/images/fiddlerWillowRule.png\" alt=\"fiddler willow rule\"></p>\n<p><code>hello fiddler.html</code>文件的代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello fiddler<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    hello fiddler</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时我们在打开手机浏览器输入<code>m.baidu.com</code>以后，不会再看到正常的百度首页，而是本地文件的<code>hello fiddler.html</code>测试页面了。</p>\n<p><img src=\"/content/images/helloFiddler.png\" alt=\"hello fiddler\"></p>\n<p>再回到Fiddler左侧的流量包界面，我们可以看到命中的数据包被标注为<strong>黄色</strong>了。因此我们判断自己定义的规则是否生效，可以看看数据包是不是被标为<strong>黄色</strong>了。此外由于，Fiddler回包替换的规则支持正则表达式，所以有时写的规则不一定是完全正确的，大家要多检查下rule中设置规则。</p>\n<p><img src=\"/content/images/fiddlerCatchU.png\" alt=\"hello fiddler\"></p>\n<p>此外Fiddler还支持修改<strong>Host</strong>的功能，通过Willow插件可以一键修改，方法也是在Willow菜单下，右键点选一个project，选择<strong>Add Host</strong>，填写需要替换<strong>domain</strong>和<strong>ip</strong>地址即可。关于Fiddler的基本使用就介绍这些，至于断点调试等等，以后有机会再补充！</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\">Fiddler</a>是一个非常好用的web前端调试工具，它能记录客户端和服务器的http和https所有请求和响应，允许监视、设置断点，修改输入输出数据。与其他的抓包工具，例如wireshark、firebug等不同，Fiddler可以允许你在调试CGI接口时，修改返回的数据，也就是可以<strong>构造请求</strong>和<strong>模拟响应</strong>。</p>","more":"<p>此外，Fiddler还可以支持模拟低速网络（如手机网络）过滤请求等等，安装了<strong>Willow</strong>插件以后你还可以轻松实现修改Host等操作。可惜的是目前Fiddler只支持Windows系统，没办法，毕竟是基于<code>.net框架</code>开发的嘛。</p>\n<h1 id=\"1-Fiddler的安装和配置\"><a href=\"#1-Fiddler的安装和配置\" class=\"headerlink\" title=\"1. Fiddler的安装和配置\"></a>1. Fiddler的安装和配置</h1><ul>\n<li>下载安装：从官网下载Fiddler，现在的版本应该是Fiddler4：<a href=\"http://www.telerik.com/download/fiddler\" target=\"_blank\" rel=\"noopener\">http://www.telerik.com/download/fiddler</a>。</li>\n</ul>\n<p><strong>注意</strong>：由于Fiddler4是基于<code>.net框架</code>的，所以需要在自己的电脑上先安装<code>.NetFrameWork</code>，安装好了以后，就可以下载Fiddler4进行安装了。</p>\n<ul>\n<li>配置：打开将Fiddler，在菜单中选择<code>Tools-&gt;Fiddler Options</code>，如下图所示把Fiddler设为全局的监听，再把浏览器或者软件的的http proxy设置为<code>127.0.0.1</code>，端口设为<code>8888</code>。选择ok后，关闭Fiddler并重新打开Fiddler，就可以用Fiddler抓取本地所有的流量了。</li>\n</ul>\n<p><img src=\"/content/images/fiddlerSetup.png\" alt=\"fiddler setup\"></p>\n<h1 id=\"2-抓取手机数据包\"><a href=\"#2-抓取手机数据包\" class=\"headerlink\" title=\"2. 抓取手机数据包\"></a>2. 抓取手机数据包</h1><p>抓取手机数据包和抓去电脑上的数据包一样，只需要将手机的代理设置为Fiddler。</p>\n<p>具体操作：让手机连接的wifi和你安装Fiddler的电脑处于同一网段，然后在手机的wifi设置中，选择高级选项，设置代理，指向你电脑的ip，端口设置为8888即可。</p>\n<p><img src=\"/content/images/fiddlerWifiSetup.png\" alt=\"fiddler Wifi Setup\"></p>\n<p>如上图所示，我电脑的ip是<code>10.4.66.135</code>，于是在手机连上wifi以后，勾选<strong><code>高级选项</code></strong>，<strong>代理</strong>选择<strong><code>手动</code></strong>，<strong>代理服务器主机名</strong>输入<code>10.4.66.135</code>，<strong>代理服务器端口</strong>输入<code>8888</code>，点击保存即可。</p>\n<p>配置好以后，手机上所有网络请求和响应都会走Fiddler代理，这样就可以分析手机的网络流量了。我们在手机上打开一个大家熟悉的地址<code>www.baidu.com</code>，可以看到抓取的数据流量包了，Fiddler的工具栏看起来很复杂，如下图所示，稍微熟悉一下之后就会发现其实很简单。左侧界面是数据包按照时间顺序的列表，右边是对应每一个包的解析，我们可以看到详细的http header头文件以及表单、json数据等等。</p>\n<p><img src=\"/content/images/fiddlerBaidu.png\" alt=\"fiddler baidu\"></p>\n<h1 id=\"3-修改网络响应response\"><a href=\"#3-修改网络响应response\" class=\"headerlink\" title=\"3. 修改网络响应response\"></a>3. 修改网络响应response</h1><p>有的时候我们调试程序的时候，需要服务器返回新格式的数据，或者有时候发现原来的服务器上的某个js/css文件有问题，需要修改。如果这时我们要求同事帮忙修改文件，重新发布的话，将会非常麻烦，也可能会影响到现有的线上环境。对大公司来说，这不仅效率低下，而且一不小心就可能酿成大事故。所以通常的做法是在测试环境进行修改，然后等测试通过以后，再部署到线上环境中去。</p>\n<p>但是有了Fiddler之后，我们可以直接在本地客户端进行调试了。通过Fiddler修改HTTP数据的特性，替换服务器发给我们的回包，等本地客户端调试通过以后再确认发布。说了一堆没用的，我们直接进入实战。</p>\n<p>使用Fiddler修改网络响应包有两种操作：</p>\n<ul>\n<li>使用<strong>AutoResponder</strong>对回包进行重定向</li>\n<li>使用<strong>Willow</strong>插件管理重定向规则</li>\n</ul>\n<p>这两种操作方法是一样的，都是对服务器返回的数据包（下面简称<strong>回包</strong>）进行规则的设置，使得回包被替换成我们指定的文件。不过Willow插件用起来比较方便，所以我们一般都会安装Willow插件。</p>\n<p>现在我们以Willow插件为例介绍这个非常好用的回包替换功能，我这里安装的是1.4版的Willow，支持Fiddler4.0版本。安装了Willow插件的Fiddler，在右侧的网络数据解析界面上会多出一个Willow标签菜单，如下图所示。</p>\n<p><img src=\"/content/images/fiddlerWillow.png\" alt=\"fiddler willow\"></p>\n<p>从图上看出，Willow的图标是一个小树，当回包重定向功能开启时，这颗小树会变成<strong>绿色</strong>，普通状态下小树是<strong>灰色</strong>的。</p>\n<p>在下面的列表中，<strong>Fiddler</strong>、<strong>Temp 1</strong>、<strong>unclenought</strong>等都是一个一个的<code>Willow project</code>，这些<code>project</code>对应的是一组一组的规则，这里我们添加一个<code>unclenought</code>的project。在Willow菜单内右键可以选择<strong>Add Project</strong>、<strong>Edit Project</strong>以及<strong>Add Rule</strong>等等。</p>\n<p><img src=\"/content/images/fiddlerWillowMenus.png\" alt=\"fiddler willow menus\"></p>\n<p>其中我们最常用就是<strong>Add Rule</strong>功能了，通过这个我们可以设置一些规则，将回包进行重定向。右键选择<strong>Add Rule</strong>以后，我们在<strong>Match</strong>栏填写<strong>正则表达式</strong>来匹配网络请求，<strong>Action</strong>栏选择我们本地的一个文件来替换<strong>match</strong>栏对应的请求的回包,这里我选择了自己写的一个<code>hello fiddler.html</code>测试文件。记住，规则保存好了以后，<strong>必须勾选Willow菜单左上角的小勾</strong>，使得回包替换功能开启，确保Willow小树的图标变成了<strong>绿色</strong>的！</p>\n<p><img src=\"/content/images/fiddlerWillowRule.png\" alt=\"fiddler willow rule\"></p>\n<p><code>hello fiddler.html</code>文件的代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello fiddler<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    hello fiddler</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时我们在打开手机浏览器输入<code>m.baidu.com</code>以后，不会再看到正常的百度首页，而是本地文件的<code>hello fiddler.html</code>测试页面了。</p>\n<p><img src=\"/content/images/helloFiddler.png\" alt=\"hello fiddler\"></p>\n<p>再回到Fiddler左侧的流量包界面，我们可以看到命中的数据包被标注为<strong>黄色</strong>了。因此我们判断自己定义的规则是否生效，可以看看数据包是不是被标为<strong>黄色</strong>了。此外由于，Fiddler回包替换的规则支持正则表达式，所以有时写的规则不一定是完全正确的，大家要多检查下rule中设置规则。</p>\n<p><img src=\"/content/images/fiddlerCatchU.png\" alt=\"hello fiddler\"></p>\n<p>此外Fiddler还支持修改<strong>Host</strong>的功能，通过Willow插件可以一键修改，方法也是在Willow菜单下，右键点选一个project，选择<strong>Add Host</strong>，填写需要替换<strong>domain</strong>和<strong>ip</strong>地址即可。关于Fiddler的基本使用就介绍这些，至于断点调试等等，以后有机会再补充！</p>"},{"layout":"post","title":"利用属性动画在Android4.x上实现Android L的元素转场动画效果（shared elements transition）","date":"2016-11-08T00:00:00.000Z","_content":"\n# 一、背景\n\n随着谷歌推出的MaterialDesign不断被各种实践，最近我也碰到这么一个需求，就是要求实现一个图片的转场效果。在第一个界面上，图片被点击后，会渐渐地滑动到第二个界面中去。\n\n其实仔细观察一下Google相册也有用到这种效果，大概的效果图是这样的：\n\n![transition-ui-demo](http://ww2.sinaimg.cn/large/801b780agw1f9kunqk6sqg20b40jre86.gif)\n\n按照我的理解，这种效果要是直接把View拿出来复用就可以。但是经过学习（国内外各种大神的博客）和实践发现，里面有不少可以思考的地方。\n\n<!-- more -->\n\n根据官方介绍的[Transitions](https://developer.android.com/training/material/animations.html#Transitions)，在Android 5.0以后，可以使用**shared elements transition**来实现这个效果，非常方便。但是我们的App一般还需要向下兼容到4.x，所以在4.x上得想其它的办法实现。\n\n下面我以上图的ImageView转场动画为例子，介绍一下是怎么实现这个效果的。（代码都在[这里](https://github.com/unclechen/ActivityTransitionDemo)）\n\n> 注意：为了说明转场效果实现的核心内容，一些无关的东西都用了最简单的实现。\n\n# 二、实现思路\n\n## 1.入场\n\n- （1）保存第一个Activity中ImageView（我们叫它originImageView）的位置信息、宽、高，然后把这些信息传给第二个Activity。\n- （2）去掉Activity默认的转场动画。\n- （3）进入第二个Activity之后，拿到第一个Activity传过来的ImageView的位置、宽、高信息，并在第二个Activity动态添加一个一模一样的ImageView（我叫它sourceImageView）。\n- （4）在第二个Activity中，找到最终的ImageView（我叫它targetImageView），并取出它最终所在的位置。\n- （5）对比sourceImageView和targetImageView的位置、大小等等各种**属性**的区别，然后使用属性动画将sourceImageView变换成targetImageView。\n- （6）当动画结束时，显示出targetImageView，隐藏sourceImageView。\n\n> 注意：这里当动画结束时，我们需要将sourceImageView的LayoutParams改成和targetImageView的LayoutParams一模一样，用于退出时做转场动画使用。\n其实退场效果和入场效果是完全相反的步骤。\n\n## 2.退场\n\n- （1）将之前隐藏的sourceImageView显示出来，隐藏targetImageView。\n- （2）通过属性动画将sourceImageView从当前的位置和宽、高大小，变换到刚进入第二个Activity时的状态。（这里的动画代码几乎一样，只是把开始值和结束值调换了位置）\n- （3）动画结束时，关闭第二个Activity，去掉Activity的转场动画。\n\n上面就是实现思路，其实很好理解。实现这个思路的重点，就在于属性动画的应用了。也就是上面提到的**入场的第5步**和**退场的第2步**，这里面用到的属性动画代码见下一章。\n\n# 三、实现代码\n\n## 1.入场\n\n### （1）先复原出sourceImageView\n\n```\n    // 创建一个和第一个界面一模一样的ImageView，作为这个界面的sourceImageView\n    private void initSourceImageView() {\n        // 先动态创建出这个sourceImageView，把它添加到第二个界面的ContentView中。\n        FrameLayout contentView = (FrameLayout) getWindow().getDecorView().findViewById(android.R.id.content);\n        mSourceImageView = new ImageView(this);\n        contentView.addView(mSourceImageView);\n\n        // 读取第一个界面传过来的信息\n        Bundle bundle = getIntent().getExtras();\n        mRect = (Rect) getIntent().getParcelableExtra(IMAGE_ORIGIN_RECT);\n        ImageView.ScaleType scaleType = (ImageView.ScaleType) bundle.getSerializable(IMAGE_SCALE_TYPE);\n        mResId = bundle.getInt(IMAGE_RES_ID);\n\n        // 设置为和第一个界面一样的图片\n        mSourceImageView.setImageResource(mResId);\n        mTargetImageView.setImageResource(mResId);\n\n        // 设为和原来一样的裁剪模式\n        mSourceImageView.setScaleType(scaleType);\n\n        // 设置为和原来一样的位置\n        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mSourceImageView.getLayoutParams();\n        layoutParams.width = mRect.width();\n        layoutParams.height = mRect.height();\n        layoutParams.setMargins(mRect.left, mRect.top, 0, 0);\n    }\n\n```\n\n### （2）找到targetImageView的位置和宽高\n\n```\n    private void initImageEnterAnimation() {\n        mTargetImageView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {\n\n            @Override\n            public boolean onPreDraw() {\n                // 第一帧被绘制时，TargetImageView已经具有了实际的尺寸和位置，这是就应该开始播放动画。\n                final int[] finalLocationOnTheScreen = new int[2];\n                mTargetImageView.getLocationOnScreen(finalLocationOnTheScreen);\n                mTargetLeft = finalLocationOnTheScreen[0];\n                mTargetTop = finalLocationOnTheScreen[1];\n                mTargetWidth = mTargetImageView.getWidth();\n                mTargetHeight = mTargetImageView.getHeight();\n                playEnteringAnimation(mTargetLeft, mTargetTop, mTargetWidth, mTargetHeight);\n                mTargetImageView.getViewTreeObserver().removeOnPreDrawListener(this);\n                return true;\n            }\n        });\n    }\n\n```\n\n### （3）播放入场动画\n\n```\n    // 属性动画走起，将sourceImageView变换到targetImageView\n    private void playEnteringAnimation(final int left, final int top, final int width, final int height) {\n        // 1.改变ImageView的位置、宽高\n        PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(\"left\", mSourceImageView.getLeft(), left);\n        PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(\"top\", mSourceImageView.getTop(), top);\n        PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(\"right\", mSourceImageView.getRight(), left + width);\n        PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(\"bottom\", mSourceImageView.getBottom(), top + height);\n\n        ObjectAnimator positionAnimator = ObjectAnimator.ofPropertyValuesHolder(mSourceImageView,\n                propertyLeft, propertyTop, propertyRight, propertyBottom);\n        positionAnimator.addListener(new Animator.AnimatorListener() {\n            @Override\n            public void onAnimationStart(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                // 为了退出动画，需要把sourceImageView的LayoutParams改成targetImageView\n                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mSourceImageView.getLayoutParams();\n                layoutParams.height = height;\n                layoutParams.width = width;\n                layoutParams.setMargins(left, top, 0, 0);\n            }\n\n            @Override\n            public void onAnimationCancel(Animator animation) {\n            }\n\n            @Override\n            public void onAnimationRepeat(Animator animation) {\n\n            }\n        });\n\n        // 2.ImageView的矩阵动画\n        Matrix initMatrix = getImageMatrix(mSourceImageView);\n        initMatrix.getValues(mInitImageMatrixValues);\n        final Matrix endMatrix = getImageMatrix(mTargetImageView);\n        mSourceImageView.setScaleType(ImageView.ScaleType.MATRIX);\n        // ofObject()用法：传入自定义Property和Evaluator的用法\n        ObjectAnimator matrixAnimator = ObjectAnimator.ofObject(mSourceImageView, ANIMATED_TRANSFORM_PROPERTY, new MatrixEvaluator(), initMatrix, endMatrix);\n\n        // 3.顺便加个渐变动画\n        ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, \"alpha\", 0.0f, 1.0f);\n\n        // 4.一起播放上面的动画\n        mEnteringAnimation = new AnimatorSet();\n        mEnteringAnimation.setDuration(IMAGE_TRANSLATION_DURATION);\n        mEnteringAnimation.setInterpolator(DEFAULT_INTERPOLATOR);\n        mEnteringAnimation.addListener(new Animator.AnimatorListener() {\n\n            @Override\n            public void onAnimationCancel(Animator animation) {\n                mEnteringAnimation = null;\n            }\n\n            @Override\n            public void onAnimationRepeat(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationStart(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                if (mEnteringAnimation != null) {\n                    mEnteringAnimation = null;\n                    mTargetImageView.setVisibility(View.VISIBLE);\n                    mSourceImageView.setVisibility(View.INVISIBLE);\n                }\n            }\n        });\n\n        mEnteringAnimation.playTogether(positionAnimator, matrixAnimator, fadeInAnimator);\n        mEnteringAnimation.start();\n    }\n\n```\n\n### （4）2个关键的入场动画的说明\n\n在（3）中，用到下面两个关键的动画：\n\n- ObjectAnimator - positionAnimator：改变sourceImageView的top、left、right、bottom属性，动画的起始值就是sourceImageView的这4个属性，结束值就是targetImageView的这4个属性。\n\n- ObjectAnimator - matrixAnimator：通过改变sourceImageView的Matrix，来改变其中显示的图片（drawable）的Bounds，从而使ImageView呈现出渐变效果。\n\n介绍这两个关键动画的实现细节之前，需要具备属性动画的基础知识。如果不熟悉的话，建议先看下这几篇博客，里面详细地介绍了属性动画的各种用法。\n\n- [ValueAnimator基本使用](http://blog.csdn.net/harvic880925/article/details/50525521)\n\n- [ValueAnimator高级进阶（一）](http://blog.csdn.net/harvic880925/article/details/50546884)\n\n- [ValueAnimator高级进阶（二）](http://blog.csdn.net/harvic880925/article/details/50549385)\n\n- [ObjectAnimator基本使用](http://blog.csdn.net/harvic880925/article/details/50598322)\n\n- [PropertyValuesHolder与Keyframe](http://blog.csdn.net/harvic880925/article/details/50752838)\n\n- [联合动画的代码实现](http://blog.csdn.net/harvic880925/article/details/50759059)\n\n---\n\n下面介绍这两个关键的动画实现\n \n<h4 style=\"color:#ff0000\">关键动画之 ObjectAnimator - positionAnimator 实现：改变ImageView的位置和大小</h4>\n\n我们知道，设置一个动画，就要给它设置起始值和结束值。所以我们的positionAnimator就需要设置sourceImageView的left、top、right、bottom这4个属性起始值和结束值。在动画执行的过程中，就可以渐渐地改变sourceImageView的这4个属性了。\n\n下面这行代码\n\n```\nPropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(\"left\", mSourceImageView.getLeft(), left);\n```\n\n用**PropertyValuesHolder**可以给sourceImageView的left属性设置了起始值、结束值。\n\n对于left属性，起始值就是sourceImageView的left值，我们已经从第一个Activity传过来了。\n而left属性的结束值，我们可以从targetImageView的left属性值。\n其他的top、right、bottom属性也是一样的道理。\n\n> 需要需要特别注意的一点就是targetImageView的宽高获取方法，我们都知道获取一个View的宽高必须要等它绘制完了，而**targetImageView不会在setContentView之后立刻绘制完成**。\n因此我们需要监听targetImageView的绘制状态，也就是监听**ViewTreeObserver**的各种回调，这里我们要监听的是**OnPreDrawListener**。\n关于ViewTreeObserver，可以参考[《Viewtreeobserver解析》](http://souly.cn/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/2015/11/16/viewTreeObserver%E8%A7%A3%E6%9E%90/)这篇文章学习一下。\n\n<h4 style=\"color:#ff0000\">关键动画之ObjectAnimator - matrixAnimator实现：使ImageView展示的图片呈现渐变效果</h4>\n\n这里的数值计算比positionAnimator要复杂一点。\n\n首先我们要**自定义一个计算器MatrixEvaluator**，它的作用是返回动画执行过程中的Matrix，然后再使用这个Matrix去改变sourceImageView的Matrix属性。\n\n这个自定义计算器evaluate方法非常简单，就是根据起始Matrix（startMatrix）和结束Matrix（endMatrix）之间的差值diff，然后乘以当前**加速器**返回的动画的**数值**进度即可得到当前实时的Matrix值。\n\n下面看它的实现：\n\n```\nclass MatrixEvaluator implements TypeEvaluator<Matrix> {\n\n        public static TypeEvaluator<Matrix> NULL_MATRIX_EVALUATOR = new TypeEvaluator<Matrix>() {\n            @Override\n            public Matrix evaluate(float fraction, Matrix startValue, Matrix endValue) {\n                return null;\n            }\n        };\n\n        float[] mTempStartValues = new float[9];\n        float[] mTempEndValues = new float[9];\n        Matrix mTempMatrix = new Matrix();\n\n        @Override\n        public Matrix evaluate(float fraction, Matrix startValue, Matrix endValue) {\n            startValue.getValues(mTempStartValues);\n            endValue.getValues(mTempEndValues);\n            for (int i = 0; i < 9; i++) {\n                float diff = mTempEndValues[i] - mTempStartValues[i];\n                // fraction是加速器中的返回值，表示当前动画的“数值”进度。我们用的是Android SDK中提供的AccelerateDecelerateInterpolator。\n                mTempEndValues[i] = mTempStartValues[i] + (fraction * diff); \n            }\n            mTempMatrix.setValues(mTempEndValues);\n\n            return mTempMatrix;\n        }\n    }\n\n```\n\n有了这个计算器，得到动画执行过程中的Matrix值，怎么动态地赋给sourceImageView呢？\n\n我们知道，在普通的`ObjectAnimator#ofFloat(Object target, String propertyName, float... values)`方法中，当Evaluator接收到最后一个可变长参数values后，可以得到起始值和结束值后。然后在**evaluate**方法中计算出动画执行过程的应该赋予的属性的值，然后调用目标对象（这里就是我们的ImageView）的setter方法把这个值赋给目标对象。\n\n> 例如这句代码，`ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, \"alpha\", 0.0f, 1.0f);`其实就是在计算出了动画过程中每一个时刻的alpha值，然后再调用mContainer的setAlpha(float alpha)方法去改变mContainer的透明度。\n\n但是要改变sourceImageView的Matrix值，我们需要调用**ImageView#animateTransform()**这个方法，这个方法在Android SDK中属于隐藏API，其代码片段所示：\n\n```\n// ImageView#animateTransform()源代码\n/** @hide */\npublic void animateTransform(Matrix matrix) {\n        if (mDrawable == null) {\n            return;\n        }\n        if (matrix == null) {\n            mDrawable.setBounds(0, 0, getWidth(), getHeight());\n        } else {\n            mDrawable.setBounds(0, 0, mDrawableWidth, mDrawableHeight);\n            if (mDrawMatrix == null) {\n                mDrawMatrix = new Matrix();\n            }\n            mDrawMatrix.set(matrix);\n        }\n        invalidate();\n    }\n\n```\n\n而且这个方法的名字也不叫**setXXX**，所以我们没法调用像`ofFloat`这样的方法去改变sourceImageView的Matrix。\n\n这时候需要采用自定义Property，并且实现它的**set**方法，自定义Property代码如下：\n\n```\nprivate static final Property<ImageView, Matrix> ANIMATED_TRANSFORM_PROPERTY = new Property<ImageView, Matrix>(Matrix.class, \"animatedTransform\") {\n\n        @Override\n        public void set(ImageView imageView, Matrix matrix) {\n            // 这里模仿了SDK源码中ImageView#animateTransform的实现\n            Drawable drawable = imageView.getDrawable();\n            if (drawable == null) {\n                return;\n            }\n            if (matrix == null) {\n                drawable.setBounds(0, 0, imageView.getWidth(), imageView.getHeight());\n            } else {\n                drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\n                Matrix drawMatrix = imageView.getImageMatrix();\n                if (drawMatrix == null) {\n                    drawMatrix = new Matrix();\n                    imageView.setImageMatrix(drawMatrix);\n                }\n                imageView.setImageMatrix(matrix);\n            }\n            imageView.invalidate();\n        }\n\n        @Override\n        public Matrix get(ImageView object) {\n            return null;\n        }\n    };\n```\n\n自定义一个Property必须要实现里面的get方法，但是在我们的这里例子中，get方法不会被调用。\n\n因为在属性动画中，只有当你传入的可变长参数values（也就是起始值、中间值1、中间值2. ... 结束值）长度为1，也就是说你只传了一个值的时候，才会对我们的target调用getter方法去获取初始值。所以这里我们是不需要getter方法的。\n\n自定义Property完成后，通过`ObjectAnimator#ofObject(T target, Property<T, V> property, TypeEvaluator<V> evaluator, V... values)` 方法，就可以把计算器计算出的动画执行过程中的Matrix值，通过自定义Property中的set方法，赋给当前的目标对象，即sourceImageView！从而使得sourceImageView呈现出渐变效果。\n\n> 这里的实现是来自这位大神的博客[Implementing ImageView transition between activities for pre-Lollipop devices](https://medium.com/@v.danylo/implementing-imageview-transition-between-activities-for-pre-lollipop-devices-8b24bc387a2a#.7c6qxvf59)。\n我们首先感谢这位大神的分享！这位大神在文中也提到，用动画来实现图片的渐进式改变，起实来自于我们Android SDK中的隐藏API——**ImageView#animateTransform**。\n\n## 2.退场\n\n退场动画完全是入场动画的逆操作，直接看代码。\n\n```\n    // 图片退出的转场动画：完全是和之前相反的过程\n    private void playExitAnimations(int sourceImageViewLeft, int sourceImageViewTop, int sourceImageViewWidth, int sourceImageViewHeight, float[] imageMatrixValues) {\n        mSourceImageView.setVisibility(View.VISIBLE);\n        mTargetImageView.setVisibility(View.INVISIBLE);\n\n        // 改变SourceView的位置、宽高属性。这里每个属性的起始值和结束值和入场时刚好相反。\n        int[] locationOnScreen = new int[2];\n        mSourceImageView.getLocationOnScreen(locationOnScreen);\n        PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(\"left\", locationOnScreen[0], sourceImageViewLeft);\n        PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(\"top\", locationOnScreen[1], sourceImageViewTop);\n        PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(\"right\", locationOnScreen[0] + mSourceImageView.getWidth(), sourceImageViewLeft + sourceImageViewWidth);\n        PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(\"bottom\", mSourceImageView.getBottom(), sourceImageViewTop + sourceImageViewHeight);\n        ObjectAnimator positionAnimator = ObjectAnimator.ofPropertyValuesHolder(mSourceImageView, propertyLeft, propertyTop, propertyRight, propertyBottom);\n\n        // ImageView的矩阵动画\n        Matrix initialMatrix = getImageMatrix(mSourceImageView);\n\n        Matrix endMatrix = new Matrix();\n        endMatrix.setValues(imageMatrixValues);\n        mSourceImageView.setScaleType(ImageView.ScaleType.MATRIX);\n        // 这里Matrix的起始值和结束值和入场时也刚好相反。\n        ObjectAnimator matrixAnimator = ObjectAnimator.ofObject(mSourceImageView, ANIMATED_TRANSFORM_PROPERTY, new MatrixEvaluator(), initialMatrix, endMatrix);\n\n        // 渐变动画\n        ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, \"alpha\", 1.0f, 0.0f);\n\n        mExitingAnimation = new AnimatorSet();\n        mExitingAnimation.setDuration(IMAGE_TRANSLATION_DURATION);\n        mExitingAnimation.setInterpolator(new AccelerateInterpolator());\n        mExitingAnimation.addListener(new Animator.AnimatorListener() {\n\n            @Override\n            public void onAnimationStart(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                if (mExitingAnimation != null) {\n                    mExitingAnimation = null;\n                }\n                // 关闭第二个界面\n                Activity activity = (Activity) mSourceImageView.getContext();\n                activity.finish();\n                activity.overridePendingTransition(0, 0); // 同样去掉默认的转场动画\n            }\n\n            @Override\n            public void onAnimationCancel(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationRepeat(Animator animation) {\n\n            }\n        });\n\n        mExitingAnimation.playTogether(positionAnimator, matrixAnimator, fadeInAnimator);\n        mExitingAnimation.start();\n    }\n```\n\n# 四、涉及到的知识点\n\n我认为实现demo里面的效果需要了解下面的知识点，如果不熟悉的话，建议先看一下上一章推荐的属性动画讲解的几篇博客。\n\n## 1.ImageView的ScaleType\n\n不管将ScaleType设为多少，bitmap始终都是一个。如果在Android Studio打开debug模式来查看bitmap实际的图片，用一个ImageView去展示一张图片，不管你怎么改变ScaleType，其实里面的图片对象都是一样的。\n\n## 2.属性动画之插值器 - Interpolator\n\n控制动画数值进度的转换器，我们给动画是指一个duration之后，插值器负责把动画的**自然**进度转成**数值**进度。自然进度就是指随着时间匀速增长的值。\n\n所有的插值器都实现了**TimeInterpolator接口里面的public float getInterpolation(float input)**方法，input就是随时间流逝的自然进度，在这个方法中根据实际需求，用input计算出实际数字，作为数值进度返回。\n\n## 3.属性动画之计算器 - TypeEvaluator\n\n计算器就是计算动画执行过程中，目标对象的某个属性的数值。\n\nTypeEvaluator接口中有一个**public T evaluate(float fraction, T startValue, T endValue)**方法，fraction就是插值器返回的数值进度，而startValue就是对象的某一个属性的起始值，endValue是这个属性的结束值。\n\n这里利用的是泛型编程，我们可以把属性的起始、结束值看成一个Type。传入自己定义的任何Type后，在evaluate方法中，计算出当前应该改变**对象**的**属性**的具体Type值。再调用这个对象的setter方法，将Type值赋给这个对象。\n\n很多时候，我们不会像这个demo中自定义Property，然后把它set给一个系统封装好的ImageView。我们很可能会有一个自定义的CustomView，然后在这个CustomView中提供一个setXXX方法。这样也可以在自定义的计算器中实现CustomView的属性动态改变。\n\n## 4.属性动画之中的ObjectAnimator和ValueAnimator的区别\n\nObjectAnimator是ValueAnimator的子类，ValueAnimator只负责计算动画过程中，目标对象（一般是一个View或者其他UI元素）属性的值，但是需要我们自己监听动画的update状态，再把监听到的值set给目标对象的属性。\n\nObjectAnimator除了可以计算动画过程中的属性值外，还可以调用目标对象的setter方法，改变这个属性的值。所以它的功能比ValueAnimator要强大。\n\n## 4.属性动画之PropertyValuesHolder用法\n\n一般直接使用`ObjectAnimator ofFloat(Object target, String propertyName, float... values)`只能改变目标对象的一个属性值。\n\n如果我们想要改一个目标对象的的多个属性时，可以先使用`PropertyValuesHolder ofInt(String propertyName, int... values)`创建PropertyValuesHolder。\n\n然后再用`ObjectAnimator ofPropertyValuesHolder(Object target, PropertyValuesHolder... values) `创建出改变多个属性的属性动画对象ObjectAnimator。\n\n## 5.如何向ContentView中动态添加View\n\n首先要从当前的Activity中获得根视图：\n\n```\ngetWindow().getDecorView().findViewById(android.R.id.content);\n```\n\n这是个FrameLayout，然后我们就可以用java代码动态向它里面添加sourceImageView了。\n\n关于DecorView再多说两句，它是Activity界面的根View，继承自FrameLayout。在它里面又是一个LinearLayout，在这个LinearLayout里面又包含了**id为@android:id/title_container**的标题栏，和一个**id为@android:id/content**的ContentView，结构大概是下面这个样子的：\n\n```\n- DecorView\n    - LinearLayout\n        - ...\n        - FrameLayout：android:id/title_container\n        - FrameLayout：@android:id/content\n```\n\n当我们在onCreate方法中调用Activity#setContentView()时，会把我们自己写的布局添加到这个ContentView中去。\n\n# 五、Android 5.0上的实现方法\n\n下面是在Android 5.0以上一种示例，非常简单，只需要几行代码就可实现：\n\n```\n    // 第一个Activity，利用ActivityOptions创建SceneTransitionAnimation\n    private void transitionOnAndroidL() {\n        // 把需要共享的元素-ImageView，传给第二个界面\n        Intent intent = new Intent(MainActivity.this, DetailActivityLollipop.class);\n        // 一定要传入shareElementName\n        String shareElementName = \"sharedImageView\";\n        ActivityOptions activityOptions = ActivityOptions.makeSceneTransitionAnimation(this, mImageView, shareElementName);\n        getWindow().setSharedElementEnterTransition(new ChangeImageTransform(this, null));\n        intent.putExtra(DetailActivityLollipop.SHARED_ELEMENT_KEY, shareElementName);\n        intent.putExtra(DetailActivityLollipop.IMAGE_RES_ID, mImageResId);\n        // 打开它\n        startActivity(intent, activityOptions.toBundle());\n    }\n\n    // 第二个Activity，取出shareElementName，再调用ViewCompat#setTransitionName\n    private void initImageEnterTransition() {\n        imageView.setVisibility(View.VISIBLE);\n        String imageTransitionName = getIntent().getStringExtra(SHARED_ELEMENT_KEY);\n        ViewCompat.setTransitionName(imageView, imageTransitionName);\n\n        View mainContainer = findViewById(R.id.activityContanierDetail);\n        mainContainer.setAlpha(1.0f);\n        int resId = getIntent().getExtras().getInt(IMAGE_RES_ID);\n        imageView.setImageResource(resId);\n    }\n\n\n```\n\n官方介绍的[Transitions](https://developer.android.com/training/material/animations.html#Transitions)中用xml也可以实现。另外，还有多个元素的转场动画效果，这里就不详细说了，如果有需要，也可以参考下这篇文章——[Shared Element Activity Transition](https://guides.codepath.com/android/Shared-Element-Activity-Transition)。\n\n# 六、其他实现方法\n\n在我的demo中只演示了核心的View转场实现，没有和其他的稍微复杂一些的需求相结合。网上还有很多关于这种效果实现的分享，也有应用到一些更复杂场景，下面推荐出来一起多多学习。\n\n文章推荐：\n\n- [Android中的转场动画及兼容处理](http://wl9739.github.io/2016/10/16/Android-%E4%B8%AD%E7%9A%84%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%E5%8F%8A%E5%85%BC%E5%AE%B9%E5%A4%84%E7%90%86/)\n\n- [Android共享元素转场动画兼容实践](http://www.jianshu.com/p/340c938e9f32)\n\n- [两步实现类似格瓦拉的转场动画](http://immortalz.me/859.html)\n\n- [Shared Element Activity Transition](https://guides.codepath.com/android/Shared-Element-Activity-Transition)：详细介绍了5.0以上的各种共享元素转场效果。\n\n开源Library推荐：\n\n- [PreLollipopTransition](https://github.com/takahirom/PreLollipopTransition)\n\n- [ImageTransition](https://github.com/vikramkakkar/ImageTransition)\n\n- [GestureViews](https://github.com/alexvasilkov/GestureViews)：手势操作库，其demo本身就实现了一个类似的转场的动画效果。\n\n","source":"_posts/利用属性动画在Android4.x上实现Android L的元素转场动画效果.md","raw":"---\nlayout: post\ntitle: 利用属性动画在Android4.x上实现Android L的元素转场动画效果（shared elements transition）\ndate: '2016-11-08'\ntags:\n  - Android\n  - 动画\ncategories: \n  - 技术\n---\n\n# 一、背景\n\n随着谷歌推出的MaterialDesign不断被各种实践，最近我也碰到这么一个需求，就是要求实现一个图片的转场效果。在第一个界面上，图片被点击后，会渐渐地滑动到第二个界面中去。\n\n其实仔细观察一下Google相册也有用到这种效果，大概的效果图是这样的：\n\n![transition-ui-demo](http://ww2.sinaimg.cn/large/801b780agw1f9kunqk6sqg20b40jre86.gif)\n\n按照我的理解，这种效果要是直接把View拿出来复用就可以。但是经过学习（国内外各种大神的博客）和实践发现，里面有不少可以思考的地方。\n\n<!-- more -->\n\n根据官方介绍的[Transitions](https://developer.android.com/training/material/animations.html#Transitions)，在Android 5.0以后，可以使用**shared elements transition**来实现这个效果，非常方便。但是我们的App一般还需要向下兼容到4.x，所以在4.x上得想其它的办法实现。\n\n下面我以上图的ImageView转场动画为例子，介绍一下是怎么实现这个效果的。（代码都在[这里](https://github.com/unclechen/ActivityTransitionDemo)）\n\n> 注意：为了说明转场效果实现的核心内容，一些无关的东西都用了最简单的实现。\n\n# 二、实现思路\n\n## 1.入场\n\n- （1）保存第一个Activity中ImageView（我们叫它originImageView）的位置信息、宽、高，然后把这些信息传给第二个Activity。\n- （2）去掉Activity默认的转场动画。\n- （3）进入第二个Activity之后，拿到第一个Activity传过来的ImageView的位置、宽、高信息，并在第二个Activity动态添加一个一模一样的ImageView（我叫它sourceImageView）。\n- （4）在第二个Activity中，找到最终的ImageView（我叫它targetImageView），并取出它最终所在的位置。\n- （5）对比sourceImageView和targetImageView的位置、大小等等各种**属性**的区别，然后使用属性动画将sourceImageView变换成targetImageView。\n- （6）当动画结束时，显示出targetImageView，隐藏sourceImageView。\n\n> 注意：这里当动画结束时，我们需要将sourceImageView的LayoutParams改成和targetImageView的LayoutParams一模一样，用于退出时做转场动画使用。\n其实退场效果和入场效果是完全相反的步骤。\n\n## 2.退场\n\n- （1）将之前隐藏的sourceImageView显示出来，隐藏targetImageView。\n- （2）通过属性动画将sourceImageView从当前的位置和宽、高大小，变换到刚进入第二个Activity时的状态。（这里的动画代码几乎一样，只是把开始值和结束值调换了位置）\n- （3）动画结束时，关闭第二个Activity，去掉Activity的转场动画。\n\n上面就是实现思路，其实很好理解。实现这个思路的重点，就在于属性动画的应用了。也就是上面提到的**入场的第5步**和**退场的第2步**，这里面用到的属性动画代码见下一章。\n\n# 三、实现代码\n\n## 1.入场\n\n### （1）先复原出sourceImageView\n\n```\n    // 创建一个和第一个界面一模一样的ImageView，作为这个界面的sourceImageView\n    private void initSourceImageView() {\n        // 先动态创建出这个sourceImageView，把它添加到第二个界面的ContentView中。\n        FrameLayout contentView = (FrameLayout) getWindow().getDecorView().findViewById(android.R.id.content);\n        mSourceImageView = new ImageView(this);\n        contentView.addView(mSourceImageView);\n\n        // 读取第一个界面传过来的信息\n        Bundle bundle = getIntent().getExtras();\n        mRect = (Rect) getIntent().getParcelableExtra(IMAGE_ORIGIN_RECT);\n        ImageView.ScaleType scaleType = (ImageView.ScaleType) bundle.getSerializable(IMAGE_SCALE_TYPE);\n        mResId = bundle.getInt(IMAGE_RES_ID);\n\n        // 设置为和第一个界面一样的图片\n        mSourceImageView.setImageResource(mResId);\n        mTargetImageView.setImageResource(mResId);\n\n        // 设为和原来一样的裁剪模式\n        mSourceImageView.setScaleType(scaleType);\n\n        // 设置为和原来一样的位置\n        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mSourceImageView.getLayoutParams();\n        layoutParams.width = mRect.width();\n        layoutParams.height = mRect.height();\n        layoutParams.setMargins(mRect.left, mRect.top, 0, 0);\n    }\n\n```\n\n### （2）找到targetImageView的位置和宽高\n\n```\n    private void initImageEnterAnimation() {\n        mTargetImageView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {\n\n            @Override\n            public boolean onPreDraw() {\n                // 第一帧被绘制时，TargetImageView已经具有了实际的尺寸和位置，这是就应该开始播放动画。\n                final int[] finalLocationOnTheScreen = new int[2];\n                mTargetImageView.getLocationOnScreen(finalLocationOnTheScreen);\n                mTargetLeft = finalLocationOnTheScreen[0];\n                mTargetTop = finalLocationOnTheScreen[1];\n                mTargetWidth = mTargetImageView.getWidth();\n                mTargetHeight = mTargetImageView.getHeight();\n                playEnteringAnimation(mTargetLeft, mTargetTop, mTargetWidth, mTargetHeight);\n                mTargetImageView.getViewTreeObserver().removeOnPreDrawListener(this);\n                return true;\n            }\n        });\n    }\n\n```\n\n### （3）播放入场动画\n\n```\n    // 属性动画走起，将sourceImageView变换到targetImageView\n    private void playEnteringAnimation(final int left, final int top, final int width, final int height) {\n        // 1.改变ImageView的位置、宽高\n        PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(\"left\", mSourceImageView.getLeft(), left);\n        PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(\"top\", mSourceImageView.getTop(), top);\n        PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(\"right\", mSourceImageView.getRight(), left + width);\n        PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(\"bottom\", mSourceImageView.getBottom(), top + height);\n\n        ObjectAnimator positionAnimator = ObjectAnimator.ofPropertyValuesHolder(mSourceImageView,\n                propertyLeft, propertyTop, propertyRight, propertyBottom);\n        positionAnimator.addListener(new Animator.AnimatorListener() {\n            @Override\n            public void onAnimationStart(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                // 为了退出动画，需要把sourceImageView的LayoutParams改成targetImageView\n                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mSourceImageView.getLayoutParams();\n                layoutParams.height = height;\n                layoutParams.width = width;\n                layoutParams.setMargins(left, top, 0, 0);\n            }\n\n            @Override\n            public void onAnimationCancel(Animator animation) {\n            }\n\n            @Override\n            public void onAnimationRepeat(Animator animation) {\n\n            }\n        });\n\n        // 2.ImageView的矩阵动画\n        Matrix initMatrix = getImageMatrix(mSourceImageView);\n        initMatrix.getValues(mInitImageMatrixValues);\n        final Matrix endMatrix = getImageMatrix(mTargetImageView);\n        mSourceImageView.setScaleType(ImageView.ScaleType.MATRIX);\n        // ofObject()用法：传入自定义Property和Evaluator的用法\n        ObjectAnimator matrixAnimator = ObjectAnimator.ofObject(mSourceImageView, ANIMATED_TRANSFORM_PROPERTY, new MatrixEvaluator(), initMatrix, endMatrix);\n\n        // 3.顺便加个渐变动画\n        ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, \"alpha\", 0.0f, 1.0f);\n\n        // 4.一起播放上面的动画\n        mEnteringAnimation = new AnimatorSet();\n        mEnteringAnimation.setDuration(IMAGE_TRANSLATION_DURATION);\n        mEnteringAnimation.setInterpolator(DEFAULT_INTERPOLATOR);\n        mEnteringAnimation.addListener(new Animator.AnimatorListener() {\n\n            @Override\n            public void onAnimationCancel(Animator animation) {\n                mEnteringAnimation = null;\n            }\n\n            @Override\n            public void onAnimationRepeat(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationStart(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                if (mEnteringAnimation != null) {\n                    mEnteringAnimation = null;\n                    mTargetImageView.setVisibility(View.VISIBLE);\n                    mSourceImageView.setVisibility(View.INVISIBLE);\n                }\n            }\n        });\n\n        mEnteringAnimation.playTogether(positionAnimator, matrixAnimator, fadeInAnimator);\n        mEnteringAnimation.start();\n    }\n\n```\n\n### （4）2个关键的入场动画的说明\n\n在（3）中，用到下面两个关键的动画：\n\n- ObjectAnimator - positionAnimator：改变sourceImageView的top、left、right、bottom属性，动画的起始值就是sourceImageView的这4个属性，结束值就是targetImageView的这4个属性。\n\n- ObjectAnimator - matrixAnimator：通过改变sourceImageView的Matrix，来改变其中显示的图片（drawable）的Bounds，从而使ImageView呈现出渐变效果。\n\n介绍这两个关键动画的实现细节之前，需要具备属性动画的基础知识。如果不熟悉的话，建议先看下这几篇博客，里面详细地介绍了属性动画的各种用法。\n\n- [ValueAnimator基本使用](http://blog.csdn.net/harvic880925/article/details/50525521)\n\n- [ValueAnimator高级进阶（一）](http://blog.csdn.net/harvic880925/article/details/50546884)\n\n- [ValueAnimator高级进阶（二）](http://blog.csdn.net/harvic880925/article/details/50549385)\n\n- [ObjectAnimator基本使用](http://blog.csdn.net/harvic880925/article/details/50598322)\n\n- [PropertyValuesHolder与Keyframe](http://blog.csdn.net/harvic880925/article/details/50752838)\n\n- [联合动画的代码实现](http://blog.csdn.net/harvic880925/article/details/50759059)\n\n---\n\n下面介绍这两个关键的动画实现\n \n<h4 style=\"color:#ff0000\">关键动画之 ObjectAnimator - positionAnimator 实现：改变ImageView的位置和大小</h4>\n\n我们知道，设置一个动画，就要给它设置起始值和结束值。所以我们的positionAnimator就需要设置sourceImageView的left、top、right、bottom这4个属性起始值和结束值。在动画执行的过程中，就可以渐渐地改变sourceImageView的这4个属性了。\n\n下面这行代码\n\n```\nPropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(\"left\", mSourceImageView.getLeft(), left);\n```\n\n用**PropertyValuesHolder**可以给sourceImageView的left属性设置了起始值、结束值。\n\n对于left属性，起始值就是sourceImageView的left值，我们已经从第一个Activity传过来了。\n而left属性的结束值，我们可以从targetImageView的left属性值。\n其他的top、right、bottom属性也是一样的道理。\n\n> 需要需要特别注意的一点就是targetImageView的宽高获取方法，我们都知道获取一个View的宽高必须要等它绘制完了，而**targetImageView不会在setContentView之后立刻绘制完成**。\n因此我们需要监听targetImageView的绘制状态，也就是监听**ViewTreeObserver**的各种回调，这里我们要监听的是**OnPreDrawListener**。\n关于ViewTreeObserver，可以参考[《Viewtreeobserver解析》](http://souly.cn/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/2015/11/16/viewTreeObserver%E8%A7%A3%E6%9E%90/)这篇文章学习一下。\n\n<h4 style=\"color:#ff0000\">关键动画之ObjectAnimator - matrixAnimator实现：使ImageView展示的图片呈现渐变效果</h4>\n\n这里的数值计算比positionAnimator要复杂一点。\n\n首先我们要**自定义一个计算器MatrixEvaluator**，它的作用是返回动画执行过程中的Matrix，然后再使用这个Matrix去改变sourceImageView的Matrix属性。\n\n这个自定义计算器evaluate方法非常简单，就是根据起始Matrix（startMatrix）和结束Matrix（endMatrix）之间的差值diff，然后乘以当前**加速器**返回的动画的**数值**进度即可得到当前实时的Matrix值。\n\n下面看它的实现：\n\n```\nclass MatrixEvaluator implements TypeEvaluator<Matrix> {\n\n        public static TypeEvaluator<Matrix> NULL_MATRIX_EVALUATOR = new TypeEvaluator<Matrix>() {\n            @Override\n            public Matrix evaluate(float fraction, Matrix startValue, Matrix endValue) {\n                return null;\n            }\n        };\n\n        float[] mTempStartValues = new float[9];\n        float[] mTempEndValues = new float[9];\n        Matrix mTempMatrix = new Matrix();\n\n        @Override\n        public Matrix evaluate(float fraction, Matrix startValue, Matrix endValue) {\n            startValue.getValues(mTempStartValues);\n            endValue.getValues(mTempEndValues);\n            for (int i = 0; i < 9; i++) {\n                float diff = mTempEndValues[i] - mTempStartValues[i];\n                // fraction是加速器中的返回值，表示当前动画的“数值”进度。我们用的是Android SDK中提供的AccelerateDecelerateInterpolator。\n                mTempEndValues[i] = mTempStartValues[i] + (fraction * diff); \n            }\n            mTempMatrix.setValues(mTempEndValues);\n\n            return mTempMatrix;\n        }\n    }\n\n```\n\n有了这个计算器，得到动画执行过程中的Matrix值，怎么动态地赋给sourceImageView呢？\n\n我们知道，在普通的`ObjectAnimator#ofFloat(Object target, String propertyName, float... values)`方法中，当Evaluator接收到最后一个可变长参数values后，可以得到起始值和结束值后。然后在**evaluate**方法中计算出动画执行过程的应该赋予的属性的值，然后调用目标对象（这里就是我们的ImageView）的setter方法把这个值赋给目标对象。\n\n> 例如这句代码，`ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, \"alpha\", 0.0f, 1.0f);`其实就是在计算出了动画过程中每一个时刻的alpha值，然后再调用mContainer的setAlpha(float alpha)方法去改变mContainer的透明度。\n\n但是要改变sourceImageView的Matrix值，我们需要调用**ImageView#animateTransform()**这个方法，这个方法在Android SDK中属于隐藏API，其代码片段所示：\n\n```\n// ImageView#animateTransform()源代码\n/** @hide */\npublic void animateTransform(Matrix matrix) {\n        if (mDrawable == null) {\n            return;\n        }\n        if (matrix == null) {\n            mDrawable.setBounds(0, 0, getWidth(), getHeight());\n        } else {\n            mDrawable.setBounds(0, 0, mDrawableWidth, mDrawableHeight);\n            if (mDrawMatrix == null) {\n                mDrawMatrix = new Matrix();\n            }\n            mDrawMatrix.set(matrix);\n        }\n        invalidate();\n    }\n\n```\n\n而且这个方法的名字也不叫**setXXX**，所以我们没法调用像`ofFloat`这样的方法去改变sourceImageView的Matrix。\n\n这时候需要采用自定义Property，并且实现它的**set**方法，自定义Property代码如下：\n\n```\nprivate static final Property<ImageView, Matrix> ANIMATED_TRANSFORM_PROPERTY = new Property<ImageView, Matrix>(Matrix.class, \"animatedTransform\") {\n\n        @Override\n        public void set(ImageView imageView, Matrix matrix) {\n            // 这里模仿了SDK源码中ImageView#animateTransform的实现\n            Drawable drawable = imageView.getDrawable();\n            if (drawable == null) {\n                return;\n            }\n            if (matrix == null) {\n                drawable.setBounds(0, 0, imageView.getWidth(), imageView.getHeight());\n            } else {\n                drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());\n                Matrix drawMatrix = imageView.getImageMatrix();\n                if (drawMatrix == null) {\n                    drawMatrix = new Matrix();\n                    imageView.setImageMatrix(drawMatrix);\n                }\n                imageView.setImageMatrix(matrix);\n            }\n            imageView.invalidate();\n        }\n\n        @Override\n        public Matrix get(ImageView object) {\n            return null;\n        }\n    };\n```\n\n自定义一个Property必须要实现里面的get方法，但是在我们的这里例子中，get方法不会被调用。\n\n因为在属性动画中，只有当你传入的可变长参数values（也就是起始值、中间值1、中间值2. ... 结束值）长度为1，也就是说你只传了一个值的时候，才会对我们的target调用getter方法去获取初始值。所以这里我们是不需要getter方法的。\n\n自定义Property完成后，通过`ObjectAnimator#ofObject(T target, Property<T, V> property, TypeEvaluator<V> evaluator, V... values)` 方法，就可以把计算器计算出的动画执行过程中的Matrix值，通过自定义Property中的set方法，赋给当前的目标对象，即sourceImageView！从而使得sourceImageView呈现出渐变效果。\n\n> 这里的实现是来自这位大神的博客[Implementing ImageView transition between activities for pre-Lollipop devices](https://medium.com/@v.danylo/implementing-imageview-transition-between-activities-for-pre-lollipop-devices-8b24bc387a2a#.7c6qxvf59)。\n我们首先感谢这位大神的分享！这位大神在文中也提到，用动画来实现图片的渐进式改变，起实来自于我们Android SDK中的隐藏API——**ImageView#animateTransform**。\n\n## 2.退场\n\n退场动画完全是入场动画的逆操作，直接看代码。\n\n```\n    // 图片退出的转场动画：完全是和之前相反的过程\n    private void playExitAnimations(int sourceImageViewLeft, int sourceImageViewTop, int sourceImageViewWidth, int sourceImageViewHeight, float[] imageMatrixValues) {\n        mSourceImageView.setVisibility(View.VISIBLE);\n        mTargetImageView.setVisibility(View.INVISIBLE);\n\n        // 改变SourceView的位置、宽高属性。这里每个属性的起始值和结束值和入场时刚好相反。\n        int[] locationOnScreen = new int[2];\n        mSourceImageView.getLocationOnScreen(locationOnScreen);\n        PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(\"left\", locationOnScreen[0], sourceImageViewLeft);\n        PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(\"top\", locationOnScreen[1], sourceImageViewTop);\n        PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(\"right\", locationOnScreen[0] + mSourceImageView.getWidth(), sourceImageViewLeft + sourceImageViewWidth);\n        PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(\"bottom\", mSourceImageView.getBottom(), sourceImageViewTop + sourceImageViewHeight);\n        ObjectAnimator positionAnimator = ObjectAnimator.ofPropertyValuesHolder(mSourceImageView, propertyLeft, propertyTop, propertyRight, propertyBottom);\n\n        // ImageView的矩阵动画\n        Matrix initialMatrix = getImageMatrix(mSourceImageView);\n\n        Matrix endMatrix = new Matrix();\n        endMatrix.setValues(imageMatrixValues);\n        mSourceImageView.setScaleType(ImageView.ScaleType.MATRIX);\n        // 这里Matrix的起始值和结束值和入场时也刚好相反。\n        ObjectAnimator matrixAnimator = ObjectAnimator.ofObject(mSourceImageView, ANIMATED_TRANSFORM_PROPERTY, new MatrixEvaluator(), initialMatrix, endMatrix);\n\n        // 渐变动画\n        ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, \"alpha\", 1.0f, 0.0f);\n\n        mExitingAnimation = new AnimatorSet();\n        mExitingAnimation.setDuration(IMAGE_TRANSLATION_DURATION);\n        mExitingAnimation.setInterpolator(new AccelerateInterpolator());\n        mExitingAnimation.addListener(new Animator.AnimatorListener() {\n\n            @Override\n            public void onAnimationStart(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                if (mExitingAnimation != null) {\n                    mExitingAnimation = null;\n                }\n                // 关闭第二个界面\n                Activity activity = (Activity) mSourceImageView.getContext();\n                activity.finish();\n                activity.overridePendingTransition(0, 0); // 同样去掉默认的转场动画\n            }\n\n            @Override\n            public void onAnimationCancel(Animator animation) {\n\n            }\n\n            @Override\n            public void onAnimationRepeat(Animator animation) {\n\n            }\n        });\n\n        mExitingAnimation.playTogether(positionAnimator, matrixAnimator, fadeInAnimator);\n        mExitingAnimation.start();\n    }\n```\n\n# 四、涉及到的知识点\n\n我认为实现demo里面的效果需要了解下面的知识点，如果不熟悉的话，建议先看一下上一章推荐的属性动画讲解的几篇博客。\n\n## 1.ImageView的ScaleType\n\n不管将ScaleType设为多少，bitmap始终都是一个。如果在Android Studio打开debug模式来查看bitmap实际的图片，用一个ImageView去展示一张图片，不管你怎么改变ScaleType，其实里面的图片对象都是一样的。\n\n## 2.属性动画之插值器 - Interpolator\n\n控制动画数值进度的转换器，我们给动画是指一个duration之后，插值器负责把动画的**自然**进度转成**数值**进度。自然进度就是指随着时间匀速增长的值。\n\n所有的插值器都实现了**TimeInterpolator接口里面的public float getInterpolation(float input)**方法，input就是随时间流逝的自然进度，在这个方法中根据实际需求，用input计算出实际数字，作为数值进度返回。\n\n## 3.属性动画之计算器 - TypeEvaluator\n\n计算器就是计算动画执行过程中，目标对象的某个属性的数值。\n\nTypeEvaluator接口中有一个**public T evaluate(float fraction, T startValue, T endValue)**方法，fraction就是插值器返回的数值进度，而startValue就是对象的某一个属性的起始值，endValue是这个属性的结束值。\n\n这里利用的是泛型编程，我们可以把属性的起始、结束值看成一个Type。传入自己定义的任何Type后，在evaluate方法中，计算出当前应该改变**对象**的**属性**的具体Type值。再调用这个对象的setter方法，将Type值赋给这个对象。\n\n很多时候，我们不会像这个demo中自定义Property，然后把它set给一个系统封装好的ImageView。我们很可能会有一个自定义的CustomView，然后在这个CustomView中提供一个setXXX方法。这样也可以在自定义的计算器中实现CustomView的属性动态改变。\n\n## 4.属性动画之中的ObjectAnimator和ValueAnimator的区别\n\nObjectAnimator是ValueAnimator的子类，ValueAnimator只负责计算动画过程中，目标对象（一般是一个View或者其他UI元素）属性的值，但是需要我们自己监听动画的update状态，再把监听到的值set给目标对象的属性。\n\nObjectAnimator除了可以计算动画过程中的属性值外，还可以调用目标对象的setter方法，改变这个属性的值。所以它的功能比ValueAnimator要强大。\n\n## 4.属性动画之PropertyValuesHolder用法\n\n一般直接使用`ObjectAnimator ofFloat(Object target, String propertyName, float... values)`只能改变目标对象的一个属性值。\n\n如果我们想要改一个目标对象的的多个属性时，可以先使用`PropertyValuesHolder ofInt(String propertyName, int... values)`创建PropertyValuesHolder。\n\n然后再用`ObjectAnimator ofPropertyValuesHolder(Object target, PropertyValuesHolder... values) `创建出改变多个属性的属性动画对象ObjectAnimator。\n\n## 5.如何向ContentView中动态添加View\n\n首先要从当前的Activity中获得根视图：\n\n```\ngetWindow().getDecorView().findViewById(android.R.id.content);\n```\n\n这是个FrameLayout，然后我们就可以用java代码动态向它里面添加sourceImageView了。\n\n关于DecorView再多说两句，它是Activity界面的根View，继承自FrameLayout。在它里面又是一个LinearLayout，在这个LinearLayout里面又包含了**id为@android:id/title_container**的标题栏，和一个**id为@android:id/content**的ContentView，结构大概是下面这个样子的：\n\n```\n- DecorView\n    - LinearLayout\n        - ...\n        - FrameLayout：android:id/title_container\n        - FrameLayout：@android:id/content\n```\n\n当我们在onCreate方法中调用Activity#setContentView()时，会把我们自己写的布局添加到这个ContentView中去。\n\n# 五、Android 5.0上的实现方法\n\n下面是在Android 5.0以上一种示例，非常简单，只需要几行代码就可实现：\n\n```\n    // 第一个Activity，利用ActivityOptions创建SceneTransitionAnimation\n    private void transitionOnAndroidL() {\n        // 把需要共享的元素-ImageView，传给第二个界面\n        Intent intent = new Intent(MainActivity.this, DetailActivityLollipop.class);\n        // 一定要传入shareElementName\n        String shareElementName = \"sharedImageView\";\n        ActivityOptions activityOptions = ActivityOptions.makeSceneTransitionAnimation(this, mImageView, shareElementName);\n        getWindow().setSharedElementEnterTransition(new ChangeImageTransform(this, null));\n        intent.putExtra(DetailActivityLollipop.SHARED_ELEMENT_KEY, shareElementName);\n        intent.putExtra(DetailActivityLollipop.IMAGE_RES_ID, mImageResId);\n        // 打开它\n        startActivity(intent, activityOptions.toBundle());\n    }\n\n    // 第二个Activity，取出shareElementName，再调用ViewCompat#setTransitionName\n    private void initImageEnterTransition() {\n        imageView.setVisibility(View.VISIBLE);\n        String imageTransitionName = getIntent().getStringExtra(SHARED_ELEMENT_KEY);\n        ViewCompat.setTransitionName(imageView, imageTransitionName);\n\n        View mainContainer = findViewById(R.id.activityContanierDetail);\n        mainContainer.setAlpha(1.0f);\n        int resId = getIntent().getExtras().getInt(IMAGE_RES_ID);\n        imageView.setImageResource(resId);\n    }\n\n\n```\n\n官方介绍的[Transitions](https://developer.android.com/training/material/animations.html#Transitions)中用xml也可以实现。另外，还有多个元素的转场动画效果，这里就不详细说了，如果有需要，也可以参考下这篇文章——[Shared Element Activity Transition](https://guides.codepath.com/android/Shared-Element-Activity-Transition)。\n\n# 六、其他实现方法\n\n在我的demo中只演示了核心的View转场实现，没有和其他的稍微复杂一些的需求相结合。网上还有很多关于这种效果实现的分享，也有应用到一些更复杂场景，下面推荐出来一起多多学习。\n\n文章推荐：\n\n- [Android中的转场动画及兼容处理](http://wl9739.github.io/2016/10/16/Android-%E4%B8%AD%E7%9A%84%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%E5%8F%8A%E5%85%BC%E5%AE%B9%E5%A4%84%E7%90%86/)\n\n- [Android共享元素转场动画兼容实践](http://www.jianshu.com/p/340c938e9f32)\n\n- [两步实现类似格瓦拉的转场动画](http://immortalz.me/859.html)\n\n- [Shared Element Activity Transition](https://guides.codepath.com/android/Shared-Element-Activity-Transition)：详细介绍了5.0以上的各种共享元素转场效果。\n\n开源Library推荐：\n\n- [PreLollipopTransition](https://github.com/takahirom/PreLollipopTransition)\n\n- [ImageTransition](https://github.com/vikramkakkar/ImageTransition)\n\n- [GestureViews](https://github.com/alexvasilkov/GestureViews)：手势操作库，其demo本身就实现了一个类似的转场的动画效果。\n\n","slug":"利用属性动画在Android4.x上实现Android L的元素转场动画效果","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8ej001omtsx99awrzse","content":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>随着谷歌推出的MaterialDesign不断被各种实践，最近我也碰到这么一个需求，就是要求实现一个图片的转场效果。在第一个界面上，图片被点击后，会渐渐地滑动到第二个界面中去。</p>\n<p>其实仔细观察一下Google相册也有用到这种效果，大概的效果图是这样的：</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/801b780agw1f9kunqk6sqg20b40jre86.gif\" alt=\"transition-ui-demo\"></p>\n<p>按照我的理解，这种效果要是直接把View拿出来复用就可以。但是经过学习（国内外各种大神的博客）和实践发现，里面有不少可以思考的地方。</p>\n<a id=\"more\"></a>\n<p>根据官方介绍的<a href=\"https://developer.android.com/training/material/animations.html#Transitions\" target=\"_blank\" rel=\"noopener\">Transitions</a>，在Android 5.0以后，可以使用<strong>shared elements transition</strong>来实现这个效果，非常方便。但是我们的App一般还需要向下兼容到4.x，所以在4.x上得想其它的办法实现。</p>\n<p>下面我以上图的ImageView转场动画为例子，介绍一下是怎么实现这个效果的。（代码都在<a href=\"https://github.com/unclechen/ActivityTransitionDemo\" target=\"_blank\" rel=\"noopener\">这里</a>）</p>\n<blockquote>\n<p>注意：为了说明转场效果实现的核心内容，一些无关的东西都用了最简单的实现。</p>\n</blockquote>\n<h1 id=\"二、实现思路\"><a href=\"#二、实现思路\" class=\"headerlink\" title=\"二、实现思路\"></a>二、实现思路</h1><h2 id=\"1-入场\"><a href=\"#1-入场\" class=\"headerlink\" title=\"1.入场\"></a>1.入场</h2><ul>\n<li>（1）保存第一个Activity中ImageView（我们叫它originImageView）的位置信息、宽、高，然后把这些信息传给第二个Activity。</li>\n<li>（2）去掉Activity默认的转场动画。</li>\n<li>（3）进入第二个Activity之后，拿到第一个Activity传过来的ImageView的位置、宽、高信息，并在第二个Activity动态添加一个一模一样的ImageView（我叫它sourceImageView）。</li>\n<li>（4）在第二个Activity中，找到最终的ImageView（我叫它targetImageView），并取出它最终所在的位置。</li>\n<li>（5）对比sourceImageView和targetImageView的位置、大小等等各种<strong>属性</strong>的区别，然后使用属性动画将sourceImageView变换成targetImageView。</li>\n<li>（6）当动画结束时，显示出targetImageView，隐藏sourceImageView。</li>\n</ul>\n<blockquote>\n<p>注意：这里当动画结束时，我们需要将sourceImageView的LayoutParams改成和targetImageView的LayoutParams一模一样，用于退出时做转场动画使用。<br>其实退场效果和入场效果是完全相反的步骤。</p>\n</blockquote>\n<h2 id=\"2-退场\"><a href=\"#2-退场\" class=\"headerlink\" title=\"2.退场\"></a>2.退场</h2><ul>\n<li>（1）将之前隐藏的sourceImageView显示出来，隐藏targetImageView。</li>\n<li>（2）通过属性动画将sourceImageView从当前的位置和宽、高大小，变换到刚进入第二个Activity时的状态。（这里的动画代码几乎一样，只是把开始值和结束值调换了位置）</li>\n<li>（3）动画结束时，关闭第二个Activity，去掉Activity的转场动画。</li>\n</ul>\n<p>上面就是实现思路，其实很好理解。实现这个思路的重点，就在于属性动画的应用了。也就是上面提到的<strong>入场的第5步</strong>和<strong>退场的第2步</strong>，这里面用到的属性动画代码见下一章。</p>\n<h1 id=\"三、实现代码\"><a href=\"#三、实现代码\" class=\"headerlink\" title=\"三、实现代码\"></a>三、实现代码</h1><h2 id=\"1-入场-1\"><a href=\"#1-入场-1\" class=\"headerlink\" title=\"1.入场\"></a>1.入场</h2><h3 id=\"（1）先复原出sourceImageView\"><a href=\"#（1）先复原出sourceImageView\" class=\"headerlink\" title=\"（1）先复原出sourceImageView\"></a>（1）先复原出sourceImageView</h3><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个和第一个界面一模一样的ImageView，作为这个界面的sourceImageView</span></span><br><span class=\"line\">private void initSourceImageView() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先动态创建出这个sourceImageView，把它添加到第二个界面的ContentView中。</span></span><br><span class=\"line\">    <span class=\"type\">FrameLayout</span> contentView = (<span class=\"type\">FrameLayout</span>) getWindow().getDecorView().findViewById(android.<span class=\"type\">R</span>.id.content);</span><br><span class=\"line\">    mSourceImageView = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">ImageView</span>(this);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">contentView</span>.<span class=\"title\">addView</span>(mSourceImageView);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 读取第一个界面传过来的信息</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">Bundle</span> <span class=\"title\">bundle</span> = <span class=\"title\">getIntent</span>().<span class=\"title\">getExtras</span>();</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">mRect</span> = (<span class=\"type\">Rect</span>) <span class=\"title\">getIntent</span>().<span class=\"title\">getParcelableExtra</span>(<span class=\"type\">IMAGE_ORIGIN_RECT</span>);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">ImageView</span>.<span class=\"title\">ScaleType</span> <span class=\"title\">scaleType</span> = (<span class=\"type\">ImageView</span>.<span class=\"type\">ScaleType</span>) <span class=\"title\">bundle</span>.<span class=\"title\">getSerializable</span>(<span class=\"type\">IMAGE_SCALE_TYPE</span>);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">mResId</span> = <span class=\"title\">bundle</span>.<span class=\"title\">getInt</span>(<span class=\"type\">IMAGE_RES_ID</span>);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 设置为和第一个界面一样的图片</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">mSourceImageView</span>.<span class=\"title\">setImageResource</span>(mResId);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">mTargetImageView</span>.<span class=\"title\">setImageResource</span>(mResId);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 设为和原来一样的裁剪模式</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">mSourceImageView</span>.<span class=\"title\">setScaleType</span>(scaleType);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 设置为和原来一样的位置</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">FrameLayout</span>.<span class=\"title\">LayoutParams</span> <span class=\"title\">layoutParams</span> = (<span class=\"type\">FrameLayout</span>.<span class=\"type\">LayoutParams</span>) <span class=\"title\">mSourceImageView</span>.<span class=\"title\">getLayoutParams</span>();</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">layoutParams</span>.<span class=\"title\">width</span> = <span class=\"title\">mRect</span>.<span class=\"title\">width</span>();</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">layoutParams</span>.<span class=\"title\">height</span> = <span class=\"title\">mRect</span>.<span class=\"title\">height</span>();</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">layoutParams</span>.<span class=\"title\">setMargins</span>(mRect.left, mRect.top, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"（2）找到targetImageView的位置和宽高\"><a href=\"#（2）找到targetImageView的位置和宽高\" class=\"headerlink\" title=\"（2）找到targetImageView的位置和宽高\"></a>（2）找到targetImageView的位置和宽高</h3><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initImageEnterAnimation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    mTargetImageView.getViewTreeObserver().addOnPreDrawListener(<span class=\"keyword\">new</span> ViewTreeObserver.OnPreDrawListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onPreDraw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一帧被绘制时，TargetImageView已经具有了实际的尺寸和位置，这是就应该开始播放动画。</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] finalLocationOnTheScreen = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">            mTargetImageView.getLocationOnScreen(finalLocationOnTheScreen);</span><br><span class=\"line\">            mTargetLeft = finalLocationOnTheScreen[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mTargetTop = finalLocationOnTheScreen[<span class=\"number\">1</span>];</span><br><span class=\"line\">            mTargetWidth = mTargetImageView.getWidth();</span><br><span class=\"line\">            mTargetHeight = mTargetImageView.getHeight();</span><br><span class=\"line\">            playEnteringAnimation(mTargetLeft, mTargetTop, mTargetWidth, mTargetHeight);</span><br><span class=\"line\">            mTargetImageView.getViewTreeObserver().removeOnPreDrawListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（3）播放入场动画\"><a href=\"#（3）播放入场动画\" class=\"headerlink\" title=\"（3）播放入场动画\"></a>（3）播放入场动画</h3><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 属性动画走起，将sourceImageView变换到targetImageView</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">playEnteringAnimation</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> left, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> top, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.改变ImageView的位置、宽高</span></span><br><span class=\"line\">    PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(<span class=\"string\">\"left\"</span>, mSourceImageView.getLeft(), left);</span><br><span class=\"line\">    PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(<span class=\"string\">\"top\"</span>, mSourceImageView.getTop(), top);</span><br><span class=\"line\">    PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(<span class=\"string\">\"right\"</span>, mSourceImageView.getRight(), left + width);</span><br><span class=\"line\">    PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(<span class=\"string\">\"bottom\"</span>, mSourceImageView.getBottom(), top + height);</span><br><span class=\"line\"></span><br><span class=\"line\">    ObjectAnimator positionAnimator = ObjectAnimator.ofPropertyValuesHolder(mSourceImageView,</span><br><span class=\"line\">            propertyLeft, propertyTop, propertyRight, propertyBottom);</span><br><span class=\"line\">    positionAnimator.addListener(<span class=\"keyword\">new</span> Animator.AnimatorListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 为了退出动画，需要把sourceImageView的LayoutParams改成targetImageView</span></span><br><span class=\"line\">            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mSourceImageView.getLayoutParams();</span><br><span class=\"line\">            layoutParams.height = height;</span><br><span class=\"line\">            layoutParams.width = width;</span><br><span class=\"line\">            layoutParams.setMargins(left, top, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationRepeat</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.ImageView的矩阵动画</span></span><br><span class=\"line\">    Matrix initMatrix = getImageMatrix(mSourceImageView);</span><br><span class=\"line\">    initMatrix.getValues(mInitImageMatrixValues);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Matrix endMatrix = getImageMatrix(mTargetImageView);</span><br><span class=\"line\">    mSourceImageView.setScaleType(ImageView.ScaleType.MATRIX);</span><br><span class=\"line\">    <span class=\"comment\">// ofObject()用法：传入自定义Property和Evaluator的用法</span></span><br><span class=\"line\">    ObjectAnimator matrixAnimator = ObjectAnimator.ofObject(mSourceImageView, ANIMATED_TRANSFORM_PROPERTY, <span class=\"keyword\">new</span> MatrixEvaluator(), initMatrix, endMatrix);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3.顺便加个渐变动画</span></span><br><span class=\"line\">    ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">0.0</span>f, <span class=\"number\">1.0</span>f);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4.一起播放上面的动画</span></span><br><span class=\"line\">    mEnteringAnimation = <span class=\"keyword\">new</span> AnimatorSet();</span><br><span class=\"line\">    mEnteringAnimation.setDuration(IMAGE_TRANSLATION_DURATION);</span><br><span class=\"line\">    mEnteringAnimation.setInterpolator(DEFAULT_INTERPOLATOR);</span><br><span class=\"line\">    mEnteringAnimation.addListener(<span class=\"keyword\">new</span> Animator.AnimatorListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\">            mEnteringAnimation = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationRepeat</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mEnteringAnimation != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mEnteringAnimation = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                mTargetImageView.setVisibility(View.VISIBLE);</span><br><span class=\"line\">                mSourceImageView.setVisibility(View.INVISIBLE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    mEnteringAnimation.playTogether(positionAnimator, matrixAnimator, fadeInAnimator);</span><br><span class=\"line\">    mEnteringAnimation.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（4）2个关键的入场动画的说明\"><a href=\"#（4）2个关键的入场动画的说明\" class=\"headerlink\" title=\"（4）2个关键的入场动画的说明\"></a>（4）2个关键的入场动画的说明</h3><p>在（3）中，用到下面两个关键的动画：</p>\n<ul>\n<li><p>ObjectAnimator - positionAnimator：改变sourceImageView的top、left、right、bottom属性，动画的起始值就是sourceImageView的这4个属性，结束值就是targetImageView的这4个属性。</p>\n</li>\n<li><p>ObjectAnimator - matrixAnimator：通过改变sourceImageView的Matrix，来改变其中显示的图片（drawable）的Bounds，从而使ImageView呈现出渐变效果。</p>\n</li>\n</ul>\n<p>介绍这两个关键动画的实现细节之前，需要具备属性动画的基础知识。如果不熟悉的话，建议先看下这几篇博客，里面详细地介绍了属性动画的各种用法。</p>\n<ul>\n<li><p><a href=\"http://blog.csdn.net/harvic880925/article/details/50525521\" target=\"_blank\" rel=\"noopener\">ValueAnimator基本使用</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/harvic880925/article/details/50546884\" target=\"_blank\" rel=\"noopener\">ValueAnimator高级进阶（一）</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/harvic880925/article/details/50549385\" target=\"_blank\" rel=\"noopener\">ValueAnimator高级进阶（二）</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/harvic880925/article/details/50598322\" target=\"_blank\" rel=\"noopener\">ObjectAnimator基本使用</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/harvic880925/article/details/50752838\" target=\"_blank\" rel=\"noopener\">PropertyValuesHolder与Keyframe</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/harvic880925/article/details/50759059\" target=\"_blank\" rel=\"noopener\">联合动画的代码实现</a></p>\n</li>\n</ul>\n<hr>\n<p>下面介绍这两个关键的动画实现</p>\n<h4 style=\"color:#ff0000\">关键动画之 ObjectAnimator - positionAnimator 实现：改变ImageView的位置和大小</h4>\n\n<p>我们知道，设置一个动画，就要给它设置起始值和结束值。所以我们的positionAnimator就需要设置sourceImageView的left、top、right、bottom这4个属性起始值和结束值。在动画执行的过程中，就可以渐渐地改变sourceImageView的这4个属性了。</p>\n<p>下面这行代码</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">PropertyValuesHolder propertyLeft</span> = PropertyValuesHolder.ofInt(<span class=\"string\">\"left\"</span>, mSourceImageView.getLeft(), left);</span><br></pre></td></tr></table></figure>\n<p>用<strong>PropertyValuesHolder</strong>可以给sourceImageView的left属性设置了起始值、结束值。</p>\n<p>对于left属性，起始值就是sourceImageView的left值，我们已经从第一个Activity传过来了。<br>而left属性的结束值，我们可以从targetImageView的left属性值。<br>其他的top、right、bottom属性也是一样的道理。</p>\n<blockquote>\n<p>需要需要特别注意的一点就是targetImageView的宽高获取方法，我们都知道获取一个View的宽高必须要等它绘制完了，而<strong>targetImageView不会在setContentView之后立刻绘制完成</strong>。<br>因此我们需要监听targetImageView的绘制状态，也就是监听<strong>ViewTreeObserver</strong>的各种回调，这里我们要监听的是<strong>OnPreDrawListener</strong>。<br>关于ViewTreeObserver，可以参考<a href=\"http://souly.cn/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/2015/11/16/viewTreeObserver%E8%A7%A3%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">《Viewtreeobserver解析》</a>这篇文章学习一下。</p>\n</blockquote>\n<h4 style=\"color:#ff0000\">关键动画之ObjectAnimator - matrixAnimator实现：使ImageView展示的图片呈现渐变效果</h4>\n\n<p>这里的数值计算比positionAnimator要复杂一点。</p>\n<p>首先我们要<strong>自定义一个计算器MatrixEvaluator</strong>，它的作用是返回动画执行过程中的Matrix，然后再使用这个Matrix去改变sourceImageView的Matrix属性。</p>\n<p>这个自定义计算器evaluate方法非常简单，就是根据起始Matrix（startMatrix）和结束Matrix（endMatrix）之间的差值diff，然后乘以当前<strong>加速器</strong>返回的动画的<strong>数值</strong>进度即可得到当前实时的Matrix值。</p>\n<p>下面看它的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatrixEvaluator</span> <span class=\"keyword\">implements</span> <span class=\"title\">TypeEvaluator</span>&lt;<span class=\"title\">Matrix</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TypeEvaluator&lt;Matrix&gt; NULL_MATRIX_EVALUATOR = <span class=\"keyword\">new</span> TypeEvaluator&lt;Matrix&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Matrix <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Matrix startValue, Matrix endValue)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">float</span>[] mTempStartValues = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">9</span>];</span><br><span class=\"line\">        <span class=\"keyword\">float</span>[] mTempEndValues = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">9</span>];</span><br><span class=\"line\">        Matrix mTempMatrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Matrix <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Matrix startValue, Matrix endValue)</span> </span>&#123;</span><br><span class=\"line\">            startValue.getValues(mTempStartValues);</span><br><span class=\"line\">            endValue.getValues(mTempEndValues);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">float</span> diff = mTempEndValues[i] - mTempStartValues[i];</span><br><span class=\"line\">                <span class=\"comment\">// fraction是加速器中的返回值，表示当前动画的“数值”进度。我们用的是Android SDK中提供的AccelerateDecelerateInterpolator。</span></span><br><span class=\"line\">                mTempEndValues[i] = mTempStartValues[i] + (fraction * diff); </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mTempMatrix.setValues(mTempEndValues);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mTempMatrix;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>有了这个计算器，得到动画执行过程中的Matrix值，怎么动态地赋给sourceImageView呢？</p>\n<p>我们知道，在普通的<code>ObjectAnimator#ofFloat(Object target, String propertyName, float... values)</code>方法中，当Evaluator接收到最后一个可变长参数values后，可以得到起始值和结束值后。然后在<strong>evaluate</strong>方法中计算出动画执行过程的应该赋予的属性的值，然后调用目标对象（这里就是我们的ImageView）的setter方法把这个值赋给目标对象。</p>\n<blockquote>\n<p>例如这句代码，<code>ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, &quot;alpha&quot;, 0.0f, 1.0f);</code>其实就是在计算出了动画过程中每一个时刻的alpha值，然后再调用mContainer的setAlpha(float alpha)方法去改变mContainer的透明度。</p>\n</blockquote>\n<p>但是要改变sourceImageView的Matrix值，我们需要调用<strong>ImageView#animateTransform()</strong>这个方法，这个方法在Android SDK中属于隐藏API，其代码片段所示：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ImageView#animateTransform()源代码</span></span><br><span class=\"line\"><span class=\"comment\">/** @hide */</span></span><br><span class=\"line\">public void animateTransform(<span class=\"keyword\">Matrix</span> <span class=\"keyword\">matrix</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDrawable == <span class=\"built_in\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">matrix</span> == <span class=\"built_in\">null</span>) &#123;</span><br><span class=\"line\">            mDrawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, getWidth(), getHeight());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            mDrawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mDrawableWidth, mDrawableHeight);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mDrawMatrix == <span class=\"built_in\">null</span>) &#123;</span><br><span class=\"line\">                mDrawMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">Matrix</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mDrawMatrix.set(<span class=\"keyword\">matrix</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        invalidate();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>而且这个方法的名字也不叫<strong>setXXX</strong>，所以我们没法调用像<code>ofFloat</code>这样的方法去改变sourceImageView的Matrix。</p>\n<p>这时候需要采用自定义Property，并且实现它的<strong>set</strong>方法，自定义Property代码如下：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Property&lt;ImageView, Matrix&gt; ANIMATED_TRANSFORM_PROPERTY = <span class=\"keyword\">new</span> Property&lt;ImageView, Matrix&gt;(Matrix.class, <span class=\"string\">\"animatedTransform\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(ImageView imageView, Matrix matrix)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里模仿了SDK源码中ImageView#animateTransform的实现</span></span><br><span class=\"line\">            Drawable drawable = imageView.getDrawable();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (drawable == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (matrix == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                drawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, imageView.getWidth(), imageView.getHeight());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                drawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());</span><br><span class=\"line\">                Matrix drawMatrix = imageView.getImageMatrix();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (drawMatrix == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    drawMatrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">                    imageView.setImageMatrix(drawMatrix);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                imageView.setImageMatrix(matrix);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            imageView.invalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\">Matrix <span class=\"title\">get</span><span class=\"params\">(ImageView object)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>自定义一个Property必须要实现里面的get方法，但是在我们的这里例子中，get方法不会被调用。</p>\n<p>因为在属性动画中，只有当你传入的可变长参数values（也就是起始值、中间值1、中间值2. … 结束值）长度为1，也就是说你只传了一个值的时候，才会对我们的target调用getter方法去获取初始值。所以这里我们是不需要getter方法的。</p>\n<p>自定义Property完成后，通过<code>ObjectAnimator#ofObject(T target, Property&lt;T, V&gt; property, TypeEvaluator&lt;V&gt; evaluator, V... values)</code> 方法，就可以把计算器计算出的动画执行过程中的Matrix值，通过自定义Property中的set方法，赋给当前的目标对象，即sourceImageView！从而使得sourceImageView呈现出渐变效果。</p>\n<blockquote>\n<p>这里的实现是来自这位大神的博客<a href=\"https://medium.com/@v.danylo/implementing-imageview-transition-between-activities-for-pre-lollipop-devices-8b24bc387a2a#.7c6qxvf59\" target=\"_blank\" rel=\"noopener\">Implementing ImageView transition between activities for pre-Lollipop devices</a>。<br>我们首先感谢这位大神的分享！这位大神在文中也提到，用动画来实现图片的渐进式改变，起实来自于我们Android SDK中的隐藏API——<strong>ImageView#animateTransform</strong>。</p>\n</blockquote>\n<h2 id=\"2-退场-1\"><a href=\"#2-退场-1\" class=\"headerlink\" title=\"2.退场\"></a>2.退场</h2><p>退场动画完全是入场动画的逆操作，直接看代码。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 图片退出的转场动画：完全是和之前相反的过程</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">playExitAnimations</span><span class=\"params\">(<span class=\"keyword\">int</span> sourceImageViewLeft, <span class=\"keyword\">int</span> sourceImageViewTop, <span class=\"keyword\">int</span> sourceImageViewWidth, <span class=\"keyword\">int</span> sourceImageViewHeight, <span class=\"keyword\">float</span>[] imageMatrixValues)</span> </span>&#123;</span><br><span class=\"line\">    mSourceImageView.setVisibility(View.VISIBLE);</span><br><span class=\"line\">    mTargetImageView.setVisibility(View.INVISIBLE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 改变SourceView的位置、宽高属性。这里每个属性的起始值和结束值和入场时刚好相反。</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] locationOnScreen = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    mSourceImageView.getLocationOnScreen(locationOnScreen);</span><br><span class=\"line\">    PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(<span class=\"string\">\"left\"</span>, locationOnScreen[<span class=\"number\">0</span>], sourceImageViewLeft);</span><br><span class=\"line\">    PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(<span class=\"string\">\"top\"</span>, locationOnScreen[<span class=\"number\">1</span>], sourceImageViewTop);</span><br><span class=\"line\">    PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(<span class=\"string\">\"right\"</span>, locationOnScreen[<span class=\"number\">0</span>] + mSourceImageView.getWidth(), sourceImageViewLeft + sourceImageViewWidth);</span><br><span class=\"line\">    PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(<span class=\"string\">\"bottom\"</span>, mSourceImageView.getBottom(), sourceImageViewTop + sourceImageViewHeight);</span><br><span class=\"line\">    ObjectAnimator positionAnimator = ObjectAnimator.ofPropertyValuesHolder(mSourceImageView, propertyLeft, propertyTop, propertyRight, propertyBottom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ImageView的矩阵动画</span></span><br><span class=\"line\">    Matrix initialMatrix = getImageMatrix(mSourceImageView);</span><br><span class=\"line\"></span><br><span class=\"line\">    Matrix endMatrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">    endMatrix.setValues(imageMatrixValues);</span><br><span class=\"line\">    mSourceImageView.setScaleType(ImageView.ScaleType.MATRIX);</span><br><span class=\"line\">    <span class=\"comment\">// 这里Matrix的起始值和结束值和入场时也刚好相反。</span></span><br><span class=\"line\">    ObjectAnimator matrixAnimator = ObjectAnimator.ofObject(mSourceImageView, ANIMATED_TRANSFORM_PROPERTY, <span class=\"keyword\">new</span> MatrixEvaluator(), initialMatrix, endMatrix);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 渐变动画</span></span><br><span class=\"line\">    ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">1.0</span>f, <span class=\"number\">0.0</span>f);</span><br><span class=\"line\"></span><br><span class=\"line\">    mExitingAnimation = <span class=\"keyword\">new</span> AnimatorSet();</span><br><span class=\"line\">    mExitingAnimation.setDuration(IMAGE_TRANSLATION_DURATION);</span><br><span class=\"line\">    mExitingAnimation.setInterpolator(<span class=\"keyword\">new</span> AccelerateInterpolator());</span><br><span class=\"line\">    mExitingAnimation.addListener(<span class=\"keyword\">new</span> Animator.AnimatorListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mExitingAnimation != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mExitingAnimation = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 关闭第二个界面</span></span><br><span class=\"line\">            Activity activity = (Activity) mSourceImageView.getContext();</span><br><span class=\"line\">            activity.finish();</span><br><span class=\"line\">            activity.overridePendingTransition(<span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">// 同样去掉默认的转场动画</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationRepeat</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    mExitingAnimation.playTogether(positionAnimator, matrixAnimator, fadeInAnimator);</span><br><span class=\"line\">    mExitingAnimation.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、涉及到的知识点\"><a href=\"#四、涉及到的知识点\" class=\"headerlink\" title=\"四、涉及到的知识点\"></a>四、涉及到的知识点</h1><p>我认为实现demo里面的效果需要了解下面的知识点，如果不熟悉的话，建议先看一下上一章推荐的属性动画讲解的几篇博客。</p>\n<h2 id=\"1-ImageView的ScaleType\"><a href=\"#1-ImageView的ScaleType\" class=\"headerlink\" title=\"1.ImageView的ScaleType\"></a>1.ImageView的ScaleType</h2><p>不管将ScaleType设为多少，bitmap始终都是一个。如果在Android Studio打开debug模式来查看bitmap实际的图片，用一个ImageView去展示一张图片，不管你怎么改变ScaleType，其实里面的图片对象都是一样的。</p>\n<h2 id=\"2-属性动画之插值器-Interpolator\"><a href=\"#2-属性动画之插值器-Interpolator\" class=\"headerlink\" title=\"2.属性动画之插值器 - Interpolator\"></a>2.属性动画之插值器 - Interpolator</h2><p>控制动画数值进度的转换器，我们给动画是指一个duration之后，插值器负责把动画的<strong>自然</strong>进度转成<strong>数值</strong>进度。自然进度就是指随着时间匀速增长的值。</p>\n<p>所有的插值器都实现了<strong>TimeInterpolator接口里面的public float getInterpolation(float input)</strong>方法，input就是随时间流逝的自然进度，在这个方法中根据实际需求，用input计算出实际数字，作为数值进度返回。</p>\n<h2 id=\"3-属性动画之计算器-TypeEvaluator\"><a href=\"#3-属性动画之计算器-TypeEvaluator\" class=\"headerlink\" title=\"3.属性动画之计算器 - TypeEvaluator\"></a>3.属性动画之计算器 - TypeEvaluator</h2><p>计算器就是计算动画执行过程中，目标对象的某个属性的数值。</p>\n<p>TypeEvaluator接口中有一个<strong>public T evaluate(float fraction, T startValue, T endValue)</strong>方法，fraction就是插值器返回的数值进度，而startValue就是对象的某一个属性的起始值，endValue是这个属性的结束值。</p>\n<p>这里利用的是泛型编程，我们可以把属性的起始、结束值看成一个Type。传入自己定义的任何Type后，在evaluate方法中，计算出当前应该改变<strong>对象</strong>的<strong>属性</strong>的具体Type值。再调用这个对象的setter方法，将Type值赋给这个对象。</p>\n<p>很多时候，我们不会像这个demo中自定义Property，然后把它set给一个系统封装好的ImageView。我们很可能会有一个自定义的CustomView，然后在这个CustomView中提供一个setXXX方法。这样也可以在自定义的计算器中实现CustomView的属性动态改变。</p>\n<h2 id=\"4-属性动画之中的ObjectAnimator和ValueAnimator的区别\"><a href=\"#4-属性动画之中的ObjectAnimator和ValueAnimator的区别\" class=\"headerlink\" title=\"4.属性动画之中的ObjectAnimator和ValueAnimator的区别\"></a>4.属性动画之中的ObjectAnimator和ValueAnimator的区别</h2><p>ObjectAnimator是ValueAnimator的子类，ValueAnimator只负责计算动画过程中，目标对象（一般是一个View或者其他UI元素）属性的值，但是需要我们自己监听动画的update状态，再把监听到的值set给目标对象的属性。</p>\n<p>ObjectAnimator除了可以计算动画过程中的属性值外，还可以调用目标对象的setter方法，改变这个属性的值。所以它的功能比ValueAnimator要强大。</p>\n<h2 id=\"4-属性动画之PropertyValuesHolder用法\"><a href=\"#4-属性动画之PropertyValuesHolder用法\" class=\"headerlink\" title=\"4.属性动画之PropertyValuesHolder用法\"></a>4.属性动画之PropertyValuesHolder用法</h2><p>一般直接使用<code>ObjectAnimator ofFloat(Object target, String propertyName, float... values)</code>只能改变目标对象的一个属性值。</p>\n<p>如果我们想要改一个目标对象的的多个属性时，可以先使用<code>PropertyValuesHolder ofInt(String propertyName, int... values)</code>创建PropertyValuesHolder。</p>\n<p>然后再用<code>ObjectAnimator ofPropertyValuesHolder(Object target, PropertyValuesHolder... values)</code>创建出改变多个属性的属性动画对象ObjectAnimator。</p>\n<h2 id=\"5-如何向ContentView中动态添加View\"><a href=\"#5-如何向ContentView中动态添加View\" class=\"headerlink\" title=\"5.如何向ContentView中动态添加View\"></a>5.如何向ContentView中动态添加View</h2><p>首先要从当前的Activity中获得根视图：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">getWindow</span>()<span class=\"selector-class\">.getDecorView</span>()<span class=\"selector-class\">.findViewById</span>(<span class=\"selector-tag\">android</span><span class=\"selector-class\">.R</span><span class=\"selector-class\">.id</span><span class=\"selector-class\">.content</span>);</span><br></pre></td></tr></table></figure>\n<p>这是个FrameLayout，然后我们就可以用java代码动态向它里面添加sourceImageView了。</p>\n<p>关于DecorView再多说两句，它是Activity界面的根View，继承自FrameLayout。在它里面又是一个LinearLayout，在这个LinearLayout里面又包含了<strong>id为@android:id/title_container</strong>的标题栏，和一个<strong>id为@android:id/content</strong>的ContentView，结构大概是下面这个样子的：</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"ruby\"> DecorView</span></span><br><span class=\"line\"><span class=\"ruby\">    - LinearLayout</span></span><br><span class=\"line\"><span class=\"ruby\">        - ...</span></span><br><span class=\"line\"><span class=\"ruby\">        - FrameLayout：<span class=\"symbol\">android:</span>id/title_container</span></span><br><span class=\"line\"><span class=\"ruby\">        - FrameLayout：@android<span class=\"symbol\">:id/content</span></span></span><br></pre></td></tr></table></figure>\n<p>当我们在onCreate方法中调用Activity#setContentView()时，会把我们自己写的布局添加到这个ContentView中去。</p>\n<h1 id=\"五、Android-5-0上的实现方法\"><a href=\"#五、Android-5-0上的实现方法\" class=\"headerlink\" title=\"五、Android 5.0上的实现方法\"></a>五、Android 5.0上的实现方法</h1><p>下面是在Android 5.0以上一种示例，非常简单，只需要几行代码就可实现：</p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个Activity，利用ActivityOptions创建SceneTransitionAnimation</span></span><br><span class=\"line\">private void transitionOnAndroidL() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把需要共享的元素-ImageView，传给第二个界面</span></span><br><span class=\"line\">    <span class=\"type\">Intent</span> intent = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">Intent</span>(<span class=\"type\">MainActivity</span>.this, <span class=\"type\">DetailActivityLollipop</span>.class);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 一定要传入shareElementName</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">String</span> <span class=\"title\">shareElementName</span> = \"<span class=\"title\">sharedImageView</span>\";</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">ActivityOptions</span> <span class=\"title\">activityOptions</span> = <span class=\"title\">ActivityOptions</span>.<span class=\"title\">makeSceneTransitionAnimation</span>(this, mImageView, shareElementName);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">getWindow</span>().<span class=\"title\">setSharedElementEnterTransition</span>(new <span class=\"type\">ChangeImageTransform</span>(this, null));</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">intent</span>.<span class=\"title\">putExtra</span>(<span class=\"type\">DetailActivityLollipop</span>.<span class=\"type\">SHARED_ELEMENT_KEY</span>, shareElementName);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">intent</span>.<span class=\"title\">putExtra</span>(<span class=\"type\">DetailActivityLollipop</span>.<span class=\"type\">IMAGE_RES_ID</span>, mImageResId);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 打开它</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">startActivity</span>(intent, activityOptions.toBundle());</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 第二个Activity，取出shareElementName，再调用ViewCompat#setTransitionName</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">private</span> <span class=\"title\">void</span> <span class=\"title\">initImageEnterTransition</span>() &#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">imageView</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">VISIBLE</span>);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">String</span> <span class=\"title\">imageTransitionName</span> = <span class=\"title\">getIntent</span>().<span class=\"title\">getStringExtra</span>(<span class=\"type\">SHARED_ELEMENT_KEY</span>);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">ViewCompat</span>.<span class=\"title\">setTransitionName</span>(imageView, imageTransitionName);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">View</span> <span class=\"title\">mainContainer</span> = <span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.activityContanierDetail);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">mainContainer</span>.<span class=\"title\">setAlpha</span>(<span class=\"number\">1.0</span>f);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">int</span> <span class=\"title\">resId</span> = <span class=\"title\">getIntent</span>().<span class=\"title\">getExtras</span>().<span class=\"title\">getInt</span>(<span class=\"type\">IMAGE_RES_ID</span>);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">imageView</span>.<span class=\"title\">setImageResource</span>(resId);</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>官方介绍的<a href=\"https://developer.android.com/training/material/animations.html#Transitions\" target=\"_blank\" rel=\"noopener\">Transitions</a>中用xml也可以实现。另外，还有多个元素的转场动画效果，这里就不详细说了，如果有需要，也可以参考下这篇文章——<a href=\"https://guides.codepath.com/android/Shared-Element-Activity-Transition\" target=\"_blank\" rel=\"noopener\">Shared Element Activity Transition</a>。</p>\n<h1 id=\"六、其他实现方法\"><a href=\"#六、其他实现方法\" class=\"headerlink\" title=\"六、其他实现方法\"></a>六、其他实现方法</h1><p>在我的demo中只演示了核心的View转场实现，没有和其他的稍微复杂一些的需求相结合。网上还有很多关于这种效果实现的分享，也有应用到一些更复杂场景，下面推荐出来一起多多学习。</p>\n<p>文章推荐：</p>\n<ul>\n<li><p><a href=\"http://wl9739.github.io/2016/10/16/Android-%E4%B8%AD%E7%9A%84%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%E5%8F%8A%E5%85%BC%E5%AE%B9%E5%A4%84%E7%90%86/\" target=\"_blank\" rel=\"noopener\">Android中的转场动画及兼容处理</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/340c938e9f32\" target=\"_blank\" rel=\"noopener\">Android共享元素转场动画兼容实践</a></p>\n</li>\n<li><p><a href=\"http://immortalz.me/859.html\" target=\"_blank\" rel=\"noopener\">两步实现类似格瓦拉的转场动画</a></p>\n</li>\n<li><p><a href=\"https://guides.codepath.com/android/Shared-Element-Activity-Transition\" target=\"_blank\" rel=\"noopener\">Shared Element Activity Transition</a>：详细介绍了5.0以上的各种共享元素转场效果。</p>\n</li>\n</ul>\n<p>开源Library推荐：</p>\n<ul>\n<li><p><a href=\"https://github.com/takahirom/PreLollipopTransition\" target=\"_blank\" rel=\"noopener\">PreLollipopTransition</a></p>\n</li>\n<li><p><a href=\"https://github.com/vikramkakkar/ImageTransition\" target=\"_blank\" rel=\"noopener\">ImageTransition</a></p>\n</li>\n<li><p><a href=\"https://github.com/alexvasilkov/GestureViews\" target=\"_blank\" rel=\"noopener\">GestureViews</a>：手势操作库，其demo本身就实现了一个类似的转场的动画效果。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"一、背景\"><a href=\"#一、背景\" class=\"headerlink\" title=\"一、背景\"></a>一、背景</h1><p>随着谷歌推出的MaterialDesign不断被各种实践，最近我也碰到这么一个需求，就是要求实现一个图片的转场效果。在第一个界面上，图片被点击后，会渐渐地滑动到第二个界面中去。</p>\n<p>其实仔细观察一下Google相册也有用到这种效果，大概的效果图是这样的：</p>\n<p><img src=\"http://ww2.sinaimg.cn/large/801b780agw1f9kunqk6sqg20b40jre86.gif\" alt=\"transition-ui-demo\"></p>\n<p>按照我的理解，这种效果要是直接把View拿出来复用就可以。但是经过学习（国内外各种大神的博客）和实践发现，里面有不少可以思考的地方。</p>","more":"<p>根据官方介绍的<a href=\"https://developer.android.com/training/material/animations.html#Transitions\" target=\"_blank\" rel=\"noopener\">Transitions</a>，在Android 5.0以后，可以使用<strong>shared elements transition</strong>来实现这个效果，非常方便。但是我们的App一般还需要向下兼容到4.x，所以在4.x上得想其它的办法实现。</p>\n<p>下面我以上图的ImageView转场动画为例子，介绍一下是怎么实现这个效果的。（代码都在<a href=\"https://github.com/unclechen/ActivityTransitionDemo\" target=\"_blank\" rel=\"noopener\">这里</a>）</p>\n<blockquote>\n<p>注意：为了说明转场效果实现的核心内容，一些无关的东西都用了最简单的实现。</p>\n</blockquote>\n<h1 id=\"二、实现思路\"><a href=\"#二、实现思路\" class=\"headerlink\" title=\"二、实现思路\"></a>二、实现思路</h1><h2 id=\"1-入场\"><a href=\"#1-入场\" class=\"headerlink\" title=\"1.入场\"></a>1.入场</h2><ul>\n<li>（1）保存第一个Activity中ImageView（我们叫它originImageView）的位置信息、宽、高，然后把这些信息传给第二个Activity。</li>\n<li>（2）去掉Activity默认的转场动画。</li>\n<li>（3）进入第二个Activity之后，拿到第一个Activity传过来的ImageView的位置、宽、高信息，并在第二个Activity动态添加一个一模一样的ImageView（我叫它sourceImageView）。</li>\n<li>（4）在第二个Activity中，找到最终的ImageView（我叫它targetImageView），并取出它最终所在的位置。</li>\n<li>（5）对比sourceImageView和targetImageView的位置、大小等等各种<strong>属性</strong>的区别，然后使用属性动画将sourceImageView变换成targetImageView。</li>\n<li>（6）当动画结束时，显示出targetImageView，隐藏sourceImageView。</li>\n</ul>\n<blockquote>\n<p>注意：这里当动画结束时，我们需要将sourceImageView的LayoutParams改成和targetImageView的LayoutParams一模一样，用于退出时做转场动画使用。<br>其实退场效果和入场效果是完全相反的步骤。</p>\n</blockquote>\n<h2 id=\"2-退场\"><a href=\"#2-退场\" class=\"headerlink\" title=\"2.退场\"></a>2.退场</h2><ul>\n<li>（1）将之前隐藏的sourceImageView显示出来，隐藏targetImageView。</li>\n<li>（2）通过属性动画将sourceImageView从当前的位置和宽、高大小，变换到刚进入第二个Activity时的状态。（这里的动画代码几乎一样，只是把开始值和结束值调换了位置）</li>\n<li>（3）动画结束时，关闭第二个Activity，去掉Activity的转场动画。</li>\n</ul>\n<p>上面就是实现思路，其实很好理解。实现这个思路的重点，就在于属性动画的应用了。也就是上面提到的<strong>入场的第5步</strong>和<strong>退场的第2步</strong>，这里面用到的属性动画代码见下一章。</p>\n<h1 id=\"三、实现代码\"><a href=\"#三、实现代码\" class=\"headerlink\" title=\"三、实现代码\"></a>三、实现代码</h1><h2 id=\"1-入场-1\"><a href=\"#1-入场-1\" class=\"headerlink\" title=\"1.入场\"></a>1.入场</h2><h3 id=\"（1）先复原出sourceImageView\"><a href=\"#（1）先复原出sourceImageView\" class=\"headerlink\" title=\"（1）先复原出sourceImageView\"></a>（1）先复原出sourceImageView</h3><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个和第一个界面一模一样的ImageView，作为这个界面的sourceImageView</span></span><br><span class=\"line\">private void initSourceImageView() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先动态创建出这个sourceImageView，把它添加到第二个界面的ContentView中。</span></span><br><span class=\"line\">    <span class=\"type\">FrameLayout</span> contentView = (<span class=\"type\">FrameLayout</span>) getWindow().getDecorView().findViewById(android.<span class=\"type\">R</span>.id.content);</span><br><span class=\"line\">    mSourceImageView = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">ImageView</span>(this);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">contentView</span>.<span class=\"title\">addView</span>(mSourceImageView);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 读取第一个界面传过来的信息</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">Bundle</span> <span class=\"title\">bundle</span> = <span class=\"title\">getIntent</span>().<span class=\"title\">getExtras</span>();</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">mRect</span> = (<span class=\"type\">Rect</span>) <span class=\"title\">getIntent</span>().<span class=\"title\">getParcelableExtra</span>(<span class=\"type\">IMAGE_ORIGIN_RECT</span>);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">ImageView</span>.<span class=\"title\">ScaleType</span> <span class=\"title\">scaleType</span> = (<span class=\"type\">ImageView</span>.<span class=\"type\">ScaleType</span>) <span class=\"title\">bundle</span>.<span class=\"title\">getSerializable</span>(<span class=\"type\">IMAGE_SCALE_TYPE</span>);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">mResId</span> = <span class=\"title\">bundle</span>.<span class=\"title\">getInt</span>(<span class=\"type\">IMAGE_RES_ID</span>);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 设置为和第一个界面一样的图片</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">mSourceImageView</span>.<span class=\"title\">setImageResource</span>(mResId);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">mTargetImageView</span>.<span class=\"title\">setImageResource</span>(mResId);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 设为和原来一样的裁剪模式</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">mSourceImageView</span>.<span class=\"title\">setScaleType</span>(scaleType);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 设置为和原来一样的位置</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">FrameLayout</span>.<span class=\"title\">LayoutParams</span> <span class=\"title\">layoutParams</span> = (<span class=\"type\">FrameLayout</span>.<span class=\"type\">LayoutParams</span>) <span class=\"title\">mSourceImageView</span>.<span class=\"title\">getLayoutParams</span>();</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">layoutParams</span>.<span class=\"title\">width</span> = <span class=\"title\">mRect</span>.<span class=\"title\">width</span>();</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">layoutParams</span>.<span class=\"title\">height</span> = <span class=\"title\">mRect</span>.<span class=\"title\">height</span>();</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">layoutParams</span>.<span class=\"title\">setMargins</span>(mRect.left, mRect.top, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"（2）找到targetImageView的位置和宽高\"><a href=\"#（2）找到targetImageView的位置和宽高\" class=\"headerlink\" title=\"（2）找到targetImageView的位置和宽高\"></a>（2）找到targetImageView的位置和宽高</h3><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initImageEnterAnimation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    mTargetImageView.getViewTreeObserver().addOnPreDrawListener(<span class=\"keyword\">new</span> ViewTreeObserver.OnPreDrawListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onPreDraw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一帧被绘制时，TargetImageView已经具有了实际的尺寸和位置，这是就应该开始播放动画。</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] finalLocationOnTheScreen = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">            mTargetImageView.getLocationOnScreen(finalLocationOnTheScreen);</span><br><span class=\"line\">            mTargetLeft = finalLocationOnTheScreen[<span class=\"number\">0</span>];</span><br><span class=\"line\">            mTargetTop = finalLocationOnTheScreen[<span class=\"number\">1</span>];</span><br><span class=\"line\">            mTargetWidth = mTargetImageView.getWidth();</span><br><span class=\"line\">            mTargetHeight = mTargetImageView.getHeight();</span><br><span class=\"line\">            playEnteringAnimation(mTargetLeft, mTargetTop, mTargetWidth, mTargetHeight);</span><br><span class=\"line\">            mTargetImageView.getViewTreeObserver().removeOnPreDrawListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（3）播放入场动画\"><a href=\"#（3）播放入场动画\" class=\"headerlink\" title=\"（3）播放入场动画\"></a>（3）播放入场动画</h3><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 属性动画走起，将sourceImageView变换到targetImageView</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">playEnteringAnimation</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> left, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> top, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> width, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.改变ImageView的位置、宽高</span></span><br><span class=\"line\">    PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(<span class=\"string\">\"left\"</span>, mSourceImageView.getLeft(), left);</span><br><span class=\"line\">    PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(<span class=\"string\">\"top\"</span>, mSourceImageView.getTop(), top);</span><br><span class=\"line\">    PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(<span class=\"string\">\"right\"</span>, mSourceImageView.getRight(), left + width);</span><br><span class=\"line\">    PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(<span class=\"string\">\"bottom\"</span>, mSourceImageView.getBottom(), top + height);</span><br><span class=\"line\"></span><br><span class=\"line\">    ObjectAnimator positionAnimator = ObjectAnimator.ofPropertyValuesHolder(mSourceImageView,</span><br><span class=\"line\">            propertyLeft, propertyTop, propertyRight, propertyBottom);</span><br><span class=\"line\">    positionAnimator.addListener(<span class=\"keyword\">new</span> Animator.AnimatorListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 为了退出动画，需要把sourceImageView的LayoutParams改成targetImageView</span></span><br><span class=\"line\">            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mSourceImageView.getLayoutParams();</span><br><span class=\"line\">            layoutParams.height = height;</span><br><span class=\"line\">            layoutParams.width = width;</span><br><span class=\"line\">            layoutParams.setMargins(left, top, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationRepeat</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2.ImageView的矩阵动画</span></span><br><span class=\"line\">    Matrix initMatrix = getImageMatrix(mSourceImageView);</span><br><span class=\"line\">    initMatrix.getValues(mInitImageMatrixValues);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Matrix endMatrix = getImageMatrix(mTargetImageView);</span><br><span class=\"line\">    mSourceImageView.setScaleType(ImageView.ScaleType.MATRIX);</span><br><span class=\"line\">    <span class=\"comment\">// ofObject()用法：传入自定义Property和Evaluator的用法</span></span><br><span class=\"line\">    ObjectAnimator matrixAnimator = ObjectAnimator.ofObject(mSourceImageView, ANIMATED_TRANSFORM_PROPERTY, <span class=\"keyword\">new</span> MatrixEvaluator(), initMatrix, endMatrix);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3.顺便加个渐变动画</span></span><br><span class=\"line\">    ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">0.0</span>f, <span class=\"number\">1.0</span>f);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4.一起播放上面的动画</span></span><br><span class=\"line\">    mEnteringAnimation = <span class=\"keyword\">new</span> AnimatorSet();</span><br><span class=\"line\">    mEnteringAnimation.setDuration(IMAGE_TRANSLATION_DURATION);</span><br><span class=\"line\">    mEnteringAnimation.setInterpolator(DEFAULT_INTERPOLATOR);</span><br><span class=\"line\">    mEnteringAnimation.addListener(<span class=\"keyword\">new</span> Animator.AnimatorListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\">            mEnteringAnimation = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationRepeat</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mEnteringAnimation != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mEnteringAnimation = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                mTargetImageView.setVisibility(View.VISIBLE);</span><br><span class=\"line\">                mSourceImageView.setVisibility(View.INVISIBLE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    mEnteringAnimation.playTogether(positionAnimator, matrixAnimator, fadeInAnimator);</span><br><span class=\"line\">    mEnteringAnimation.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（4）2个关键的入场动画的说明\"><a href=\"#（4）2个关键的入场动画的说明\" class=\"headerlink\" title=\"（4）2个关键的入场动画的说明\"></a>（4）2个关键的入场动画的说明</h3><p>在（3）中，用到下面两个关键的动画：</p>\n<ul>\n<li><p>ObjectAnimator - positionAnimator：改变sourceImageView的top、left、right、bottom属性，动画的起始值就是sourceImageView的这4个属性，结束值就是targetImageView的这4个属性。</p>\n</li>\n<li><p>ObjectAnimator - matrixAnimator：通过改变sourceImageView的Matrix，来改变其中显示的图片（drawable）的Bounds，从而使ImageView呈现出渐变效果。</p>\n</li>\n</ul>\n<p>介绍这两个关键动画的实现细节之前，需要具备属性动画的基础知识。如果不熟悉的话，建议先看下这几篇博客，里面详细地介绍了属性动画的各种用法。</p>\n<ul>\n<li><p><a href=\"http://blog.csdn.net/harvic880925/article/details/50525521\" target=\"_blank\" rel=\"noopener\">ValueAnimator基本使用</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/harvic880925/article/details/50546884\" target=\"_blank\" rel=\"noopener\">ValueAnimator高级进阶（一）</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/harvic880925/article/details/50549385\" target=\"_blank\" rel=\"noopener\">ValueAnimator高级进阶（二）</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/harvic880925/article/details/50598322\" target=\"_blank\" rel=\"noopener\">ObjectAnimator基本使用</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/harvic880925/article/details/50752838\" target=\"_blank\" rel=\"noopener\">PropertyValuesHolder与Keyframe</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/harvic880925/article/details/50759059\" target=\"_blank\" rel=\"noopener\">联合动画的代码实现</a></p>\n</li>\n</ul>\n<hr>\n<p>下面介绍这两个关键的动画实现</p>\n<h4 style=\"color:#ff0000\">关键动画之 ObjectAnimator - positionAnimator 实现：改变ImageView的位置和大小</h4>\n\n<p>我们知道，设置一个动画，就要给它设置起始值和结束值。所以我们的positionAnimator就需要设置sourceImageView的left、top、right、bottom这4个属性起始值和结束值。在动画执行的过程中，就可以渐渐地改变sourceImageView的这4个属性了。</p>\n<p>下面这行代码</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">PropertyValuesHolder propertyLeft</span> = PropertyValuesHolder.ofInt(<span class=\"string\">\"left\"</span>, mSourceImageView.getLeft(), left);</span><br></pre></td></tr></table></figure>\n<p>用<strong>PropertyValuesHolder</strong>可以给sourceImageView的left属性设置了起始值、结束值。</p>\n<p>对于left属性，起始值就是sourceImageView的left值，我们已经从第一个Activity传过来了。<br>而left属性的结束值，我们可以从targetImageView的left属性值。<br>其他的top、right、bottom属性也是一样的道理。</p>\n<blockquote>\n<p>需要需要特别注意的一点就是targetImageView的宽高获取方法，我们都知道获取一个View的宽高必须要等它绘制完了，而<strong>targetImageView不会在setContentView之后立刻绘制完成</strong>。<br>因此我们需要监听targetImageView的绘制状态，也就是监听<strong>ViewTreeObserver</strong>的各种回调，这里我们要监听的是<strong>OnPreDrawListener</strong>。<br>关于ViewTreeObserver，可以参考<a href=\"http://souly.cn/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/2015/11/16/viewTreeObserver%E8%A7%A3%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">《Viewtreeobserver解析》</a>这篇文章学习一下。</p>\n</blockquote>\n<h4 style=\"color:#ff0000\">关键动画之ObjectAnimator - matrixAnimator实现：使ImageView展示的图片呈现渐变效果</h4>\n\n<p>这里的数值计算比positionAnimator要复杂一点。</p>\n<p>首先我们要<strong>自定义一个计算器MatrixEvaluator</strong>，它的作用是返回动画执行过程中的Matrix，然后再使用这个Matrix去改变sourceImageView的Matrix属性。</p>\n<p>这个自定义计算器evaluate方法非常简单，就是根据起始Matrix（startMatrix）和结束Matrix（endMatrix）之间的差值diff，然后乘以当前<strong>加速器</strong>返回的动画的<strong>数值</strong>进度即可得到当前实时的Matrix值。</p>\n<p>下面看它的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MatrixEvaluator</span> <span class=\"keyword\">implements</span> <span class=\"title\">TypeEvaluator</span>&lt;<span class=\"title\">Matrix</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TypeEvaluator&lt;Matrix&gt; NULL_MATRIX_EVALUATOR = <span class=\"keyword\">new</span> TypeEvaluator&lt;Matrix&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Matrix <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Matrix startValue, Matrix endValue)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">float</span>[] mTempStartValues = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">9</span>];</span><br><span class=\"line\">        <span class=\"keyword\">float</span>[] mTempEndValues = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">9</span>];</span><br><span class=\"line\">        Matrix mTempMatrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Matrix <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Matrix startValue, Matrix endValue)</span> </span>&#123;</span><br><span class=\"line\">            startValue.getValues(mTempStartValues);</span><br><span class=\"line\">            endValue.getValues(mTempEndValues);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">float</span> diff = mTempEndValues[i] - mTempStartValues[i];</span><br><span class=\"line\">                <span class=\"comment\">// fraction是加速器中的返回值，表示当前动画的“数值”进度。我们用的是Android SDK中提供的AccelerateDecelerateInterpolator。</span></span><br><span class=\"line\">                mTempEndValues[i] = mTempStartValues[i] + (fraction * diff); </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mTempMatrix.setValues(mTempEndValues);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mTempMatrix;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>有了这个计算器，得到动画执行过程中的Matrix值，怎么动态地赋给sourceImageView呢？</p>\n<p>我们知道，在普通的<code>ObjectAnimator#ofFloat(Object target, String propertyName, float... values)</code>方法中，当Evaluator接收到最后一个可变长参数values后，可以得到起始值和结束值后。然后在<strong>evaluate</strong>方法中计算出动画执行过程的应该赋予的属性的值，然后调用目标对象（这里就是我们的ImageView）的setter方法把这个值赋给目标对象。</p>\n<blockquote>\n<p>例如这句代码，<code>ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, &quot;alpha&quot;, 0.0f, 1.0f);</code>其实就是在计算出了动画过程中每一个时刻的alpha值，然后再调用mContainer的setAlpha(float alpha)方法去改变mContainer的透明度。</p>\n</blockquote>\n<p>但是要改变sourceImageView的Matrix值，我们需要调用<strong>ImageView#animateTransform()</strong>这个方法，这个方法在Android SDK中属于隐藏API，其代码片段所示：</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ImageView#animateTransform()源代码</span></span><br><span class=\"line\"><span class=\"comment\">/** @hide */</span></span><br><span class=\"line\">public void animateTransform(<span class=\"keyword\">Matrix</span> <span class=\"keyword\">matrix</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mDrawable == <span class=\"built_in\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">matrix</span> == <span class=\"built_in\">null</span>) &#123;</span><br><span class=\"line\">            mDrawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, getWidth(), getHeight());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            mDrawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mDrawableWidth, mDrawableHeight);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mDrawMatrix == <span class=\"built_in\">null</span>) &#123;</span><br><span class=\"line\">                mDrawMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">Matrix</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mDrawMatrix.set(<span class=\"keyword\">matrix</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        invalidate();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>而且这个方法的名字也不叫<strong>setXXX</strong>，所以我们没法调用像<code>ofFloat</code>这样的方法去改变sourceImageView的Matrix。</p>\n<p>这时候需要采用自定义Property，并且实现它的<strong>set</strong>方法，自定义Property代码如下：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Property&lt;ImageView, Matrix&gt; ANIMATED_TRANSFORM_PROPERTY = <span class=\"keyword\">new</span> Property&lt;ImageView, Matrix&gt;(Matrix.class, <span class=\"string\">\"animatedTransform\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(ImageView imageView, Matrix matrix)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里模仿了SDK源码中ImageView#animateTransform的实现</span></span><br><span class=\"line\">            Drawable drawable = imageView.getDrawable();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (drawable == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (matrix == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                drawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, imageView.getWidth(), imageView.getHeight());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                drawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());</span><br><span class=\"line\">                Matrix drawMatrix = imageView.getImageMatrix();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (drawMatrix == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    drawMatrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">                    imageView.setImageMatrix(drawMatrix);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                imageView.setImageMatrix(matrix);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            imageView.invalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\">Matrix <span class=\"title\">get</span><span class=\"params\">(ImageView object)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<p>自定义一个Property必须要实现里面的get方法，但是在我们的这里例子中，get方法不会被调用。</p>\n<p>因为在属性动画中，只有当你传入的可变长参数values（也就是起始值、中间值1、中间值2. … 结束值）长度为1，也就是说你只传了一个值的时候，才会对我们的target调用getter方法去获取初始值。所以这里我们是不需要getter方法的。</p>\n<p>自定义Property完成后，通过<code>ObjectAnimator#ofObject(T target, Property&lt;T, V&gt; property, TypeEvaluator&lt;V&gt; evaluator, V... values)</code> 方法，就可以把计算器计算出的动画执行过程中的Matrix值，通过自定义Property中的set方法，赋给当前的目标对象，即sourceImageView！从而使得sourceImageView呈现出渐变效果。</p>\n<blockquote>\n<p>这里的实现是来自这位大神的博客<a href=\"https://medium.com/@v.danylo/implementing-imageview-transition-between-activities-for-pre-lollipop-devices-8b24bc387a2a#.7c6qxvf59\" target=\"_blank\" rel=\"noopener\">Implementing ImageView transition between activities for pre-Lollipop devices</a>。<br>我们首先感谢这位大神的分享！这位大神在文中也提到，用动画来实现图片的渐进式改变，起实来自于我们Android SDK中的隐藏API——<strong>ImageView#animateTransform</strong>。</p>\n</blockquote>\n<h2 id=\"2-退场-1\"><a href=\"#2-退场-1\" class=\"headerlink\" title=\"2.退场\"></a>2.退场</h2><p>退场动画完全是入场动画的逆操作，直接看代码。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 图片退出的转场动画：完全是和之前相反的过程</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">playExitAnimations</span><span class=\"params\">(<span class=\"keyword\">int</span> sourceImageViewLeft, <span class=\"keyword\">int</span> sourceImageViewTop, <span class=\"keyword\">int</span> sourceImageViewWidth, <span class=\"keyword\">int</span> sourceImageViewHeight, <span class=\"keyword\">float</span>[] imageMatrixValues)</span> </span>&#123;</span><br><span class=\"line\">    mSourceImageView.setVisibility(View.VISIBLE);</span><br><span class=\"line\">    mTargetImageView.setVisibility(View.INVISIBLE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 改变SourceView的位置、宽高属性。这里每个属性的起始值和结束值和入场时刚好相反。</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] locationOnScreen = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    mSourceImageView.getLocationOnScreen(locationOnScreen);</span><br><span class=\"line\">    PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(<span class=\"string\">\"left\"</span>, locationOnScreen[<span class=\"number\">0</span>], sourceImageViewLeft);</span><br><span class=\"line\">    PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(<span class=\"string\">\"top\"</span>, locationOnScreen[<span class=\"number\">1</span>], sourceImageViewTop);</span><br><span class=\"line\">    PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(<span class=\"string\">\"right\"</span>, locationOnScreen[<span class=\"number\">0</span>] + mSourceImageView.getWidth(), sourceImageViewLeft + sourceImageViewWidth);</span><br><span class=\"line\">    PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(<span class=\"string\">\"bottom\"</span>, mSourceImageView.getBottom(), sourceImageViewTop + sourceImageViewHeight);</span><br><span class=\"line\">    ObjectAnimator positionAnimator = ObjectAnimator.ofPropertyValuesHolder(mSourceImageView, propertyLeft, propertyTop, propertyRight, propertyBottom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ImageView的矩阵动画</span></span><br><span class=\"line\">    Matrix initialMatrix = getImageMatrix(mSourceImageView);</span><br><span class=\"line\"></span><br><span class=\"line\">    Matrix endMatrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">    endMatrix.setValues(imageMatrixValues);</span><br><span class=\"line\">    mSourceImageView.setScaleType(ImageView.ScaleType.MATRIX);</span><br><span class=\"line\">    <span class=\"comment\">// 这里Matrix的起始值和结束值和入场时也刚好相反。</span></span><br><span class=\"line\">    ObjectAnimator matrixAnimator = ObjectAnimator.ofObject(mSourceImageView, ANIMATED_TRANSFORM_PROPERTY, <span class=\"keyword\">new</span> MatrixEvaluator(), initialMatrix, endMatrix);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 渐变动画</span></span><br><span class=\"line\">    ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">1.0</span>f, <span class=\"number\">0.0</span>f);</span><br><span class=\"line\"></span><br><span class=\"line\">    mExitingAnimation = <span class=\"keyword\">new</span> AnimatorSet();</span><br><span class=\"line\">    mExitingAnimation.setDuration(IMAGE_TRANSLATION_DURATION);</span><br><span class=\"line\">    mExitingAnimation.setInterpolator(<span class=\"keyword\">new</span> AccelerateInterpolator());</span><br><span class=\"line\">    mExitingAnimation.addListener(<span class=\"keyword\">new</span> Animator.AnimatorListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mExitingAnimation != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mExitingAnimation = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 关闭第二个界面</span></span><br><span class=\"line\">            Activity activity = (Activity) mSourceImageView.getContext();</span><br><span class=\"line\">            activity.finish();</span><br><span class=\"line\">            activity.overridePendingTransition(<span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">// 同样去掉默认的转场动画</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onAnimationRepeat</span><span class=\"params\">(Animator animation)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    mExitingAnimation.playTogether(positionAnimator, matrixAnimator, fadeInAnimator);</span><br><span class=\"line\">    mExitingAnimation.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"四、涉及到的知识点\"><a href=\"#四、涉及到的知识点\" class=\"headerlink\" title=\"四、涉及到的知识点\"></a>四、涉及到的知识点</h1><p>我认为实现demo里面的效果需要了解下面的知识点，如果不熟悉的话，建议先看一下上一章推荐的属性动画讲解的几篇博客。</p>\n<h2 id=\"1-ImageView的ScaleType\"><a href=\"#1-ImageView的ScaleType\" class=\"headerlink\" title=\"1.ImageView的ScaleType\"></a>1.ImageView的ScaleType</h2><p>不管将ScaleType设为多少，bitmap始终都是一个。如果在Android Studio打开debug模式来查看bitmap实际的图片，用一个ImageView去展示一张图片，不管你怎么改变ScaleType，其实里面的图片对象都是一样的。</p>\n<h2 id=\"2-属性动画之插值器-Interpolator\"><a href=\"#2-属性动画之插值器-Interpolator\" class=\"headerlink\" title=\"2.属性动画之插值器 - Interpolator\"></a>2.属性动画之插值器 - Interpolator</h2><p>控制动画数值进度的转换器，我们给动画是指一个duration之后，插值器负责把动画的<strong>自然</strong>进度转成<strong>数值</strong>进度。自然进度就是指随着时间匀速增长的值。</p>\n<p>所有的插值器都实现了<strong>TimeInterpolator接口里面的public float getInterpolation(float input)</strong>方法，input就是随时间流逝的自然进度，在这个方法中根据实际需求，用input计算出实际数字，作为数值进度返回。</p>\n<h2 id=\"3-属性动画之计算器-TypeEvaluator\"><a href=\"#3-属性动画之计算器-TypeEvaluator\" class=\"headerlink\" title=\"3.属性动画之计算器 - TypeEvaluator\"></a>3.属性动画之计算器 - TypeEvaluator</h2><p>计算器就是计算动画执行过程中，目标对象的某个属性的数值。</p>\n<p>TypeEvaluator接口中有一个<strong>public T evaluate(float fraction, T startValue, T endValue)</strong>方法，fraction就是插值器返回的数值进度，而startValue就是对象的某一个属性的起始值，endValue是这个属性的结束值。</p>\n<p>这里利用的是泛型编程，我们可以把属性的起始、结束值看成一个Type。传入自己定义的任何Type后，在evaluate方法中，计算出当前应该改变<strong>对象</strong>的<strong>属性</strong>的具体Type值。再调用这个对象的setter方法，将Type值赋给这个对象。</p>\n<p>很多时候，我们不会像这个demo中自定义Property，然后把它set给一个系统封装好的ImageView。我们很可能会有一个自定义的CustomView，然后在这个CustomView中提供一个setXXX方法。这样也可以在自定义的计算器中实现CustomView的属性动态改变。</p>\n<h2 id=\"4-属性动画之中的ObjectAnimator和ValueAnimator的区别\"><a href=\"#4-属性动画之中的ObjectAnimator和ValueAnimator的区别\" class=\"headerlink\" title=\"4.属性动画之中的ObjectAnimator和ValueAnimator的区别\"></a>4.属性动画之中的ObjectAnimator和ValueAnimator的区别</h2><p>ObjectAnimator是ValueAnimator的子类，ValueAnimator只负责计算动画过程中，目标对象（一般是一个View或者其他UI元素）属性的值，但是需要我们自己监听动画的update状态，再把监听到的值set给目标对象的属性。</p>\n<p>ObjectAnimator除了可以计算动画过程中的属性值外，还可以调用目标对象的setter方法，改变这个属性的值。所以它的功能比ValueAnimator要强大。</p>\n<h2 id=\"4-属性动画之PropertyValuesHolder用法\"><a href=\"#4-属性动画之PropertyValuesHolder用法\" class=\"headerlink\" title=\"4.属性动画之PropertyValuesHolder用法\"></a>4.属性动画之PropertyValuesHolder用法</h2><p>一般直接使用<code>ObjectAnimator ofFloat(Object target, String propertyName, float... values)</code>只能改变目标对象的一个属性值。</p>\n<p>如果我们想要改一个目标对象的的多个属性时，可以先使用<code>PropertyValuesHolder ofInt(String propertyName, int... values)</code>创建PropertyValuesHolder。</p>\n<p>然后再用<code>ObjectAnimator ofPropertyValuesHolder(Object target, PropertyValuesHolder... values)</code>创建出改变多个属性的属性动画对象ObjectAnimator。</p>\n<h2 id=\"5-如何向ContentView中动态添加View\"><a href=\"#5-如何向ContentView中动态添加View\" class=\"headerlink\" title=\"5.如何向ContentView中动态添加View\"></a>5.如何向ContentView中动态添加View</h2><p>首先要从当前的Activity中获得根视图：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">getWindow</span>()<span class=\"selector-class\">.getDecorView</span>()<span class=\"selector-class\">.findViewById</span>(<span class=\"selector-tag\">android</span><span class=\"selector-class\">.R</span><span class=\"selector-class\">.id</span><span class=\"selector-class\">.content</span>);</span><br></pre></td></tr></table></figure>\n<p>这是个FrameLayout，然后我们就可以用java代码动态向它里面添加sourceImageView了。</p>\n<p>关于DecorView再多说两句，它是Activity界面的根View，继承自FrameLayout。在它里面又是一个LinearLayout，在这个LinearLayout里面又包含了<strong>id为@android:id/title_container</strong>的标题栏，和一个<strong>id为@android:id/content</strong>的ContentView，结构大概是下面这个样子的：</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"ruby\"> DecorView</span></span><br><span class=\"line\"><span class=\"ruby\">    - LinearLayout</span></span><br><span class=\"line\"><span class=\"ruby\">        - ...</span></span><br><span class=\"line\"><span class=\"ruby\">        - FrameLayout：<span class=\"symbol\">android:</span>id/title_container</span></span><br><span class=\"line\"><span class=\"ruby\">        - FrameLayout：@android<span class=\"symbol\">:id/content</span></span></span><br></pre></td></tr></table></figure>\n<p>当我们在onCreate方法中调用Activity#setContentView()时，会把我们自己写的布局添加到这个ContentView中去。</p>\n<h1 id=\"五、Android-5-0上的实现方法\"><a href=\"#五、Android-5-0上的实现方法\" class=\"headerlink\" title=\"五、Android 5.0上的实现方法\"></a>五、Android 5.0上的实现方法</h1><p>下面是在Android 5.0以上一种示例，非常简单，只需要几行代码就可实现：</p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个Activity，利用ActivityOptions创建SceneTransitionAnimation</span></span><br><span class=\"line\">private void transitionOnAndroidL() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把需要共享的元素-ImageView，传给第二个界面</span></span><br><span class=\"line\">    <span class=\"type\">Intent</span> intent = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">Intent</span>(<span class=\"type\">MainActivity</span>.this, <span class=\"type\">DetailActivityLollipop</span>.class);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 一定要传入shareElementName</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">String</span> <span class=\"title\">shareElementName</span> = \"<span class=\"title\">sharedImageView</span>\";</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">ActivityOptions</span> <span class=\"title\">activityOptions</span> = <span class=\"title\">ActivityOptions</span>.<span class=\"title\">makeSceneTransitionAnimation</span>(this, mImageView, shareElementName);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">getWindow</span>().<span class=\"title\">setSharedElementEnterTransition</span>(new <span class=\"type\">ChangeImageTransform</span>(this, null));</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">intent</span>.<span class=\"title\">putExtra</span>(<span class=\"type\">DetailActivityLollipop</span>.<span class=\"type\">SHARED_ELEMENT_KEY</span>, shareElementName);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">intent</span>.<span class=\"title\">putExtra</span>(<span class=\"type\">DetailActivityLollipop</span>.<span class=\"type\">IMAGE_RES_ID</span>, mImageResId);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 打开它</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">startActivity</span>(intent, activityOptions.toBundle());</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 第二个Activity，取出shareElementName，再调用ViewCompat#setTransitionName</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">private</span> <span class=\"title\">void</span> <span class=\"title\">initImageEnterTransition</span>() &#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">imageView</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">VISIBLE</span>);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">String</span> <span class=\"title\">imageTransitionName</span> = <span class=\"title\">getIntent</span>().<span class=\"title\">getStringExtra</span>(<span class=\"type\">SHARED_ELEMENT_KEY</span>);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">ViewCompat</span>.<span class=\"title\">setTransitionName</span>(imageView, imageTransitionName);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">View</span> <span class=\"title\">mainContainer</span> = <span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.activityContanierDetail);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">mainContainer</span>.<span class=\"title\">setAlpha</span>(<span class=\"number\">1.0</span>f);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">int</span> <span class=\"title\">resId</span> = <span class=\"title\">getIntent</span>().<span class=\"title\">getExtras</span>().<span class=\"title\">getInt</span>(<span class=\"type\">IMAGE_RES_ID</span>);</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">imageView</span>.<span class=\"title\">setImageResource</span>(resId);</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>官方介绍的<a href=\"https://developer.android.com/training/material/animations.html#Transitions\" target=\"_blank\" rel=\"noopener\">Transitions</a>中用xml也可以实现。另外，还有多个元素的转场动画效果，这里就不详细说了，如果有需要，也可以参考下这篇文章——<a href=\"https://guides.codepath.com/android/Shared-Element-Activity-Transition\" target=\"_blank\" rel=\"noopener\">Shared Element Activity Transition</a>。</p>\n<h1 id=\"六、其他实现方法\"><a href=\"#六、其他实现方法\" class=\"headerlink\" title=\"六、其他实现方法\"></a>六、其他实现方法</h1><p>在我的demo中只演示了核心的View转场实现，没有和其他的稍微复杂一些的需求相结合。网上还有很多关于这种效果实现的分享，也有应用到一些更复杂场景，下面推荐出来一起多多学习。</p>\n<p>文章推荐：</p>\n<ul>\n<li><p><a href=\"http://wl9739.github.io/2016/10/16/Android-%E4%B8%AD%E7%9A%84%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%E5%8F%8A%E5%85%BC%E5%AE%B9%E5%A4%84%E7%90%86/\" target=\"_blank\" rel=\"noopener\">Android中的转场动画及兼容处理</a></p>\n</li>\n<li><p><a href=\"http://www.jianshu.com/p/340c938e9f32\" target=\"_blank\" rel=\"noopener\">Android共享元素转场动画兼容实践</a></p>\n</li>\n<li><p><a href=\"http://immortalz.me/859.html\" target=\"_blank\" rel=\"noopener\">两步实现类似格瓦拉的转场动画</a></p>\n</li>\n<li><p><a href=\"https://guides.codepath.com/android/Shared-Element-Activity-Transition\" target=\"_blank\" rel=\"noopener\">Shared Element Activity Transition</a>：详细介绍了5.0以上的各种共享元素转场效果。</p>\n</li>\n</ul>\n<p>开源Library推荐：</p>\n<ul>\n<li><p><a href=\"https://github.com/takahirom/PreLollipopTransition\" target=\"_blank\" rel=\"noopener\">PreLollipopTransition</a></p>\n</li>\n<li><p><a href=\"https://github.com/vikramkakkar/ImageTransition\" target=\"_blank\" rel=\"noopener\">ImageTransition</a></p>\n</li>\n<li><p><a href=\"https://github.com/alexvasilkov/GestureViews\" target=\"_blank\" rel=\"noopener\">GestureViews</a>：手势操作库，其demo本身就实现了一个类似的转场的动画效果。</p>\n</li>\n</ul>"},{"layout":"post","title":"自定义Android Gradle插件","date":"2015-11-17T00:00:00.000Z","_content":"\n上一篇博客介绍到[Gradle实践之自定义打包jar+Log开关自动关闭](http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/)。可以自己定义打包的jar已经不错了，但是还是不够爽，怎么办？自己写一个Plugin！会用轮子，也要会造轮子是不是，我们经常使用到的`com.android.library`和`com.android.application`都是Google给我们提供的Gradle插件，里面已经实现了大部分App开发者所需要的功能。Github上面也已经有很多gradle插件，但是如果我们是程序猿，我们总是可以有需求是人家的Plugin无法满足的，那好吧，我们自己写个插件。\n\n<!-- more -->\n\n# 准备工作\n\n## 开发环境（以Win7为例）\n\n* IDE开发环境：我这篇例子就用Android Stuido来写的，使用AS写会有一点点的奇怪，因为AS默认新建的都是Android工程，可是！用它来写一个Gradle Plugin并没有任何问题！但实际上Gradle不仅仅可以给Android项目使用。所以我推荐大家去体验一下JetBrains家的Java IDE——[Intelligent Java IDE](https://www.jetbrains.com/idea/)。我们用的Android Studio就是基于这个开发的。\n\n* JDK：我这次用的是Windows系统，安装了1.8和1.7的JDK，等下写Gradle插件的时候会指定一个版本的JDK。至于指定哪个版本的JDK，会遇到什么问题，我会在后面提到。不过不管你使用什么版本的JDK，必须用交叉编译选项来编译我们的插件，以保证别人能在低版本的JDK上运行我们的插件。交叉编译选项我会在build.gradle文件中会特别标注一下。 **注意** ，JDK必须要安装，Groovy最后也要compile成Jar包。\n\n* Gradle：一般我们用Android Studio开发的时候都已经配置好了这个。我是让它翻墙自己下载的，下载后的目录都在C盘的Users目录下。例如我的`GRADLE_HOME`是`C:\\Users\\noughtchen\\.gradle\\wrapper\\dists\\gradle-2.4-all\\6r4uqcc6ovnq6ac6s0txzcpc0\\gradle-2.4`。为了确保你安装了Gradle并配置了环境变量，可以在命令行输入一句:\n\n```\ngradle -v\n```\n如果终端上显示了：\n\n```\nC:\\Users\\noughtchen>gradle -v\n\n------------------------------------------------------------\nGradle 2.4\n------------------------------------------------------------\n\nBuild time:   2015-05-05 08:09:24 UTC\nBuild number: none\nRevision:     5c9c3bc20ca1c281ac7972643f1e2d190f2c943c\n\nGroovy:       2.3.10\nAnt:          Apache Ant(TM) version 1.9.4 compiled on April 29 2014\nJVM:          1.7.0_80 (Oracle Corporation 24.80-b11)\nOS:           Windows 7 6.1 amd64\n\nC:\\Users\\noughtchen>\n```\n那就说明gradle是OK的。\n\n* Groovy SDK（可跳过）：这个类似于JDK，因为Gradle插件使用Groovy语言编写，所以我们也可以安装Groovy SDK。这里是官方的[安装教程](http://www.groovy-lang.org/install.html#_installation_on_windows)，非常简单。分为三步：\n\t* 下载一个[Binary Release](http://www.groovy-lang.org/install.html#download-groovy)版的zip包，解压到你本地的一个目录下，例如我本地是`D:\\mydev\\groovy-2.4.5`。\n\t* 添加名为`GROOVY_HOME`的环境变量，它的值为刚才的目录`D:\\mydev\\groovy-2.4.5`。\n\t* 然后将`GROOVY_HOME/bin`添加到系统的环境变量`Path`里，添加的值为`%GROOVY_HOME%\\bin`。\n\n## Groovy基础\n\n这里可以忽略，只要懂Java和一点基本Groovy语法就行，实际上我只是在打包我们SDK项目的时候自学了一点，另外参考了一下Google官方的Gradle插件就够了，实在不会的可以再去查看Gradle官方的Document。下面是几个可以学习的资源：\n\n* [http://tools.android.com/build/gradleplugin](http://tools.android.com/build/gradleplugin) 这里介绍了怎么从Google Checkout下来官方的Gradle插件源码，以及Android Studio的源码！开源万岁，真是碉堡，推荐大家看一下这个，这样就知道APK是怎么打包的了。\n* [https://docs.gradle.org/current/userguide/custom_plugins.html](https://docs.gradle.org/current/userguide/custom_plugins.html) Gradle官方的自定义插件文档，这篇是必看的，非常简单的HelloWorld例子。看完肯定还是不会写Gradle插件的，呵呵！\n\n# 自定义Gradle Plugin\n\n不废话了，下面进入正式的开发过程，这次我们在前面[Gradle实践之自定义打包jar+Log开关自动关闭](http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/)的基础上，把打包Jar、混淆Jar包的任务都丢到插件里，然后呢，我们这次自己写JavaCompile任务，这样一来，如果是做SDK开发的同学，实际上几乎就可以不用`com.android.library`插件了，当然我个人觉得吧，能不重复造轮子就不要重复造了，等下会大家看到这点的。\n\n## 1.新建一个Groovy工程\n\n如下图所示，我新建了一个名为`HelloGradlePlugin`的文件夹。\n\n![New a groovy folder](/content/images/new-a-plugin-folder.png)\n\n接着在文件夹里新建了一个名为`build.gradle`的文件，里面现在没有任何代码。\n\n![New a gradle file](/content/images/new-a-gradle-file.png)\n\n这里有点奇怪吗？是的，为啥不是用AS直接new一个project？前面说了，AS默认新建的只能选择Android Project，下面我们看看怎么使用这一步建立的文件夹。\n\n## 2.建立项目结构\n\n打开Android Studio，选择`File->Open`，打开刚才这个文件夹。如图所示：\n\n![Open the plugin project](/content/images/open-the-plugin.png)\n\n这时AS会提示我们是否使用本地的`Gradle Wrapper`，点击`yes`，AS会帮我们在`HelloGradlePlugin`文件夹下面自动生成对应的gradle文件夹和文件。\n\n![use-your-gradle-wrapper](/content/images/use-your-gradle-wrapper.png)\n\n这样，我们就算在AS中导入我们的Gradle Plugin工程了。下面我们建立项目结构。\n\n首先，在`src`文件夹下面分别建立`main/groovy/`文件夹和`resources/META-INF/gradle-plugins`。\n\n![create-folders](/content/images/create-folders.png)\n\n然后，在`src/main/resources/META-INF/gradle-plugins`文件夹下面新建一个`hello-world-plugin.properties`文件，这个文件的名字就是我们就是我们这个Gradle插件的名字(即`name`)，将来在其他项目中引用这个插件的时候，就需要指定为这个名字，在最后面会详细介绍这个`name`是怎么用的。\n\n接着需要在这个文件中添加一行代码。\n\n```\nimplementation-class = com.nought.gradle.plugin.HelloPlugin\n```\n\n意思是我们的插件名字叫`hello-world-plugin`，实现这个插件功能的类名为`HelloPlugin`。\n\n在实现`helloPlugin`这个类之前，我们先给这个Project添加一下依赖，因为我们最开始是通过新建文件夹的形式，然后在AS中导入这个项目，所以它还没有把groovy相关的包依赖进来。我们在项目名字上右键，选择`Open Module Settings`，然后添加Dependencies，如下图所示：\n\n![add-groovy-sdk](/content/images/add-groovy-sdk.png)\n\n最后，我们在`src/main/groovy`下面新建一个一个名为`com.nought.gradle.plugin`的package。\n\n![new-class-folder](/content/images/new-class-folder.png)\n\n并在这个包下建立名为`HelloPlugin`的类(右键`new file`->输入`HelloPlugin.groovy`)。\n\n下面开始写代码，我们通过自己定义一个插件，来实现前一篇博客里面的gradle打包功能，它可以把我们指定的java代码打包成jar包，并按照配置决定是否进行混淆，并输出到一个指定的文件夹中。\n\n## 3.实现Plugin接口\n\n定义了`HelloPlugin`类，我们要让它实现Plugin接口，并实现其中的`apply`方法。\n\n```\npackage com.nought.gradle.plugin\n\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\n\n\nclass HelloPlugin implements Plugin<Project> {\n    @Override\n    void apply(Project project) {\n\t...\n    }\n}\n\n```\n\n\n## 4.定义Extension\n\n首先，什么是Extension？\n\nExtension就是扩展属性，指的是你可以给你的project添加额外的gradle约定之外的其他properties属性。我们在Android项目里的`build.gradle`文件中通常使用的诸如下面这种代码：\n\n\n```\nandroid {\n    compileSdkVersion 22\n    buildToolsVersion \"22.0.1\"\n\t...\n}\n\n```\n\n就是在给Android插件的Extension的`compileSdkVersion`和`buildToolsVersion`赋值。我们自己写一个插件，也要实现同样的效果。只要在gradle文件里apply了我们的自定义的插件，我们就可以给自定义的插件赋予额外的属性，并在插件里用到它们，例如你打一个jar包时可以把输出文件存放地址传入进去等等。\n\nSo，新建一个名为`HelloPluginExtension`的类，表明这是`HelloPlugin`的扩展属性。并在这个类里面添加一些`String`类型的变量，如下所示：\n\n```\npackage com.nought.gradle.plugin\n\nclass HelloPluginExtension {\n    String javaSrcDir // java源码的目录\n    String classesOutDir // 编译输出的class文件目录\n\n    String outputFileDir // 输出的jar包目录\n    String outputFileName // 输出的jar包文件名\n\n    String androidJarDir\n    String javaBase\n    String javaRt\n\n    String proguardConfigFile\n}\n\n```\n很显然，其实你可输入任何Java语言中的变量类型。这些属性在apply我们的插件时，都可以在build.gradle脚本中传入。\n\n## 5.在Plugin中增加自定义的task\n\n刚才定义了Extension里面的一些属性，自定义Gradle Plugin的框架就基本是这样了，当然你要是只写一个 **helloworld** demo尝尝口味，那就没必要干下面的事情了。\n\n接下来我们要在`HelloPlugin`中用到这个属性，并增加一些实现了不同功能的tasks。\n\n本例子中，我们自定义的插件可以编译Java源代码，并把生成的class文件打包成jar，再根据需求决定是不是混淆它。下面直接上代码：\n\n```\npackage com.nought.gradle.plugin\n\nimport org.gradle.api.JavaVersion\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\nimport org.gradle.api.tasks.Copy\nimport org.gradle.api.tasks.bundling.Jar\nimport org.gradle.api.tasks.compile.JavaCompile\nimport proguard.gradle.ProGuardTask\n\nclass HelloPlugin implements Plugin<Project> {\n\n    static final String PLUGIN_NAME = \"helloPlugin\"\n\n    Project project\n    HelloPluginExtension extension\n\n    JavaCompile compileJavaSrc\n    Jar jarLib\n    ProGuardTask proguardLib\n    Copy copyLib\n\n    @Override\n    void apply(Project project) {\n        this.project = project\n        this.extension = project.extensions.create(PLUGIN_NAME, HelloPluginExtension)\n\n        project.afterEvaluate {\n            createSomeTasks()\n            // 如果是执行packageProguardJar任务，那么要提前关闭log开关\n            if ('packageProguardJar' in project.gradle.startParameter.taskNames) {\n                project.tasks.getByName(\"preBuild\").doFirst {\n                    enableLoggerDebug(false)\n                }\n            }\n        }\n    }\n\n    private void createSomeTasks() {\n        // Create a task to compile all java sources.\n        compileJavaSrc = project.tasks.create(\"compileJava\", JavaCompile);\n        compileJavaSrc.setDescription(\"编译java源代码\")\n        compileJavaSrc.source = extension.javaSrcDir\n        compileJavaSrc.include(\"com/nought/hellolib/**\")\n        compileJavaSrc.classpath = project.files([extension.androidJarDir + \"/android.jar\", extension.javaBase + \"/\" + extension.javaRt])\n        compileJavaSrc.destinationDir = project.file(extension.classesOutDir)\n        compileJavaSrc.sourceCompatibility = JavaVersion.VERSION_1_7\n        compileJavaSrc.targetCompatibility = JavaVersion.VERSION_1_7\n        compileJavaSrc.options.encoding = \"UTF-8\"\n        compileJavaSrc.options.debug = false\n        compileJavaSrc.options.verbose = false\n\n        // Create a task to jar the classes.\n        jarLib = project.tasks.create(\"jarLib\", Jar);\n        jarLib.setDescription(\"将class文件打包成jar\")\n        jarLib.dependsOn compileJavaSrc\n        jarLib.archiveName = \"helloLib.jar\"\n        jarLib.from(extension.classesOutDir)\n        jarLib.destinationDir = project.file(extension.outputFileDir)\n        jarLib.exclude(\"com/nought/hellolib/BuildConfig.class\")\n        jarLib.exclude(\"com/nought/hellolib/BuildConfig\\$*.class\")\n        jarLib.exclude(\"**/R.class\")\n        jarLib.exclude(\"**/R\\$*.class\")\n        jarLib.include(\"com/nought/hellolib/*.class\")\n\n        // Create a task to proguard the jar.\n        proguardLib = project.tasks.create(\"proguardLib\", ProGuardTask);\n        proguardLib.setDescription(\"混淆jar包\")\n        proguardLib.dependsOn jarLib\n        proguardLib.injars(extension.outputFileDir + \"/\" + \"helloLib.jar\")\n        proguardLib.outjars(extension.outputFileDir + \"/\" + extension.outputFileName)\n        proguardLib.libraryjars(extension.androidJarDir + \"/android.jar\")\n        proguardLib.libraryjars(extension.javaBase + \"/\" + extension.javaRt)\n        proguardLib.configuration(extension.proguardConfigFile)\n        proguardLib.printmapping(extension.outputFileDir + \"/\" + \"helloLib.mapping\")\n\n        // Create a task to copy the jar.\n        copyLib = project.tasks.create(\"copyLib\", Copy);\n        copyLib.setDescription(\"不混淆，仅拷贝jar包\")\n        copyLib.dependsOn jarLib\n        copyLib.from(extension.outputFileDir)\n        copyLib.into(extension.outputFileDir)\n        copyLib.include(\"helloLib.jar\")\n        copyLib.rename(\"helloLib.jar\", extension.outputFileName)\n\n        def packageProguardJar = project.tasks.create(\"packageProguardJar\");\n        packageProguardJar.setDescription(\"打包混淆、关闭log开关的hello lib\")\n        // packageProguardJar任务作为一个钩子，依赖真正执行工作的proguardLib\n        packageProguardJar.dependsOn proguardLib\n        // 最后把log开关置回原来开发时的状态\n        packageProguardJar.doLast {\n            enableLoggerDebug(true)\n        }\n\n        def packageNoProguardJar = project.tasks.create(\"packageNoProguardJar\");\n        packageNoProguardJar.setDescription(\"打包不混淆、开启log开关的hello lib\")\n        // packageNoProguardJar任务作为一个钩子，依赖真正执行工作的copyLib\n        packageNoProguardJar.dependsOn copyLib\n    }\n\n\n    // 开启/关闭Log开关\n    def enableLoggerDebug(boolean flag) {\n        def loggerFilePath = \"src/main/java/com/nought/hellolib/UncleNought.java\"\n        def updatedDebug = new File(loggerFilePath).getText('UTF-8')\n                .replaceAll(\"ENABLE_DEBUG\\\\s?=\\\\s?\" + (!flag).toString(), \"ENABLE_DEBUG = \" + flag.toString())\n        new File(loggerFilePath).write(updatedDebug, 'UTF-8')\n        println(flag ? 'ENABLE_DEBUG : [true]' : 'ENABLE_DEBUG : [false]')\n    }\n}\n\n```\n\n代码不多，其实就是创建了4个task，彼此之间有依赖，最后再创建两个钩子任务，他们不做实际的工作，只是通过钩子任务去依赖真正实现了功能的task。大家如果看过Android Gradle Plugin的实现，就知道assembleXXX任务就是这么干的。\n\n## 6.发布插件\n\n为了让其他的项目能引用这个打包插件，需要将这个插件发布出去，我们在插件项目的根目录下的`build.gradle`文件。添加下面的代码：\n\n```\napply plugin: 'groovy'\napply plugin: 'maven'\n\nversion = '1.0.0'\ngroup = 'com.nought.gradle.plugin'\narchivesBaseName = 'hello-gradle-plugin'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile gradleApi()\n    compile localGroovy()\n    compile files('libs/proguard.jar')\n}\n\n// 一定要记得使用交叉编译选项，因为我们可能用很高的JDK版本编译，为了让安装了低版本的同学能用上我们写的插件，必须设定source和target\ncompileGroovy {\n    sourceCompatibility = 1.7\n    targetCompatibility = 1.7\n    options.encoding = \"UTF-8\"\n}\n\nuploadArchives {\n    repositories.mavenDeployer {\n// 如果你公司或者自己搭了nexus私服，那么可以将插件deploy到上面去\n//        repository(url: \"http://10.XXX.XXX.XXX:8080/nexus/content/repositories/releases/\") {\n//            authentication(userName: \"admin\", password: \"admin\")\n//        }\n// 如果没有私服的话，发布到本地也是ok的\n        repository(url: 'file:release/libs')\n    }\n}\n\n```\n\n上面的代码就是通过`groovy`插件编译打包我们的插件代码，并通过`maven`插件publish到指定的服务器。我们为了调试，先将插件发布到本地的`release/libs`文件夹下面就行。\n\n## 7.在自己项目中应用写好的插件\n\n现在假设我们把刚才的插件打包，发布到了`release/libs`下面。这时属于本地的发布和引用，我们可以将这个libs下面的文件夹全部拷贝到自己的Android项目根目录的`libs`下面去，一般可能Android项目下的根目录中没有这个文件夹，那么我们就新建一个`libs`，再把gradle插件的文件夹全部丢进去。以前一篇博客的Android工程为例。\n\n首先在项目根目录的`build.gradle`文件中按照下面的方式引用：\n\n```\nbuildscript {\n    repositories {\n        jcenter()\n        maven {\n// 假如你有私服可以用的话，可以引用私服\n// url 'http://10.XXX.XXX.XXX:8080/nexus/content/repositories/releases/'\n// 没有的话，就本地引入\n            url 'libs'\n        }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.3.0'\n\t\t// 自定义的插件以 groupId:name:版本号 的方式引用，这个name来自插件工程下的hello-world-plugin.properties文件名\n        classpath 'com.nought.gradle.plugin:hello-gradle-plugin:1.0.0'\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        maven {\n// 假如你有私服可以用的话，可以引用私服\n// url 'http://10.XXX.XXX.XXX:8080/nexus/content/repositories/releases/'\n// 没有的话，就本地引入，这里是给subProject设置，和上面类似\n            url 'libs'\n        }\n    }\n}\n\n\n```\n\n然后在需要使用自定义插件的Module中apply这个插件。并将该自定义插件的Extension传入进去，如下所示：\n\n```\napply plugin: 'com.android.library'\napply plugin: 'hello-gradle-plugin'\n\nandroid {\n    compileSdkVersion 22\n    buildToolsVersion \"22.0.1\"\n\n    defaultConfig {\n        minSdkVersion 14\n        targetSdkVersion 22\n        versionCode 1\n        versionName \"1.0\"\n    }\n    buildTypes {\n        release {\n            buildConfigField \"boolean\", \"ENABLE_DEBUG\", \"false\"\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n        debug {\n            buildConfigField \"boolean\", \"ENABLE_DEBUG\", \"true\"\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n}\n\nhelloPlugin {\n    javaSrcDir = 'src/main/java'\n    classesOutDir = 'build/out_classes'\n\n    outputFileDir = 'release'\n    outputFileName = 'helloLib-release.jar'\n\n    // Android SDK Dir\n    androidJarDir = android.getSdkDirectory().toString() + \"/platforms/\" + \"${android.compileSdkVersion}\"\n\n    // JAVA HOME\n    javaBase = System.properties[\"java.home\"]\n    javaRt = \"/lib/rt.jar\"\n    if (System.properties[\"os.name\"].toLowerCase().contains(\"mac\")) {\n        if (!new File(javaBase + javaRt).exists()) {\n            javaRt = \"/../Classes/classes.jar\"\n        }\n    }\n\n    proguardConfigFile = 'proguard-rules.pro'\n}\n\n```\n\n这时我们的Android工程下的gradle打包脚本就干净多了，所有的任务都丢到自定义的插件里面去了。需要动态指定的属性，通过Extension就可以进行赋值，非常方便。\n\n当需要打包时，打开Android Studio自带的终端，输入`cd hellolib`进入lib工程的目录，再输入`gradle packageProguardJar`或者`gradle packageNoProguardJar`就可以打包了。打包出来的jar怎么给app module去引用，就不赘述了。\n\n你甚至可以在自己的Gradle插件里再写一个copy task，直接将打好的helloLib.jar拷贝到app目录的libs下面，这样就更方便了。另外，app module下的版本号管理任务，你也可以把他们丢到自定义的插件里面去，如果你的生成环境要求你的Android工程尽可能简洁时，建议大家都封装一个自己的打包插件，deploy到公司的maven私服去。\n\n最后贴上[Gradle插件工程](https://github.com/unclechen/HelloGradlePlugin)和引用插件工程打包的[Android工程](https://github.com/unclechen/HelloGradle)供参考。\n\n# 容易遇到的问题\n\n## 遇到`Unsupported major.minor version 52.0`问题\n\n这个前面我提过，在插件工程的打包脚本中，有一个交叉编译选项，如果你使用高版本的JDK编写Gradle插件，为了让你打出来的Gradle Plugin（实际上就是一个jar包），能在别人低版本的JRE上跑起来，你就必须使用这个选项。否则，人家还要去安装一个新的JDK，就很蛋疼了。\n\n请记得加上这个：\n\n```\n...\n\ncompileGroovy {\n    sourceCompatibility = 1.7\n    targetCompatibility = 1.7\n    options.encoding = \"UTF-8\"\n}\n\n...\n\n```\n\n\n\n\n","source":"_posts/自定义Android Gradle插件.markdown","raw":"---\nlayout: post\ntitle: 自定义Android Gradle插件\ndate: '2015-11-17'\ntags:\n  - Android\n  - 打包\n  - gradle\ncategories: \n  - 技术\n---\n\n上一篇博客介绍到[Gradle实践之自定义打包jar+Log开关自动关闭](http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/)。可以自己定义打包的jar已经不错了，但是还是不够爽，怎么办？自己写一个Plugin！会用轮子，也要会造轮子是不是，我们经常使用到的`com.android.library`和`com.android.application`都是Google给我们提供的Gradle插件，里面已经实现了大部分App开发者所需要的功能。Github上面也已经有很多gradle插件，但是如果我们是程序猿，我们总是可以有需求是人家的Plugin无法满足的，那好吧，我们自己写个插件。\n\n<!-- more -->\n\n# 准备工作\n\n## 开发环境（以Win7为例）\n\n* IDE开发环境：我这篇例子就用Android Stuido来写的，使用AS写会有一点点的奇怪，因为AS默认新建的都是Android工程，可是！用它来写一个Gradle Plugin并没有任何问题！但实际上Gradle不仅仅可以给Android项目使用。所以我推荐大家去体验一下JetBrains家的Java IDE——[Intelligent Java IDE](https://www.jetbrains.com/idea/)。我们用的Android Studio就是基于这个开发的。\n\n* JDK：我这次用的是Windows系统，安装了1.8和1.7的JDK，等下写Gradle插件的时候会指定一个版本的JDK。至于指定哪个版本的JDK，会遇到什么问题，我会在后面提到。不过不管你使用什么版本的JDK，必须用交叉编译选项来编译我们的插件，以保证别人能在低版本的JDK上运行我们的插件。交叉编译选项我会在build.gradle文件中会特别标注一下。 **注意** ，JDK必须要安装，Groovy最后也要compile成Jar包。\n\n* Gradle：一般我们用Android Studio开发的时候都已经配置好了这个。我是让它翻墙自己下载的，下载后的目录都在C盘的Users目录下。例如我的`GRADLE_HOME`是`C:\\Users\\noughtchen\\.gradle\\wrapper\\dists\\gradle-2.4-all\\6r4uqcc6ovnq6ac6s0txzcpc0\\gradle-2.4`。为了确保你安装了Gradle并配置了环境变量，可以在命令行输入一句:\n\n```\ngradle -v\n```\n如果终端上显示了：\n\n```\nC:\\Users\\noughtchen>gradle -v\n\n------------------------------------------------------------\nGradle 2.4\n------------------------------------------------------------\n\nBuild time:   2015-05-05 08:09:24 UTC\nBuild number: none\nRevision:     5c9c3bc20ca1c281ac7972643f1e2d190f2c943c\n\nGroovy:       2.3.10\nAnt:          Apache Ant(TM) version 1.9.4 compiled on April 29 2014\nJVM:          1.7.0_80 (Oracle Corporation 24.80-b11)\nOS:           Windows 7 6.1 amd64\n\nC:\\Users\\noughtchen>\n```\n那就说明gradle是OK的。\n\n* Groovy SDK（可跳过）：这个类似于JDK，因为Gradle插件使用Groovy语言编写，所以我们也可以安装Groovy SDK。这里是官方的[安装教程](http://www.groovy-lang.org/install.html#_installation_on_windows)，非常简单。分为三步：\n\t* 下载一个[Binary Release](http://www.groovy-lang.org/install.html#download-groovy)版的zip包，解压到你本地的一个目录下，例如我本地是`D:\\mydev\\groovy-2.4.5`。\n\t* 添加名为`GROOVY_HOME`的环境变量，它的值为刚才的目录`D:\\mydev\\groovy-2.4.5`。\n\t* 然后将`GROOVY_HOME/bin`添加到系统的环境变量`Path`里，添加的值为`%GROOVY_HOME%\\bin`。\n\n## Groovy基础\n\n这里可以忽略，只要懂Java和一点基本Groovy语法就行，实际上我只是在打包我们SDK项目的时候自学了一点，另外参考了一下Google官方的Gradle插件就够了，实在不会的可以再去查看Gradle官方的Document。下面是几个可以学习的资源：\n\n* [http://tools.android.com/build/gradleplugin](http://tools.android.com/build/gradleplugin) 这里介绍了怎么从Google Checkout下来官方的Gradle插件源码，以及Android Studio的源码！开源万岁，真是碉堡，推荐大家看一下这个，这样就知道APK是怎么打包的了。\n* [https://docs.gradle.org/current/userguide/custom_plugins.html](https://docs.gradle.org/current/userguide/custom_plugins.html) Gradle官方的自定义插件文档，这篇是必看的，非常简单的HelloWorld例子。看完肯定还是不会写Gradle插件的，呵呵！\n\n# 自定义Gradle Plugin\n\n不废话了，下面进入正式的开发过程，这次我们在前面[Gradle实践之自定义打包jar+Log开关自动关闭](http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/)的基础上，把打包Jar、混淆Jar包的任务都丢到插件里，然后呢，我们这次自己写JavaCompile任务，这样一来，如果是做SDK开发的同学，实际上几乎就可以不用`com.android.library`插件了，当然我个人觉得吧，能不重复造轮子就不要重复造了，等下会大家看到这点的。\n\n## 1.新建一个Groovy工程\n\n如下图所示，我新建了一个名为`HelloGradlePlugin`的文件夹。\n\n![New a groovy folder](/content/images/new-a-plugin-folder.png)\n\n接着在文件夹里新建了一个名为`build.gradle`的文件，里面现在没有任何代码。\n\n![New a gradle file](/content/images/new-a-gradle-file.png)\n\n这里有点奇怪吗？是的，为啥不是用AS直接new一个project？前面说了，AS默认新建的只能选择Android Project，下面我们看看怎么使用这一步建立的文件夹。\n\n## 2.建立项目结构\n\n打开Android Studio，选择`File->Open`，打开刚才这个文件夹。如图所示：\n\n![Open the plugin project](/content/images/open-the-plugin.png)\n\n这时AS会提示我们是否使用本地的`Gradle Wrapper`，点击`yes`，AS会帮我们在`HelloGradlePlugin`文件夹下面自动生成对应的gradle文件夹和文件。\n\n![use-your-gradle-wrapper](/content/images/use-your-gradle-wrapper.png)\n\n这样，我们就算在AS中导入我们的Gradle Plugin工程了。下面我们建立项目结构。\n\n首先，在`src`文件夹下面分别建立`main/groovy/`文件夹和`resources/META-INF/gradle-plugins`。\n\n![create-folders](/content/images/create-folders.png)\n\n然后，在`src/main/resources/META-INF/gradle-plugins`文件夹下面新建一个`hello-world-plugin.properties`文件，这个文件的名字就是我们就是我们这个Gradle插件的名字(即`name`)，将来在其他项目中引用这个插件的时候，就需要指定为这个名字，在最后面会详细介绍这个`name`是怎么用的。\n\n接着需要在这个文件中添加一行代码。\n\n```\nimplementation-class = com.nought.gradle.plugin.HelloPlugin\n```\n\n意思是我们的插件名字叫`hello-world-plugin`，实现这个插件功能的类名为`HelloPlugin`。\n\n在实现`helloPlugin`这个类之前，我们先给这个Project添加一下依赖，因为我们最开始是通过新建文件夹的形式，然后在AS中导入这个项目，所以它还没有把groovy相关的包依赖进来。我们在项目名字上右键，选择`Open Module Settings`，然后添加Dependencies，如下图所示：\n\n![add-groovy-sdk](/content/images/add-groovy-sdk.png)\n\n最后，我们在`src/main/groovy`下面新建一个一个名为`com.nought.gradle.plugin`的package。\n\n![new-class-folder](/content/images/new-class-folder.png)\n\n并在这个包下建立名为`HelloPlugin`的类(右键`new file`->输入`HelloPlugin.groovy`)。\n\n下面开始写代码，我们通过自己定义一个插件，来实现前一篇博客里面的gradle打包功能，它可以把我们指定的java代码打包成jar包，并按照配置决定是否进行混淆，并输出到一个指定的文件夹中。\n\n## 3.实现Plugin接口\n\n定义了`HelloPlugin`类，我们要让它实现Plugin接口，并实现其中的`apply`方法。\n\n```\npackage com.nought.gradle.plugin\n\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\n\n\nclass HelloPlugin implements Plugin<Project> {\n    @Override\n    void apply(Project project) {\n\t...\n    }\n}\n\n```\n\n\n## 4.定义Extension\n\n首先，什么是Extension？\n\nExtension就是扩展属性，指的是你可以给你的project添加额外的gradle约定之外的其他properties属性。我们在Android项目里的`build.gradle`文件中通常使用的诸如下面这种代码：\n\n\n```\nandroid {\n    compileSdkVersion 22\n    buildToolsVersion \"22.0.1\"\n\t...\n}\n\n```\n\n就是在给Android插件的Extension的`compileSdkVersion`和`buildToolsVersion`赋值。我们自己写一个插件，也要实现同样的效果。只要在gradle文件里apply了我们的自定义的插件，我们就可以给自定义的插件赋予额外的属性，并在插件里用到它们，例如你打一个jar包时可以把输出文件存放地址传入进去等等。\n\nSo，新建一个名为`HelloPluginExtension`的类，表明这是`HelloPlugin`的扩展属性。并在这个类里面添加一些`String`类型的变量，如下所示：\n\n```\npackage com.nought.gradle.plugin\n\nclass HelloPluginExtension {\n    String javaSrcDir // java源码的目录\n    String classesOutDir // 编译输出的class文件目录\n\n    String outputFileDir // 输出的jar包目录\n    String outputFileName // 输出的jar包文件名\n\n    String androidJarDir\n    String javaBase\n    String javaRt\n\n    String proguardConfigFile\n}\n\n```\n很显然，其实你可输入任何Java语言中的变量类型。这些属性在apply我们的插件时，都可以在build.gradle脚本中传入。\n\n## 5.在Plugin中增加自定义的task\n\n刚才定义了Extension里面的一些属性，自定义Gradle Plugin的框架就基本是这样了，当然你要是只写一个 **helloworld** demo尝尝口味，那就没必要干下面的事情了。\n\n接下来我们要在`HelloPlugin`中用到这个属性，并增加一些实现了不同功能的tasks。\n\n本例子中，我们自定义的插件可以编译Java源代码，并把生成的class文件打包成jar，再根据需求决定是不是混淆它。下面直接上代码：\n\n```\npackage com.nought.gradle.plugin\n\nimport org.gradle.api.JavaVersion\nimport org.gradle.api.Plugin\nimport org.gradle.api.Project\nimport org.gradle.api.tasks.Copy\nimport org.gradle.api.tasks.bundling.Jar\nimport org.gradle.api.tasks.compile.JavaCompile\nimport proguard.gradle.ProGuardTask\n\nclass HelloPlugin implements Plugin<Project> {\n\n    static final String PLUGIN_NAME = \"helloPlugin\"\n\n    Project project\n    HelloPluginExtension extension\n\n    JavaCompile compileJavaSrc\n    Jar jarLib\n    ProGuardTask proguardLib\n    Copy copyLib\n\n    @Override\n    void apply(Project project) {\n        this.project = project\n        this.extension = project.extensions.create(PLUGIN_NAME, HelloPluginExtension)\n\n        project.afterEvaluate {\n            createSomeTasks()\n            // 如果是执行packageProguardJar任务，那么要提前关闭log开关\n            if ('packageProguardJar' in project.gradle.startParameter.taskNames) {\n                project.tasks.getByName(\"preBuild\").doFirst {\n                    enableLoggerDebug(false)\n                }\n            }\n        }\n    }\n\n    private void createSomeTasks() {\n        // Create a task to compile all java sources.\n        compileJavaSrc = project.tasks.create(\"compileJava\", JavaCompile);\n        compileJavaSrc.setDescription(\"编译java源代码\")\n        compileJavaSrc.source = extension.javaSrcDir\n        compileJavaSrc.include(\"com/nought/hellolib/**\")\n        compileJavaSrc.classpath = project.files([extension.androidJarDir + \"/android.jar\", extension.javaBase + \"/\" + extension.javaRt])\n        compileJavaSrc.destinationDir = project.file(extension.classesOutDir)\n        compileJavaSrc.sourceCompatibility = JavaVersion.VERSION_1_7\n        compileJavaSrc.targetCompatibility = JavaVersion.VERSION_1_7\n        compileJavaSrc.options.encoding = \"UTF-8\"\n        compileJavaSrc.options.debug = false\n        compileJavaSrc.options.verbose = false\n\n        // Create a task to jar the classes.\n        jarLib = project.tasks.create(\"jarLib\", Jar);\n        jarLib.setDescription(\"将class文件打包成jar\")\n        jarLib.dependsOn compileJavaSrc\n        jarLib.archiveName = \"helloLib.jar\"\n        jarLib.from(extension.classesOutDir)\n        jarLib.destinationDir = project.file(extension.outputFileDir)\n        jarLib.exclude(\"com/nought/hellolib/BuildConfig.class\")\n        jarLib.exclude(\"com/nought/hellolib/BuildConfig\\$*.class\")\n        jarLib.exclude(\"**/R.class\")\n        jarLib.exclude(\"**/R\\$*.class\")\n        jarLib.include(\"com/nought/hellolib/*.class\")\n\n        // Create a task to proguard the jar.\n        proguardLib = project.tasks.create(\"proguardLib\", ProGuardTask);\n        proguardLib.setDescription(\"混淆jar包\")\n        proguardLib.dependsOn jarLib\n        proguardLib.injars(extension.outputFileDir + \"/\" + \"helloLib.jar\")\n        proguardLib.outjars(extension.outputFileDir + \"/\" + extension.outputFileName)\n        proguardLib.libraryjars(extension.androidJarDir + \"/android.jar\")\n        proguardLib.libraryjars(extension.javaBase + \"/\" + extension.javaRt)\n        proguardLib.configuration(extension.proguardConfigFile)\n        proguardLib.printmapping(extension.outputFileDir + \"/\" + \"helloLib.mapping\")\n\n        // Create a task to copy the jar.\n        copyLib = project.tasks.create(\"copyLib\", Copy);\n        copyLib.setDescription(\"不混淆，仅拷贝jar包\")\n        copyLib.dependsOn jarLib\n        copyLib.from(extension.outputFileDir)\n        copyLib.into(extension.outputFileDir)\n        copyLib.include(\"helloLib.jar\")\n        copyLib.rename(\"helloLib.jar\", extension.outputFileName)\n\n        def packageProguardJar = project.tasks.create(\"packageProguardJar\");\n        packageProguardJar.setDescription(\"打包混淆、关闭log开关的hello lib\")\n        // packageProguardJar任务作为一个钩子，依赖真正执行工作的proguardLib\n        packageProguardJar.dependsOn proguardLib\n        // 最后把log开关置回原来开发时的状态\n        packageProguardJar.doLast {\n            enableLoggerDebug(true)\n        }\n\n        def packageNoProguardJar = project.tasks.create(\"packageNoProguardJar\");\n        packageNoProguardJar.setDescription(\"打包不混淆、开启log开关的hello lib\")\n        // packageNoProguardJar任务作为一个钩子，依赖真正执行工作的copyLib\n        packageNoProguardJar.dependsOn copyLib\n    }\n\n\n    // 开启/关闭Log开关\n    def enableLoggerDebug(boolean flag) {\n        def loggerFilePath = \"src/main/java/com/nought/hellolib/UncleNought.java\"\n        def updatedDebug = new File(loggerFilePath).getText('UTF-8')\n                .replaceAll(\"ENABLE_DEBUG\\\\s?=\\\\s?\" + (!flag).toString(), \"ENABLE_DEBUG = \" + flag.toString())\n        new File(loggerFilePath).write(updatedDebug, 'UTF-8')\n        println(flag ? 'ENABLE_DEBUG : [true]' : 'ENABLE_DEBUG : [false]')\n    }\n}\n\n```\n\n代码不多，其实就是创建了4个task，彼此之间有依赖，最后再创建两个钩子任务，他们不做实际的工作，只是通过钩子任务去依赖真正实现了功能的task。大家如果看过Android Gradle Plugin的实现，就知道assembleXXX任务就是这么干的。\n\n## 6.发布插件\n\n为了让其他的项目能引用这个打包插件，需要将这个插件发布出去，我们在插件项目的根目录下的`build.gradle`文件。添加下面的代码：\n\n```\napply plugin: 'groovy'\napply plugin: 'maven'\n\nversion = '1.0.0'\ngroup = 'com.nought.gradle.plugin'\narchivesBaseName = 'hello-gradle-plugin'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile gradleApi()\n    compile localGroovy()\n    compile files('libs/proguard.jar')\n}\n\n// 一定要记得使用交叉编译选项，因为我们可能用很高的JDK版本编译，为了让安装了低版本的同学能用上我们写的插件，必须设定source和target\ncompileGroovy {\n    sourceCompatibility = 1.7\n    targetCompatibility = 1.7\n    options.encoding = \"UTF-8\"\n}\n\nuploadArchives {\n    repositories.mavenDeployer {\n// 如果你公司或者自己搭了nexus私服，那么可以将插件deploy到上面去\n//        repository(url: \"http://10.XXX.XXX.XXX:8080/nexus/content/repositories/releases/\") {\n//            authentication(userName: \"admin\", password: \"admin\")\n//        }\n// 如果没有私服的话，发布到本地也是ok的\n        repository(url: 'file:release/libs')\n    }\n}\n\n```\n\n上面的代码就是通过`groovy`插件编译打包我们的插件代码，并通过`maven`插件publish到指定的服务器。我们为了调试，先将插件发布到本地的`release/libs`文件夹下面就行。\n\n## 7.在自己项目中应用写好的插件\n\n现在假设我们把刚才的插件打包，发布到了`release/libs`下面。这时属于本地的发布和引用，我们可以将这个libs下面的文件夹全部拷贝到自己的Android项目根目录的`libs`下面去，一般可能Android项目下的根目录中没有这个文件夹，那么我们就新建一个`libs`，再把gradle插件的文件夹全部丢进去。以前一篇博客的Android工程为例。\n\n首先在项目根目录的`build.gradle`文件中按照下面的方式引用：\n\n```\nbuildscript {\n    repositories {\n        jcenter()\n        maven {\n// 假如你有私服可以用的话，可以引用私服\n// url 'http://10.XXX.XXX.XXX:8080/nexus/content/repositories/releases/'\n// 没有的话，就本地引入\n            url 'libs'\n        }\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:1.3.0'\n\t\t// 自定义的插件以 groupId:name:版本号 的方式引用，这个name来自插件工程下的hello-world-plugin.properties文件名\n        classpath 'com.nought.gradle.plugin:hello-gradle-plugin:1.0.0'\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        maven {\n// 假如你有私服可以用的话，可以引用私服\n// url 'http://10.XXX.XXX.XXX:8080/nexus/content/repositories/releases/'\n// 没有的话，就本地引入，这里是给subProject设置，和上面类似\n            url 'libs'\n        }\n    }\n}\n\n\n```\n\n然后在需要使用自定义插件的Module中apply这个插件。并将该自定义插件的Extension传入进去，如下所示：\n\n```\napply plugin: 'com.android.library'\napply plugin: 'hello-gradle-plugin'\n\nandroid {\n    compileSdkVersion 22\n    buildToolsVersion \"22.0.1\"\n\n    defaultConfig {\n        minSdkVersion 14\n        targetSdkVersion 22\n        versionCode 1\n        versionName \"1.0\"\n    }\n    buildTypes {\n        release {\n            buildConfigField \"boolean\", \"ENABLE_DEBUG\", \"false\"\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n        debug {\n            buildConfigField \"boolean\", \"ENABLE_DEBUG\", \"true\"\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n}\n\nhelloPlugin {\n    javaSrcDir = 'src/main/java'\n    classesOutDir = 'build/out_classes'\n\n    outputFileDir = 'release'\n    outputFileName = 'helloLib-release.jar'\n\n    // Android SDK Dir\n    androidJarDir = android.getSdkDirectory().toString() + \"/platforms/\" + \"${android.compileSdkVersion}\"\n\n    // JAVA HOME\n    javaBase = System.properties[\"java.home\"]\n    javaRt = \"/lib/rt.jar\"\n    if (System.properties[\"os.name\"].toLowerCase().contains(\"mac\")) {\n        if (!new File(javaBase + javaRt).exists()) {\n            javaRt = \"/../Classes/classes.jar\"\n        }\n    }\n\n    proguardConfigFile = 'proguard-rules.pro'\n}\n\n```\n\n这时我们的Android工程下的gradle打包脚本就干净多了，所有的任务都丢到自定义的插件里面去了。需要动态指定的属性，通过Extension就可以进行赋值，非常方便。\n\n当需要打包时，打开Android Studio自带的终端，输入`cd hellolib`进入lib工程的目录，再输入`gradle packageProguardJar`或者`gradle packageNoProguardJar`就可以打包了。打包出来的jar怎么给app module去引用，就不赘述了。\n\n你甚至可以在自己的Gradle插件里再写一个copy task，直接将打好的helloLib.jar拷贝到app目录的libs下面，这样就更方便了。另外，app module下的版本号管理任务，你也可以把他们丢到自定义的插件里面去，如果你的生成环境要求你的Android工程尽可能简洁时，建议大家都封装一个自己的打包插件，deploy到公司的maven私服去。\n\n最后贴上[Gradle插件工程](https://github.com/unclechen/HelloGradlePlugin)和引用插件工程打包的[Android工程](https://github.com/unclechen/HelloGradle)供参考。\n\n# 容易遇到的问题\n\n## 遇到`Unsupported major.minor version 52.0`问题\n\n这个前面我提过，在插件工程的打包脚本中，有一个交叉编译选项，如果你使用高版本的JDK编写Gradle插件，为了让你打出来的Gradle Plugin（实际上就是一个jar包），能在别人低版本的JRE上跑起来，你就必须使用这个选项。否则，人家还要去安装一个新的JDK，就很蛋疼了。\n\n请记得加上这个：\n\n```\n...\n\ncompileGroovy {\n    sourceCompatibility = 1.7\n    targetCompatibility = 1.7\n    options.encoding = \"UTF-8\"\n}\n\n...\n\n```\n\n\n\n\n","slug":"自定义Android Gradle插件","published":1,"updated":"2018-05-13T07:13:37.000Z","comments":1,"photos":[],"link":"","_id":"cjh4tf8el001smtsxym1v0m5p","content":"<p>上一篇博客介绍到<a href=\"http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/\">Gradle实践之自定义打包jar+Log开关自动关闭</a>。可以自己定义打包的jar已经不错了，但是还是不够爽，怎么办？自己写一个Plugin！会用轮子，也要会造轮子是不是，我们经常使用到的<code>com.android.library</code>和<code>com.android.application</code>都是Google给我们提供的Gradle插件，里面已经实现了大部分App开发者所需要的功能。Github上面也已经有很多gradle插件，但是如果我们是程序猿，我们总是可以有需求是人家的Plugin无法满足的，那好吧，我们自己写个插件。</p>\n<a id=\"more\"></a>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"开发环境（以Win7为例）\"><a href=\"#开发环境（以Win7为例）\" class=\"headerlink\" title=\"开发环境（以Win7为例）\"></a>开发环境（以Win7为例）</h2><ul>\n<li><p>IDE开发环境：我这篇例子就用Android Stuido来写的，使用AS写会有一点点的奇怪，因为AS默认新建的都是Android工程，可是！用它来写一个Gradle Plugin并没有任何问题！但实际上Gradle不仅仅可以给Android项目使用。所以我推荐大家去体验一下JetBrains家的Java IDE——<a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noopener\">Intelligent Java IDE</a>。我们用的Android Studio就是基于这个开发的。</p>\n</li>\n<li><p>JDK：我这次用的是Windows系统，安装了1.8和1.7的JDK，等下写Gradle插件的时候会指定一个版本的JDK。至于指定哪个版本的JDK，会遇到什么问题，我会在后面提到。不过不管你使用什么版本的JDK，必须用交叉编译选项来编译我们的插件，以保证别人能在低版本的JDK上运行我们的插件。交叉编译选项我会在build.gradle文件中会特别标注一下。 <strong>注意</strong> ，JDK必须要安装，Groovy最后也要compile成Jar包。</p>\n</li>\n<li><p>Gradle：一般我们用Android Studio开发的时候都已经配置好了这个。我是让它翻墙自己下载的，下载后的目录都在C盘的Users目录下。例如我的<code>GRADLE_HOME</code>是<code>C:\\Users\\noughtchen\\.gradle\\wrapper\\dists\\gradle-2.4-all\\6r4uqcc6ovnq6ac6s0txzcpc0\\gradle-2.4</code>。为了确保你安装了Gradle并配置了环境变量，可以在命令行输入一句:</p>\n</li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gradle -v</span></span><br></pre></td></tr></table></figure>\n<p>如果终端上显示了：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Users</span>\\<span class=\"selector-tag\">noughtchen</span>&gt;<span class=\"selector-tag\">gradle</span> <span class=\"selector-tag\">-v</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"selector-tag\">Gradle</span> 2<span class=\"selector-class\">.4</span></span><br><span class=\"line\"><span class=\"selector-tag\">------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">Build</span> <span class=\"selector-tag\">time</span>:   2015<span class=\"selector-tag\">-05-05</span> 08<span class=\"selector-pseudo\">:09</span><span class=\"selector-pseudo\">:24</span> <span class=\"selector-tag\">UTC</span></span><br><span class=\"line\"><span class=\"selector-tag\">Build</span> <span class=\"selector-tag\">number</span>: <span class=\"selector-tag\">none</span></span><br><span class=\"line\"><span class=\"selector-tag\">Revision</span>:     5<span class=\"selector-tag\">c9c3bc20ca1c281ac7972643f1e2d190f2c943c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">Groovy</span>:       2<span class=\"selector-class\">.3</span><span class=\"selector-class\">.10</span></span><br><span class=\"line\"><span class=\"selector-tag\">Ant</span>:          <span class=\"selector-tag\">Apache</span> <span class=\"selector-tag\">Ant</span>(<span class=\"selector-tag\">TM</span>) <span class=\"selector-tag\">version</span> 1<span class=\"selector-class\">.9</span><span class=\"selector-class\">.4</span> <span class=\"selector-tag\">compiled</span> <span class=\"selector-tag\">on</span> <span class=\"selector-tag\">April</span> 29 2014</span><br><span class=\"line\"><span class=\"selector-tag\">JVM</span>:          1<span class=\"selector-class\">.7</span><span class=\"selector-class\">.0_80</span> (<span class=\"selector-tag\">Oracle</span> <span class=\"selector-tag\">Corporation</span> 24<span class=\"selector-class\">.80-b11</span>)</span><br><span class=\"line\"><span class=\"selector-tag\">OS</span>:           <span class=\"selector-tag\">Windows</span> 7 6<span class=\"selector-class\">.1</span> <span class=\"selector-tag\">amd64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Users</span>\\<span class=\"selector-tag\">noughtchen</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>那就说明gradle是OK的。</p>\n<ul>\n<li>Groovy SDK（可跳过）：这个类似于JDK，因为Gradle插件使用Groovy语言编写，所以我们也可以安装Groovy SDK。这里是官方的<a href=\"http://www.groovy-lang.org/install.html#_installation_on_windows\" target=\"_blank\" rel=\"noopener\">安装教程</a>，非常简单。分为三步：<ul>\n<li>下载一个<a href=\"http://www.groovy-lang.org/install.html#download-groovy\" target=\"_blank\" rel=\"noopener\">Binary Release</a>版的zip包，解压到你本地的一个目录下，例如我本地是<code>D:\\mydev\\groovy-2.4.5</code>。</li>\n<li>添加名为<code>GROOVY_HOME</code>的环境变量，它的值为刚才的目录<code>D:\\mydev\\groovy-2.4.5</code>。</li>\n<li>然后将<code>GROOVY_HOME/bin</code>添加到系统的环境变量<code>Path</code>里，添加的值为<code>%GROOVY_HOME%\\bin</code>。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Groovy基础\"><a href=\"#Groovy基础\" class=\"headerlink\" title=\"Groovy基础\"></a>Groovy基础</h2><p>这里可以忽略，只要懂Java和一点基本Groovy语法就行，实际上我只是在打包我们SDK项目的时候自学了一点，另外参考了一下Google官方的Gradle插件就够了，实在不会的可以再去查看Gradle官方的Document。下面是几个可以学习的资源：</p>\n<ul>\n<li><a href=\"http://tools.android.com/build/gradleplugin\" target=\"_blank\" rel=\"noopener\">http://tools.android.com/build/gradleplugin</a> 这里介绍了怎么从Google Checkout下来官方的Gradle插件源码，以及Android Studio的源码！开源万岁，真是碉堡，推荐大家看一下这个，这样就知道APK是怎么打包的了。</li>\n<li><a href=\"https://docs.gradle.org/current/userguide/custom_plugins.html\" target=\"_blank\" rel=\"noopener\">https://docs.gradle.org/current/userguide/custom_plugins.html</a> Gradle官方的自定义插件文档，这篇是必看的，非常简单的HelloWorld例子。看完肯定还是不会写Gradle插件的，呵呵！</li>\n</ul>\n<h1 id=\"自定义Gradle-Plugin\"><a href=\"#自定义Gradle-Plugin\" class=\"headerlink\" title=\"自定义Gradle Plugin\"></a>自定义Gradle Plugin</h1><p>不废话了，下面进入正式的开发过程，这次我们在前面<a href=\"http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/\">Gradle实践之自定义打包jar+Log开关自动关闭</a>的基础上，把打包Jar、混淆Jar包的任务都丢到插件里，然后呢，我们这次自己写JavaCompile任务，这样一来，如果是做SDK开发的同学，实际上几乎就可以不用<code>com.android.library</code>插件了，当然我个人觉得吧，能不重复造轮子就不要重复造了，等下会大家看到这点的。</p>\n<h2 id=\"1-新建一个Groovy工程\"><a href=\"#1-新建一个Groovy工程\" class=\"headerlink\" title=\"1.新建一个Groovy工程\"></a>1.新建一个Groovy工程</h2><p>如下图所示，我新建了一个名为<code>HelloGradlePlugin</code>的文件夹。</p>\n<p><img src=\"/content/images/new-a-plugin-folder.png\" alt=\"New a groovy folder\"></p>\n<p>接着在文件夹里新建了一个名为<code>build.gradle</code>的文件，里面现在没有任何代码。</p>\n<p><img src=\"/content/images/new-a-gradle-file.png\" alt=\"New a gradle file\"></p>\n<p>这里有点奇怪吗？是的，为啥不是用AS直接new一个project？前面说了，AS默认新建的只能选择Android Project，下面我们看看怎么使用这一步建立的文件夹。</p>\n<h2 id=\"2-建立项目结构\"><a href=\"#2-建立项目结构\" class=\"headerlink\" title=\"2.建立项目结构\"></a>2.建立项目结构</h2><p>打开Android Studio，选择<code>File-&gt;Open</code>，打开刚才这个文件夹。如图所示：</p>\n<p><img src=\"/content/images/open-the-plugin.png\" alt=\"Open the plugin project\"></p>\n<p>这时AS会提示我们是否使用本地的<code>Gradle Wrapper</code>，点击<code>yes</code>，AS会帮我们在<code>HelloGradlePlugin</code>文件夹下面自动生成对应的gradle文件夹和文件。</p>\n<p><img src=\"/content/images/use-your-gradle-wrapper.png\" alt=\"use-your-gradle-wrapper\"></p>\n<p>这样，我们就算在AS中导入我们的Gradle Plugin工程了。下面我们建立项目结构。</p>\n<p>首先，在<code>src</code>文件夹下面分别建立<code>main/groovy/</code>文件夹和<code>resources/META-INF/gradle-plugins</code>。</p>\n<p><img src=\"/content/images/create-folders.png\" alt=\"create-folders\"></p>\n<p>然后，在<code>src/main/resources/META-INF/gradle-plugins</code>文件夹下面新建一个<code>hello-world-plugin.properties</code>文件，这个文件的名字就是我们就是我们这个Gradle插件的名字(即<code>name</code>)，将来在其他项目中引用这个插件的时候，就需要指定为这个名字，在最后面会详细介绍这个<code>name</code>是怎么用的。</p>\n<p>接着需要在这个文件中添加一行代码。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation-class = com<span class=\"selector-class\">.nought</span><span class=\"selector-class\">.gradle</span><span class=\"selector-class\">.plugin</span><span class=\"selector-class\">.HelloPlugin</span></span><br></pre></td></tr></table></figure>\n<p>意思是我们的插件名字叫<code>hello-world-plugin</code>，实现这个插件功能的类名为<code>HelloPlugin</code>。</p>\n<p>在实现<code>helloPlugin</code>这个类之前，我们先给这个Project添加一下依赖，因为我们最开始是通过新建文件夹的形式，然后在AS中导入这个项目，所以它还没有把groovy相关的包依赖进来。我们在项目名字上右键，选择<code>Open Module Settings</code>，然后添加Dependencies，如下图所示：</p>\n<p><img src=\"/content/images/add-groovy-sdk.png\" alt=\"add-groovy-sdk\"></p>\n<p>最后，我们在<code>src/main/groovy</code>下面新建一个一个名为<code>com.nought.gradle.plugin</code>的package。</p>\n<p><img src=\"/content/images/new-class-folder.png\" alt=\"new-class-folder\"></p>\n<p>并在这个包下建立名为<code>HelloPlugin</code>的类(右键<code>new file</code>-&gt;输入<code>HelloPlugin.groovy</code>)。</p>\n<p>下面开始写代码，我们通过自己定义一个插件，来实现前一篇博客里面的gradle打包功能，它可以把我们指定的java代码打包成jar包，并按照配置决定是否进行混淆，并输出到一个指定的文件夹中。</p>\n<h2 id=\"3-实现Plugin接口\"><a href=\"#3-实现Plugin接口\" class=\"headerlink\" title=\"3.实现Plugin接口\"></a>3.实现Plugin接口</h2><p>定义了<code>HelloPlugin</code>类，我们要让它实现Plugin接口，并实现其中的<code>apply</code>方法。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com<span class=\"selector-class\">.nought</span><span class=\"selector-class\">.gradle</span><span class=\"selector-class\">.plugin</span></span><br><span class=\"line\"></span><br><span class=\"line\">import org<span class=\"selector-class\">.gradle</span><span class=\"selector-class\">.api</span><span class=\"selector-class\">.Plugin</span></span><br><span class=\"line\">import org<span class=\"selector-class\">.gradle</span><span class=\"selector-class\">.api</span><span class=\"selector-class\">.Project</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class HelloPlugin implements Plugin&lt;Project&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    void apply(Project project) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-定义Extension\"><a href=\"#4-定义Extension\" class=\"headerlink\" title=\"4.定义Extension\"></a>4.定义Extension</h2><p>首先，什么是Extension？</p>\n<p>Extension就是扩展属性，指的是你可以给你的project添加额外的gradle约定之外的其他properties属性。我们在Android项目里的<code>build.gradle</code>文件中通常使用的诸如下面这种代码：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">android </span>&#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">    <span class=\"keyword\">buildToolsVersion </span><span class=\"string\">\"22.0.1\"</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是在给Android插件的Extension的<code>compileSdkVersion</code>和<code>buildToolsVersion</code>赋值。我们自己写一个插件，也要实现同样的效果。只要在gradle文件里apply了我们的自定义的插件，我们就可以给自定义的插件赋予额外的属性，并在插件里用到它们，例如你打一个jar包时可以把输出文件存放地址传入进去等等。</p>\n<p>So，新建一个名为<code>HelloPluginExtension</code>的类，表明这是<code>HelloPlugin</code>的扩展属性。并在这个类里面添加一些<code>String</code>类型的变量，如下所示：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nought.gradle.plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloPluginExtension</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">String</span> javaSrcDir <span class=\"comment\">// java源码的目录</span></span><br><span class=\"line\">    <span class=\"keyword\">String</span> classesOutDir <span class=\"comment\">// 编译输出的class文件目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">String</span> outputFileDir <span class=\"comment\">// 输出的jar包目录</span></span><br><span class=\"line\">    <span class=\"keyword\">String</span> outputFileName <span class=\"comment\">// 输出的jar包文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">String</span> androidJarDir</span><br><span class=\"line\">    <span class=\"keyword\">String</span> javaBase</span><br><span class=\"line\">    <span class=\"keyword\">String</span> javaRt</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">String</span> proguardConfigFile</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很显然，其实你可输入任何Java语言中的变量类型。这些属性在apply我们的插件时，都可以在build.gradle脚本中传入。</p>\n<h2 id=\"5-在Plugin中增加自定义的task\"><a href=\"#5-在Plugin中增加自定义的task\" class=\"headerlink\" title=\"5.在Plugin中增加自定义的task\"></a>5.在Plugin中增加自定义的task</h2><p>刚才定义了Extension里面的一些属性，自定义Gradle Plugin的框架就基本是这样了，当然你要是只写一个 <strong>helloworld</strong> demo尝尝口味，那就没必要干下面的事情了。</p>\n<p>接下来我们要在<code>HelloPlugin</code>中用到这个属性，并增加一些实现了不同功能的tasks。</p>\n<p>本例子中，我们自定义的插件可以编译Java源代码，并把生成的class文件打包成jar，再根据需求决定是不是混淆它。下面直接上代码：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nought.gradle.plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.JavaVersion</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.Plugin</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.<span class=\"keyword\">Project</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.tasks.<span class=\"keyword\">Copy</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.tasks.bundling.Jar</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.tasks.<span class=\"keyword\">compile</span>.JavaCompile</span><br><span class=\"line\"><span class=\"keyword\">import</span> proguard.gradle.ProGuardTask</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> HelloPlugin <span class=\"keyword\">implements</span> Plugin&lt;<span class=\"keyword\">Project</span>&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PLUGIN_NAME = <span class=\"string\">\"helloPlugin\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">Project</span> <span class=\"keyword\">project</span></span><br><span class=\"line\">    HelloPluginExtension extension</span><br><span class=\"line\"></span><br><span class=\"line\">    JavaCompile compileJavaSrc</span><br><span class=\"line\">    Jar jarLib</span><br><span class=\"line\">    ProGuardTask proguardLib</span><br><span class=\"line\">    <span class=\"keyword\">Copy</span> copyLib</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">void</span> apply(<span class=\"keyword\">Project</span> <span class=\"keyword\">project</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">project</span> = <span class=\"keyword\">project</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.extension = <span class=\"keyword\">project</span>.extensions.create(PLUGIN_NAME, HelloPluginExtension)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">project</span>.afterEvaluate &#123;</span><br><span class=\"line\">            createSomeTasks()</span><br><span class=\"line\">            <span class=\"comment\">// 如果是执行packageProguardJar任务，那么要提前关闭log开关</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">'packageProguardJar'</span> in <span class=\"keyword\">project</span>.gradle.startParameter.taskNames) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">project</span>.tasks.getByName(<span class=\"string\">\"preBuild\"</span>).<span class=\"keyword\">doFirst</span> &#123;</span><br><span class=\"line\">                    enableLoggerDebug(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> createSomeTasks() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Create a task to compile all java sources.</span></span><br><span class=\"line\">        compileJavaSrc = <span class=\"keyword\">project</span>.tasks.create(<span class=\"string\">\"compileJava\"</span>, JavaCompile);</span><br><span class=\"line\">        compileJavaSrc.setDescription(<span class=\"string\">\"编译java源代码\"</span>)</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">source</span> = extension.javaSrcDir</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">include</span>(<span class=\"string\">\"com/nought/hellolib/**\"</span>)</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">classpath</span> = <span class=\"keyword\">project</span>.files([extension.androidJarDir + <span class=\"string\">\"/android.jar\"</span>, extension.javaBase + <span class=\"string\">\"/\"</span> + extension.javaRt])</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">destinationDir</span> = <span class=\"keyword\">project</span>.<span class=\"keyword\">file</span>(extension.classesOutDir)</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">sourceCompatibility</span> = JavaVersion.VERSION_1_7</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">targetCompatibility</span> = JavaVersion.VERSION_1_7</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">options</span>.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">options</span>.debug = <span class=\"keyword\">false</span></span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">options</span>.verbose = <span class=\"keyword\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Create a task to jar the classes.</span></span><br><span class=\"line\">        jarLib = <span class=\"keyword\">project</span>.tasks.create(<span class=\"string\">\"jarLib\"</span>, Jar);</span><br><span class=\"line\">        jarLib.setDescription(<span class=\"string\">\"将class文件打包成jar\"</span>)</span><br><span class=\"line\">        jarLib.dependsOn compileJavaSrc</span><br><span class=\"line\">        jarLib.archiveName = <span class=\"string\">\"helloLib.jar\"</span></span><br><span class=\"line\">        jarLib.<span class=\"keyword\">from</span>(extension.classesOutDir)</span><br><span class=\"line\">        jarLib.<span class=\"keyword\">destinationDir</span> = <span class=\"keyword\">project</span>.<span class=\"keyword\">file</span>(extension.outputFileDir)</span><br><span class=\"line\">        jarLib.<span class=\"keyword\">exclude</span>(<span class=\"string\">\"com/nought/hellolib/BuildConfig.class\"</span>)</span><br><span class=\"line\">        jarLib.<span class=\"keyword\">exclude</span>(<span class=\"string\">\"com/nought/hellolib/BuildConfig\\$*.class\"</span>)</span><br><span class=\"line\">        jarLib.<span class=\"keyword\">exclude</span>(<span class=\"string\">\"**/R.class\"</span>)</span><br><span class=\"line\">        jarLib.<span class=\"keyword\">exclude</span>(<span class=\"string\">\"**/R\\$*.class\"</span>)</span><br><span class=\"line\">        jarLib.<span class=\"keyword\">include</span>(<span class=\"string\">\"com/nought/hellolib/*.class\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Create a task to proguard the jar.</span></span><br><span class=\"line\">        proguardLib = <span class=\"keyword\">project</span>.tasks.create(<span class=\"string\">\"proguardLib\"</span>, ProGuardTask);</span><br><span class=\"line\">        proguardLib.setDescription(<span class=\"string\">\"混淆jar包\"</span>)</span><br><span class=\"line\">        proguardLib.dependsOn jarLib</span><br><span class=\"line\">        proguardLib.injars(extension.outputFileDir + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"helloLib.jar\"</span>)</span><br><span class=\"line\">        proguardLib.outjars(extension.outputFileDir + <span class=\"string\">\"/\"</span> + extension.outputFileName)</span><br><span class=\"line\">        proguardLib.libraryjars(extension.androidJarDir + <span class=\"string\">\"/android.jar\"</span>)</span><br><span class=\"line\">        proguardLib.libraryjars(extension.javaBase + <span class=\"string\">\"/\"</span> + extension.javaRt)</span><br><span class=\"line\">        proguardLib.configuration(extension.proguardConfigFile)</span><br><span class=\"line\">        proguardLib.printmapping(extension.outputFileDir + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"helloLib.mapping\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Create a task to copy the jar.</span></span><br><span class=\"line\">        copyLib = <span class=\"keyword\">project</span>.tasks.create(<span class=\"string\">\"copyLib\"</span>, <span class=\"keyword\">Copy</span>);</span><br><span class=\"line\">        copyLib.setDescription(<span class=\"string\">\"不混淆，仅拷贝jar包\"</span>)</span><br><span class=\"line\">        copyLib.dependsOn jarLib</span><br><span class=\"line\">        copyLib.<span class=\"keyword\">from</span>(extension.outputFileDir)</span><br><span class=\"line\">        copyLib.<span class=\"keyword\">into</span>(extension.outputFileDir)</span><br><span class=\"line\">        copyLib.<span class=\"keyword\">include</span>(<span class=\"string\">\"helloLib.jar\"</span>)</span><br><span class=\"line\">        copyLib.rename(<span class=\"string\">\"helloLib.jar\"</span>, extension.outputFileName)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> packageProguardJar = <span class=\"keyword\">project</span>.tasks.create(<span class=\"string\">\"packageProguardJar\"</span>);</span><br><span class=\"line\">        packageProguardJar.setDescription(<span class=\"string\">\"打包混淆、关闭log开关的hello lib\"</span>)</span><br><span class=\"line\">        <span class=\"comment\">// packageProguardJar任务作为一个钩子，依赖真正执行工作的proguardLib</span></span><br><span class=\"line\">        packageProguardJar.dependsOn proguardLib</span><br><span class=\"line\">        <span class=\"comment\">// 最后把log开关置回原来开发时的状态</span></span><br><span class=\"line\">        packageProguardJar.<span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">            enableLoggerDebug(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> packageNoProguardJar = <span class=\"keyword\">project</span>.tasks.create(<span class=\"string\">\"packageNoProguardJar\"</span>);</span><br><span class=\"line\">        packageNoProguardJar.setDescription(<span class=\"string\">\"打包不混淆、开启log开关的hello lib\"</span>)</span><br><span class=\"line\">        <span class=\"comment\">// packageNoProguardJar任务作为一个钩子，依赖真正执行工作的copyLib</span></span><br><span class=\"line\">        packageNoProguardJar.dependsOn copyLib</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开启/关闭Log开关</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> enableLoggerDebug(<span class=\"keyword\">boolean</span> flag) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> loggerFilePath = <span class=\"string\">\"src/main/java/com/nought/hellolib/UncleNought.java\"</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> updatedDebug = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(loggerFilePath).<span class=\"keyword\">getText</span>(<span class=\"string\">'UTF-8'</span>)</span><br><span class=\"line\">                .replaceAll(<span class=\"string\">\"ENABLE_DEBUG\\\\s?=\\\\s?\"</span> + (!flag).toString(), <span class=\"string\">\"ENABLE_DEBUG = \"</span> + flag.toString())</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(loggerFilePath).<span class=\"keyword\">write</span>(updatedDebug, <span class=\"string\">'UTF-8'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">println</span>(flag ? <span class=\"string\">'ENABLE_DEBUG : [true]'</span> : <span class=\"string\">'ENABLE_DEBUG : [false]'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码不多，其实就是创建了4个task，彼此之间有依赖，最后再创建两个钩子任务，他们不做实际的工作，只是通过钩子任务去依赖真正实现了功能的task。大家如果看过Android Gradle Plugin的实现，就知道assembleXXX任务就是这么干的。</p>\n<h2 id=\"6-发布插件\"><a href=\"#6-发布插件\" class=\"headerlink\" title=\"6.发布插件\"></a>6.发布插件</h2><p>为了让其他的项目能引用这个打包插件，需要将这个插件发布出去，我们在插件项目的根目录下的<code>build.gradle</code>文件。添加下面的代码：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'groovy'</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">'maven'</span></span><br><span class=\"line\"></span><br><span class=\"line\">version = <span class=\"string\">'1.0.0'</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> = <span class=\"string\">'com.nought.gradle.plugin'</span></span><br><span class=\"line\">archivesBaseName = <span class=\"string\">'hello-gradle-plugin'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> gradleApi()</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> localGroovy()</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> files(<span class=\"string\">'libs/proguard.jar'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一定要记得使用交叉编译选项，因为我们可能用很高的JDK版本编译，为了让安装了低版本的同学能用上我们写的插件，必须设定source和target</span></span><br><span class=\"line\">compileGroovy &#123;</span><br><span class=\"line\">    <span class=\"keyword\">sourceCompatibility</span> = <span class=\"number\">1.7</span></span><br><span class=\"line\">    <span class=\"keyword\">targetCompatibility</span> = <span class=\"number\">1.7</span></span><br><span class=\"line\">    <span class=\"keyword\">options</span>.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span>.mavenDeployer &#123;</span><br><span class=\"line\"><span class=\"comment\">// 如果你公司或者自己搭了nexus私服，那么可以将插件deploy到上面去</span></span><br><span class=\"line\"><span class=\"comment\">//        repository(url: \"http://10.XXX.XXX.<span class=\"doctag\">XXX:</span>8080/nexus/content/repositories/releases/\") &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            authentication(userName: \"admin\", password: \"admin\")</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 如果没有私服的话，发布到本地也是ok的</span></span><br><span class=\"line\">        repository(url: <span class=\"string\">'file:release/libs'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码就是通过<code>groovy</code>插件编译打包我们的插件代码，并通过<code>maven</code>插件publish到指定的服务器。我们为了调试，先将插件发布到本地的<code>release/libs</code>文件夹下面就行。</p>\n<h2 id=\"7-在自己项目中应用写好的插件\"><a href=\"#7-在自己项目中应用写好的插件\" class=\"headerlink\" title=\"7.在自己项目中应用写好的插件\"></a>7.在自己项目中应用写好的插件</h2><p>现在假设我们把刚才的插件打包，发布到了<code>release/libs</code>下面。这时属于本地的发布和引用，我们可以将这个libs下面的文件夹全部拷贝到自己的Android项目根目录的<code>libs</code>下面去，一般可能Android项目下的根目录中没有这个文件夹，那么我们就新建一个<code>libs</code>，再把gradle插件的文件夹全部丢进去。以前一篇博客的Android工程为例。</p>\n<p>首先在项目根目录的<code>build.gradle</code>文件中按照下面的方式引用：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\"><span class=\"comment\">// 假如你有私服可以用的话，可以引用私服</span></span><br><span class=\"line\"><span class=\"comment\">// url 'http://10.XXX.XXX.<span class=\"doctag\">XXX:</span>8080/nexus/content/repositories/releases/'</span></span><br><span class=\"line\"><span class=\"comment\">// 没有的话，就本地引入</span></span><br><span class=\"line\">            url <span class=\"string\">'libs'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">'com.android.tools.build:gradle:1.3.0'</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 自定义的插件以 groupId:name:版本号 的方式引用，这个name来自插件工程下的hello-world-plugin.properties文件名</span></span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">'com.nought.gradle.plugin:hello-gradle-plugin:1.0.0'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">allprojects</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\"><span class=\"comment\">// 假如你有私服可以用的话，可以引用私服</span></span><br><span class=\"line\"><span class=\"comment\">// url 'http://10.XXX.XXX.<span class=\"doctag\">XXX:</span>8080/nexus/content/repositories/releases/'</span></span><br><span class=\"line\"><span class=\"comment\">// 没有的话，就本地引入，这里是给subProject设置，和上面类似</span></span><br><span class=\"line\">            url <span class=\"string\">'libs'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在需要使用自定义插件的Module中apply这个插件。并将该自定义插件的Extension传入进去，如下所示：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">apply</span> plugin: <span class=\"string\">'com.android.library'</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">'hello-gradle-plugin'</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compileSdkVersion</span> <span class=\"number\">22</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"22.0.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        <span class=\"attribute\">minSdkVersion</span> <span class=\"number\">14</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        <span class=\"section\">release</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">buildConfigField</span> <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"ENABLE_DEBUG\"</span>, <span class=\"string\">\"false\"</span></span><br><span class=\"line\">            minifyEnabled <span class=\"literal\">false</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"literal\">debug</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">buildConfigField</span> <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"ENABLE_DEBUG\"</span>, <span class=\"string\">\"true\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compile</span> fileTree(dir: <span class=\"string\">'libs'</span>, include: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">helloPlugin &#123;</span><br><span class=\"line\">    <span class=\"attribute\">javaSrcDir</span> = <span class=\"string\">'src/main/java'</span></span><br><span class=\"line\">    classesOutDir = <span class=\"string\">'build/out_classes'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    outputFileDir = <span class=\"string\">'release'</span></span><br><span class=\"line\">    outputFileName = <span class=\"string\">'helloLib-release.jar'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    // Android SDK Dir</span><br><span class=\"line\">    androidJarDir = android.getSdkDirectory().toString() + <span class=\"string\">\"/platforms/\"</span> + <span class=\"string\">\"<span class=\"variable\">$&#123;android.compileSdkVersion&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    // JAVA HOME</span><br><span class=\"line\">    javaBase = System.properties[<span class=\"string\">\"java.home\"</span>]</span><br><span class=\"line\">    javaRt = <span class=\"string\">\"/lib/rt.jar\"</span></span><br><span class=\"line\">    if (System.properties[<span class=\"string\">\"os.name\"</span>].toLowerCase().contains(<span class=\"string\">\"mac\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"attribute\">if</span> (!new File(javaBase + javaRt).exists()) &#123;</span><br><span class=\"line\">            <span class=\"attribute\">javaRt</span> = <span class=\"string\">\"/../Classes/classes.jar\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    proguardConfigFile = <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时我们的Android工程下的gradle打包脚本就干净多了，所有的任务都丢到自定义的插件里面去了。需要动态指定的属性，通过Extension就可以进行赋值，非常方便。</p>\n<p>当需要打包时，打开Android Studio自带的终端，输入<code>cd hellolib</code>进入lib工程的目录，再输入<code>gradle packageProguardJar</code>或者<code>gradle packageNoProguardJar</code>就可以打包了。打包出来的jar怎么给app module去引用，就不赘述了。</p>\n<p>你甚至可以在自己的Gradle插件里再写一个copy task，直接将打好的helloLib.jar拷贝到app目录的libs下面，这样就更方便了。另外，app module下的版本号管理任务，你也可以把他们丢到自定义的插件里面去，如果你的生成环境要求你的Android工程尽可能简洁时，建议大家都封装一个自己的打包插件，deploy到公司的maven私服去。</p>\n<p>最后贴上<a href=\"https://github.com/unclechen/HelloGradlePlugin\" target=\"_blank\" rel=\"noopener\">Gradle插件工程</a>和引用插件工程打包的<a href=\"https://github.com/unclechen/HelloGradle\" target=\"_blank\" rel=\"noopener\">Android工程</a>供参考。</p>\n<h1 id=\"容易遇到的问题\"><a href=\"#容易遇到的问题\" class=\"headerlink\" title=\"容易遇到的问题\"></a>容易遇到的问题</h1><h2 id=\"遇到Unsupported-major-minor-version-52-0问题\"><a href=\"#遇到Unsupported-major-minor-version-52-0问题\" class=\"headerlink\" title=\"遇到Unsupported major.minor version 52.0问题\"></a>遇到<code>Unsupported major.minor version 52.0</code>问题</h2><p>这个前面我提过，在插件工程的打包脚本中，有一个交叉编译选项，如果你使用高版本的JDK编写Gradle插件，为了让你打出来的Gradle Plugin（实际上就是一个jar包），能在别人低版本的JRE上跑起来，你就必须使用这个选项。否则，人家还要去安装一个新的JDK，就很蛋疼了。</p>\n<p>请记得加上这个：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">compileGroovy &#123;</span><br><span class=\"line\">    <span class=\"keyword\">sourceCompatibility</span> = <span class=\"number\">1.7</span></span><br><span class=\"line\">    <span class=\"keyword\">targetCompatibility</span> = <span class=\"number\">1.7</span></span><br><span class=\"line\">    <span class=\"keyword\">options</span>.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>上一篇博客介绍到<a href=\"http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/\">Gradle实践之自定义打包jar+Log开关自动关闭</a>。可以自己定义打包的jar已经不错了，但是还是不够爽，怎么办？自己写一个Plugin！会用轮子，也要会造轮子是不是，我们经常使用到的<code>com.android.library</code>和<code>com.android.application</code>都是Google给我们提供的Gradle插件，里面已经实现了大部分App开发者所需要的功能。Github上面也已经有很多gradle插件，但是如果我们是程序猿，我们总是可以有需求是人家的Plugin无法满足的，那好吧，我们自己写个插件。</p>","more":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"开发环境（以Win7为例）\"><a href=\"#开发环境（以Win7为例）\" class=\"headerlink\" title=\"开发环境（以Win7为例）\"></a>开发环境（以Win7为例）</h2><ul>\n<li><p>IDE开发环境：我这篇例子就用Android Stuido来写的，使用AS写会有一点点的奇怪，因为AS默认新建的都是Android工程，可是！用它来写一个Gradle Plugin并没有任何问题！但实际上Gradle不仅仅可以给Android项目使用。所以我推荐大家去体验一下JetBrains家的Java IDE——<a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noopener\">Intelligent Java IDE</a>。我们用的Android Studio就是基于这个开发的。</p>\n</li>\n<li><p>JDK：我这次用的是Windows系统，安装了1.8和1.7的JDK，等下写Gradle插件的时候会指定一个版本的JDK。至于指定哪个版本的JDK，会遇到什么问题，我会在后面提到。不过不管你使用什么版本的JDK，必须用交叉编译选项来编译我们的插件，以保证别人能在低版本的JDK上运行我们的插件。交叉编译选项我会在build.gradle文件中会特别标注一下。 <strong>注意</strong> ，JDK必须要安装，Groovy最后也要compile成Jar包。</p>\n</li>\n<li><p>Gradle：一般我们用Android Studio开发的时候都已经配置好了这个。我是让它翻墙自己下载的，下载后的目录都在C盘的Users目录下。例如我的<code>GRADLE_HOME</code>是<code>C:\\Users\\noughtchen\\.gradle\\wrapper\\dists\\gradle-2.4-all\\6r4uqcc6ovnq6ac6s0txzcpc0\\gradle-2.4</code>。为了确保你安装了Gradle并配置了环境变量，可以在命令行输入一句:</p>\n</li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gradle -v</span></span><br></pre></td></tr></table></figure>\n<p>如果终端上显示了：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Users</span>\\<span class=\"selector-tag\">noughtchen</span>&gt;<span class=\"selector-tag\">gradle</span> <span class=\"selector-tag\">-v</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"selector-tag\">Gradle</span> 2<span class=\"selector-class\">.4</span></span><br><span class=\"line\"><span class=\"selector-tag\">------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">Build</span> <span class=\"selector-tag\">time</span>:   2015<span class=\"selector-tag\">-05-05</span> 08<span class=\"selector-pseudo\">:09</span><span class=\"selector-pseudo\">:24</span> <span class=\"selector-tag\">UTC</span></span><br><span class=\"line\"><span class=\"selector-tag\">Build</span> <span class=\"selector-tag\">number</span>: <span class=\"selector-tag\">none</span></span><br><span class=\"line\"><span class=\"selector-tag\">Revision</span>:     5<span class=\"selector-tag\">c9c3bc20ca1c281ac7972643f1e2d190f2c943c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">Groovy</span>:       2<span class=\"selector-class\">.3</span><span class=\"selector-class\">.10</span></span><br><span class=\"line\"><span class=\"selector-tag\">Ant</span>:          <span class=\"selector-tag\">Apache</span> <span class=\"selector-tag\">Ant</span>(<span class=\"selector-tag\">TM</span>) <span class=\"selector-tag\">version</span> 1<span class=\"selector-class\">.9</span><span class=\"selector-class\">.4</span> <span class=\"selector-tag\">compiled</span> <span class=\"selector-tag\">on</span> <span class=\"selector-tag\">April</span> 29 2014</span><br><span class=\"line\"><span class=\"selector-tag\">JVM</span>:          1<span class=\"selector-class\">.7</span><span class=\"selector-class\">.0_80</span> (<span class=\"selector-tag\">Oracle</span> <span class=\"selector-tag\">Corporation</span> 24<span class=\"selector-class\">.80-b11</span>)</span><br><span class=\"line\"><span class=\"selector-tag\">OS</span>:           <span class=\"selector-tag\">Windows</span> 7 6<span class=\"selector-class\">.1</span> <span class=\"selector-tag\">amd64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Users</span>\\<span class=\"selector-tag\">noughtchen</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>那就说明gradle是OK的。</p>\n<ul>\n<li>Groovy SDK（可跳过）：这个类似于JDK，因为Gradle插件使用Groovy语言编写，所以我们也可以安装Groovy SDK。这里是官方的<a href=\"http://www.groovy-lang.org/install.html#_installation_on_windows\" target=\"_blank\" rel=\"noopener\">安装教程</a>，非常简单。分为三步：<ul>\n<li>下载一个<a href=\"http://www.groovy-lang.org/install.html#download-groovy\" target=\"_blank\" rel=\"noopener\">Binary Release</a>版的zip包，解压到你本地的一个目录下，例如我本地是<code>D:\\mydev\\groovy-2.4.5</code>。</li>\n<li>添加名为<code>GROOVY_HOME</code>的环境变量，它的值为刚才的目录<code>D:\\mydev\\groovy-2.4.5</code>。</li>\n<li>然后将<code>GROOVY_HOME/bin</code>添加到系统的环境变量<code>Path</code>里，添加的值为<code>%GROOVY_HOME%\\bin</code>。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Groovy基础\"><a href=\"#Groovy基础\" class=\"headerlink\" title=\"Groovy基础\"></a>Groovy基础</h2><p>这里可以忽略，只要懂Java和一点基本Groovy语法就行，实际上我只是在打包我们SDK项目的时候自学了一点，另外参考了一下Google官方的Gradle插件就够了，实在不会的可以再去查看Gradle官方的Document。下面是几个可以学习的资源：</p>\n<ul>\n<li><a href=\"http://tools.android.com/build/gradleplugin\" target=\"_blank\" rel=\"noopener\">http://tools.android.com/build/gradleplugin</a> 这里介绍了怎么从Google Checkout下来官方的Gradle插件源码，以及Android Studio的源码！开源万岁，真是碉堡，推荐大家看一下这个，这样就知道APK是怎么打包的了。</li>\n<li><a href=\"https://docs.gradle.org/current/userguide/custom_plugins.html\" target=\"_blank\" rel=\"noopener\">https://docs.gradle.org/current/userguide/custom_plugins.html</a> Gradle官方的自定义插件文档，这篇是必看的，非常简单的HelloWorld例子。看完肯定还是不会写Gradle插件的，呵呵！</li>\n</ul>\n<h1 id=\"自定义Gradle-Plugin\"><a href=\"#自定义Gradle-Plugin\" class=\"headerlink\" title=\"自定义Gradle Plugin\"></a>自定义Gradle Plugin</h1><p>不废话了，下面进入正式的开发过程，这次我们在前面<a href=\"http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/\">Gradle实践之自定义打包jar+Log开关自动关闭</a>的基础上，把打包Jar、混淆Jar包的任务都丢到插件里，然后呢，我们这次自己写JavaCompile任务，这样一来，如果是做SDK开发的同学，实际上几乎就可以不用<code>com.android.library</code>插件了，当然我个人觉得吧，能不重复造轮子就不要重复造了，等下会大家看到这点的。</p>\n<h2 id=\"1-新建一个Groovy工程\"><a href=\"#1-新建一个Groovy工程\" class=\"headerlink\" title=\"1.新建一个Groovy工程\"></a>1.新建一个Groovy工程</h2><p>如下图所示，我新建了一个名为<code>HelloGradlePlugin</code>的文件夹。</p>\n<p><img src=\"/content/images/new-a-plugin-folder.png\" alt=\"New a groovy folder\"></p>\n<p>接着在文件夹里新建了一个名为<code>build.gradle</code>的文件，里面现在没有任何代码。</p>\n<p><img src=\"/content/images/new-a-gradle-file.png\" alt=\"New a gradle file\"></p>\n<p>这里有点奇怪吗？是的，为啥不是用AS直接new一个project？前面说了，AS默认新建的只能选择Android Project，下面我们看看怎么使用这一步建立的文件夹。</p>\n<h2 id=\"2-建立项目结构\"><a href=\"#2-建立项目结构\" class=\"headerlink\" title=\"2.建立项目结构\"></a>2.建立项目结构</h2><p>打开Android Studio，选择<code>File-&gt;Open</code>，打开刚才这个文件夹。如图所示：</p>\n<p><img src=\"/content/images/open-the-plugin.png\" alt=\"Open the plugin project\"></p>\n<p>这时AS会提示我们是否使用本地的<code>Gradle Wrapper</code>，点击<code>yes</code>，AS会帮我们在<code>HelloGradlePlugin</code>文件夹下面自动生成对应的gradle文件夹和文件。</p>\n<p><img src=\"/content/images/use-your-gradle-wrapper.png\" alt=\"use-your-gradle-wrapper\"></p>\n<p>这样，我们就算在AS中导入我们的Gradle Plugin工程了。下面我们建立项目结构。</p>\n<p>首先，在<code>src</code>文件夹下面分别建立<code>main/groovy/</code>文件夹和<code>resources/META-INF/gradle-plugins</code>。</p>\n<p><img src=\"/content/images/create-folders.png\" alt=\"create-folders\"></p>\n<p>然后，在<code>src/main/resources/META-INF/gradle-plugins</code>文件夹下面新建一个<code>hello-world-plugin.properties</code>文件，这个文件的名字就是我们就是我们这个Gradle插件的名字(即<code>name</code>)，将来在其他项目中引用这个插件的时候，就需要指定为这个名字，在最后面会详细介绍这个<code>name</code>是怎么用的。</p>\n<p>接着需要在这个文件中添加一行代码。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation-class = com<span class=\"selector-class\">.nought</span><span class=\"selector-class\">.gradle</span><span class=\"selector-class\">.plugin</span><span class=\"selector-class\">.HelloPlugin</span></span><br></pre></td></tr></table></figure>\n<p>意思是我们的插件名字叫<code>hello-world-plugin</code>，实现这个插件功能的类名为<code>HelloPlugin</code>。</p>\n<p>在实现<code>helloPlugin</code>这个类之前，我们先给这个Project添加一下依赖，因为我们最开始是通过新建文件夹的形式，然后在AS中导入这个项目，所以它还没有把groovy相关的包依赖进来。我们在项目名字上右键，选择<code>Open Module Settings</code>，然后添加Dependencies，如下图所示：</p>\n<p><img src=\"/content/images/add-groovy-sdk.png\" alt=\"add-groovy-sdk\"></p>\n<p>最后，我们在<code>src/main/groovy</code>下面新建一个一个名为<code>com.nought.gradle.plugin</code>的package。</p>\n<p><img src=\"/content/images/new-class-folder.png\" alt=\"new-class-folder\"></p>\n<p>并在这个包下建立名为<code>HelloPlugin</code>的类(右键<code>new file</code>-&gt;输入<code>HelloPlugin.groovy</code>)。</p>\n<p>下面开始写代码，我们通过自己定义一个插件，来实现前一篇博客里面的gradle打包功能，它可以把我们指定的java代码打包成jar包，并按照配置决定是否进行混淆，并输出到一个指定的文件夹中。</p>\n<h2 id=\"3-实现Plugin接口\"><a href=\"#3-实现Plugin接口\" class=\"headerlink\" title=\"3.实现Plugin接口\"></a>3.实现Plugin接口</h2><p>定义了<code>HelloPlugin</code>类，我们要让它实现Plugin接口，并实现其中的<code>apply</code>方法。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com<span class=\"selector-class\">.nought</span><span class=\"selector-class\">.gradle</span><span class=\"selector-class\">.plugin</span></span><br><span class=\"line\"></span><br><span class=\"line\">import org<span class=\"selector-class\">.gradle</span><span class=\"selector-class\">.api</span><span class=\"selector-class\">.Plugin</span></span><br><span class=\"line\">import org<span class=\"selector-class\">.gradle</span><span class=\"selector-class\">.api</span><span class=\"selector-class\">.Project</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class HelloPlugin implements Plugin&lt;Project&gt; &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    void apply(Project project) &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-定义Extension\"><a href=\"#4-定义Extension\" class=\"headerlink\" title=\"4.定义Extension\"></a>4.定义Extension</h2><p>首先，什么是Extension？</p>\n<p>Extension就是扩展属性，指的是你可以给你的project添加额外的gradle约定之外的其他properties属性。我们在Android项目里的<code>build.gradle</code>文件中通常使用的诸如下面这种代码：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">android </span>&#123;</span><br><span class=\"line\">    compileSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">    <span class=\"keyword\">buildToolsVersion </span><span class=\"string\">\"22.0.1\"</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是在给Android插件的Extension的<code>compileSdkVersion</code>和<code>buildToolsVersion</code>赋值。我们自己写一个插件，也要实现同样的效果。只要在gradle文件里apply了我们的自定义的插件，我们就可以给自定义的插件赋予额外的属性，并在插件里用到它们，例如你打一个jar包时可以把输出文件存放地址传入进去等等。</p>\n<p>So，新建一个名为<code>HelloPluginExtension</code>的类，表明这是<code>HelloPlugin</code>的扩展属性。并在这个类里面添加一些<code>String</code>类型的变量，如下所示：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nought.gradle.plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloPluginExtension</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">String</span> javaSrcDir <span class=\"comment\">// java源码的目录</span></span><br><span class=\"line\">    <span class=\"keyword\">String</span> classesOutDir <span class=\"comment\">// 编译输出的class文件目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">String</span> outputFileDir <span class=\"comment\">// 输出的jar包目录</span></span><br><span class=\"line\">    <span class=\"keyword\">String</span> outputFileName <span class=\"comment\">// 输出的jar包文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">String</span> androidJarDir</span><br><span class=\"line\">    <span class=\"keyword\">String</span> javaBase</span><br><span class=\"line\">    <span class=\"keyword\">String</span> javaRt</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">String</span> proguardConfigFile</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很显然，其实你可输入任何Java语言中的变量类型。这些属性在apply我们的插件时，都可以在build.gradle脚本中传入。</p>\n<h2 id=\"5-在Plugin中增加自定义的task\"><a href=\"#5-在Plugin中增加自定义的task\" class=\"headerlink\" title=\"5.在Plugin中增加自定义的task\"></a>5.在Plugin中增加自定义的task</h2><p>刚才定义了Extension里面的一些属性，自定义Gradle Plugin的框架就基本是这样了，当然你要是只写一个 <strong>helloworld</strong> demo尝尝口味，那就没必要干下面的事情了。</p>\n<p>接下来我们要在<code>HelloPlugin</code>中用到这个属性，并增加一些实现了不同功能的tasks。</p>\n<p>本例子中，我们自定义的插件可以编译Java源代码，并把生成的class文件打包成jar，再根据需求决定是不是混淆它。下面直接上代码：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.nought.gradle.plugin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.JavaVersion</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.Plugin</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.<span class=\"keyword\">Project</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.tasks.<span class=\"keyword\">Copy</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.tasks.bundling.Jar</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gradle.api.tasks.<span class=\"keyword\">compile</span>.JavaCompile</span><br><span class=\"line\"><span class=\"keyword\">import</span> proguard.gradle.ProGuardTask</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> HelloPlugin <span class=\"keyword\">implements</span> Plugin&lt;<span class=\"keyword\">Project</span>&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PLUGIN_NAME = <span class=\"string\">\"helloPlugin\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">Project</span> <span class=\"keyword\">project</span></span><br><span class=\"line\">    HelloPluginExtension extension</span><br><span class=\"line\"></span><br><span class=\"line\">    JavaCompile compileJavaSrc</span><br><span class=\"line\">    Jar jarLib</span><br><span class=\"line\">    ProGuardTask proguardLib</span><br><span class=\"line\">    <span class=\"keyword\">Copy</span> copyLib</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">void</span> apply(<span class=\"keyword\">Project</span> <span class=\"keyword\">project</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">project</span> = <span class=\"keyword\">project</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.extension = <span class=\"keyword\">project</span>.extensions.create(PLUGIN_NAME, HelloPluginExtension)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">project</span>.afterEvaluate &#123;</span><br><span class=\"line\">            createSomeTasks()</span><br><span class=\"line\">            <span class=\"comment\">// 如果是执行packageProguardJar任务，那么要提前关闭log开关</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">'packageProguardJar'</span> in <span class=\"keyword\">project</span>.gradle.startParameter.taskNames) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">project</span>.tasks.getByName(<span class=\"string\">\"preBuild\"</span>).<span class=\"keyword\">doFirst</span> &#123;</span><br><span class=\"line\">                    enableLoggerDebug(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> createSomeTasks() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Create a task to compile all java sources.</span></span><br><span class=\"line\">        compileJavaSrc = <span class=\"keyword\">project</span>.tasks.create(<span class=\"string\">\"compileJava\"</span>, JavaCompile);</span><br><span class=\"line\">        compileJavaSrc.setDescription(<span class=\"string\">\"编译java源代码\"</span>)</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">source</span> = extension.javaSrcDir</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">include</span>(<span class=\"string\">\"com/nought/hellolib/**\"</span>)</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">classpath</span> = <span class=\"keyword\">project</span>.files([extension.androidJarDir + <span class=\"string\">\"/android.jar\"</span>, extension.javaBase + <span class=\"string\">\"/\"</span> + extension.javaRt])</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">destinationDir</span> = <span class=\"keyword\">project</span>.<span class=\"keyword\">file</span>(extension.classesOutDir)</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">sourceCompatibility</span> = JavaVersion.VERSION_1_7</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">targetCompatibility</span> = JavaVersion.VERSION_1_7</span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">options</span>.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">options</span>.debug = <span class=\"keyword\">false</span></span><br><span class=\"line\">        compileJavaSrc.<span class=\"keyword\">options</span>.verbose = <span class=\"keyword\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Create a task to jar the classes.</span></span><br><span class=\"line\">        jarLib = <span class=\"keyword\">project</span>.tasks.create(<span class=\"string\">\"jarLib\"</span>, Jar);</span><br><span class=\"line\">        jarLib.setDescription(<span class=\"string\">\"将class文件打包成jar\"</span>)</span><br><span class=\"line\">        jarLib.dependsOn compileJavaSrc</span><br><span class=\"line\">        jarLib.archiveName = <span class=\"string\">\"helloLib.jar\"</span></span><br><span class=\"line\">        jarLib.<span class=\"keyword\">from</span>(extension.classesOutDir)</span><br><span class=\"line\">        jarLib.<span class=\"keyword\">destinationDir</span> = <span class=\"keyword\">project</span>.<span class=\"keyword\">file</span>(extension.outputFileDir)</span><br><span class=\"line\">        jarLib.<span class=\"keyword\">exclude</span>(<span class=\"string\">\"com/nought/hellolib/BuildConfig.class\"</span>)</span><br><span class=\"line\">        jarLib.<span class=\"keyword\">exclude</span>(<span class=\"string\">\"com/nought/hellolib/BuildConfig\\$*.class\"</span>)</span><br><span class=\"line\">        jarLib.<span class=\"keyword\">exclude</span>(<span class=\"string\">\"**/R.class\"</span>)</span><br><span class=\"line\">        jarLib.<span class=\"keyword\">exclude</span>(<span class=\"string\">\"**/R\\$*.class\"</span>)</span><br><span class=\"line\">        jarLib.<span class=\"keyword\">include</span>(<span class=\"string\">\"com/nought/hellolib/*.class\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Create a task to proguard the jar.</span></span><br><span class=\"line\">        proguardLib = <span class=\"keyword\">project</span>.tasks.create(<span class=\"string\">\"proguardLib\"</span>, ProGuardTask);</span><br><span class=\"line\">        proguardLib.setDescription(<span class=\"string\">\"混淆jar包\"</span>)</span><br><span class=\"line\">        proguardLib.dependsOn jarLib</span><br><span class=\"line\">        proguardLib.injars(extension.outputFileDir + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"helloLib.jar\"</span>)</span><br><span class=\"line\">        proguardLib.outjars(extension.outputFileDir + <span class=\"string\">\"/\"</span> + extension.outputFileName)</span><br><span class=\"line\">        proguardLib.libraryjars(extension.androidJarDir + <span class=\"string\">\"/android.jar\"</span>)</span><br><span class=\"line\">        proguardLib.libraryjars(extension.javaBase + <span class=\"string\">\"/\"</span> + extension.javaRt)</span><br><span class=\"line\">        proguardLib.configuration(extension.proguardConfigFile)</span><br><span class=\"line\">        proguardLib.printmapping(extension.outputFileDir + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"helloLib.mapping\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Create a task to copy the jar.</span></span><br><span class=\"line\">        copyLib = <span class=\"keyword\">project</span>.tasks.create(<span class=\"string\">\"copyLib\"</span>, <span class=\"keyword\">Copy</span>);</span><br><span class=\"line\">        copyLib.setDescription(<span class=\"string\">\"不混淆，仅拷贝jar包\"</span>)</span><br><span class=\"line\">        copyLib.dependsOn jarLib</span><br><span class=\"line\">        copyLib.<span class=\"keyword\">from</span>(extension.outputFileDir)</span><br><span class=\"line\">        copyLib.<span class=\"keyword\">into</span>(extension.outputFileDir)</span><br><span class=\"line\">        copyLib.<span class=\"keyword\">include</span>(<span class=\"string\">\"helloLib.jar\"</span>)</span><br><span class=\"line\">        copyLib.rename(<span class=\"string\">\"helloLib.jar\"</span>, extension.outputFileName)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> packageProguardJar = <span class=\"keyword\">project</span>.tasks.create(<span class=\"string\">\"packageProguardJar\"</span>);</span><br><span class=\"line\">        packageProguardJar.setDescription(<span class=\"string\">\"打包混淆、关闭log开关的hello lib\"</span>)</span><br><span class=\"line\">        <span class=\"comment\">// packageProguardJar任务作为一个钩子，依赖真正执行工作的proguardLib</span></span><br><span class=\"line\">        packageProguardJar.dependsOn proguardLib</span><br><span class=\"line\">        <span class=\"comment\">// 最后把log开关置回原来开发时的状态</span></span><br><span class=\"line\">        packageProguardJar.<span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">            enableLoggerDebug(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> packageNoProguardJar = <span class=\"keyword\">project</span>.tasks.create(<span class=\"string\">\"packageNoProguardJar\"</span>);</span><br><span class=\"line\">        packageNoProguardJar.setDescription(<span class=\"string\">\"打包不混淆、开启log开关的hello lib\"</span>)</span><br><span class=\"line\">        <span class=\"comment\">// packageNoProguardJar任务作为一个钩子，依赖真正执行工作的copyLib</span></span><br><span class=\"line\">        packageNoProguardJar.dependsOn copyLib</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 开启/关闭Log开关</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> enableLoggerDebug(<span class=\"keyword\">boolean</span> flag) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> loggerFilePath = <span class=\"string\">\"src/main/java/com/nought/hellolib/UncleNought.java\"</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> updatedDebug = <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(loggerFilePath).<span class=\"keyword\">getText</span>(<span class=\"string\">'UTF-8'</span>)</span><br><span class=\"line\">                .replaceAll(<span class=\"string\">\"ENABLE_DEBUG\\\\s?=\\\\s?\"</span> + (!flag).toString(), <span class=\"string\">\"ENABLE_DEBUG = \"</span> + flag.toString())</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"keyword\">File</span>(loggerFilePath).<span class=\"keyword\">write</span>(updatedDebug, <span class=\"string\">'UTF-8'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">println</span>(flag ? <span class=\"string\">'ENABLE_DEBUG : [true]'</span> : <span class=\"string\">'ENABLE_DEBUG : [false]'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码不多，其实就是创建了4个task，彼此之间有依赖，最后再创建两个钩子任务，他们不做实际的工作，只是通过钩子任务去依赖真正实现了功能的task。大家如果看过Android Gradle Plugin的实现，就知道assembleXXX任务就是这么干的。</p>\n<h2 id=\"6-发布插件\"><a href=\"#6-发布插件\" class=\"headerlink\" title=\"6.发布插件\"></a>6.发布插件</h2><p>为了让其他的项目能引用这个打包插件，需要将这个插件发布出去，我们在插件项目的根目录下的<code>build.gradle</code>文件。添加下面的代码：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'groovy'</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">'maven'</span></span><br><span class=\"line\"></span><br><span class=\"line\">version = <span class=\"string\">'1.0.0'</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> = <span class=\"string\">'com.nought.gradle.plugin'</span></span><br><span class=\"line\">archivesBaseName = <span class=\"string\">'hello-gradle-plugin'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> gradleApi()</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> localGroovy()</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> files(<span class=\"string\">'libs/proguard.jar'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一定要记得使用交叉编译选项，因为我们可能用很高的JDK版本编译，为了让安装了低版本的同学能用上我们写的插件，必须设定source和target</span></span><br><span class=\"line\">compileGroovy &#123;</span><br><span class=\"line\">    <span class=\"keyword\">sourceCompatibility</span> = <span class=\"number\">1.7</span></span><br><span class=\"line\">    <span class=\"keyword\">targetCompatibility</span> = <span class=\"number\">1.7</span></span><br><span class=\"line\">    <span class=\"keyword\">options</span>.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">uploadArchives &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span>.mavenDeployer &#123;</span><br><span class=\"line\"><span class=\"comment\">// 如果你公司或者自己搭了nexus私服，那么可以将插件deploy到上面去</span></span><br><span class=\"line\"><span class=\"comment\">//        repository(url: \"http://10.XXX.XXX.<span class=\"doctag\">XXX:</span>8080/nexus/content/repositories/releases/\") &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            authentication(userName: \"admin\", password: \"admin\")</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 如果没有私服的话，发布到本地也是ok的</span></span><br><span class=\"line\">        repository(url: <span class=\"string\">'file:release/libs'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码就是通过<code>groovy</code>插件编译打包我们的插件代码，并通过<code>maven</code>插件publish到指定的服务器。我们为了调试，先将插件发布到本地的<code>release/libs</code>文件夹下面就行。</p>\n<h2 id=\"7-在自己项目中应用写好的插件\"><a href=\"#7-在自己项目中应用写好的插件\" class=\"headerlink\" title=\"7.在自己项目中应用写好的插件\"></a>7.在自己项目中应用写好的插件</h2><p>现在假设我们把刚才的插件打包，发布到了<code>release/libs</code>下面。这时属于本地的发布和引用，我们可以将这个libs下面的文件夹全部拷贝到自己的Android项目根目录的<code>libs</code>下面去，一般可能Android项目下的根目录中没有这个文件夹，那么我们就新建一个<code>libs</code>，再把gradle插件的文件夹全部丢进去。以前一篇博客的Android工程为例。</p>\n<p>首先在项目根目录的<code>build.gradle</code>文件中按照下面的方式引用：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\"><span class=\"comment\">// 假如你有私服可以用的话，可以引用私服</span></span><br><span class=\"line\"><span class=\"comment\">// url 'http://10.XXX.XXX.<span class=\"doctag\">XXX:</span>8080/nexus/content/repositories/releases/'</span></span><br><span class=\"line\"><span class=\"comment\">// 没有的话，就本地引入</span></span><br><span class=\"line\">            url <span class=\"string\">'libs'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">'com.android.tools.build:gradle:1.3.0'</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 自定义的插件以 groupId:name:版本号 的方式引用，这个name来自插件工程下的hello-world-plugin.properties文件名</span></span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">'com.nought.gradle.plugin:hello-gradle-plugin:1.0.0'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">allprojects</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\"><span class=\"comment\">// 假如你有私服可以用的话，可以引用私服</span></span><br><span class=\"line\"><span class=\"comment\">// url 'http://10.XXX.XXX.<span class=\"doctag\">XXX:</span>8080/nexus/content/repositories/releases/'</span></span><br><span class=\"line\"><span class=\"comment\">// 没有的话，就本地引入，这里是给subProject设置，和上面类似</span></span><br><span class=\"line\">            url <span class=\"string\">'libs'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在需要使用自定义插件的Module中apply这个插件。并将该自定义插件的Extension传入进去，如下所示：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">apply</span> plugin: <span class=\"string\">'com.android.library'</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">'hello-gradle-plugin'</span></span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compileSdkVersion</span> <span class=\"number\">22</span></span><br><span class=\"line\">    buildToolsVersion <span class=\"string\">\"22.0.1\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        <span class=\"attribute\">minSdkVersion</span> <span class=\"number\">14</span></span><br><span class=\"line\">        targetSdkVersion <span class=\"number\">22</span></span><br><span class=\"line\">        versionCode <span class=\"number\">1</span></span><br><span class=\"line\">        versionName <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        <span class=\"section\">release</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">buildConfigField</span> <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"ENABLE_DEBUG\"</span>, <span class=\"string\">\"false\"</span></span><br><span class=\"line\">            minifyEnabled <span class=\"literal\">false</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"literal\">debug</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">buildConfigField</span> <span class=\"string\">\"boolean\"</span>, <span class=\"string\">\"ENABLE_DEBUG\"</span>, <span class=\"string\">\"true\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    <span class=\"attribute\">compile</span> fileTree(dir: <span class=\"string\">'libs'</span>, include: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">helloPlugin &#123;</span><br><span class=\"line\">    <span class=\"attribute\">javaSrcDir</span> = <span class=\"string\">'src/main/java'</span></span><br><span class=\"line\">    classesOutDir = <span class=\"string\">'build/out_classes'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    outputFileDir = <span class=\"string\">'release'</span></span><br><span class=\"line\">    outputFileName = <span class=\"string\">'helloLib-release.jar'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    // Android SDK Dir</span><br><span class=\"line\">    androidJarDir = android.getSdkDirectory().toString() + <span class=\"string\">\"/platforms/\"</span> + <span class=\"string\">\"<span class=\"variable\">$&#123;android.compileSdkVersion&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    // JAVA HOME</span><br><span class=\"line\">    javaBase = System.properties[<span class=\"string\">\"java.home\"</span>]</span><br><span class=\"line\">    javaRt = <span class=\"string\">\"/lib/rt.jar\"</span></span><br><span class=\"line\">    if (System.properties[<span class=\"string\">\"os.name\"</span>].toLowerCase().contains(<span class=\"string\">\"mac\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"attribute\">if</span> (!new File(javaBase + javaRt).exists()) &#123;</span><br><span class=\"line\">            <span class=\"attribute\">javaRt</span> = <span class=\"string\">\"/../Classes/classes.jar\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    proguardConfigFile = <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这时我们的Android工程下的gradle打包脚本就干净多了，所有的任务都丢到自定义的插件里面去了。需要动态指定的属性，通过Extension就可以进行赋值，非常方便。</p>\n<p>当需要打包时，打开Android Studio自带的终端，输入<code>cd hellolib</code>进入lib工程的目录，再输入<code>gradle packageProguardJar</code>或者<code>gradle packageNoProguardJar</code>就可以打包了。打包出来的jar怎么给app module去引用，就不赘述了。</p>\n<p>你甚至可以在自己的Gradle插件里再写一个copy task，直接将打好的helloLib.jar拷贝到app目录的libs下面，这样就更方便了。另外，app module下的版本号管理任务，你也可以把他们丢到自定义的插件里面去，如果你的生成环境要求你的Android工程尽可能简洁时，建议大家都封装一个自己的打包插件，deploy到公司的maven私服去。</p>\n<p>最后贴上<a href=\"https://github.com/unclechen/HelloGradlePlugin\" target=\"_blank\" rel=\"noopener\">Gradle插件工程</a>和引用插件工程打包的<a href=\"https://github.com/unclechen/HelloGradle\" target=\"_blank\" rel=\"noopener\">Android工程</a>供参考。</p>\n<h1 id=\"容易遇到的问题\"><a href=\"#容易遇到的问题\" class=\"headerlink\" title=\"容易遇到的问题\"></a>容易遇到的问题</h1><h2 id=\"遇到Unsupported-major-minor-version-52-0问题\"><a href=\"#遇到Unsupported-major-minor-version-52-0问题\" class=\"headerlink\" title=\"遇到Unsupported major.minor version 52.0问题\"></a>遇到<code>Unsupported major.minor version 52.0</code>问题</h2><p>这个前面我提过，在插件工程的打包脚本中，有一个交叉编译选项，如果你使用高版本的JDK编写Gradle插件，为了让你打出来的Gradle Plugin（实际上就是一个jar包），能在别人低版本的JRE上跑起来，你就必须使用这个选项。否则，人家还要去安装一个新的JDK，就很蛋疼了。</p>\n<p>请记得加上这个：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">compileGroovy &#123;</span><br><span class=\"line\">    <span class=\"keyword\">sourceCompatibility</span> = <span class=\"number\">1.7</span></span><br><span class=\"line\">    <span class=\"keyword\">targetCompatibility</span> = <span class=\"number\">1.7</span></span><br><span class=\"line\">    <span class=\"keyword\">options</span>.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjh4tf8dq0007mtsxi660t7mm","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8dx000dmtsxiazmlnj2"},{"post_id":"cjh4tf8df0000mtsx3q5f0ydg","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8dz000hmtsxueh37chv"},{"post_id":"cjh4tf8dr0008mtsxn762bd56","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8e1000jmtsxjsdk6grs"},{"post_id":"cjh4tf8du000bmtsx8lel0lmm","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8e3000mmtsxqtvb0wp4"},{"post_id":"cjh4tf8dk0002mtsxzso5bqpe","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8e4000pmtsxpu0kg8pm"},{"post_id":"cjh4tf8dw000cmtsxu5zswyfy","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8e6000tmtsxbua0vj9j"},{"post_id":"cjh4tf8dy000gmtsxtm03ddtd","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8e7000wmtsx6jclv71o"},{"post_id":"cjh4tf8do0006mtsxgp5oimbg","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8e8000zmtsxrop9wdp1"},{"post_id":"cjh4tf8e0000imtsxuvfr0ol9","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8e90011mtsx0tvdxfz1"},{"post_id":"cjh4tf8e2000lmtsxqlg0i90p","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8eb0014mtsxlqreiefc"},{"post_id":"cjh4tf8e3000omtsxty0ig0va","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8ec0017mtsx5kpinzs0"},{"post_id":"cjh4tf8e5000smtsxh47ekpez","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8ed001bmtsx9c3wyrw3"},{"post_id":"cjh4tf8e6000vmtsxmdpg0yn6","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8ee001emtsx9jvgxidi"},{"post_id":"cjh4tf8e7000ymtsxlj1odfyc","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8eg001hmtsxk73y6chn"},{"post_id":"cjh4tf8e90010mtsxcjxspcbn","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8eh001jmtsxz0n8t3n3"},{"post_id":"cjh4tf8ea0013mtsxn887y9cn","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8ej001mmtsx5zfvhe02"},{"post_id":"cjh4tf8eb0016mtsx8g4sgtif","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8ek001pmtsxcd0zhquz"},{"post_id":"cjh4tf8ed001amtsx1uw9fzlc","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8el001tmtsx71tk44ag"},{"post_id":"cjh4tf8ee001dmtsx8zgoa65b","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8em001vmtsxakyf92sf"},{"post_id":"cjh4tf8ef001gmtsxsmdopttu","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8em001xmtsxlhdy7pix"},{"post_id":"cjh4tf8eg001imtsx9esq2b9v","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8em001ymtsxb3lawr7j"},{"post_id":"cjh4tf8ei001lmtsxaz3p1zfc","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8em001zmtsxivr3czw8"},{"post_id":"cjh4tf8ej001omtsx99awrzse","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8en0022mtsxlr479cf2"},{"post_id":"cjh4tf8el001smtsxym1v0m5p","category_id":"cjh4tf8dm0004mtsxfigs6fpt","_id":"cjh4tf8en0024mtsxie2bd11h"}],"PostTag":[{"post_id":"cjh4tf8df0000mtsx3q5f0ydg","tag_id":"cjh4tf8do0005mtsx66xxiqqx","_id":"cjh4tf8e3000nmtsxwwwb0ipj"},{"post_id":"cjh4tf8df0000mtsx3q5f0ydg","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8e4000qmtsxtpf0j34r"},{"post_id":"cjh4tf8df0000mtsx3q5f0ydg","tag_id":"cjh4tf8dy000fmtsx47tsrhju","_id":"cjh4tf8e6000umtsxks969e0x"},{"post_id":"cjh4tf8dk0002mtsxzso5bqpe","tag_id":"cjh4tf8do0005mtsx66xxiqqx","_id":"cjh4tf8eb0015mtsx50cfybla"},{"post_id":"cjh4tf8dk0002mtsxzso5bqpe","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8ec0018mtsx3ns09w2c"},{"post_id":"cjh4tf8dk0002mtsxzso5bqpe","tag_id":"cjh4tf8dy000fmtsx47tsrhju","_id":"cjh4tf8ee001cmtsxmev9qfwc"},{"post_id":"cjh4tf8do0006mtsxgp5oimbg","tag_id":"cjh4tf8do0005mtsx66xxiqqx","_id":"cjh4tf8ej001nmtsxbw4uwzwg"},{"post_id":"cjh4tf8do0006mtsxgp5oimbg","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8ek001qmtsxylh4k8un"},{"post_id":"cjh4tf8do0006mtsxgp5oimbg","tag_id":"cjh4tf8dy000fmtsx47tsrhju","_id":"cjh4tf8el001umtsx52u6ih03"},{"post_id":"cjh4tf8dq0007mtsxi660t7mm","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8en0021mtsxt8uk6hf6"},{"post_id":"cjh4tf8dq0007mtsxi660t7mm","tag_id":"cjh4tf8ek001rmtsxkdvqw5uz","_id":"cjh4tf8en0023mtsxz8x9bt2a"},{"post_id":"cjh4tf8dq0007mtsxi660t7mm","tag_id":"cjh4tf8em001wmtsxv8pvazt2","_id":"cjh4tf8en0026mtsxo2chbzxe"},{"post_id":"cjh4tf8dr0008mtsxn762bd56","tag_id":"cjh4tf8en0020mtsxhl32m9cv","_id":"cjh4tf8eo0028mtsxezdeolai"},{"post_id":"cjh4tf8dr0008mtsxn762bd56","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8eo0029mtsx5uivqiei"},{"post_id":"cjh4tf8du000bmtsx8lel0lmm","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8eo002bmtsxtoeqlvqp"},{"post_id":"cjh4tf8du000bmtsx8lel0lmm","tag_id":"cjh4tf8eo0027mtsxtu6n22yj","_id":"cjh4tf8eo002cmtsx5hhjmrgy"},{"post_id":"cjh4tf8dw000cmtsxu5zswyfy","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8ep002emtsxglgclrfv"},{"post_id":"cjh4tf8dw000cmtsxu5zswyfy","tag_id":"cjh4tf8eo002amtsxcou8r7w4","_id":"cjh4tf8ep002fmtsxbhes9kxs"},{"post_id":"cjh4tf8dy000gmtsxtm03ddtd","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8ep002hmtsxxkzdctrd"},{"post_id":"cjh4tf8dy000gmtsxtm03ddtd","tag_id":"cjh4tf8dy000fmtsx47tsrhju","_id":"cjh4tf8ep002imtsx47hg0gr9"},{"post_id":"cjh4tf8dy000gmtsxtm03ddtd","tag_id":"cjh4tf8eo002dmtsx3s0fgjkc","_id":"cjh4tf8eq002kmtsxswsc9u4j"},{"post_id":"cjh4tf8e0000imtsxuvfr0ol9","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8eq002lmtsxlyflhj6q"},{"post_id":"cjh4tf8e0000imtsxuvfr0ol9","tag_id":"cjh4tf8dy000fmtsx47tsrhju","_id":"cjh4tf8eq002nmtsxgn39f6sh"},{"post_id":"cjh4tf8e0000imtsxuvfr0ol9","tag_id":"cjh4tf8eo002dmtsx3s0fgjkc","_id":"cjh4tf8eq002omtsx6czs1k6l"},{"post_id":"cjh4tf8e2000lmtsxqlg0i90p","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8er002qmtsxclm7ji5a"},{"post_id":"cjh4tf8e2000lmtsxqlg0i90p","tag_id":"cjh4tf8ep002jmtsx0hbv0yw9","_id":"cjh4tf8er002rmtsx2bldui8q"},{"post_id":"cjh4tf8e3000omtsxty0ig0va","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8er002tmtsxe3pbe7w9"},{"post_id":"cjh4tf8e3000omtsxty0ig0va","tag_id":"cjh4tf8eq002mmtsxxq4sxaml","_id":"cjh4tf8er002umtsxfhlgffzd"},{"post_id":"cjh4tf8e5000smtsxh47ekpez","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8er002wmtsx0wschmnu"},{"post_id":"cjh4tf8e5000smtsxh47ekpez","tag_id":"cjh4tf8eo002amtsxcou8r7w4","_id":"cjh4tf8es002xmtsx0sbsvnw2"},{"post_id":"cjh4tf8e6000vmtsxmdpg0yn6","tag_id":"cjh4tf8er002smtsxmfs3kiv6","_id":"cjh4tf8es0030mtsxj6nr12oc"},{"post_id":"cjh4tf8e6000vmtsxmdpg0yn6","tag_id":"cjh4tf8er002vmtsx57px752o","_id":"cjh4tf8es0031mtsxv1tq65uo"},{"post_id":"cjh4tf8e6000vmtsxmdpg0yn6","tag_id":"cjh4tf8es002ymtsxkmk7selo","_id":"cjh4tf8et0033mtsxwlf89ll7"},{"post_id":"cjh4tf8e7000ymtsxlj1odfyc","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8eu0037mtsxkqdhk6ql"},{"post_id":"cjh4tf8e7000ymtsxlj1odfyc","tag_id":"cjh4tf8es002zmtsxni7q7qpr","_id":"cjh4tf8eu0038mtsxniszmmm1"},{"post_id":"cjh4tf8e7000ymtsxlj1odfyc","tag_id":"cjh4tf8es0032mtsxp72w1j71","_id":"cjh4tf8eu003amtsxqqyttm2z"},{"post_id":"cjh4tf8e7000ymtsxlj1odfyc","tag_id":"cjh4tf8et0034mtsxy48gximo","_id":"cjh4tf8eu003bmtsxkdxzh0sl"},{"post_id":"cjh4tf8e7000ymtsxlj1odfyc","tag_id":"cjh4tf8et0035mtsxsbruupwt","_id":"cjh4tf8ev003dmtsx514voj2q"},{"post_id":"cjh4tf8e90010mtsxcjxspcbn","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8ev003emtsxlfcpny9n"},{"post_id":"cjh4tf8e90010mtsxcjxspcbn","tag_id":"cjh4tf8ek001rmtsxkdvqw5uz","_id":"cjh4tf8ev003gmtsxdseh3369"},{"post_id":"cjh4tf8ea0013mtsxn887y9cn","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8ev003hmtsx6fatjj11"},{"post_id":"cjh4tf8ea0013mtsxn887y9cn","tag_id":"cjh4tf8eo002amtsxcou8r7w4","_id":"cjh4tf8ev003jmtsxbm5j1zfb"},{"post_id":"cjh4tf8eb0016mtsx8g4sgtif","tag_id":"cjh4tf8eu003cmtsxfsx4fwdv","_id":"cjh4tf8ev003kmtsxet8u0fjq"},{"post_id":"cjh4tf8eb0016mtsx8g4sgtif","tag_id":"cjh4tf8ev003fmtsxwhzobbyh","_id":"cjh4tf8ew003mmtsxcbrhqmmz"},{"post_id":"cjh4tf8ed001amtsx1uw9fzlc","tag_id":"cjh4tf8ev003imtsxis5fj6k0","_id":"cjh4tf8ey003tmtsxwhgf9nch"},{"post_id":"cjh4tf8ed001amtsx1uw9fzlc","tag_id":"cjh4tf8es002zmtsxni7q7qpr","_id":"cjh4tf8ey003umtsxgw55zm2u"},{"post_id":"cjh4tf8ed001amtsx1uw9fzlc","tag_id":"cjh4tf8es0032mtsxp72w1j71","_id":"cjh4tf8ez003wmtsxrh4l1wcf"},{"post_id":"cjh4tf8ed001amtsx1uw9fzlc","tag_id":"cjh4tf8et0034mtsxy48gximo","_id":"cjh4tf8ez003xmtsx8ppactjn"},{"post_id":"cjh4tf8ed001amtsx1uw9fzlc","tag_id":"cjh4tf8et0035mtsxsbruupwt","_id":"cjh4tf8ez003zmtsxwkzeppdc"},{"post_id":"cjh4tf8ed001amtsx1uw9fzlc","tag_id":"cjh4tf8ex003qmtsx08mkf3od","_id":"cjh4tf8ez0040mtsx0dq8lcbz"},{"post_id":"cjh4tf8ed001amtsx1uw9fzlc","tag_id":"cjh4tf8ex003rmtsxgpi980ba","_id":"cjh4tf8f00042mtsxwvkc67u3"},{"post_id":"cjh4tf8ee001dmtsx8zgoa65b","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8f00043mtsx7yxq93b3"},{"post_id":"cjh4tf8ee001dmtsx8zgoa65b","tag_id":"cjh4tf8dy000fmtsx47tsrhju","_id":"cjh4tf8f00044mtsx2ci5uoeg"},{"post_id":"cjh4tf8ee001dmtsx8zgoa65b","tag_id":"cjh4tf8ey003smtsx5sr64lb4","_id":"cjh4tf8f10046mtsxqakiacn0"},{"post_id":"cjh4tf8ef001gmtsxsmdopttu","tag_id":"cjh4tf8ey003vmtsxviydhc81","_id":"cjh4tf8f10047mtsxgnxpcpx3"},{"post_id":"cjh4tf8ef001gmtsxsmdopttu","tag_id":"cjh4tf8ez003ymtsxsyb4bivu","_id":"cjh4tf8f10049mtsxvrir7lch"},{"post_id":"cjh4tf8eg001imtsx9esq2b9v","tag_id":"cjh4tf8ez0041mtsxzawqso7t","_id":"cjh4tf8f2004bmtsxvn4shg58"},{"post_id":"cjh4tf8eg001imtsx9esq2b9v","tag_id":"cjh4tf8f00045mtsxhyriwx8k","_id":"cjh4tf8f2004cmtsxypasxg05"},{"post_id":"cjh4tf8eg001imtsx9esq2b9v","tag_id":"cjh4tf8f10048mtsx1fb8t217","_id":"cjh4tf8f2004emtsxy27evahn"},{"post_id":"cjh4tf8ei001lmtsxaz3p1zfc","tag_id":"cjh4tf8f2004amtsxnrj6f8b9","_id":"cjh4tf8f3004gmtsxksdw2i1s"},{"post_id":"cjh4tf8ei001lmtsxaz3p1zfc","tag_id":"cjh4tf8f2004dmtsxdeqn63by","_id":"cjh4tf8f3004hmtsxyzpv6z5p"},{"post_id":"cjh4tf8ej001omtsx99awrzse","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8f3004jmtsxf70i0ozl"},{"post_id":"cjh4tf8ej001omtsx99awrzse","tag_id":"cjh4tf8f2004fmtsxud8cgqsc","_id":"cjh4tf8f4004kmtsx0t8dx2pu"},{"post_id":"cjh4tf8el001smtsxym1v0m5p","tag_id":"cjh4tf8ds000amtsxbf0kjyr9","_id":"cjh4tf8f4004lmtsxdh0xqpss"},{"post_id":"cjh4tf8el001smtsxym1v0m5p","tag_id":"cjh4tf8ek001rmtsxkdvqw5uz","_id":"cjh4tf8f4004mmtsxrqj9n1y6"},{"post_id":"cjh4tf8el001smtsxym1v0m5p","tag_id":"cjh4tf8em001wmtsxv8pvazt2","_id":"cjh4tf8f4004nmtsxx3peopb5"}],"Tag":[{"name":"Android7.x","_id":"cjh4tf8do0005mtsx66xxiqqx"},{"name":"Android","_id":"cjh4tf8ds000amtsxbf0kjyr9"},{"name":"适配","_id":"cjh4tf8dy000fmtsx47tsrhju"},{"name":"打包","_id":"cjh4tf8ek001rmtsxkdvqw5uz"},{"name":"gradle","_id":"cjh4tf8em001wmtsxv8pvazt2"},{"name":"开发环境","_id":"cjh4tf8en0020mtsxhl32m9cv"},{"name":"View","_id":"cjh4tf8eo0027mtsxtu6n22yj"},{"name":"WebView","_id":"cjh4tf8eo002amtsxcou8r7w4"},{"name":"权限","_id":"cjh4tf8eo002dmtsx3s0fgjkc"},{"name":"反编译","_id":"cjh4tf8ep002jmtsx0hbv0yw9"},{"name":"定位","_id":"cjh4tf8eq002mmtsxxq4sxaml"},{"name":"客户端","_id":"cjh4tf8er002smtsxmfs3kiv6"},{"name":"服务器","_id":"cjh4tf8er002vmtsx57px752o"},{"name":"动态化","_id":"cjh4tf8es002ymtsxkmk7selo"},{"name":"SDK","_id":"cjh4tf8es002zmtsxni7q7qpr"},{"name":"埋点","_id":"cjh4tf8es0032mtsxp72w1j71"},{"name":"无埋点","_id":"cjh4tf8et0034mtsxy48gximo"},{"name":"可视化埋点","_id":"cjh4tf8et0035mtsxsbruupwt"},{"name":"python","_id":"cjh4tf8eu003cmtsxfsx4fwdv"},{"name":"爬虫","_id":"cjh4tf8ev003fmtsxwhzobbyh"},{"name":"JS","_id":"cjh4tf8ev003imtsxis5fj6k0"},{"name":"监测","_id":"cjh4tf8ex003qmtsx08mkf3od"},{"name":"数据","_id":"cjh4tf8ex003rmtsxgpi980ba"},{"name":"微技巧","_id":"cjh4tf8ey003smtsx5sr64lb4"},{"name":"Java Web","_id":"cjh4tf8ey003vmtsxviydhc81"},{"name":"后端","_id":"cjh4tf8ez003ymtsxsyb4bivu"},{"name":"React","_id":"cjh4tf8ez0041mtsxzawqso7t"},{"name":"Chrome插件","_id":"cjh4tf8f00045mtsxhyriwx8k"},{"name":"Web","_id":"cjh4tf8f10048mtsx1fb8t217"},{"name":"调试","_id":"cjh4tf8f2004amtsxnrj6f8b9"},{"name":"网络","_id":"cjh4tf8f2004dmtsxdeqn63by"},{"name":"动画","_id":"cjh4tf8f2004fmtsxud8cgqsc"}]}}