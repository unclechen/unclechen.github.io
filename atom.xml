<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UncleChen的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://unclechen.github.io/"/>
  <updated>2019-01-02T04:02:50.000Z</updated>
  <id>http://unclechen.github.io/</id>
  
  <author>
    <name>unclechen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jackson自定义反序列化Deserializer</title>
    <link href="http://unclechen.github.io/2019/01/02/Jackson%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Deserializer/"/>
    <id>http://unclechen.github.io/2019/01/02/Jackson自定义反序列化Deserializer/</id>
    <published>2019-01-02T00:00:00.000Z</published>
    <updated>2019-01-02T04:02:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的文章里总结过<a href="http://unclechen.github.io/2018/12/16/Spring%E4%B8%AD%E4%B8%89%E5%A4%A7JSON%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/">《Spring中三大JSON框架的使用》</a>，里面有提到Jackson的一些基本用法。最近遇到一个问题，就是需要把请求中的字符串进行一个<code>trim</code>，下面看一下怎么做。</p><a id="more"></a><h1 id="一、自定义String类型的Deserializer"><a href="#一、自定义String类型的Deserializer" class="headerlink" title="一、自定义String类型的Deserializer"></a>一、自定义String类型的Deserializer</h1><p>前面介绍过Jackson的核心就是<code>ObjectMapper</code>，通过它来决定反序列化时的一些规则。除了提供的一些<code>configure</code>方法来指定基础类型字段的解析规则，还可以通过注册<code>Module</code>来指定复杂类型（例如自定义的Class等）的解析规则。下面直接看代码，如何对<code>String</code>类型的字段解析后，去除头尾的空格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Primary</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomObjectMapper</span> <span class="keyword">extends</span> <span class="title">ObjectMapper</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CustomObjectMapper</span><span class="params">()</span> </span>&#123;</div><div class="line">    setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);</div><div class="line">    configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="keyword">false</span>);</div><div class="line">    setSerializationInclusion(JsonInclude.Include.NON_NULL);</div><div class="line">    <span class="comment">// ...省略其他configure代码</span></div><div class="line">    SimpleModule <span class="keyword">module</span> = <span class="keyword">new</span> SimpleModule();</div><div class="line">    <span class="comment">// 添加一个自定义Deserializer</span></div><div class="line">    <span class="keyword">module</span>.addDeserializer(String.class, <span class="keyword">new</span> StdScalarDeserializer&lt;String&gt;(String.class) &#123;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(JsonParser p, DeserializationContext ctxt)</span></span></div><div class="line"><span class="function">          <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</div><div class="line">        <span class="keyword">return</span> p.getValueAsString() == <span class="keyword">null</span> ? <span class="keyword">null</span> : p.getValueAsString().trim(); <span class="comment">// 去掉头尾空格</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// </span></div><div class="line">    <span class="keyword">this</span>.registerModule(<span class="keyword">module</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到，其实非常简单。</p><h1 id="二、Deserializer的原理"><a href="#二、Deserializer的原理" class="headerlink" title="二、Deserializer的原理"></a>二、Deserializer的原理</h1><h2 id="2-1-deserialize方法的内部实现"><a href="#2-1-deserialize方法的内部实现" class="headerlink" title="2.1 deserialize方法的内部实现"></a>2.1 deserialize方法的内部实现</h2><p>看到上面自定义的Deserializer，就会想到一个问题，在没有自定义<code>String</code>类型的字段解析前，Jackson也是可以解析字符串类型的字段，自定义的时候也就很简单重写了一个<code>deserialize</code>方法，会不会导致解析出现什么其他的错误？</p><p>为了解答这个问题，要从Jackson的<code>Default Deserializer</code>说起，看下Jackson里面都有哪些<code>StdDeserializer</code>。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fys3d74sp3j310y0sa7dd.jpg" width="600"></p><p>可以看到我们自定义的Deserializer也在最下面。</p><p>还是以<code>String</code>类型为例，Jackson自带一个<code>StringDeserializer</code>，先看一下它是怎么反序列化字符串的，它的<code>deserialize</code>方法源码如下（<code>Jackson-2.8.8</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(JsonParser p, DeserializationContext ctxt)</span> <span class="keyword">throws</span> IOException</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (p.hasToken(JsonToken.VALUE_STRING)) &#123;</div><div class="line">            <span class="keyword">return</span> p.getText();</div><div class="line">        &#125;</div><div class="line">        JsonToken t = p.getCurrentToken();</div><div class="line">        <span class="comment">// [databind#381]</span></div><div class="line">        <span class="keyword">if</span> (t == JsonToken.START_ARRAY) &#123;</div><div class="line">            <span class="keyword">return</span> _deserializeFromArray(p, ctxt);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// need to gracefully handle byte[] data, as base64</span></div><div class="line">        <span class="keyword">if</span> (t == JsonToken.VALUE_EMBEDDED_OBJECT) &#123;</div><div class="line">            Object ob = p.getEmbeddedObject();</div><div class="line">            <span class="keyword">if</span> (ob == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (ob <span class="keyword">instanceof</span> <span class="keyword">byte</span>[]) &#123;</div><div class="line">                <span class="keyword">return</span> ctxt.getBase64Variant().encode((<span class="keyword">byte</span>[]) ob, <span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// otherwise, try conversion using toString()...</span></div><div class="line">            <span class="keyword">return</span> ob.toString();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// allow coercions for other scalar types</span></div><div class="line">        String text = p.getValueAsString();</div><div class="line">        <span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> text;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (String) ctxt.handleUnexpectedToken(_valueClass, p);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>可以看到比我们自定义的<code>deserialize</code>方法要复杂一些，仔细看会发现，它主要是考虑了多种情况，当传入的原始序列化的数据是一个<code>JsonToken.VALUE_STRING</code>时，那就简单的返回一个字符串；当原始的序列化的数据是一个<code>ARRAY</code>（带有<code>[]</code>）或者<code>OBJECT</code>（带有<code>{}</code>）时，而对应的反序列化的字段又是一个<code>String</code>时，它会相应地把<code>ARRAY</code>或者<code>OBJECT</code>转换成<code>[...]</code>或者<code>{...}</code>这样的字符串再返回。</p><p><strong>所以可以确定的是，我们自定义的<code>deserialize</code>方法，在遇到原始数据不是一个简单的<code>VALUE_STRING</code>时，会返回<code>null</code>。具体在业务中是否可以接受，这个就要看个人需求了，请大家注意这一点。</strong></p><h2 id="2-2-如何调用Deserializer"><a href="#2-2-如何调用Deserializer" class="headerlink" title="2.2 如何调用Deserializer"></a>2.2 如何调用Deserializer</h2><p>再看一下Jackson是如何决定使用哪一个Deserializer来反序列化数据。简单看一下源代码（<code>2.8.8版本</code>），在<code>BeanDeserializerFactory.java</code>中有一个<code>createBeanDeserializer</code>方法，这里我不贴代码了，简单说一下逻辑：</p><ul><li>根据字段的Type（这里是<code>String</code>），查找<code>CustomBeanDeserializer</code>，如果找到了，那么直接返回。</li><li>如果没有Custom的<code>Deserializer</code>，那么就查找<code>StdDeserializer</code>，按照上面贴的Jackson自带的<code>Deserializer</code>，这里就会返回<code>StringDeserializer</code>了。</li></ul><p>因此可以确认如果对<code>String</code>类型的字段自定义了一个<code>Deserializer</code>，那么Jackson便<strong>不再会使用自带的<code>StringDeserializer</code>去反序列化数据了。</strong>如果想要确认这一点，在ide里面debug一下，便可证实。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的文章里总结过&lt;a href=&quot;http://unclechen.github.io/2018/12/16/Spring%E4%B8%AD%E4%B8%89%E5%A4%A7JSON%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/&quot;&gt;《Spring中三大JSON框架的使用》&lt;/a&gt;，里面有提到Jackson的一些基本用法。最近遇到一个问题，就是需要把请求中的字符串进行一个&lt;code&gt;trim&lt;/code&gt;，下面看一下怎么做。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://unclechen.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://unclechen.github.io/tags/Spring/"/>
    
      <category term="Json反序列化" scheme="http://unclechen.github.io/tags/Json%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Spring中三大JSON框架的使用</title>
    <link href="http://unclechen.github.io/2018/12/16/Spring%E4%B8%AD%E4%B8%89%E5%A4%A7JSON%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://unclechen.github.io/2018/12/16/Spring中三大JSON框架的使用/</id>
    <published>2018-12-16T00:00:00.000Z</published>
    <updated>2018-12-22T08:04:45.250Z</updated>
    
    <content type="html"><![CDATA[<p>在SpringBoot中，常常会需要把请求中的参数进行反序列化，得到我们需要的实体对象，在进行处理之后，再把实体序列化返回给请求方（这里不提什么DTO、VO、BO的概念，其实很多公司对这些领域模型的区分都不怎么严格，毕竟搬砖的靠技术，大佬们才谈规范和标准，在<a href="https://github.com/alibaba/p3c/blob/master/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E8%AF%A6%E5%B0%BD%E7%89%88%EF%BC%89.pdf" target="_blank" rel="external">阿里巴巴的Java开发手册</a>中对这些有比较详细的规约，建议参考）。大部分情况下，开放API的数据协议都是用的JSON（也就是请求的<strong><code>content-type:application/json</code>，参数以json格式放在请求body中的</strong>，本文只讨论这种请求类型），常见的JSON序列化工具有Jackson（SpringBoot默认使用）、Gson、FastJson等等。下面看一下怎么使用它们。</p><a id="more"></a><h1 id="一、Jackson"><a href="#一、Jackson" class="headerlink" title="一、Jackson"></a>一、Jackson</h1><h2 id="1-1-基本用法"><a href="#1-1-基本用法" class="headerlink" title="1.1 基本用法"></a>1.1 基本用法</h2><p>Jackson是SpringBoot默认的JSON序列化/反序列化框架，对于<code>content-type:application/json</code>的请求参数，只需要在Controller的方法中使用<code>@RequestBody</code>注解到参数上，即可实现反序列化。下面是基本的示例代码，<code>User.java</code>（必须有getter、setter方法和默认的无参构造函数）、<code>UserController.java</code>（方法的参数必须有<code>@RequestBody</code>注解）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// User.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User2</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// UserController.java</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(UserController.class);</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/post"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> ServiceResponse <span class="title">getUserByPost</span><span class="params">(@RequestBody User user)</span> </span>&#123;</div><div class="line">        LOGGER.info(user.getId() + <span class="string">": "</span> + user.getName());</div><div class="line">        ServiceResponse serviceResponse = <span class="keyword">new</span> ServiceResponse();</div><div class="line">        serviceResponse.setCode(<span class="number">0</span>);</div><div class="line">        serviceResponse.setMessage(<span class="string">"test"</span>);</div><div class="line">        <span class="keyword">return</span> serviceResponse;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ServiceResponse.java，作为getUserByPost的返回值，自动被序列化返回。</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceResponse</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用postman发出一个请求试试。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fy8x6ahy8hj30z40scq5q.jpg" width="400"></p><p>喜欢用<code>curl</code>的话，也可以用下面的命令发请求。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">curl -X POST \</div><div class="line">  http://127.0.0.1:8080/user/post \</div><div class="line">  -<span class="ruby">H <span class="string">'Content-Type: application/json'</span> \</span></div><div class="line"><span class="ruby">  -H <span class="string">'cache-control: no-cache'</span> \</span></div><div class="line"><span class="ruby">  -d <span class="string">'&#123;</span></span></div><div class="line"><span class="ruby"><span class="string">"id"</span>: <span class="number">1</span>,</span></div><div class="line"><span class="ruby"><span class="string">"name"</span>: <span class="string">"unclechen"</span></span></div><div class="line"><span class="ruby">&#125;<span class="string">'</span></span></div></pre></td></tr></table></figure><p>返回结果如下，可以看到<code>ServiceResponse</code>对象，自动被框架序列化返回。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"code"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"test"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由此看到，作为SpringBoot中默认使用的JSON框架，基本上不用做任何事情，就可以实现json请求的参数反序列化以及处理结果的序列化。</p><blockquote><p>注意：虽然不用做什么事情，但是也不能做多余的事。比如对于User.java类，一定要保证它会有一个无参数的构造函数。按照Java的规则，如果你没有指定任何构造函数，那么编译时会自动添加一个无参构造函数，但是如果你指定了含有参数的构造函数，那么就不会再添加一个无参构造函数了，此时反序列化就会失败，抛出<code>com.fasterxml.jackson.databind.exc.InvalidDefinitionException</code>。</p></blockquote><h2 id="1-2-字段命名映射的处理"><a href="#1-2-字段命名映射的处理" class="headerlink" title="1.2 字段命名映射的处理"></a>1.2 字段命名映射的处理</h2><p>实际业务上，有些API要求参数会以<strong>小写字母+下划线</strong>的方式命名，有些又要求以<strong>驼峰</strong>方式命名，有时可能又为了某种兼容，参数的名字可能和代码中实体的属性名称完全不同。我们在上面的<code>User.java</code>中增加一个<code>private String personalPage</code>属性（相应地也添加了setter/getter方法），看看如何解析这个参数。</p><p>然后<strong>构造一个新的请求，在这个请求中添加一个带有了小写字母加下划线的参数<code>personal_page</code></strong>，我们发现反序列化之后的<code>User</code>对象的<code>personalPage</code>属性为<code>null</code>。这很好理解，框架没有这么智能，它并不会知道<code>personalPage</code>属性在序列化的数据中是叫<code>personal_page</code>的。为了指定序列化时这个属性的名称，我们可以给它使用<code>@JsonProperty(&quot;personal_page&quot;)</code>注解，这个注解也是Jackson这个框架提供的。</p><p>通过<code>@JsonProperty</code>注解可以指定序列化的属性名称，但是每一个属性如果都要这么写的话，就太费劲了，我们可以统一指定这种命名的解析规则。具体做法有两种，一种是配置的方式，一种是编程的方式。</p><ul><li><code>application.properties</code>配置文件中设置：<code>spring.jackson.property-naming-strategy=CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES</code>（新版本好像已经用<code>SNAKE_CASE</code>替代了）。关于更多的配置参数，可以查看一下<code>org.springframework.boot.autoconfigure.jackson.JacksonProperties</code>这个类。配置文件里面有哪些Jackson的配置可以写，可以参考<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="external">这里</a>。</li><li>编程<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto-spring-mvc.html#howto-customize-the-jackson-objectmapper" target="_blank" rel="external">自定义<code>ObjectMapper</code></a>：ObjectMapper是Jackson的核心，它可以控制SpringBoot中如何使用Jackson的功能，下面通过配置的方式指定了自定义的<code>ObjectMapper</code>。这种方式除了可以配置参数名称的解析规则外，还可以指定更多的Jackson序列化和反序列化的规则。</li></ul><p>具体使用<code>ObjectMapper</code>的时候有两种方式：<strong>一种是配置一个单例的<code>ObjectMapper</code>对象</strong>，如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CustomObjectMapper.java</span></div><div class="line">...</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomObjectMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">getObjectMapper</span><span class="params">()</span> </span>&#123;</div><div class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        <span class="comment">// 指定PropertyNamingStrategy，甚至可以自定义PropertyNamingStrategy</span></div><div class="line">        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);</div><div class="line">        <span class="keyword">return</span> mapper;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>另一种方式是以在<code>SpringBootApplication</code>类中指定<code>HttpMessageConverter</code>来实现同样的功能。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(DemoApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</div><div class="line">        Jackson2ObjectMapperBuilder builder = <span class="keyword">new</span> Jackson2ObjectMapperBuilder();</div><div class="line">        builder.propertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);</div><div class="line">        converters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter(builder.build()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="1-3-时间类型的字段处理"><a href="#1-3-时间类型的字段处理" class="headerlink" title="1.3 时间类型的字段处理"></a>1.3 时间类型的字段处理</h2><p>配置文件的方式不赘述，<code>spring.jackson.date-format=</code>即可。</p><p>在1.2节提到了采用<code>ObjectMapper</code>可以设置参数解析的规则，时间类型的字段处理也是一种。具体方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CustomObjectMapper.java</span></div><div class="line">mapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</div><div class="line"></div><div class="line"><span class="comment">// User.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="comment">// 省略其他字段</span></div><div class="line">    <span class="keyword">private</span> LocalDate birthDay;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> LocalDate <span class="title">getBirthDay</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> birthDay;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthDay</span><span class="params">(LocalDate birthDay)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.birthDay = birthDay;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样，在反序列化接收参数时候，都只能接收形如<code>yyyy-MM-dd HH:mm:ss</code>的字符串了。并且在序列化返回结果的时候也是返回这个格式。当然你也可以使用<code>@JsonFormat(timezone = &quot;GMT+8&quot;, pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</code>注解。不过有时为了让接口可以更灵活，可能我们的VO/DTO里面还是会把<code>XXXTime</code>定义成<code>String</code>，等到反序列化完成之后，再手动校验它们。</p><h2 id="1-4-枚举类型的字段处理"><a href="#1-4-枚举类型的字段处理" class="headerlink" title="1.4 枚举类型的字段处理"></a>1.4 枚举类型的字段处理</h2><p>这个更简单，啥也不用干，定义一个枚举<code>Gender</code>，Jackson框架自动会帮你反序列化解析成对象的属性。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Gender.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Gender</span> &#123;</span></div><div class="line">    MALE, FEMALE</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// User.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User2</span> &#123;</span></div><div class="line">    <span class="comment">// 省略其他字段</span></div><div class="line">    <span class="keyword">private</span> Gender gender;</div><div class="line">    <span class="comment">// 省略getter/setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当传入的参数不在枚举值范围的时候，框架会抛出异常，我们可以在全局的异常Handler里面处理它，然后向用户返回友好的信息。</p><p>如果不希望Jackson框架抛出异常的话，可以对自定义的<code>ObjectMapper</code>进行设置，<code>ObjectMapper.configure(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL, true);</code>。</p><h2 id="1-5-Jackson序列化小结"><a href="#1-5-Jackson序列化小结" class="headerlink" title="1.5 Jackson序列化小结"></a>1.5 Jackson序列化小结</h2><p>总结下来，就是两种方式，一种靠注解，一种靠<code>CustomObjectMapper</code>，注解适合灵活用在某个属性上（灵活的意思是比如，某个属性名称完全没有任何规则，参数叫<code>a</code>，而属性叫<code>b</code>），如果整个工程都是统一的风格，那么最好用<code>CustomObjectMapper</code>来节省体力（个人也更推荐这种做法，节省体力，API风格规范统一，便于团队协作）。</p><p>两种方式在能力上其实都是对应的，最灵活的方式就是可以自己定义<code>serializer</code>和<code>deserializer</code>，具体如何实现，可以参考文档。不过其实Jackson已经提供了足够多的反序列化配置选项来给我们用，在<a href="https://fasterxml.github.io/jackson-databind/javadoc/2.8/index.html?com/fasterxml/jackson/databind/DeserializationFeature.html" target="_blank" rel="external"><code>DeserializationFeature.java</code></a>里面我们可以找到诸如<code>READ_UNKNOWN_ENUM_VALUES_AS_NULL</code>这样的配置。</p><p>反序列化还可以和前一篇提到的<a href="http://unclechen.github.io/2018/12/15/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/">参数校验</a>结合起来进行使用，此时只需要将<code>@RequetsBody</code>注解前面加上一个<code>@Validated</code>注解即可。</p><h1 id="二、Gson"><a href="#二、Gson" class="headerlink" title="二、Gson"></a>二、Gson</h1><p>除了默认的Jackson，还可以使用Gson来对参数进行反序列化，具体实现是通过<code>GsonHttpMessageConverter</code>。我们先看一下Spring里面的<code>HttpMessageConverter</code>继承关系，如下图所示。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fydmth2md0j316y0peajm.jpg" width="480"></p><p>了解这个之后，看一下如何将SpringBoot的Json框架替换成<code>Gson</code>。</p><h2 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h2><p>第一步，引入<code>Gson</code>库。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    implementation(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</div><div class="line">    implementation(<span class="string">'com.google.code.gson:gson:2.8.4'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">configurations &#123;</div><div class="line">    compile.exclude <span class="string">group:</span> <span class="string">'com.fasterxml.jackson.core'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里强制剔除掉Jackson是为了防止SpringBoot的<code>AutoConfig</code>机制因为Jackson的类存在导致Gson的失效。Spring-AutoConfig使用的是<code>@ConditionalOnClass(Gson.class)</code>自动配置Gson，使用的是<code>@ConditionalOnClass(ObjectMapper.class)</code>自动配置的Jackson，由于<code>ObjectMapper.class</code>在<code>com.fasterxml.jackson.core</code>中，所以把它所在的库exclude掉。</p><p>第二步，回到<code>SpringBootApplication类</code>中，添加<code>GsonHttpMessageConverter</code>到Coverters。同时去掉Jackson的Converter和ObjectMapper（如果有的话）。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</div><div class="line"></div><div class="line">    public static void main(<span class="type">String</span>[] args) &#123;</div><div class="line">        <span class="type">SpringApplication</span>.run(<span class="type">DemoApplication</span>.<span class="keyword">class</span>, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void configureMessageConverters(<span class="type">List</span>&lt;<span class="type">HttpMessageConverter</span>&lt;?&gt;&gt; converters) &#123;</div><div class="line">        <span class="comment">// Gson</span></div><div class="line">        <span class="type">GsonHttpMessageConverter</span> gsonHttpMessageConverter = <span class="keyword">new</span> <span class="type">GsonHttpMessageConverter</span>();</div><div class="line">        converters.add(gsonHttpMessageConverter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>除了代码方式，还可以写到配置文件。具体可以配置的属性有哪些，可以参考源代码<code>com.google.gson.FieldNamingPolicy.java</code>。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> application.properties</div><div class="line"><span class="comment"># Naming policy that should be applied to an object's field during serialization and deserialization.</span></div><div class="line">spring.gson.field-naming-policy=LOWER_CASE_WITH_UNDERSCORES</div></pre></td></tr></table></figure><blockquote><p>配置这里，我始终都没有实践成功，虽然我确定已经排除掉了Jackson库，但是<code>spring.gson.field-naming-policy= LOWER_CASE_WITH_UNDERSCORES</code>不知道为什么一直都没有配置成功。希望熟悉的朋友可以指点一下。</p></blockquote><h2 id="2-2-字段命名映射的处理"><a href="#2-2-字段命名映射的处理" class="headerlink" title="2.2 字段命名映射的处理"></a>2.2 字段命名映射的处理</h2><p>上面只是很简单的添加了<code>Gson</code>作为Json框架，使用<code>GsonBuilder</code>创建Gson对象，可以对序列化的映射规则进行配置，代码如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</div><div class="line">    <span class="comment">// Gson</span></div><div class="line">    GsonHttpMessageConverter gsonHttpMessageConverter = <span class="keyword">new</span> GsonHttpMessageConverter();</div><div class="line">    <span class="comment">// 自定义Gson，配置参数解析规则</span></div><div class="line">    gsonHttpMessageConverter.setGson(<span class="keyword">new</span> GsonBuilder()</div><div class="line">            .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)</div><div class="line">            .create());</div><div class="line">    converters.add(gsonHttpMessageConverter);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>除了这种方式，还可以在SpringBoot的配置文件中配置Gson的Mapper规则。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// application.properties</span></div><div class="line"># Preferred JSON mapper <span class="keyword">to</span> use <span class="keyword">for</span> HTTP <span class="keyword">message</span> conversion.</div><div class="line">spring.http.converters.preferred-json-mapper=gson</div></pre></td></tr></table></figure><h2 id="2-3-时间参数的处理"><a href="#2-3-时间参数的处理" class="headerlink" title="2.3 时间参数的处理"></a>2.3 时间参数的处理</h2><p>既然都是用<code>GsonBuilder</code>，那么很简单加一行<code>.setDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;)</code>即可。</p><h2 id="2-4-枚举参数的处理"><a href="#2-4-枚举参数的处理" class="headerlink" title="2.4 枚举参数的处理"></a>2.4 枚举参数的处理</h2><p>和Jackson一样，Gson也不需要我们干什么就会自动将字符串形式的参数转换成枚举对象。</p><h1 id="三、FastJson"><a href="#三、FastJson" class="headerlink" title="三、FastJson"></a>三、FastJson</h1><h2 id="3-1-基本用法"><a href="#3-1-基本用法" class="headerlink" title="3.1 基本用法"></a>3.1 基本用法</h2><p>阿里出产的轮子，官方有wiki-<a href="https://github.com/alibaba/fastjson/wiki/%E5%9C%A8-Spring-%E4%B8%AD%E9%9B%86%E6%88%90-Fastjson" target="_blank" rel="external">《在 Spring 中集成 Fastjson》</a>，这里我就不搬运了。本质上也是一样的，替换SpringBoot自带的<code>HttpMessageConverter</code>为<code>FastJsonHttpMessageConverter</code>即可。</p><p>在官方文档中提到一句：</p><blockquote><p>SpringBoot 2.0.1版本中加载WebMvcConfigurer的顺序发生了变动，故需使用converters.add(0, converter);指定FastJsonHttpMessageConverter在converters内的顺序，否则在SpringBoot 2.0.1及之后的版本中将优先使用Jackson处理。详情：<a href="https://github.com/spring-projects/spring-boot/issues/12389" target="_blank" rel="external">WebMvcConfigurer is overridden by WebMvcAutoConfiguration #12389</a></p></blockquote><h2 id="3-2-配置映射规则"><a href="#3-2-配置映射规则" class="headerlink" title="3.2 配置映射规则"></a>3.2 配置映射规则</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="title">extends</span> <span class="title">WebMvcConfigurationSupport</span> &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        SpringApplication.run(DemoApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageConverters</span>(<span class="params">List&lt;HttpMessageConverter&lt;?&gt;&gt; converters</span>) </span>&#123;</div><div class="line">        FastJsonHttpMessageConverter converter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</div><div class="line">        <span class="comment">//自定义配置...</span></div><div class="line">        FastJsonConfig config = <span class="keyword">new</span> FastJsonConfig(); <span class="comment">// 按照阿里的文档说，生产环境要尽可能单例配置对象</span></div><div class="line">        config.setDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>); <span class="comment">// 设置时间格式</span></div><div class="line">        <span class="comment">// 字段名称映射规则，详见：https://github.com/alibaba/fastjson/wiki/PropertyNamingStrategy_cn</span></div><div class="line">        config.getParserConfig().propertyNamingStrategy = PropertyNamingStrategy.SnakeCase; <span class="comment">// 设置反序列化名称规则</span></div><div class="line">        config.getSerializeConfig().propertyNamingStrategy = PropertyNamingStrategy.SnakeCase; <span class="comment">// 设置序列化名称规则</span></div><div class="line">        converter.setFastJsonConfig(config);</div><div class="line">        <span class="comment">// 添加下面这一段是因为高版本的Fastjson的MediaType默认为*/*，而高版本的Spring不允许这样，需要明确指定MediaType。详见：https://github.com/alibaba/fastjson/issues/1554</span></div><div class="line">        List&lt;MediaType&gt; supportedMediaTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.APPLICATION_JSON);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.APPLICATION_JSON_UTF8);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.APPLICATION_ATOM_XML);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.APPLICATION_FORM_URLENCODED);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.APPLICATION_OCTET_STREAM);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.APPLICATION_PDF);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.APPLICATION_RSS_XML);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.APPLICATION_XHTML_XML);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.APPLICATION_XML);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.IMAGE_GIF);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.IMAGE_JPEG);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.IMAGE_PNG);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.TEXT_EVENT_STREAM);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.TEXT_HTML);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.TEXT_MARKDOWN);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.TEXT_PLAIN);</div><div class="line">        supportedMediaTypes.<span class="keyword">add</span>(MediaType.TEXT_XML);</div><div class="line">        converter.setSupportedMediaTypes(supportedMediaTypes);</div><div class="line">        converters.<span class="keyword">add</span>(<span class="number">0</span>, converter); <span class="comment">// 加入到HttpMessageConverterList的最前面</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="四、性能"><a href="#四、性能" class="headerlink" title="四、性能"></a>四、性能</h1><p>这里我也没有做过真正的测试，网上随便一搜可以找到大量讨论，我个人的态度比较开放，觉得在功能、性能上，三个框架都能满足基本使用，喜欢使用最简洁的方式。不过比较早的时候我开发Android App用的都是Gson，猜测可能是Gson这个库比较精简，没有太多复杂的功能，不过后来fastjson也针对Android出了专门的版本。到现在，Kotlin出来了，大家可能又有适配Kotlin的需求，具体还是看各自的需要来选择吧。</p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>三大框架各自有自己的默认配置（实际上默认配置可能是随着框架的版本而变化的），使用框架的时候要熟悉它们，才可以避免一些麻烦。</p><ul><li>比如Jackson，默认情况下，对请求中多余的属性，会反序列化失败，需要把<code>DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES</code>设置为<code>false</code>才可以反序列化请求参数。</li><li>比如Gson，默认会忽略多余的属性。但是对java8里面的LocalDate类型的属性，反序列化需要手动编写<code>deserialize</code>方法，因为Gson默认只能处理<code>java.util.Date</code>类型的属性。</li></ul><p>最后对于怎么使用框架，如果写配置能满足，那是最简单的、最方便管理的。<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="external">common-application-properties</a>里面预制了大量的配置，但是有时配置可能不够，这时还是编程方式来的更好一些。总之，我建议统一使用一种方式，保证整个项目风格的统一最好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在SpringBoot中，常常会需要把请求中的参数进行反序列化，得到我们需要的实体对象，在进行处理之后，再把实体序列化返回给请求方（这里不提什么DTO、VO、BO的概念，其实很多公司对这些领域模型的区分都不怎么严格，毕竟搬砖的靠技术，大佬们才谈规范和标准，在&lt;a href=&quot;https://github.com/alibaba/p3c/blob/master/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C%EF%BC%88%E8%AF%A6%E5%B0%BD%E7%89%88%EF%BC%89.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里巴巴的Java开发手册&lt;/a&gt;中对这些有比较详细的规约，建议参考）。大部分情况下，开放API的数据协议都是用的JSON（也就是请求的&lt;strong&gt;&lt;code&gt;content-type:application/json&lt;/code&gt;，参数以json格式放在请求body中的&lt;/strong&gt;，本文只讨论这种请求类型），常见的JSON序列化工具有Jackson（SpringBoot默认使用）、Gson、FastJson等等。下面看一下怎么使用它们。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="http://unclechen.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://unclechen.github.io/tags/Spring/"/>
    
      <category term="后台" scheme="http://unclechen.github.io/tags/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Service" scheme="http://unclechen.github.io/tags/Service/"/>
    
      <category term="Json序列化" scheme="http://unclechen.github.io/tags/Json%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot自定义请求参数校验</title>
    <link href="http://unclechen.github.io/2018/12/15/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
    <id>http://unclechen.github.io/2018/12/15/SpringBoot自定义请求参数校验/</id>
    <published>2018-12-15T00:00:00.000Z</published>
    <updated>2019-01-02T03:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在工作中遇到写一些API，这些API的请求参数非常多，嵌套也非常复杂，如果参数的校验代码全部都手动去实现，写起来真的非常痛苦。正好<code>Spring</code>轮子里面有一个<code>Validation</code>，这里记录一下怎么使用，以及怎么自定义它的返回结果。</p><a id="more"></a><h1 id="一、Bean-Validation基本概念"><a href="#一、Bean-Validation基本概念" class="headerlink" title="一、Bean Validation基本概念"></a>一、Bean Validation基本概念</h1><p><a href="https://beanvalidation.org/" target="_blank" rel="external">Bean Validation</a>是Java中的一项标准，它通过一些<strong>注解</strong>表达了对实体的限制规则。通过提出了一些API和扩展性的规范，这个规范是没有提供具体实现的，希望能够<code>Constrain once, validate everywhere</code>。现在它已经发展到了2.0，兼容Java8。</p><p><a href="http://hibernate.org/validator/" target="_blank" rel="external"><code>hibernate validation</code></a>实现了Bean Validation标准，里面还增加了一些注解，在程序中引入它我们就可以直接使用。</p><p><code>Spring MVC</code>也支持<code>Bean Validation</code>，它对<code>hibernate validation</code>进行了二次封装，添加了自动校验，并将校验信息封装进了特定的<code>BindingResult</code>类中，在SpringBoot中我们可以添加<code>implementation(&#39;org.springframework.boot:spring-boot-starter-validation&#39;)</code>引入这个库，实现对bean的校验功能。</p><h1 id="二、基本用法"><a href="#二、基本用法" class="headerlink" title="二、基本用法"></a>二、基本用法</h1><p><code>gradle dependencies</code>如下：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    <span class="keyword">implementation</span>(<span class="string">'org.springframework.boot:spring-boot-starter-validation'</span>)</div><div class="line">    <span class="keyword">implementation</span>(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>定义一个示例的Bean，例如下面的<code>User.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotBlank</span></div><div class="line">    <span class="meta">@Size</span>(max=<span class="number">10</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在<code>name</code>属性上，添加<code>@NotBlank</code>和<code>@Size(max=10)</code>的注解，表示<code>User</code>对象的<code>name</code>属性不能为字符串且长度不能超过10个字符。</p><p>然后我们暂时不添加任何多余的代码，直接写一个<code>UserController</code>对外提供一个RESTful的<code>GET</code>接口，注意接口的参数用到了<code>@Validated注解</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UserController.java，省略其他代码</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/validation/get"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ServiceResponse <span class="title">validateGet</span><span class="params">(@Validated User user)</span> </span>&#123;</div><div class="line">        ServiceResponse serviceResponse = <span class="keyword">new</span> ServiceResponse();</div><div class="line">        serviceResponse.setCode(<span class="number">0</span>);</div><div class="line">        serviceResponse.setMessage(<span class="string">"test"</span>);</div><div class="line">        <span class="keyword">return</span> serviceResponse;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ServiceResponse.java，简单包含了code、message字段返回结果。</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceResponse</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line">    ... 省略getter、setter ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>启动SpringBoot程序，发一个测试请求看一下：</p><p><code>http://127.0.0.1:8080/validation/get?name=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;password=1</code></p><p>返回的结果是，注意此时的<code>HTTP STATUS CODE = 400</code>：</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fy8m53m0sbj31fe0u0akp.jpg" alt=""></p><p>此时已经可以实现参数的校验了，但是返回的结果不太友好，下面看一下怎么定制返回的消息。在定制返回结果前，先看下一下内置的校验注解有哪些，在这里我不一个个去贴了，写代码的时候根据需要进入到源码里面去看即可。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fy8n5hndwpj30mo104aed.jpg" width="360"></p><blockquote><p>早期Spring版本中，都是在Controller的方法中添加Errors/BindingResult参数，由Spring注入Errors/BindingResult对象，再在Controller中手写校验逻辑实现校验。新版本提供注解的方式（Controller上面bean加一个@Validated注解），将校验逻辑和Controller分离。</p></blockquote><h1 id="三、自定义校验"><a href="#三、自定义校验" class="headerlink" title="三、自定义校验"></a>三、自定义校验</h1><h2 id="3-1-自定义注解"><a href="#3-1-自定义注解" class="headerlink" title="3.1 自定义注解"></a>3.1 自定义注解</h2><p>显然除了自带的<code>NotNull</code>、<code>NotBlank</code>、<code>Size</code>等注解，实际业务上还会需要特定的校验规则。</p><p>假设我们有一个参数<code>address</code>，必须以<code>Beijing</code>开头，那我们可以定义一个注解和一个自定义的<code>Validator</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// StartWithValidator.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartWithValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">StartWithValidation</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String start;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(StartWithValidation constraintAnnotation)</span> </span>&#123;</div><div class="line">        start = constraintAnnotation.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(value)) &#123;</div><div class="line">            <span class="keyword">return</span> value.startsWith(start);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// StartWithValidation.java</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Constraint</span>(validatedBy = StartWithValidator.class)</div><div class="line"><span class="meta">@Target</span>(&#123;METHOD, FIELD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> StartWithValidation &#123;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "不是正确的性别取值范围"</span>;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">start</span><span class="params">()</span> <span class="keyword">default</span> "_"</span>;</div><div class="line"></div><div class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Target</span>(&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER&#125;)</div><div class="line">    <span class="meta">@Retention</span>(RUNTIME)</div><div class="line">    <span class="meta">@Documented</span></div><div class="line">    <span class="meta">@interface</span> List &#123;</div><div class="line">        GenderValidation[] value();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后在<code>User.java</code>中增加一个<code>address</code>属性，并给它加上上面这个自定义的注解，这里我们定义了一个可以传入<code>start</code>参数的注解，表示应该以什么开头。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="meta">@StartWithValidation</span>(message = <span class="string">"Param 'address' must be start with 'Beijing'."</span>, start = <span class="string">"Beijing"</span>)</div><div class="line"><span class="keyword">private</span> String address;</div><div class="line">...</div></pre></td></tr></table></figure><p><strong>除了定义可以作用于属性的注解外，其实还可以定义作用于class的注解（@Target({TYPE})），用于校验class的实例。</strong></p><h2 id="3-2-自定义Validator"><a href="#3-2-自定义Validator" class="headerlink" title="3.2 自定义Validator"></a>3.2 自定义Validator</h2><p>第一步，实现一个<code>Validator</code>。(这种方法不需要我们的bean里面有任何注解之类的东西)</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.validation.demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.Errors;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.ValidationUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.Validator;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> User2.class.equals(clazz);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object <span class="keyword">target</span>, Errors errors)</span> </span>&#123;</div><div class="line">        ValidationUtils.rejectIfEmpty(errors, <span class="string">"name"</span>, <span class="string">"name.empty"</span>);</div><div class="line">        User2 p = (User2) <span class="keyword">target</span>;</div><div class="line">        <span class="keyword">if</span> (p.getId() == <span class="number">0</span>) &#123;</div><div class="line">            errors.rejectValue(<span class="string">"id"</span>, <span class="string">"can not be zero"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第二步，修改Controller代码，注入上面的UserValidator实例，并给Controller的方法参数加上<code>@Validated</code>注解，即可完成和前面自定义注解一样的校验功能。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> &#123;</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    UserValidator validator;</div><div class="line"></div><div class="line">    <span class="meta">@InitBinder</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> initBinder(WebDataBinder binder) &#123;</div><div class="line">        binder.setValidator(validator);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/post"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="keyword">public</span> ServiceResponse handValidatePost(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> User user) &#123;</div><div class="line">        ServiceResponse serviceResponse = <span class="keyword">new</span> ServiceResponse();</div><div class="line">        serviceResponse.setCode(<span class="number">0</span>);</div><div class="line">        serviceResponse.setMessage(<span class="string">"test"</span>);</div><div class="line">        <span class="keyword">return</span> serviceResponse;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个方法和自定义注解的区别在于不需要在Bean里面添加注解，并且可以更加灵活的把一个Bean里面所有的Field的校验代码都搬到一起，而不是每一个属性都去加注解，<strong>如果校验的属性非常多，且默认注解的能力又不够的话，</strong>这种方式也是不错的，可以避免大量的自定义注解。</p><h2 id="3-3-以编程的方式校验（手动）"><a href="#3-3-以编程的方式校验（手动）" class="headerlink" title="3.3 以编程的方式校验（手动）"></a>3.3 以编程的方式校验（手动）</h2><p>这种方式可以算是原始的Hibernate-Validation的方式。直接看代码，这里有一个比较不同的是，可以使用<a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-fail-fast" target="_blank" rel="external">Hibernate-Validation的Fail fast mode</a>。因为前面的方式，都将所有的参数都验证完了，再把错误返回。有时我们希望遇到一个参数错误，就立即返回。设置<code>fast-fail</code>为<code>true</code>可以达到这个目的。不过貌似不能再用@Validated注解方法参数了，而是要用<code>ValidatorFactory</code>创建<code>Validator</code>。<strong>在实际开发中，不必每次都编写代码创建Validator，可以采用<code>@Configuration</code>的方式创建，然后再<code>@Autowired</code>注入到每个需要使用Validator的Controller当中。</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/validation/postStudent"</span>, method = RequestMethod.POST)</div><div class="line">    public ServiceResponse validatePostStudent(<span class="meta">@RequestBody</span> User user) &#123;</div><div class="line">        <span class="comment">// User参数前面没有@Validated注解了，User类里面那些注解还是保留着即可。</span></div><div class="line">        HibernateValidatorConfiguration configuration = Validation.byProvider(HibernateValidator.<span class="keyword">class</span>).configure();</div><div class="line">        ValidatorFactory <span class="keyword">factory</span> = configuration.failFast(<span class="keyword">true</span>).buildValidatorFactory(); <span class="comment">// fastFail</span></div><div class="line">        Validator validator = <span class="keyword">factory</span>.getValidator();</div><div class="line">        <span class="built_in">Set</span>&lt;ConstraintViolation&lt;User&gt;&gt; <span class="keyword">set</span> = validator.validate(user);</div><div class="line">        <span class="comment">// 根据set的size，大于0时，抛异常。由于设置了failFast，这里set最多就一个元素</span></div><div class="line">        ServiceResponse serviceResponse = <span class="keyword">new</span> ServiceResponse();</div><div class="line">        serviceResponse.setCode(<span class="number">0</span>);</div><div class="line">        serviceResponse.setMessage(<span class="string">"test"</span>);</div><div class="line">        <span class="keyword">return</span> serviceResponse;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-4-定义分组校验"><a href="#3-4-定义分组校验" class="headerlink" title="3.4 定义分组校验"></a>3.4 定义分组校验</h2><p>有的时候，我们会有两个不同的接口，但是会使用到同一个<code>Bean</code>来作为<code>VO</code>（意思是两个接口的URI不同，但参数中都用到了同一个Bean）。而在不同的接口上，对Bean的校验需求可能不一样，比如接口2需要校验<code>studentId</code>，而接口1不需要。那么此时就可以用到校验注解的分组<code>groups</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// User.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    ... 省略其他属性</div><div class="line">    <span class="comment">// 指明在groups=&#123;Student.class&#125;时才需要校验studentId</span></div><div class="line">    <span class="meta">@NotNull</span>(groups = &#123;Student.class&#125;, message = <span class="string">"Param 'studentId' must not be null."</span>)</div><div class="line">    <span class="keyword">private</span> Long studentId;</div><div class="line"></div><div class="line">    <span class="comment">// 增加Student interface</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// UserController.java，增加了一个/getStudent接口</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/validation/get"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ServiceResponse <span class="title">validateGet</span><span class="params">(@Validated User user)</span> </span>&#123;</div><div class="line">        ServiceResponse serviceResponse = <span class="keyword">new</span> ServiceResponse();</div><div class="line">        serviceResponse.setCode(<span class="number">200</span>);</div><div class="line">        serviceResponse.setMessage(<span class="string">"test"</span>);</div><div class="line">        <span class="keyword">return</span> serviceResponse;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/validation/getStudent"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ServiceResponse <span class="title">validateGetStudent</span><span class="params">(@Validated(&#123;User.Student.class&#125;)</span> User user) </span>&#123;</div><div class="line">        ServiceResponse serviceResponse = <span class="keyword">new</span> ServiceResponse();</div><div class="line">        serviceResponse.setCode(<span class="number">0</span>);</div><div class="line">        serviceResponse.setMessage(<span class="string">"test"</span>);</div><div class="line">        <span class="keyword">return</span> serviceResponse;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>到这里，也可以带一嘴<code>Valid</code>和<code>Validated</code>注解的区别，其代码注释写着后者是对前者的一个扩展，支持了<code>group</code>分组的功能。</p><h2 id="3-5-定制返回码和消息"><a href="#3-5-定制返回码和消息" class="headerlink" title="3.5 定制返回码和消息"></a>3.5 定制返回码和消息</h2><p>第二节中定义了一个<code>ServiceResponse</code>，其实作为一个开放的API，不论用户传入任何参数，返回的结果都应该是预先定义好的格式，并且可以写明在接口文档中，即使发生了校验失败，应该返回一个包含错误码<code>code</code>（发生错误时一般大于0）和<code>message</code>字段。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"code"</span>: <span class="number">51000</span>,</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"Param 'name' must be less than 10 characters."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>的结果，而<code>HTTP STATUS CODE</code>一直都是<code>200</code>。</p><p>为了实现这个目的，我们加一个全局异常处理方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ServiceExceptionHandler.java</span></div><div class="line"><span class="keyword">package</span> com.example.validation.demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</div><div class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="meta">@RestControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceExceptionHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(ServiceExceptionHandler.class);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(value = &#123;Exception.class&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> ServiceResponse <span class="title">handleBindException</span><span class="params">(Exception ex)</span> </span>&#123;</div><div class="line">        LOG.error(<span class="string">"&#123;&#125;"</span>, ex);</div><div class="line">        StringBuilder message = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BindException) &#123;</div><div class="line">            List&lt;FieldError&gt; fieldErrorList = ((BindException) ex).getFieldErrors();</div><div class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(fieldErrorList)) &#123;</div><div class="line">                <span class="keyword">for</span> (FieldError fieldError : fieldErrorList) &#123;</div><div class="line">                    <span class="keyword">if</span> (fieldError != <span class="keyword">null</span> &amp;&amp; fieldError.getDefaultMessage() != <span class="keyword">null</span>) &#123;</div><div class="line">                        message.append(fieldError.getDefaultMessage()).append(<span class="string">" "</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> MethodArgumentNotValidException) &#123;</div><div class="line">            List&lt;FieldError&gt; fieldErrorList = ((MethodArgumentNotValidException) ex).getBindingResult().getFieldErrors();</div><div class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(fieldErrorList)) &#123;</div><div class="line">                <span class="keyword">for</span> (FieldError fieldError : fieldErrorList) &#123;</div><div class="line">                    <span class="keyword">if</span> (fieldError != <span class="keyword">null</span> &amp;&amp; fieldError.getDefaultMessage() != <span class="keyword">null</span>) &#123;</div><div class="line">                        message.append(fieldError.getDefaultMessage()).append(<span class="string">" "</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 生成返回结果</span></div><div class="line">        ServiceResponse errorResult = <span class="keyword">new</span> ServiceResponse();</div><div class="line">        errorResult.setCode(<span class="number">51000</span>); <span class="comment">// ErrorCode.PARAM_ERROR = 51000</span></div><div class="line">        errorResult.setMessage(message.toString());</div><div class="line">        <span class="keyword">return</span> errorResult;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// User.java，注解传入指定Message</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"Param 'name' can't be blank."</span>)</div><div class="line">    <span class="meta">@Size</span>(max=<span class="number">10</span>, message = <span class="string">"Param 'name' must be less than 10 characters."</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在上面的方法中，我们处理了<code>BindException</code>（非请求body参数，例如@RequestParam接收的）和<code>MethodArgumentNotValidException</code>（请求body里面的参数，例如@RequestBody接收的），这两类Exception里面都有一个<code>BindingResult</code>对象，它里面有一个包装成<code>FieldError</code>的List，保存着Bean对象出现错误的Field等信息。取出它里面<code>defaultMessage</code>，放到统一的<code>ServiceResponse</code>返回即可实现返回码和消息的定制。由于消息内容是有注解默认的<code>DefaultMessage</code>决定的，为了按照自定义的描述返回，在Bean对象的注解上需要手动赋值为希望返回的消息内容。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="meta">@NotBlank(message = <span class="meta-string">"Param 'name' can't be blank."</span>)</span></div><div class="line"><span class="meta">@Size(max=10,message = <span class="meta-string">"Param 'name' must be less than 10 characters."</span>)</span></div><div class="line"><span class="keyword">private</span> String name;</div><div class="line">...</div></pre></td></tr></table></figure><p>这样当<code>name</code>参数长度超过10时，就会返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"code"</span>: <span class="number">51000</span>,</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"Param 'name' must be less than 10 characters."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里的<code>FieldError fieldError = ex.getFieldError();</code>只会随机返回一个出错的属性，如果Bean对象的多个属性都出错了，可以调用<code>ex.getFieldErrors()</code>来获得，<strong>这里也可以看到Spring Validation在参数校验时不会在第一次碰到参数错误时就返回，而是会校验完成所有的参数。如果不想手动编程去校验，那么这里可以只读取一个随机的FieldError，返回它的错误消息即可。</strong></p><h2 id="3-6-更加细致的返回码和消息"><a href="#3-6-更加细致的返回码和消息" class="headerlink" title="3.6 更加细致的返回码和消息"></a>3.6 更加细致的返回码和消息</h2><p>其实还有一种比较典型的自定义返回，就是错误码（<code>code</code>）和消息（<code>message</code>）是一一对应的，比如：</p><ul><li>51001：字符串长度过长</li><li>51002：参数取值过大</li><li>…</li></ul><p>这种情况比较特殊，一般当参数错误的时候，会返回一个整体的参数错误的错误码，然后携带参数的错误信息。但有时，业务上就要不同的参数错误，既要错误码不同，错误信息也要不同。我想了下，有两种思路。</p><ul><li>第一种：通过message同时包含错误码和错误信息，在全局异常捕获方法中，再把它们拆开。</li><li>第二种：手动校验，抛出自定义的Exception（里面带有code、message）。手动校验这里，如果每一个Controller都去写一遍，确实比较费劲，可以结合AOP来实现，或者抽出一个基类BaseController的方式。</li></ul><h1 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h1><p>其实在实际的工作中，肯定还有更复杂的校验逻辑，但是不一定非要都用框架去实现，框架里面的实现（比如注解）应该是一个比较简单通用的校验，能够达到复用，减少重复的劳动。而更加复杂的逻辑校验，一定是存在具体业务当中的，最好是在业务代码里面实现。还有一点需要注意，Spring Validation的<code>isValid</code>方法，如果返回false，那么<code>Controller</code>不再会被调用，而是直接返回。如果你在Controller上面加了AOP进行接口调用统计的话，可能会漏掉。这个时候，我们不应该让Controller不调用，建议这种情况在<strong>AOP里面对Controller的参数切面进行校验后，抛出统一的业务异常。</strong></p><h1 id="五、参考资料："><a href="#五、参考资料：" class="headerlink" title="五、参考资料："></a>五、参考资料：</h1><ul><li><a href="http://benweizhu.github.io/blog/2014/07/19/spring-validation-by-example/" target="_blank" rel="external">Spring Validation 深入浅出</a></li><li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#validation" target="_blank" rel="external">Spring Frameworl#Validation, Data Binding, and Type Conversion</a></li><li><a href="https://reflectoring.io/bean-validation-with-spring-boot/" target="_blank" rel="external">All You Need To Know About Bean Validation With Spring Boot</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在工作中遇到写一些API，这些API的请求参数非常多，嵌套也非常复杂，如果参数的校验代码全部都手动去实现，写起来真的非常痛苦。正好&lt;code&gt;Spring&lt;/code&gt;轮子里面有一个&lt;code&gt;Validation&lt;/code&gt;，这里记录一下怎么使用，以及怎么自定义它的返回结果。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring" scheme="http://unclechen.github.io/tags/Spring/"/>
    
      <category term="SpringBoot" scheme="http://unclechen.github.io/tags/SpringBoot/"/>
    
      <category term="后台" scheme="http://unclechen.github.io/tags/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="Service" scheme="http://unclechen.github.io/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>Java核心技术学习总结-基础</title>
    <link href="http://unclechen.github.io/2018/11/12/Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF36%E8%AE%B2%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://unclechen.github.io/2018/11/12/Java核心技术36讲学习总结-基础篇/</id>
    <published>2018-11-12T00:00:00.000Z</published>
    <updated>2018-12-02T13:11:26.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-介绍"><a href="#0-介绍" class="headerlink" title="0.介绍"></a>0.介绍</h2><p>基础知识就是内功，修炼内功可到达更高层次。</p><ul><li><p>课程介绍：<a href="https://time.geekbang.org/column/intro/82" target="_blank" rel="external">https://time.geekbang.org/column/intro/82</a>，这里面因为篇幅限制，不可能像写教科书一样面面俱到，更多都是在抛砖引玉，点到为止。涉及关键知识点需要自己再深入地去研究和学习，非常适合参加面试/面试别人的人，也比较适合夯实Java基础的人。</p></li><li><p>目录：</p></li></ul><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxb7ky9nuwj30ku2y9gyb.jpg" width="480"></p><a id="more"></a><h2 id="1-对JAVA的平台基本理解"><a href="#1-对JAVA的平台基本理解" class="headerlink" title="1.对JAVA的平台基本理解"></a>1.对JAVA的平台基本理解</h2><p>Write once, run anywhere.</p><ul><li><p>jre、jdk</p><ul><li><p>jre包含了Java的核心类库，运行环境，JVM。</p></li><li><p>jdk是jre的超集，包含了编译器，诊断工具等。</p></li></ul></li><li><p>解释执行、编译执行：主流 Java 版本中，如 JDK 8 实际是解释和编译混合的模式（-Xmixed）。JVM会收集足够多的调用信息，进行高效的编译，这就是预热过程。Oracle JDK9的引入了实验性的AOT特性，直接把字节码编译成机器码（编译期间，静态的），避免预热开销。</p><ul><li><p>解释执行：JVM内嵌的解释器，将编译好的字节码解释成机器码执行。</p></li><li><p>编译执行：Hotspot JVM，提供了JIT（Just In Time）编译器，将热点代码编译成机器码执行。这需要运行时才会知道哪些是热点代码。</p></li></ul></li></ul><blockquote><p>解释执行，有点像涮火锅，边涮边吃；编译执行有点像点菜，做好了端上来直接吃。</p></blockquote><h2 id="2-Exception和Error有什么区别"><a href="#2-Exception和Error有什么区别" class="headerlink" title="2.Exception和Error有什么区别"></a>2.Exception和Error有什么区别</h2><ul><li>Throwable的继承关系<ul><li>Error：不可恢复的异常，也不应该恢复程序。</li><li>Exception：可恢复的异常<ul><li>Checked Exception：代码中必须进行显示地捕获，比如IOException，在编译器会进行检查的。</li><li>Unchecked Exception：比如NPE、ArrayIndexOutOfBoundsException这些RuntimeException。</li></ul></li></ul></li></ul><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx55v8lub0j31aq0o8gp9.jpg" width="640"></p><ul><li><code>Try...Catch</code>的注意点：除了注意以外，还可以用到一些更加现代的特性，比如JDK1.7的<code>try-with-resources</code>和<code>multiple catch</code>.<ul><li>不要捕获<code>Exception</code>这样通用异常</li><li>不要生吞异常：捕获之后，什么也不做。</li><li><code>try</code>块不宜过大：额外性能开销，影响JVM对代码的优化。所以不要用<code>try...catch</code>来实现控制流，也不要把<code>try...catch</code>放到循环体内。</li><li><code>finally</code>：不要在<code>finally</code>里面处理返回值。虽然try里面可以写return，但是finally块中的代码仍然会被执行，如果try中返回的是对象引用，而finally又修改了这个对象，那方法的返回值就会被修改成finally的结果。因为finally的处理前，会将try里面return的<strong>对象</strong>暂存起来，执行完finally块中的代码之后，再把返回值返回。</li></ul></li></ul><ul><li>自定义<code>Exception</code>：<ul><li>实例化<code>Exception</code>：会对当前的栈进行快照，该操作比较重。但是也可以创建不进行栈快照的Exception（Native底层实现）。</li></ul></li></ul><blockquote><p>当你去new一个Exception的时候，会调用父类Throwable的构造函数，Throwable的构造函数中会调用native的fillInStackTrace()，这个方法就会构造整个异常栈了。</p></blockquote><ul><li>NoClassDefFoundError和ClassNotFoundException的区别？两者的区别首先是Error和Exception的区别。细一点说：<ul><li>NoClassDefFoundError：当JVM或ClassLoader实例试图在类的定义中加载（作为通常方法调用的一部分，或者是使用<code>new</code>来创建新的对象）时，却找不到类的定义（要查找的类在编译的时候是存在的，运行的时候却找不到了，比如打包的时候误exclude掉了），抛出此异常。</li><li>ClassNotFoundException：动态加载某一个类的时候，例如<code>Class.forName</code>、<code>ClassLoader.loadClass</code>、<code>ClassLOader.findSystemClass</code>来通过一个类的名字，动态载入一个类时，如果没有在classPath里面找到它，则抛出这个异常。此外，当一个类已经某个类加载器加载到内存中了，此时另一个类加载器又尝试着动态地从同一个包中加载这个类。（违背了JVM的双亲加载机制）</li></ul></li></ul><h2 id="3-final、finally、finalize有什么区别"><a href="#3-final、finally、finalize有什么区别" class="headerlink" title="3.final、finally、finalize有什么区别"></a>3.final、finally、finalize有什么区别</h2><p>单纯分清楚三者的区别，的确是一个非常基础的问题。finally比较简单，用于try-finally或者try-catch-finally，保证资源的释放（比如关闭JDBC连接、unlock锁、文件描述符的关闭等）。</p><ul><li>final：<ul><li>修饰不希望发生修改的类、方法、变量：类不可以继承、方法不可以重写、变量不可以修改。</li><li>final修饰变量时，可以产生一定程度的Immutable效果，但是不可以修改指的是基础类型。如果修饰的是对象，只能限制不能修改对象的引用不会被再次赋值，但是引用本身指向的对象行为，例如<code>final List&lt;String&gt; list = new ArrayList&lt;String&gt;();</code>，仍然可以add元素。Java本身没有原生的不可变immutable类，需要类自己支持这个功能。<ul><li><code>Collections.unmodifiableList(list);</code>可以实现，但与Guava相比，据说要差一些。因为原始对象还是可能被修改，如果原始对象修改了，生成的对象也会变。</li><li>Java 9的List.of创建的就是不可变List，调用add会抛<code>UnsupportedOperationException</code>异常。</li><li>Guava的<code>ImmutableList.copyOf(list);</code>也有类似能力。</li></ul></li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">strList.add(<span class="string">"Hello"</span>);</div><div class="line">strList.add(<span class="string">"world"</span>);  </div><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; unmodifiableStrList = <span class="built_in">List</span>.of(<span class="string">"hello"</span>, <span class="string">"world"</span>);</div><div class="line">unmodifiableStrList.add(<span class="string">"again"</span>); <span class="comment">// 抛异常</span></div></pre></td></tr></table></figure><ul><li><p>Java如何实现一个Immutable的类？（使用不可变对象，是一种防御性编程技巧，因为输入的对象可能被修改。或者自己的对象传给第三方库时，也可能被修改。此外也不用担心线程安全，不会产生竞态。）</p><ul><li><p>用final修饰类</p></li><li><p>成员都用private final修饰，且不要setter方法</p></li><li><p>构造对象时，采用深拷贝来初始化，而不是直接赋值。</p></li><li><p>需要实现getter类的方法时，采用copy-on-write的原则，创建私有的copy。</p></li></ul></li></ul><ul><li>finalize：只需要了解它是Object类中的方法，会在对象被垃圾收集前调用。如果我们自己实现了非空的这个方法，那么可能导致对象回收变慢几十倍。所以它会拖慢垃圾回收，导致对象堆积，OOM。JAVA平台正在逐步使用java.lang.ref.Cleaner来替换所有的finalize实现，它用的是幻象引用。</li></ul><h2 id="4-强引用、软引用、弱引用、幻象引用有什么区别"><a href="#4-强引用、软引用、弱引用、幻象引用有什么区别" class="headerlink" title="4.强引用、软引用、弱引用、幻象引用有什么区别"></a>4.强引用、软引用、弱引用、幻象引用有什么区别</h2><p>这几个概念都是和内存管理、垃圾回收有关的，不同之处在于它们的生命周期长短。</p><ul><li><p>强引用：存活时间最长的对象所关联的引用，例如<code>Object obj = new Object();</code>创建的对象引用。只有当这个对象没有引用了，或者显示地赋值为null，才有可能被垃圾收集器回收。</p></li><li><p>软引用：SoftReference，介于强与弱之间的对像引用，只有在JVM认为内存不足时，才会被回收。JVM会在抛出OOM之前，清理软引用指向的对象。软引用所引用的对象被回收之后，会被加入ReferenceQueue中。</p></li><li><p>弱引用：WeakReference，最弱的对象引用，JVM随时可能回收它（下一次GC扫描时，不管当时内存是否充足）。同样可以和ReferenceQueue一起使用，当弱引用所引用的对象被回收会后，引用会被加入ReferenceQueue中。</p></li><li><p>虚引用（幻象引用）：PhantomReference，无法用来引用对象的引用。它只是一种可以在对象被finalize之后，做一些事情的机制。它必须和ReferenceQueue一起使用，当它引用的对象被回收后，引用会被加入ReferenceQueue中，我们的程序可以通过判断ReferenceQueue中是否加入了虚引用来判断对象是否<strong>将要</strong>被回收，如果发现它了可以做一些事情。也可以利用幻象引用监控对象的创建和销毁。</p></li></ul><p>上面4中引用可以使得对象进入不同的可达状态，也可以理解为对象的生命周期。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fx5h6kikxuj30um13a7a1.jpg" width="500"></p><ul><li>ReferenceQueue：引用队列，与软引用、弱引用、幻象引用联合使用。创建引用，关联到响应对象时，可以选择是否关联到引用队列。JVM会在合适的时机将引用enqueue到引用队列中。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 前面说了幻象引用必须和引用队列联合使用</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span> counter = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">ReferenceQueue refQueue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</div><div class="line">PhantomReference&lt;<span class="built_in">Object</span>&gt; p = <span class="keyword">new</span> PhantomReference&lt;&gt;(counter, refQueue);</div><div class="line">counter = <span class="keyword">null</span>;</div><div class="line">System.gc();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// Remove 是一个阻塞方法，可以指定 timeout，或者选择一直阻塞</span></div><div class="line">    Reference&lt;<span class="built_in">Object</span>&gt; ref = refQueue.remove(<span class="number">1000</span>L);</div><div class="line">    <span class="keyword">if</span> (ref != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    <span class="comment">// Handle it</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>关于引用，还有一篇不错的文章：<a href="http://www.kdgregory.com/index.php?page=java.refobj" target="_blank" rel="external">http://www.kdgregory.com/index.php?page=java.refobj</a>，其实几种引用，实际做业务开发时用的不多。以前一些有Java背景的开发者，常在Android中的图片缓存使用软引用和弱引用，现在谷歌官方也不再推荐使用了（原因是Android2.3之后Gabage Collector很积极地回收它们，从而使得它们的作用微乎及微）。关于3中非强引用的认识，可以看看这篇<a href="https://gist.github.com/unclechen/a155ea44c45e1dd7c17fba2626ab187b" target="_blank" rel="external">Gist</a></li></ul><h2 id="5-String、StringBuffer、StringBuilder有什么区别"><a href="#5-String、StringBuffer、StringBuilder有什么区别" class="headerlink" title="5.String、StringBuffer、StringBuilder有什么区别"></a>5.String、StringBuffer、StringBuilder有什么区别</h2><ul><li><p>String：Java中最常用的类之一，是一个Immutable类。被声明为final class，属性也都是final的。由于是Immutable的，所以裁剪、拼接都会产生新的对象。</p></li><li><p>StringBuffer：为了解决String操作时产生太多新对象而出现的，可以使用append、add方法，将字符串添加到已有序列的末尾或者指定位置（char[]数组），它是一个线程安全的可修改字符序列，里面每个修改数据的方法都添加了synchronized修饰，因此性能也不是特别好。如果不需要线程安全，那么推荐使用StringBuilder。</p></li><li><p>StringBuilder：JDK1.5新增，与StringBuffer功能完全相同（也都是继承了AbstractStringBuilder抽象类），去掉了线程安全，有效减小了开销，大部分情况下推荐使用这个。</p></li><li><p>使用细节：</p><ul><li><p>StringBuffer、StringBuilder都是用到char[]数组存储着实际的字符串序列，并设置一个初始大小，每次添加前都会确认容量，如果不够的话，会尝试扩容(<code>int newCapacity = value.length * 2 + 2;</code>)，然后再把原来的内容拷贝到扩容后的char<a href="`value = Arrays.copyOf(value, newCapacity"></a>;`，这个方法底层是native实现)。可以看出扩容开销不小，如果我们是用的时候知道最终需要的容量，那么可以指定一个大小，避免这种开销，如果不指定的话，那么默认初始化的大小是16。</p></li><li><p>是不是所有的字符串拼接都需要用StringBuilder（如果不需要考虑线程安全的话）呢？其实也不是，例如这段代码<code>String strByConcat = &quot;aa&quot; + &quot;bb&quot; + &quot;cc&quot; + &quot;dd&quot;;</code>其实被JDK1.8的javac编译之后，会自动转换成StringBuilder的实现。只有在大量频繁拼接字符串的时候，需要使用SB，例如请求参数的拼接等场景。</p></li><li><p><strong>字符串常量池：</strong>Java为了避免产生大量的String对象，引入了字符串常量池。</p><ul><li><p>当使用<code>String s = &quot;a&quot;;</code>来创建一个字符串时，先去常量池查找是否有值相同的字符串对象（equals判断），如果有那么直接返回这个对象的引用，而不是创建新的对象；如果没有那么创建新的字符串对象，返回对象引用，并把新的对象放入常量池（这个技术可以大幅度节省内存空间）。</p></li><li><p>当使用<code>String s1 = new String(&quot;a&quot;);</code>创建字符串时，不会去检查字符串常量池，而是直接在java heap创建一个String对象，栈上创建这个对象的引用，也不会把这个字符串放到常量池。</p></li><li><p>使用<code>String#intern</code>方法（native实现的），可以把new出来的对象缓存到常量池中。不过这个方法不是一种很好的实践（需要人工调用，污染了代码），而且不同的JDK版本底层实现也不相同。而且在JDK1.6中，JVM对常量的缓存位置是在Perm Space（永久代很小，只有4M，一旦常量池中大量使用intern会直接产生java.lang.OutOfMemoryError: PermGen space错误）；在JDK1.7中，字符串常量池移动到了堆中，大小也从1009变成了可以调整<code>-XX:StringTableSize=99991</code>，且还有一个优化，<strong>就是如果堆中已经存在了对象，不会创建对象，而会保存对象的引用</strong>；而JDK1.8甚至直接取消了Perm区，建立一个元区域。<a href="https://tech.meituan.com/in_depth_understanding_string_intern.html" target="_blank" rel="external">这篇博客</a>介绍的非常详细，值得一读。不过实际业务开发中，的确很少用到intern方法，更多是SDK组件里面优化性能才会去用。</p></li></ul></li><li><p>字符串的hashCode是取决于内容，而不是地址；判断字符串内容是否相同要用<code>equals</code>，判断其他对象是否同用<code>==</code>；一定要区分，==，equals，hashCode。</p></li></ul></li></ul><h2 id="6-动态代理是基于什么原理？"><a href="#6-动态代理是基于什么原理？" class="headerlink" title="6.动态代理是基于什么原理？"></a>6.动态代理是基于什么原理？</h2><ul><li><p>什么是动态代理：动态代理是一种运行时动态构建代理、动态处理代理方法调用的机制。利用动态代理，可以包装RPC调用，实现AOP。动态代理可以通过反射实现。</p></li><li><p>反射：反射是Java语言提供一种能力，赋予程序在运行时自省(introspect)的能力，通过反射我们可以直接操作类或者对象，比如获取某个对象的类定义，获取类定义的属性、方法，调用方法或者构造对象，甚至可以修改类定义。主要使用的是<code>java.lang.reflect</code>包里面的类来实现，比较常见的一种用法是用来绕过API设置的方法访问权限，<code>AccessibleObject.setAccessible(boolean flag)</code>，可以把一个private修饰的方法设为可以访问，从而调用它（Android里面各种hack用法）。此外，我们还可以在大量的ORM框架中看到这种用法，运行时自动生成getter/setter方法。不过Java 9之后出现一个Jigsaw模块化系统，出于强封装的考虑，对反射访问进行了限制，必须声明Open的反射调用者模块，才可以使用setAccessible。</p></li><li><p>动态代理可以解决什么问题？应用场景是什么？</p><ul><li><p>设计模式中有一个代理模式：代理模式、装饰器模式，类似的思想都是对调用目标进行包装，调用目标的代理来实现它的功能，实现调用者和被调用者之间的解耦。但是设计模式中的代理是一种静态代理，需要代理类和被代理类都是实现功能接口。这里我们讲的是动态代理，发生在运行时。</p></li><li><p>应用场景：SpringAOP(Aspect of Programming)面向切面的编程是一种非常典型的场景，作为OOP的补充，因为OOP对于跨越不同对象或者类的分散、纠缠逻辑表现力不够。AOP可以处理不同模块之间公共阶段需要做的一些事情，比如日志、鉴权、全局异常处理、性能监控、事务处理等等，将这些繁琐、重复的工作统一抽取出来处理。</p></li></ul></li><li><p>如何实现动态代理？不同的实现方式有什么区别（性能、可靠性、开发工作量）？</p><ul><li><p>JDK Proxy：实现InvocationHandler，在invoke方法中反射调用被代理对象的方法。然后调用JDK的<code>Proxy.newProxyInstance</code>方法创建一个代理对象，这种方法需要被代理类和代理类都实现接口，但是因为是JDK本身的支持，比较可靠，新版也开始用到ASM。</p></li><li><p>cglib：采用创建被代理目标类的子类，实现动态代理，貌似Guice也是这样，不需要实现接口。这样就摆脱了实现接口的限制，开发量小，而且据说性能比JDK自带的高很多。（具体性能好在采用了ASM、Javaassist操作字节码，后面还会有专门学习这一块知识的。）</p></li><li><p>more：SpringAOP提供两种方式，可以显式地指定采用哪种方式。后面还会单独对SpringAOP和Guice做一个更加具体的学习。</p></li></ul></li></ul><h2 id="7-int和Integer的区别？"><a href="#7-int和Integer的区别？" class="headerlink" title="7.int和Integer的区别？"></a>7.int和Integer的区别？</h2><ul><li><p>int：是Java中8个原始数据类型（Primitive Types: byte, short, int, long, float, double, boolean, char）的一种。</p></li><li><p>Integer：是int原始类型对应的包装类，内部用一个int字段存储数据，提供了基本的操作方法，例如数学计算、int和String之间的转换等等。Java6还引入了Auto Boxing和UnBoxing功能，根据上下文自动转化，简化了编程。和String类型类似，Integer内部保存着一个final int value对应到实际的int值。</p><ul><li><p>IntegerCache缓存：如果每次创建一个Integer对象都用new方法的话，可能会产生太多的对象。JDK1.5提供了Integer.valueOf方法来创建对象，它内部会缓存-128~127之间的值，如果缓存中存在，那么直接返回对象引用，不会创建新的对象，如果缓存中没有那么会<strong>创建一个新的对象</strong>。在其他的包装类例如Boolean（缓存了Boolean.TRUE和Boolean.FALSE）、Short（缓存了-128~127）、Byte（所有值都缓存）、Character（缓存<code>\u0000~\u007F</code>）等，也都有这个机制。不过其实JVM参数里面可以修改Integer缓存的大小：-XX:AutoBoxCacheMax=size，其他的不行。</p></li><li><p>Auto Boxing/UnBoxing：<strong>发生在编译阶段</strong>，所以是一种语法糖，生成的字节码里面会自动变成<code>Interger.valueOf</code>或者<code>Interger.intValue</code>。</p></li><li><p>编程时的注意：避免不必要的拆箱装箱，例如循环中，因为会占用更多的内存空间。所以在性能极度敏感的场合，建议用原始类型替换包装类。</p></li><li><p>原始类型的一些问题：</p><ul><li><p>线程安全：很显然原始类型的数据，要是用并发相关的控制，才可以保证线程安全。特别宽的类型，比如float、double，甚至不能保证更新操作的<strong>原子性</strong>，可能出现程序读取到只更新了一般数据位的值。JDK中有AtomicInteger、AtomicLong、AtomicIntegerArray、AtomicLongArray等类型是线程安全的。</p></li><li><p>无法与泛型结合使用：因为Java里面的泛型是一种伪泛型，编译期会自动将类型转换为对应的特定类型，所以泛型里面的类型必须能转换成Object。</p></li></ul></li></ul></li></ul><h2 id="8-Vector、ArrayList、LinkedList有何区别？"><a href="#8-Vector、ArrayList、LinkedList有何区别？" class="headerlink" title="8.Vector、ArrayList、LinkedList有何区别？"></a>8.Vector、ArrayList、LinkedList有何区别？</h2><ul><li><p>Vector：线程安全的动态数组。自动扩容到2倍。</p></li><li><p>ArrayList：线程不安全的动态数组。自动扩容到1.5倍。</p></li><li><p>LinkedList：线程不安全的双向链表。</p></li><li><p>三者对比：三者都是集合框架中的List，属于有序集合，功能近似。但Vector、ArrayList内部是以数组的形式存储元素列表的，适合随机访问。LinkedList适合节点插入、删除，随机访问性要慢。实际开发时，根据数据操作的场景去选择这几种结构，需要考虑的就是用数组还是链表，插入是在中间，还是在尾部，由于数组需要扩容开销大，链表的读取效率差。</p><ul><li><p>关于插入速度的一些结论：若只对单条数据插入或删除（还有不用扩容+copy数组时的尾部），ArrayList的速度反而优于LinkedList。但若是批量随机的插入删除数据（不在尾部），LinkedList的速度大大优于ArrayList。因为ArrayList每插入一条数据，要移动插入点及之后的所有数据。 综合来看，如果是随机插入，ArrayList的效率可能会更高。<strong>所以，如果待插入、删除的元素是在数据结构的前半段尤其是非常靠前的位置的时候，LinkedList的效率将大大快过ArrayList，因为ArrayList将批量copy大量的元素；越往后，对于LinkedList来说，因为它是双向链表，所以在第2个元素后面插入一个数据和在倒数第2个元素后面插入一个元素在效率上基本没有差别，但是ArrayList由于要批量copy的元素越来越少，操作速度必然追上乃至超过LinkedList。</strong>另外尽量不要使用普通for循环遍历LinkedList，效率极其的慢（LinkedList.get(index)可想而知有多慢，O(index)的时间复杂度了啊）。</p><ul><li><p>LinkedList做插入、删除的时候，慢在寻址，快在只需要改变前后Entry的引用地址 </p></li><li><p>ArrayList做插入、删除的时候，慢在数组元素的批量copy，快在寻址。</p></li></ul></li></ul></li><li><p>扩展：Java中的集合类（Collection）是一个非常重要高频的考核点，需要掌握整体结构，容器有哪些，数据结构和里面涉及的算法，使用时的性能、并发等。</p><ul><li><p>List：有序集合，通用逻辑抽象到了AbstractList</p></li><li><p>Set：不重复元素的集合，通用逻辑抽象到了AbstractSet</p></li><li><p>Queue、Deque(double-ended双端队列)：FIFO/LIFO队列，通用逻辑抽象到了AbstractQueue</p></li><li><p>扩展到三种Set的区别：</p><ul><li><p>TreeSet：内部用TreeMap的key存储，是一个红黑树结构，支持自然顺序访问，但添加、删除、contain相对低效(时间复杂度log(n))，内置排序功能。</p></li><li><p>HashSet：内部用HashMap存储，利用哈希算法，可以提供常数时间的添加、删除、contain操作，但不保证有序。</p></li><li><p>LinkedHashSet：内部用记录插入顺序的双向链表，提供按照插入顺序遍历的能力，也提供常数时间的添加、删除、contain操作，性能略低于HashSet。</p></li></ul></li></ul></li></ul><p>下面是一个示意图，没有包含线程安全有关的类还有Map。关于集合类的知识，还应该再找一些资料好好学习。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fx7njw4s8tj31c00psdlc.jpg" width="640"></p><h2 id="9-HashTable、HashMap、TreeMap有什么区别？"><a href="#9-HashTable、HashMap、TreeMap有什么区别？" class="headerlink" title="9.HashTable、HashMap、TreeMap有什么区别？"></a>9.HashTable、HashMap、TreeMap有什么区别？</h2><p>这三者都是常见的Map实现，是以键值对的形式存储和操作数据的容器类。但是它们并不是集合类java.util.Collection，而是java.util.Map。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxa5ujjs0cj315a0pewi6.jpg" width="640"></p><ul><li><p>HashTable：早期实现的线程安全的哈希表，键和值都不可以为null。</p></li><li><p>HashMap：非线程安全的哈希表，行为上基本与HashTable一致。主要区别在于HashMap不同步，支持null键和值。通常可以在常数时间性能下实现get、put操作，被应用地更加广泛。</p></li><li><p>TreeMap：基于红黑树提供的一种有序的Map，因为是红黑树，get、put、remove都是O(log(n))的复杂度，排序比较接口可以自定义Comparator。</p><ul><li>LinkedHashMap（也是一种保证“某种”顺序的Map，但是实现区别很大）：从名字就看的出来，LinkedHashMap是通过链表来实现，保证的是和插入顺序相同的访问顺序（TreeSet是可以自己指定Comparator比较key来保证顺序）。</li></ul></li><li><p>HashMap的考点：最常用的HashMap也是最常见的考察点，需要理解它的设计实现细节。</p><ul><li><p>equals和hashCode有关知识：equals相同，hashCode一定相同；<strong>hashCode相同equals却不一定相同（hash冲突正是在下）</strong>。重写hashCode时一定要同时重写equals，要搞清楚什么时候需要去重写equals。equals函数里面一定要是Object类型作为参数，且本身不要过于智能，只要判断一些值相等即可。</p><ul><li><p><code>==</code>和<code>equals</code>：在Object类中<code>equals</code>的实现就是<code>return (this == obj);</code>，而<code>==</code>是判断两个对象是否是同一个对象，比较的是地址。而重写<code>equals</code>通常是追求对象在逻辑上相等，内容相同，比如String类。</p></li><li><p>重写equals的原则：自反性(x.equals(x)=true)、对称性(x.equals(y)=y.equals(x))、传递性(x.equals(y)=true&amp;y.equals(x)=true时，x.equals(z)=true)、一致性(多次调用结果相同)、非空性(任何非空引用x，x.equals(null)=false)。重写该方法时，一般只兼容同类型的变量，否则很容易违反对称性。有时的面试官甚至会考察String里面的equals实现。</p></li><li><p>重写hashCode的原则：为不相等的对象产生不相等的散列码，同样的，相等的对象必须拥有相等的散列码。很多时候，都是用idea自动生成override的代码，可以仔细去看看它的实现。</p></li></ul></li><li><p>HashMap内部实现细节：</p><ul><li><p>结构：数组（Node<k, v="">[] table）加拉链（hash冲突的时候，拉出一个链表）的复合结构，拉链长度过长时产生树化。</k,></p></li><li><p>初始化：lazy_load，构造函数中不会初始化数组，而是在put(putVal方法处理的)第一个元素的时候才初始化数组。</p></li><li><p>分桶：不是简单地使用key的hashCode，而是内部实现了一个忽略了容量以上的高位的计算<code>(h = key.hashCode()) ^ (h &gt;&gt;&gt;16)</code>。</p></li><li><p>哈希冲突：put操作时，当key的hashCode相同时，会判断equals是否为true，如果为true那么putVal就会替换之前的value，如果为false，那么会采用拉链法存储这个value。</p></li></ul></li><li><p>理解HashMap的容量(capacity)、负载因子(load factor)、门限值以及它们对性能的影响：</p><ul><li><p>门限值：元素个数的门限，Threshold = 容量 x 负载因子，以倍数调整（newThr=oldThr&lt;&lt;1），调整时需要ArrayCopy。</p></li><li><p>性能：容量*负载因子，决定了可用桶的数量，空桶太多浪费空间，使用太满则影响操作性能（假如只有一个桶，那相当于完全退化成链表，也就不存在常数时间的存取性能了）。</p></li><li><p>capacity和loadFactor怎么设置：实际应用中，我们应该尽可能满足<code>capacity * load_factor &gt; 元素数量</code>，去预先设置一个初始大小。HashMap的构造函数(HashMap(int initialCapacity, float loadFactor))里面我们设置的是capacity，而<code>capacity=entryNumber(预估的元素数量)/loadFactor</code>，且它是2的幂，capacity就是数组的大小。而loadFactor默认是0.75，建议不要设置比这个值更大，因为会显著增加冲突，降低存取性能。但是如果选择太小的负载因子，按照这个公式又会导致预设的capacity也应该调整变小，否则会导致更频繁的扩容。</p></li><li><p>为啥要有复杂因子：因为它影响到了冲突产生的概率，参考<a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8#%E8%BD%BD%E8%8D%B7%E5%9B%A0%E5%AD%90" target="_blank" rel="external">这里</a>看下。</p></li></ul></li><li><p>树化（treeify）：如果小于MIN_TREEIFY_CAPACITY=64，只是resize，如果大于它则进行treeify。做树化的原因很容易想到，还是性能，因为当链表太长的时候，它的线性结构是无法保证存取速度的。</p></li></ul></li><li><p>扩展：解决哈希冲突的办法有哪些（大学都学过的）</p><ul><li><p>开放定址法：hash(key)=h，冲突时再以p为基础，再去算出一个h1（计算方法可以是某个线性函数值为散列地址a*h+b或者在hash(h)等等），直到算出一个不冲突的pi作为地址。这种方法可能产生聚集。ThreadLocalMap据说用的是这个方法。</p></li><li><p>再哈希法：同时构造多个哈希函数，hash1(key)=h1, hash2(key)=h2…hi，当h1冲突时，计算出h2，直到不产生冲突hi。这种方法不易产生聚集。</p></li><li><p>链地址法：将所有hash地址相同的元素用一个单链表存起来，单链表头指针存在hash地址里。HashMap用的是这个方法。</p></li><li><p>公共溢出区：将哈希表分为基本表和溢出表，产生了hash冲突的元素都丢到溢出表中。</p></li></ul></li></ul><h2 id="10-如何保证集合是线程安全的？ConcurrentHashMap如何高效实现进程安全？"><a href="#10-如何保证集合是线程安全的？ConcurrentHashMap如何高效实现进程安全？" class="headerlink" title="10.如何保证集合是线程安全的？ConcurrentHashMap如何高效实现进程安全？"></a>10.如何保证集合是线程安全的？ConcurrentHashMap如何高效实现进程安全？</h2><ul><li><p>方法一：使用线程安全的集合容器类或者包装集合类：前面提到的大部分集合类，如ArrayList、LinkedList都是非线程安全的，而线程安全的Vector（或者后面的HashTable）容器类仅仅是对需要保护的方法（put、get、size）在方法上加了synchronized修饰，锁的粒度是实例对象，粒度非太粗。另外，java.util.Collections类提供了很多静态方法包装出线程安全的集合，比如<code>SynchronizedMap(Map&lt;K,V&gt; m)</code>等，同样也是对象粒度的锁（内部实现用的锁是this，仍然是对象粒度），在高并发情况时性能低下。</p></li><li><p>方法二：使用并发包<code>java.util.concurrent</code>包提供的线程安全容器：如ConcurrentHashMap、CopyOnWriteArrayList、ArrayBlockingQueue、SynchronousQueue等等。这些并发包中的线程安全容器，实现方式更加精细，比如基于分离锁实现的ConcurrentHashMap，远比上面的要优秀很多。</p></li><li><p>ConcurrentHashMap的内部实现：它的实现一直在演化，从“早期实现-&gt;Java7-&gt;Java8”中都有不少变化，理解ConcurrentHashMap的实现对并发编程的知识要求比较高，感觉完全可以单独作为一大篇文章去讲（可以看看这篇对源码更详细的<a href="https://my.oschina.net/hosee/blog/675884" target="_blank" rel="external">分析</a>），后面也会对并发的更多知识有深入讲解。</p><ul><li><p>并发编程的3个概念：</p><ul><li><p>原子性：一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。Java中只有简单的读取、赋值（将数字赋值给某个变量）是原子操作。如果要实现更大范围的原子操作，需要借助synchronized和Lock来实现。</p></li><li><p>可见性：可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。Java中提供了volatile来保证可见性，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值（这里涉及Java内存模型：主存是指物理内存，而线程的内存通常都是CPU高速缓存L1/L2/L3，当volatile修饰的变量被一个线程修改时，会导致其他线程的工作内存中缓存的这个变量值无效，反映到硬件层就是CPU的L1或者L2缓存中行无效，这些线程要使用该变量的值时，需要从物理内存中再去读取）。另外synchronized和Lock来实现，因为它们可以保证同一时刻只有一个线程可以获得锁来执行同步代码，并且会在释放锁之前将变量的修改刷新到主存中。</p></li><li><p>有序性：程序执行的顺序按照代码的先后顺序执行。在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。在Java里面，可以通过volatile关键字来保证一定的“有序性”（下面会讲）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p></li></ul></li><li><p>volatile：</p><ul><li><p>可见性：volatile是Java中用于保证<strong>可见性</strong>的关键字。当一个共享变量被volatile修饰时，它会保证修改的值会立刻被更新到主存，当有其他线程需要读取时，它会去主存（也就是内存）中读取新值（JDK1.5之前该关键字貌似不是很好用，运行结果不一定准确）。</p></li><li><p>原子性：volatile是没法保证原子性的，只能保证可见性，但synchronized或者Lock是可以保证原子性的（后面有专门的对synchronized和Lock学习的整理）。</p></li><li><p>有序性：volatile只能一定程度地保证有序，假设一段代码有5行，volatile修饰的变量在第3行，那么在volatile前面两行的代码一定会在第3行代码执行之前执行，后面两行代码一定会在第3行代码执行之后才执行。但第1、2行或者4、5行会不会发生指定重排就没法由第3行来保证了。</p></li><li><p>volatile用于什么场景呢？首先有了上面的知识，我们知道volatile可以保证可见性，一定有序性和原子性。volatile关键字在某些情况下性能是优于synchronized的，但它没法替代synchronized，因为无法保证原子性。<strong>如果想让volatile满足原子性</strong>，需要满足2个条件：（1）运算结果并不依赖于变量的当前值，或者能够确保只有一个线程修改变量的值；（2）变量不需要与其他的状态变量共同参与不变约束。实际应用中，用得最多的就是状态标记（一个线程初始化某些资源的时候，flag=true/inited=true之类的），以及单例的double-check实现中volatile修饰的instance对象（双重检查锁写法为什么用volatile修饰instance呢，因为外层的if(instance==null)可能会看到没有完整实例化的instance对象引用，构造函数还没有真正创建完整的单例对象。据说JDK1.5之后的volatile是可以保证instance是完整的）。</p></li></ul></li><li><p>CAS（Compare and Swap）：直译过来就是比较并替换，是一种CPU直接支持的指令，是<strong>无锁操作的核心</strong>。CAS机制中有3个基本操作数，内存地址V，旧的预期值A，要修改的新值B。更新一个变量的时候，只有当内存地址V中的实际值等于变量的预期值A时，才会把内存地址V中的值改为B（原子操作）。如果内存地址V中的值不等于A时，会重新去读取地址V中的值，然后再次进行CAS操作。这个重新尝试的过程叫做<strong>自旋</strong>。从思想上说，synchronized属于<strong>悲观锁</strong>，悲观的认为程序中并发情况严重，需要严防死守。CAS属于<strong>乐观锁</strong>，认为并发竞争情况不那么严重，让线程不断尝试更新（不用阻塞线程，开销小）。不过CAS也有缺点，就是当反复尝试更新却一直更新不成功时，CPU消耗过大；也无法保证代码块的原子性，它只能保证一个变量的原子性，但多个变量的原子性不得不用synchronized；还有无法处理的ABA问题。在JDK中，<code>java.util.concurrent.atomic</code>包下面的类以及Lock类的底层实现其实用到了CAS（例如AtomicInteger#compareAndSet(int, int)方法用的是下面提到的<code>Unsafe.compareAndSwapXXX</code>。），JDK1.6之后，也对synchronized进行了优化，在转变为重量级锁之前，也会采用CAS机制。</p></li><li><p>Unsafe：<code>sun.misc.Unsafe</code>提供了CAS的实现，而且ConcurrentHashMap主要用到了它的volatile读写功能，<strong>可以实现对非volatile修饰的变量执行volatile读写，保证可见性（</strong>Unsafe提供了<code>public native Object getObjectVolatile(Object obj, long offset);</code>这种通过偏移量来读取一个对象中某一个变量的值的能力）。一般不推荐我们在编程时使用Unsafe，只有在框架级别（Spring、Netty）或者JDK内部使用比较多，且JDK9还做了一些限制。需要注意这个类是一个单例，获取实例的静态方法<code>public static Unsafe getUnsafe()</code>无法由我们的代码调用，因为它内部会检查调用类的ClassLoader，如果不是BootstrapClassLoader，就无法返回Unsafe实例，因此JDK中的rt.jar中的类调用它是可以的，但是我们不行，因为我们的类是AppClassLoader加载的。不过我们可以反射调用它。（这里不过多深入研究了，可以看看<a href="https://www.infoq.cn/article/A-Post-Apocalyptic-sun.misc.Unsafe-World" target="_blank" rel="external">这篇博客</a>对它的介绍）</p></li><li><p>早期实现&amp;JDK7比较新的实现：<a href="http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/9b8c96f96a0f/src/share/classes/java/util/concurrent/ConcurrentHashMap.java" target="_blank" rel="external">JDK7源码</a>。</p><ul><li><p>分离锁：内部进行分段（每一段叫segment），每一段是一个HashEntry数组，然后冲突时也是拉链表解决。segment数量由concurrentcyLevel决定，默认16，可以设置，必须是2的幂，方便进行寻址的时候移位运算。</p></li><li><p>每一个HashEntry内部，使用volatile保证value字段的可见性。也利用了不可变对象的机制，以利用Unsafe提供的底层读写能力，优化性能。</p></li><li><p>get：只需要保证可见性，所以用的是<code>UNSAFE.getObjectVolatile(segments, u))</code>来获得segment，然后找到里面的Entry返回。</p></li><li><p>put：（1）<code>UNSAFE.getObject(segments, (j &lt;&lt; SSHIFT) + SBASE))</code>Unsafe方式先获取segment，由于是nonvolatile方式，所以还要再次check，再次check用的是<code>ensuereSegment</code>方法，而这个方法里面用到了<code>UNSAFE.getObjectVolatile</code>和<code>UNSAFE.compareAndSwapObject</code>；（2）<strong>得到segment</strong>之后，再进行<strong>线程安全</strong>的<code>segment.put(K key, int hash, V value, boolean onlyIfAbsent)</code>操作，Segment本身就是extends ReentrantLock，因此进行put时，segment是锁定的。在这里进行了重复扫描和检测冲突，决定是更新还是放置操作，如果容量不够了会单独对Segment扩容，而不是整个map。</p></li><li><p>size：由于分段，需要计算每个segment的size，但是同步锁定所有的segment，效率太低，因此它是通过重试机制（RETRIES_BEFORE_LOCK，指定重试2次），来试图获得可靠值，如果没有监控到变化（对比Segment.modCount），就返回，否则获取锁进行操作。</p></li></ul></li><li><p>JDK8实现：总体结构也是分段（大的桶bucket数组），内部也是一个个的链表，但同步粒度更细致，也不再使用Segment，简化了初始化开销，修改为lazy_load。数据存储利用volatile保证可见性（key是final的，val是volatile的），使用CAS实现无所并发操作，使用Unsafe、LongAdder进行优化。</p><ul><li><p>get：其实也是用的<code>Unsafe.getObjectVolatile(Object obj, long offset)</code>方法实现。</p></li><li><p>put：代码不贴了，可以去看JDK。</p><ul><li><p>init：初始化数组<code>initTable()</code>在这里实现。利用了一个sizeCtl座位互斥手段，实现了CAS。当sizeCtl为负数时，说明有其他线程正在初始化，那么先spin，等到条件恢复了，再利用CAS设置sizeCtl实现排它，设置成功后进行初始化。</p></li><li><p>放置新值：不需要加锁，直接用CAS实现compareAndSwapObject。</p></li><li><p>替换旧值：用头元素节点<code>Node&lt;K,V&gt; f</code>对象的锁（内部代码是synchronized(f) {同步修改value}）来保证修改value时的同步，粒度更细，而不是JDK1.7当中Segment整段都锁，效率大大提高。<strong>这个思路上的突破非常关键。</strong></p></li><li><p>size：基于一个叫做CounterCell的东西，它的操作基于了<code>java.util.concurrent.atomic.LongAdder</code>实现，是一种JVM利用空间换取更高效率的方法，利用了<a href="http://hg.openjdk.java.net/jdk/jdk/file/12fc7bf488ec/src/java.base/share/classes/java/util/concurrent/atomic/Striped64.java" target="_blank" rel="external">Striped64</a>内部的复杂逻辑。</p></li></ul></li></ul></li><li><p>应用场景：内存级别的缓存，数据量不大，且不要求多机器之间必须实时同步的时候。但是要明白一点，ConcurrentHashMap不保证两原子操作之间的原子性，比如get之后，又put，是没法保证这两个操作线程安全的！</p></li></ul></li></ul><h2 id="11-Java提供了哪些IO方式？NIO如何实现多路复用？"><a href="#11-Java提供了哪些IO方式？NIO如何实现多路复用？" class="headerlink" title="11.Java提供了哪些IO方式？NIO如何实现多路复用？"></a>11.Java提供了哪些IO方式？NIO如何实现多路复用？</h2><ul><li><p>IO方式</p><ul><li><p>BIO：<strong>同步阻塞</strong>方式的IO，主要是指java.io包下面那些流式的IO功能，也包括java.net下面部分网络API，如Socket、ServerSocket、HttpURLConnection等。(<a href="https://juejin.im/post/5b97e5f75188255c8d0fb0c0)。" target="_blank" rel="external">https://juejin.im/post/5b97e5f75188255c8d0fb0c0)。</a></p></li><li><p>NIO：Java 1.4中引入了NIO框架（java.nio包，n可以理解为new/non-blocking），提供了Channel、Selector、Buffer等抽象，可以构建多路复用、<strong>同步非阻塞</strong>的IO程序。</p></li><li><p>NIO2：也叫AIO（Asynchronous IO），Java 7中，进一步引入了NIO2，是一种<strong>异步非阻塞</strong>的IO方式。异步IO操作基于事件和回调机制，可以简单理解为应用操作直接返回，而不会阻塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续工作。</p></li></ul></li></ul><p>下面分别看看各自的特点和使用场景。</p><ul><li><p>标准IO（BIO）：简单来说，BIO就是指请求的连接、数据的读写都是在一个独立用户线程中完成的。由于线程的创建、切换都比较昂贵，且如果网络连接比较慢，导致每个线程都阻塞的话，服务器可能就会变得很慢甚至不可用。对于BIO这种面向流的标准IO，主要需要了解Reader/Writer、InputStream/OutputStream以及它们的实现类，要熟悉[各种Stream的基本用法]。流的基本分类如下：</p><ul><li><p>按流向：输入流和输出流</p></li><li><p>按操作单元：字节流和字符流</p></li><li><p>按流的角色：节点流和处理流</p></li></ul></li></ul><p>这里有两张Java标准IO类的结构图，来自这篇<a href="https://juejin.im/post/5af79bcc51882542ad771546" target="_blank" rel="external">文章</a>，这篇文章也是一篇对Java标准IO知识点的大汇总，值得好好学习。</p><p>按照操作方式分类：</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxd8ugmqh7j30k00u0go6.jpg" width="640"></p><p>按照操作对象分类：</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxd8ulc1ruj30k00evabp.jpg" width="640"></p><ul><li><p>NIO：由于BIO存在上面的问题，JDK1.4带来了同步非阻塞的NIO，它可以实现一条线程管理多个通道，实现对请求连接的管理（非阻塞的），当连接准备好数据后，再将数据的读写交给具体的应用线程（IO仍然是同步的），剥离了请求的等待时间。由于一条线程可以通过多个通道管理连接，也避免了线程创建和切换的大量开销。（这里有非常棒的一篇<a href="http://tutorials.jenkov.com/java-nio/overview.html" target="_blank" rel="external">NIO教程</a>），下面看下NIO的核心组成部分。</p><ul><li><p>Channel(通道)&amp;Buffer(缓冲区)：这两者都是NIO中提出来的，用于IO处理的重要接口。标准IO是面向字节/字符流的，而NIO是面向通道和缓冲的。数据是从Channel（A Channel is a bit like a stream. <code>inChannel.read(buffer)</code>）读到Buffer中的，或者从Buffer写入到Channel（<code>outChannel.write(buffer)</code>）。学习NIO需要学习使用Channel和Buffer提供的方法读写数据。</p><ul><li><p>Channel：与标准IO的流很像，但它是双向的。流是单向的（Input/Output）；支持异步读写，可以读取数据到Buffer，或者由Buffer写入数据。在NIO中实现了Channel接口的类有FileChannel、DatagramChannel(UDP)、SocketChannel(TCP)、ServerSocketChannel(Server listen TCP connections)，可以像标准IO那样可以支持文件、网络的IO需求了。</p></li><li><p>Buffer：Buffer是标准IO中完全没有的东西，本质上就是一块内存，提供了一系列的方法来操作内存数据。它是一个抽象类，继承它的子类有ByteBuffer、CharBuffer、LongBuffer等等，覆盖了IO操作中所有的基础数据类型。Buffer可以通过flip方法切换读写模式。Buffer中有3个重要属性：position、limit、capacity，它们的值决定了当前的Buffer是读还是写模式，其实从名字上就可以看出它们的含义，写模式时，limit等于capacity，读模式limit代表Buffer中有多少数据，position指的是操作的内存位置。<a href="http://tutorials.jenkov.com/java-nio/buffers.html" target="_blank" rel="external">Buffer的方法</a>需要好好掌握，我们常用Buffer的<code>rewind</code>、<code>clear</code>、<code>flip</code>来达到需要的功能。</p></li></ul></li><li><p>Selector(多路复用器)：Selector允许一条线程处理多个Channel通道，如果应用程序中有很多的通道（每个通道对应一个连接，每个连接的数据量都较小），会非常方便，例如聊天服务器这样的场景。这是NIO与标准IO相比最牛逼的地方，因为单线程意味着更小的开销，在Java中线程是很重的，需要占用更多的资源，而且线程切换上下文是一件很昂贵的操作（哈哈哈“协程”你们好啊），所以the less threads the better（不过现代操作系统已经对多线程处理得越来越好，开销也会越来越小，事实上对于多核CPU如果不使用多线程反而是一种浪费）。</p><ul><li><p>创建selector：静态方法<code>Selector selector = Selector.open();</code></p></li><li><p>把channel注册到selector：Channel都需要注册到Selector之后才可以被Selector选中(<code>SelectionKey key = channel.register(selector, SelectionKey.OP_READ);</code>)，select()方法会一直block直到某一个注册Channel准备好了，有事件就绪。一旦这个方法返回，线程就可以处理这些事件了。不过需要注意，只有可切换为non-blocking模式的SelectableChannel才可以注册到Selector，所以SocketChannel可以，但FileChannel不行。<code>register</code>方法会返回一个channel和selector的关系<code>SelectionKey</code>。<code>register</code>方法的第二个参数表明selector监听channel时对什么事件（一共有4种：<code>Connect</code>、<code>Accept</code>、<code>Read</code>、<code>Write</code>）感兴趣，当一个channel准备好了处理感兴趣的事件时，就会返回xxxEvent ready。</p></li><li><p>selector选择channel：通过select方法(这个方法有3个重载)。其中不带参数的方法调用时返回的是本次调用和上次调用之间已经ready的channel个数。当select方法返回了大于1时，就可以调用<code>selector.selectedKeys();</code>来拿到一个SelectionKey集合，进而拿到每一个channel去操作。<a href="https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&amp;mid=2247483970&amp;idx=1&amp;sn=d5e2b133313b1d0f32872d54fbdf0aa7&amp;chksm=fd985423caefdd354b587e57ce6cf5f5a7bec48b9ab7554f39a8d13af47660cae793956e0f46#rd" target="_blank" rel="external">这篇文章</a>末尾有一份实际NIO服务器与客户端的例子，里面介绍了如何用ServerSocketChannel和SocketChannel实现NIO通信。</p></li></ul></li></ul></li></ul><ul><li><p>NIO2（AIO）：Java7中新增，虽然NIO在处理网络连接时是non-blocking的（<strong>非阻塞</strong>），但是IO（数据的读写）行为仍然是同步的。具体来讲，在NIO中，业务线程是在IO操作准备好时，得到通知，接着再由这个线程进行IO操作，IO操作本身是同步的（<strong>同步的</strong>）。但AIO则更进一步，它不是在IO准备好时就通知线程，而是在IO操作已经异步完成后，再给线程发出通知。因此AIO的数据读写其实异步的，此时业务逻辑将变成一个回调函数，等待IO操作完成后，由系统触发。 </p><ul><li><p>新增的<code>AsynchronousServerSocketChannel</code>，<code>server = AsynchronousServerSocketChannel.open().bind( new InetSocketAddress (PORT));</code>，使用server提供的accept方法<code>public abstract &lt;A&gt; void accept(A attachment,CompletionHandler&lt;AsynchronousSocketChannel,? super A&gt; handler);</code>。</p></li><li><p>新增的<code>AsynchronousFileChannel</code>，支持异步读写文件。一起来的还有类似<code>File</code>的<code>Path</code>API。<code>AsynchronousFileChannel</code>支持返回一个<code>Future&lt;Integer&gt; operation</code>或者设置<code>CompletionHandler</code> callback来获得异步读写的结果。</p></li></ul></li></ul><ul><li><p>BIO、NIO、AIO的区别：</p><ul><li><p>BIO：面向流，每次从流中读取一个或多个字节直到读完，没有缓存。标准IO中各种流都是阻塞的，当一个线程调用流的read或者write时，整个线程就会阻塞，知道数据完全处理完，在此期间线程什么也不能做了。<strong>BIO相当于一个线程管理一个通道，</strong>适合于那种连接数量不多，但每个连接的数据量比较大的场景。</p></li><li><p>NIO：面向缓冲，可以前后移动数据，面向缓冲区。NIO使用一条线程从Channel通道中读取/发送数据，它仅能得到目前可用的数据，如果目前没有数据，就什么都不会获取。<strong>NIO这种让一个线程（或几个）管理多个通道，</strong>所以一个通道的操作并不会阻塞整个线程，不过解析数据的代价可能会比从一个阻塞的流中更复杂。因此NIO更适合处理请求数量很多，但每个请求的数据量很小的场景，NIO不适合读写过程长的场景。</p></li><li><p>AIO：除了网络连接的管理是非阻塞的，<strong>连数据的读写也变成了异步</strong>，数据读写完成后再通过回调等方式通知业务线程处理，适合那种读写过程长的任务。</p></li><li><p>总结：BIO与NIO最大的区别就是如何读取请求的数据，BIO从流中读取数据时是阻塞的，直到全部准备好、并读取完成（即使没有数据或者只需要部分数据）才可以处理，且一个线程只能处理一个Stream，因此这样的服务器在处理百万级别的并发请求时内存和CPU压力会很大。通常我们会在服务器设置一个合理线程数量的线程池，并设计一个请求连接队列，线程池中的线程会从这个队列中依次处理每一个连接中的流。想象一下，如果有大量长时间不活跃的连接时，数据一直没法准备好，那么将占用所有的线程，所有的线程都被会阻塞，服务器将因此变得非常缓慢甚至不可用；NIO则可以使用一条线程除了不同请求连接中的流，但这里的流是non-blocking模式工作的channel，non-blocking模式意味着一个channel可以返回0或者1+的bytes，通过Selector来select一个准备好了、有数据的channel进行处理（处理时一般还是丢到一个独立的业务线程），因此这样就不会阻塞。由于NIO里，数据的读写还是在业务线程中，所以不适合处理那些读写时间长的场景；AIO对于IO的操作采用异步的方式，等到读写数据完成，再通知业务线程处理数据，因此可以胜任那些读写耗时的场景。（感觉<a href="http://www.importnew.com/21341.html" target="_blank" rel="external">这篇文章</a>对BIO、NIO、AIO讲的比较形象）最后再用一个类比来解释：BIO，快递员通知你有一份快递会在今天送到某某地方，你需要在某某地方一致等待快递员的到来。NIO，快递员通知你有一份快递会送到你公司的前台，你需要每隔一段时间去前台询问是否有你的快递。AIO，快递员通知你有一份快递会送到你公司的前台，并且前台收到后会给你打电话通知你过来取。</p></li></ul></li></ul><h2 id="12-Java中有哪些文件拷贝方式？哪一种最高效？"><a href="#12-Java中有哪些文件拷贝方式？哪一种最高效？" class="headerlink" title="12.Java中有哪些文件拷贝方式？哪一种最高效？"></a>12.Java中有哪些文件拷贝方式？哪一种最高效？</h2><ul><li><p>java.io：利用FileInputStream和FileOutputStream，循环读取，写入。</p></li><li><p>java.nio：利用Channel的transferTo/tranferFrom方法拷贝（Buffer）。</p></li><li><p>两种方式的对比：了解操作系统层面的概念</p><ul><li><p>用户态空间：User Space，普通应用和服务运行在用户态空间。当使用IO流读写时，进行了多次上下文切换，先在内核态将数据从磁盘读取到内核缓存，再切换到用户态，从内核缓存读取到用户缓存。写入时顺序相反，如下面左图所示。这种方式带来了额外开销，可能降低IO效率。</p></li><li><p>内核态空间：Kernel Space，操作系统内核、硬件驱动运行在内核态空间，具有相对高的特权。NIO的transferTo实现时，在Linux/Unix会用到<strong>零拷贝(ZeroCopy)</strong>技术，数据传入不需要用户态参与，省去了上下文切换的开销和内存拷贝（下面右图）。这种能力还可以用在网络IO中。</p></li></ul></li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxfuja3dwmj312i0u0q7i.jpg" width="320"> <img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxfujhlz6dj310f0u0q78.jpg" width="320"></p><ul><li><p>java.nio.file.Files.copy：JDK中自带的文件拷贝方法，内部实现是怎样的。然而虽然是有3种方法，但是其实都是在用户态的读写。</p><ul><li><p><code>public static Path copy(Path source, Path target, CopyOption... options) throws IOException</code>，虽然是native实现，但也是用户态拷贝。</p></li><li><p><code>public static long copy(InputStream in, Path target, CopyOption... options) throws IOException</code></p></li><li><p><code>public static long copy(Path source, OutputStream out) throws IOException</code></p></li></ul></li></ul><ul><li><p>掌握NIO Buffer用法：前一节的NIO中其实有介绍，详细的用法示例可以看<a href="http://tutorials.jenkov.com/java-nio/buffers.html" target="_blank" rel="external">这里</a>。此外对于Buffer里面的<a href="https://zhuanlan.zhihu.com/p/29675083" target="_blank" rel="external">ByteBuffer</a>，需要了解一下它分为堆内（HeapByteBuffer，allocate创建）和堆外（DirectByteBuffer，allocateDirect创建）两种。</p><ul><li><p>DirectByteBuffer：Buffer类中定义了<code>isDirect()</code>方法判断是否为堆外内存。实际使用中，Java会尽量对DirectBuffer仅做本地IO，对于大数据量的IO密集操作，可能会带来非常大的性能优势。因为Direct Buffer生命周期内内存地址不变，内核可以安全地对其访问，IO操作高效；减小了堆内内存对象存储的额外维护，访问效率可能提高。但是DirectBuffer的创建销毁比一般的Buffer开销更大，建议长时间使用的大数据量场景下才使用，而且一般要fullGC时才会销毁它，使用不当容易导致OOM。</p></li><li><p>MappedByteBuffer(abstract class，具体实现是DirectByteBuffer)：将文件按照指定大小直接映射为内存区域（虚拟内存并非是物理内存，如果文件巨大可以分段映射），当程序访问这个内存区域时将直接操作这块文件数据，省去了从内核空间向用户控件传输的损耗。除了<code>allocateDirect</code>方法，它还可以用<code>FileChannel.map</code>（<code>FileChannel.map(FileChannel.MapMode.READ_ONLY, 0, len);</code>）方法来创建，其实返回的实例是<code>DirectByteBuffer</code>(class DirectByteBuffer extends MappedByteBuffer implements DirectBuffer)。需要知道MappedByteBuffer不受JVM的<code>-Xmx</code>参数限制，而是受<code>-XX:MaxDirectMemorySize=512M</code>限制，这里要注意<code>-Xmx</code>是其默认大小，“不受限制”是指设置<code>-XX:MaxDirectMemorySize</code>可以让它更大。<a href="https://blog.csdn.net/fcbayernmunchen/article/details/8635427" target="_blank" rel="external">这篇文章</a>有一个用Channel+Buffer读取文件和MappedByteBuffer读取文件的对比测试。在Netty、Kafka、Grizzy里面都用到了这个技术。</p></li></ul></li></ul><p>Buffer、ByteBuffer的继承关系</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxgmhiiy9sj30sq0m2gq7.jpg" width="400"></p><ul><li><p>这里我提一个问题，ByteBuffer和byte[]有什么区别：ByteBufer的内部实现就是一个<code>final byte[] hb</code>，<code>allocate</code>方法就是new一个指定容量的byte数组赋值给hb（这里不分析创建堆外缓冲区的<code>allocateDirect</code>方法了）。然后提供了一系列方便的方法来操作这个byte数组，当然，ByteBuffer也可以与byte[]直接转换。</p><ul><li><p>byte array -&gt; ByteBuffer：<code>ByteBuffer buf = ByteBuffer.wrap(bytes);</code></p></li><li><p>ByteBuffer -&gt; byte array：<code>bytes = new byte[buf.remaining()]; byteBuffer.get(bytes, 0, bytes.length);</code></p></li></ul></li></ul><h2 id="13-接口和抽象类有什么区别？"><a href="#13-接口和抽象类有什么区别？" class="headerlink" title="13.接口和抽象类有什么区别？"></a>13.接口和抽象类有什么区别？</h2><p>接口和抽象都是Java面向对象设计的两个基础机制。</p><ul><li><p>接口（interface）：是对<strong>行为的抽象</strong>（like-a），抽象方法的集合，利用接口可以达到API定义与实现分离。接口不能实例化，不能包含非常量（所有的field都是public static final），没有非静态方法的实现（要么是静态方法要么是抽象方法），例如java.util.List。</p><ul><li><p>Java中一个类可以实现（implements）多个interface。</p></li><li><p>接口主要是为了定义一种/同一类抽象行为，子类必须实现接口中定义的方法（否则无法编译）。</p></li><li><p>接口不光是限于定义抽象方法，有一类接口没有任何方法，Marker Interface，它的目的是为了声明某些语义，例如Cloneable、Serializable。从表面看似乎与注解（Annotation）类似，但是它要更简单，因为注解是可以有参数和值的，在表达力上更强大。</p></li><li><p>functional interface：Java8增加了函数式编程支持，定义所谓的functional interface，就是<strong>只有一个抽象方法的接口</strong>，通常使用@FunctionalInterface Annotation来标记。Lambda表达式本身也可以看作是一类functional interface，这在某种程度上和面向对象是两码事。我们熟悉的Runnable、Callable、Comparator都是functional interface，它们可以用匿名类语法来实例化，并且可以作为参数传递给另一个方法，并在方法中调用。Java8中将很多可重用的方法设计成了functional interface，在<code>java.util.function</code>包中。以<code>java.util.Function</code>为例，它定义了一个<code>R apply(T t);</code>方法，我们可以<code>Function&lt;String, Integer&gt; stringToInt = x -&gt; Integer.valueOf(x);</code>这样来创建一个Fuction对象，然后这个<code>stringToInt</code>可以作为一个对象传递，并且可以调用它的<code>apply(String)</code>方法来把一个字符串转成Integer。了解Scala和JS ES6的同学对这个应该再熟悉不过了。</p></li><li><p>default(virtual) method：有了上面的functional interface，Java具有了一定的函数式编程能力。但是接口和实现类之间的耦合度还是太高了，当一个接口添加方法时，所有的实现类都要实现这个新方法。default method的出现解决了这个问题，<strong>它允许接口中有具体实现的方法，</strong>这样的话在接口中添加一个方法不会破坏原有方法的实现。这样就使得Java 8以前就存在的接口也可以很好的兼容升级了（Java9甚至可以定义<code>private default method</code>），default method可以与旧版本编写的代码保持二进制兼容。<strong>比如<code>java.util.Collection</code>，它是collection体系的root interface，在Java8中添加了一系列default method，增加了Lambda、Stream相关的功能，而以前实现过这个接口的类不需要更改。由于有了默认方法，接口的继承也会使得默认方法被继承，另外由于一个类可以实现多个接口，这就使得</strong>默认方法出现了多继承**，有几种情况要注意（<a href="http://ebnbin.com/2015/12/20/java-8-default-methods/" target="_blank" rel="external">这篇文章</a>讲得不错），不过我感觉这里有点像C++了。</p><ul><li><p>接口继承时，默认方法的获取有下面3种情况</p><ul><li><p>不重写默认方法，直接从父接口中获得方法的默认实现。</p></li><li><p>重写默认方法，这与类继承之间的重写规则类似。</p></li><li><p>重写默认方法，将其重写声明为抽象方法。这样新接口的子类，必须实现这个默认方法。</p></li></ul></li><li><p>类实现多个接口时，默认方法的多继承出现的冲突有：</p><ul><li><p>冲突1：接口继承，由于Interface可以有default method，所以一个接口另一个接口时可以重写默认方法（@Override，相当于对后代屏蔽了父接口的方法）。当一个类实现了这两个有继承关系的Interface时，它可以获得default method（类自己不必实现了）。但是这个方法的实现，取决于它更靠近的那个接口（The fundamental rule is that the closest concrete implementation to the subclass wins the inherited behavior over others.），且这个类无法调用到最上层的接口的默认方法（因为被最靠近的直接父接口重写后屏蔽了）。可以看下面的例子，有注释。</p></li><li><p>冲突2：接口之间没有继承，但有相同签名的默认方法，一个类实现了这两个接口时，必须由这个类实现具体的default method。设想一下，不可能让一个类同时从两个Interface种继承同一个方法对吧？因为这个子类从两个接口中都获得了默认方法，必须指定用哪一个才行（两个父接口的默认方法这个子类都可以访问），否则编译也不会通过的。可以看下面例子，有注释。</p></li></ul></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 多继承冲突1</span></div><div class="line"></div><div class="line"><span class="comment">// Person interface with a concrete implementation of name</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">default</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Person"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Faculty interface extending Person but with its own name implementation</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Faculty</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Faculty"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// The Student inherits Faculty's name rather than Person</span></div><div class="line"></div><div class="line"><span class="comment">// 可以这么理解，假设Java有多继承的话，Class A extends B, Object，那么B肯定离A更近，而不是Object类，因为B extends Object，B相当于A的直接父类。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Faculty</span>, <span class="title">Person</span></span>&#123; .. &#125;</div><div class="line"><span class="comment">// the getName() prints Faculty</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">  String name = <span class="keyword">new</span> Student().getName();</div><div class="line">  System.out.println(<span class="string">"Name is "</span>+name);</div><div class="line">&#125;</div><div class="line">output: Name is Faculty</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 多继承冲突2</span></div><div class="line"></div><div class="line"><span class="comment">// 如果两个functional interface没有继承关系，那么一定要由子类实现default method</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span></span>&#123; .. &#125;</div><div class="line"><span class="comment">// Notice that the faculty is NOT implementing Person</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Faculty</span> </span>&#123; .. &#125;</div><div class="line"><span class="comment">// As there's a conflict, out Student class must explicitly declare whose name it's going to inherit!</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Faculty</span>, <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Person.<span class="keyword">super</span>.getName(); <span class="comment">// 可以采用InterfaceName.super.methodName();调用需要的接口默认方法</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>抽象类（abstract class）：用abstract修饰的class，目的是<strong>代码复用</strong>（is-a）。抽象类也不能实例化，除此之外与一般的类没有太多区别。可以有一个或多个抽象方法，也可以没有。抽象类大多用于抽取相关Java类的共用方法或共用成员变量，然后通过继承的方法达到代码复用，标准库中的Collection框架，很多通用部分就被抽取为抽象类，例如java.uitl.AbstractList。</p><ul><li><p>Java中一个类只能extends一个抽象类，也就是说Java不支持多继承。</p></li><li><p>抽象类主要是为了代码复用，但是有时会需要抽象出<strong>与实例化无关</strong>的逻辑，如果此时也写到抽象类中，会陷入单继承的窘境。因为不可能让无关的两个实例去继承多个抽象类，这时一般用静态方法组成的工具类来实现，例如<code>Utils</code>（java.util.Collections）。</p></li><li><p>抽象类可以定义非抽象方法，这样子类可以享受到这个方法的能力，但是不需要实现这个方法。</p></li></ul></li><li><p>面向对象OO的理解：</p><ul><li><p>封装：隐藏事务内部细节，提高安全性和便捷性。封装提供了合理的边界，避免外部调用者接触到内部细节。例如假设在多线程环境暴露内部状态，导致并发修改。</p></li><li><p>继承：继承是代码复用的基础，但是继承其实是一种非常紧耦合的关系，父类代码修改、子类也会变化。在实践中，过度使用可能带来反效果。</p></li><li><p>多态：</p><ul><li><p>重载：Overload（没有这个注解），相同方法名字，但参数不同。本质上这是不同的方法签名。<strong>方法签名由方法名称和一个参数列表（方法的参数的顺序和类型）组成。注意，方法签名不包括方法的返回类型。不包括返回值和访问修饰符。</strong></p></li><li><p>重写：Override（@Override），父子类中相同的方法名字和参数，实现不同。重写在本质上，方法签名是相同的，子类覆盖了父类的方法，修饰符的范围相同或者比父类的范围大。因此如果父类中的方法是private的话，子类中相同签名的方法是不能加override注解的，因为<strong>private不会被继承，没有继承关系也就不存在重写，</strong>子类中只是加了一个方法而已。如果父类中的方法是protected或者public的话，子类可以override它，但修饰符必须是protected或者public，如果子类用private修饰这个override方法，编译器会报错。此外，如果override修改了返回类型的话，也是无法编译通过的。</p></li><li><p>向上转型：<code>Animal bird = new Bird();</code>，这里的<code>Bird extends Animal</code>，这就是一种向上转型，这种方式的好处是，可以用抽象父类来代替子类，作为方法的参数，例如用一个<code>void eat(Animal animal)</code>方法实现<code>eat(bird)</code>、<code>eat(tiger)</code>而不用写多个<code>eat</code>方法（体现了OO的编程思想）。但也带来了损失，假如<code>bird</code>类有一个<code>fly</code>方法，<code>tiger</code>有一个<code>run</code>方法，那么在<code>void eat(Animal animal)</code>方法中没有办法去调用。</p></li><li><p>向下转型：仍然以<code>Animal a = new Bird();</code>为例，向下转型就是<code>Bird bird = (Bird) a;</code>，将第一句代码创建的a对象转型为子类对象。接下来就可以调用<code>Bird</code>类独有的<code>fly</code>方法了（<code>bird.fly();</code>）。但是如果这么转型<code>Tiger tiger = (Tiger) a;</code>，程序在编译时不会报错，但是运行时会抛出<code>java.lang.ClassCastException</code>；或者说如果创建a对象用的是<code>Animal a = new Animal();</code>方法，也是不可以将a对象向下转型为<code>Bird</code>类型的，在编程时转型最好用<code>A instanceof B</code>做下判断。为了解决这个问题，Java引入了泛型(Generic)。</p></li></ul></li></ul></li><li><p>OO设计原则：S.O.L.I.D.原则，这里有<a href="http://www.cnblogs.com/wuyuegb2312/p/7011708.html" target="_blank" rel="external">一篇实现支付功能的例子</a>讲得不错。SOLID不仅适用于类的设计，也适用于软件组件和微服务的设计。</p><ul><li><p>Single Responsibility：单一职责，类或者对象最好只有单一职责，如果某个类承担着多个义务，可以考虑拆分。最常见的一个例子就是我们不推荐在Bean类中增加属性getter、setter以外的方法，例如save。因为如果需要修改save的行为，而属性以及属性的操作方法也会需要重新编译以适应这种变化。更好的方式是增加一个类，实现这个save方法。引用Steve Fenton的话就是在设计我们的类时，我们应该把相关的特性放在一起，这样，每当它们需要改变的时候，它们都是因为同样的原因而改变。如果它们因不同的原因而改变，我们就应该尝试将它们分开。遵循这条原则，我们的程序也会变成高内聚。</p></li><li><p>Open-Close：开闭，设计要对扩展开放，对修改关闭。避免因为新增同类功能时，修改类的已有实现。实际编程的时候，尽量不要用很多if…else if…else，避免因为增加同类行为时，又来加一个分支，不断修改原有类的实现。而是应该把同类行为抽象成接口。</p></li><li><p>Liskov Substitution：里氏替换，进行继承关系抽象时，凡是可以用父类或者基类的地方，都可用子类替换。这个原则可以这么理解，当子类可以在任意地方替换基类且软件功能不受影响时，这种继承关系的设计才是合理的。</p></li><li><p>Interface Segregation：接口分离，一个接口不要定义太多方法，因为子类不一定都要实现这些抽象的行为（实际编程的时候可能就是一个空方法实现了）。可以拆分接口，每个接口功能单一，将来如果某个接口有变化，也不会影响其他实现了其他接口的子类。</p></li><li><p>Dependency Inversion：依赖倒置，指的是实体应该依赖抽象而不是实现，高层次模块不应该依赖低层次模块，而是应该依赖抽象。保证产品代码之间适当的耦合度。那么什么是高层次，什么是低层次？可以这么理解（李智慧老师的大数据课程中也提到这点），简单讲就是调用链中处于前面的是高层，后面的是低层。实际上，依赖倒置是实现开闭原则的方法。</p></li></ul></li><li><p>IOC和DI（Spring的核心概念）</p><ul><li><p>IOC：控制反转，创建实例的控制权由一个实例的代码剥离到IOC容器中，如xml配置。原先是一个类去创建另一个类，IOC之后变成这个类被动等待另一个类的注入。</p></li><li><p>DI：依赖注入，一个类依赖另一个类的的功能，那么就通过注入，如构造器，setter方法将这个类的实例引入。</p></li></ul></li></ul><h2 id="14-谈一谈你知道的设计模式？"><a href="#14-谈一谈你知道的设计模式？" class="headerlink" title="14.谈一谈你知道的设计模式？"></a>14.谈一谈你知道的设计模式？</h2><ul><li>什么是设计模式：人们为软件开发中相同表征的问题，抽象出的可重复利用的解决方案。在某种程度上，设计模式代表了一些特定情况的最佳实践。设计模式可以帮助我们很好地理解JDK以及一些框架中，一些看似非常复杂繁多的源码和类的设计。</li></ul><ul><li><p>按照应用目标，进行分类：</p><ul><li><p>创建型：对对象创建过程的各种问题和解决方案的总结，常见的有工厂（Factory、Abstract Factory）、单例（Singleton）、构建器（Builder）、原型（ProtoType）。</p></li><li><p>结构型：对软件设计结构的总结，关注类、对象继承、组合。常见的有桥接模式（Bridge）、适配器（Adapter）、装饰者模式（Decorator）、代理（Proxy）、组合（Composite）、外观（Facade）、享元（Flyweight）。</p></li><li><p>行为型：从类或者对象之间的交互、职责划分等角度总结。常见的有策略（Strategy）、解释器（Interpreter）、命令（Command）、观察者（Observer）、迭代器（Iterator）、模板方法（Template Method）、访问者（Visitor）等。</p></li></ul></li></ul><p><a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="external">这里</a>是一个网上比较简明的设计模式教程，可以作为基本资料迅速查阅。</p><h3 id="说说几种常见的设计模式理解"><a href="#说说几种常见的设计模式理解" class="headerlink" title="说说几种常见的设计模式理解"></a>说说几种常见的设计模式理解</h3><ul><li>Builder模式：是一种创建型模式，在很多SDK或者框架中都能看到，Builder模式通常会被实现为链式调用的方法。这种模式可以<strong>优雅地解决构建复杂对象的麻烦，避免实现各种参数组合的构造函数</strong>。所以如果一个类的构造函数特别多的时候，我们可以考虑实现Builder模式。不过这种方式一旦build出对象之后，不再容易实现对它的属性修改，实际应用时，如果需要修改，可能需要实现一个“回炉再造”的方法。或者，我们需要仔细思考对象构建出来以后，<strong>是否允许</strong>其修改，毕竟选择实现builder模式而不是去写一堆<code>“构造方法+setter方法”</code>本身可能就是希望对象的构造是一个连续行为并且构造出来以后不希望它变化。</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 以一段我曾经比较熟悉的OkHttp为例，构造请求的时候，可以这么写。</span></div><div class="line"></div><div class="line">Request request = <span class="keyword">new</span> <span class="type">Request</span>.Builder()</div><div class="line">        .url(<span class="string">"http://publicobject.com/helloworld.txt"</span>)</div><div class="line">        .build();</div><div class="line"></div><div class="line"><span class="comment">// Request类实现的简化版，实际实现不只有url和method两个属性。</span></div><div class="line"><span class="keyword">public</span> final <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</div><div class="line">  final <span class="keyword">String</span> url;</div><div class="line">  final <span class="keyword">String</span> method;</div><div class="line"></div><div class="line">  Request(Builder builder) &#123;</div><div class="line">    <span class="comment">//构造函数，省略属性赋值操作</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">public</span> Builder <span class="keyword">new</span><span class="type">Builder</span>() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Builder</span>(<span class="built_in">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">//省略部分代码</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    HttpUrl url;</div><div class="line">    <span class="keyword">String</span> method;</div><div class="line"></div><div class="line">    <span class="comment">//省略部分代码</span></div><div class="line">    Builder(Request request) &#123;</div><div class="line">      <span class="comment">//构造函数，省略属性赋值操作</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Builder url(<span class="keyword">String</span> url) &#123;</div><div class="line">      <span class="built_in">this</span>.url = url;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//省略部分代码</span></div><div class="line">     <span class="keyword">public</span> Request build() &#123;</div><div class="line">      <span class="keyword">if</span> (url == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalStateException</span>(<span class="string">"url == null"</span>);</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Request</span>(<span class="built_in">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>装饰器：是一种结构型模式，JDK标准IO流就是它的实现。允许向现有对象添加新的功能（包装/装饰），同时不改变其结构。这种模式创建了一个装饰类，用来包装原有的类，并且在<strong>保持类方法签名完整的前提下，提供新的功能。</strong>比如说我们有一个下载器downloader，可以实现一个文件的多线程下载。然后我们希望它还可以自动重试，这时可以把downloader包装成了一个AutoRetryDownloader。其实<strong>这种模式可以看作是继承的替代，</strong>动态地扩展了一个实现类的功能，但是比继承要更灵活，不过如果真的进行了多层装饰的话，也会比较复杂。</p><ul><li><p>Java IO：InputStream是一个抽象类，FileInputStream（文件输入流）、ByteArrayInputStream（字节输入流）各种子类从不同角度对InputStream进行扩展，实现了对不同类型的输入来源读取的功能。装饰器模式中，很典型的就是FileInputStream的构造函数的参数就是InputStream类型。然后BufferedInputStream又可以对FileInputStream进行扩展，实现带缓存的文件输入流（<code>BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;file://path&quot;));</code>）。</p></li><li><p>与代理模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制（控制被代理对象的访问，比如AOP）。从构造方法上来说，装饰器模式里面，被装饰对象一般在提前在外面创建，然后传给装饰类的构造方法。而代理模式的构造方法上一般不需要传入被代理对象，而是代理对象在创建时，自己去创建被代理对象。不过很多时候，其实代理模式中，被代理对象也是外面创建的，因此这种代码组织上区别并不是这种两种设计模式的区别，更多还是需要从目的上去理解区分。</p></li></ul></li></ul><ul><li><p>单例：创建型的模式，提供一种创建唯一对象的方法，外部可以直接访问这个对象，不需要调用这个累的实例化方法（3要素，只有一个实例，自己通过私有构造方法创建实例，对外提供这一个实例）。需要重点关注如何写出线程安全的单例，这个模式虽然简单，但是有很多的点可以考察，比如实现单例的方式有几种，线程安全的方式有几种。</p><ul><li><p>懒汉式1：线程不安全。因为没有加锁，当多线程并发调用getInstance时，不安全。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;  </div><div class="line">   private static Singleton<span class="built_in"> instance; </span> </div><div class="line">   private Singleton ()&#123;&#125;  </div><div class="line"></div><div class="line">   public static Singleton getInstance() &#123;  </div><div class="line">     <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </div><div class="line">        <span class="built_in"> instance </span>= new Singleton();  </div><div class="line">     &#125;  </div><div class="line">     return<span class="built_in"> instance; </span> </div><div class="line">   &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>懒汉式2：线程安全，getInstance加锁，线程安全，但是获取对象时效率低，99%的情况下是不需要同步的，因为对象一旦被创建后，就不再需要锁住getInstance方法了。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;  </div><div class="line">   private static Singleton<span class="built_in"> instance; </span> </div><div class="line">   private Singleton ()&#123;&#125;  </div><div class="line">   public static synchronized Singleton getInstance() &#123;  </div><div class="line">   <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </div><div class="line">       <span class="built_in">instance </span>= new Singleton();  </div><div class="line">     &#125;  </div><div class="line">     return<span class="built_in"> instance; </span> </div><div class="line">   &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>饿汉式：线程安全，无锁效率很高。但是会产生无用的对象，浪费内存。<strong>它的同步是基于ClassLoader实现线程安全的，JVM会保证一个类的<clinit>()方法在多线程环境中被正确加锁、同步。当ClassLoader在加载类的Singleton类时候就会实例化instance对象了。</clinit></strong>其实JDK中的<a href="http://hg.openjdk.java.net/jdk/jdk/file/18fba780c1d1/src/java.base/share/classes/java/lang/Runtime.java" target="_blank" rel="external"><code>java.lang.Runtime</code></a>就是这种方式。不过要注意，它的对象还被声明为了<code>final</code>，一定程度上保证了实例不被篡改，也保证执行顺序的语义。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;  </div><div class="line">   <span class="keyword">private</span><span class="keyword"> static</span> Singleton<span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton();  </div><div class="line">   <span class="keyword">private</span> Singleton ()&#123;&#125;  </div><div class="line">   <span class="keyword">public</span><span class="keyword"> static</span> Singleton getInstance() &#123;  </div><div class="line">    <span class="built_in"> return </span>instance;  </div><div class="line">   &#125;  </div><div class="line">&#125;</div><div class="line"></div><div class="line">// java.lang.Runtime</div><div class="line">private<span class="keyword"> static</span><span class="keyword"> final</span> Runtime currentRuntime =<span class="built_in"> new </span>Runtime();</div><div class="line">private<span class="keyword"> static</span> Version version;</div><div class="line">// …</div><div class="line">public<span class="keyword"> static</span> Runtime getRuntime() &#123;</div><div class="line">   <span class="built_in">return </span>currentRuntime;</div><div class="line">&#125;</div><div class="line">/** Don't let anyone else instantiate this class */</div><div class="line">private Runtime() &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>双重检查锁：双重检查加锁，线程安全，获取对象时性能高。前面提到过JDK1.5之后的<code>volatile</code>关键字在这里起到的<strong>可见性 + 一定程度的有序</strong>作用，如果没有它的话，那么第一个null检查，可能会看到初始化了一半的instance，然后返回从而造成问题。为什么会出现没有完全初始化的instance，是因为JVM会进行指令重排，假设构造函数里面的工作很多，虽然synchronized保证了原子性，但重排可能会导致实例还没有构造出来，instance就被赋值了（instance就是个引用，赋值就是给它分配个内存空间）。同样的，在我们自己写代码的时候，如果说构造函数是一个异步操作，那就得小心了，要保证异步操作初始化完成了，才可以返回instance对象。</p><blockquote><p>杨老师也提到：在现代 Java 中，内存排序模型（JMM）已经非常完善，通过 volatile 的 write 或者 read，能保证所谓的 happen-before，也就是避免常被提到的指令重排。换句话说，构造对象的 store 指令能够被保证一定在 volatile read 之前。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;  </div><div class="line">   <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </div><div class="line">       <span class="keyword">synchronized</span> (Singleton.class) &#123;  </div><div class="line">       <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </div><div class="line">           singleton = <span class="keyword">new</span> Singleton();  </div><div class="line">         &#125;  </div><div class="line">       &#125;  </div><div class="line">     &#125;  </div><div class="line">     <span class="keyword">return</span> singleton;  </div><div class="line">   &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>静态内部类：这个方法可以达到和双重检查锁一样的效果，但是实现方式更简单，同样利用了ClassLoader。不过这里的lazy-load依靠的是内部类，内部类不会在Singleton被加载时被加载，而是会等到调用getInstance时，SingletonHolder类才被加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </div><div class="line">   &#125;  </div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">     <span class="keyword">return</span> SingletonHolder.INSTANCE;  </div><div class="line">   &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>枚举（单元素枚举）：这种方式很少见到用，但是据说这是最佳实现方法。更简洁（直接调用Singleton.INSTANCE即可），自动支持序列化，线程安全。EffectiveJava作者提倡，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。需要注意的是enum是JDK1.5之后才出现。JDK5中提供了大量语法糖，枚举就是其中一种。语法糖（Syntactic Sugar），指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是但是更方便程序员使用。只是在编译器上做了手脚，却没有提供对应的指令集来处理它。<code>enum</code>就是一种普通的类，继承自<code>java.lang.Enum</code>，就是说我们写的一个<code>public enum XXX</code>编译完了之后其实是一个类<code>public final class XXX extends Enum&lt;XXX&gt;</code>，其中的每一个属性都是<code>static</code>的，所以INSTANCE也是static的，这就和饿汉式的单例很像了有木有（线程安全），所以这种方式不是lazy-load的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </div><div class="line">   INSTANCE;  </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </div><div class="line">   &#125;  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 字节码反编译之后</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">Singleton</span>&gt; </span>&#123;</div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE;</div><div class="line">     <span class="keyword">public</span> <span class="keyword">static</span> Singleton[] values();</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">valueOf</span><span class="params">(String s)</span></span>;</div><div class="line">     <span class="keyword">static</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li><li><p>Facade模式：Facade外观模式，属于结构型模式。它隐藏了系统的复杂性，向外部客户提供一个访问系统的简化接口。这种模式有利于将真实的客户端与系统解耦，比如我们使用HttpClient时，可以有OkHttpClient、HttpClient、HttpUrlConnection等等，按照外观模式，我们把它们封装成简单的Get、Post接口形式，给业务层使用，那么将来如果想要切换HttpClient的实现也是很容易的，业务层代码完全不需要修改。</p></li></ul><ul><li><p>Spring等框架中使用了哪些模式，这里考察到了Spring框架的知识，在实际工作中使用到的话，应该都不会陌生。</p><ul><li><p>BeanFactory、ApplicationContext，工厂模式。</p></li><li><p>Bean创建时的Scope定义（单例、原型），实现原理。</p></li><li><p>JdbcTemplate，模板模式。</p></li><li><p>AOP，代理模式、装饰器模式、适配器模式。</p></li></ul></li></ul><p>到这里，把杨晓峰老师的《Java核心知识》的基础篇提纲挈领地过了一遍，深刻感受到了温故而知新的道理，当年在大学里面向对象虽然学的是C++，后来从实验室到工作一直都是Java，基础的知识的确是越品越有味道。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-介绍&quot;&gt;&lt;a href=&quot;#0-介绍&quot; class=&quot;headerlink&quot; title=&quot;0.介绍&quot;&gt;&lt;/a&gt;0.介绍&lt;/h2&gt;&lt;p&gt;基础知识就是内功，修炼内功可到达更高层次。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;课程介绍：&lt;a href=&quot;https://time.geekbang.org/column/intro/82&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://time.geekbang.org/column/intro/82&lt;/a&gt;，这里面因为篇幅限制，不可能像写教科书一样面面俱到，更多都是在抛砖引玉，点到为止。涉及关键知识点需要自己再深入地去研究和学习，非常适合参加面试/面试别人的人，也比较适合夯实Java基础的人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目录：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fxb7ky9nuwj30ku2y9gyb.jpg&quot; width=&quot;480&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="面试" scheme="http://unclechen.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="Java" scheme="http://unclechen.github.io/tags/Java/"/>
    
      <category term="编程语言" scheme="http://unclechen.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="面试" scheme="http://unclechen.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="基础" scheme="http://unclechen.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spark学习之本地环境搭建和模板工程</title>
    <link href="http://unclechen.github.io/2018/09/25/Spark%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E6%A8%A1%E6%9D%BF%E5%B7%A5%E7%A8%8B/"/>
    <id>http://unclechen.github.io/2018/09/25/Spark学习之本地环境搭建和模板工程/</id>
    <published>2018-09-25T00:00:00.000Z</published>
    <updated>2018-09-26T09:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>Spark是现在非常流行的一个大数据分析引擎，许多大公司的数据分析都在使用它。简单来讲，Spark主要有以下几个特点：</p><ul><li>速度快：得益于其DAG计算模型，更容易在内存中一次性完成操作，使得Spark比MapReduce要快很多。</li><li>支持多种语言：支持Java、Scala、Python等编程语言，甚至支持SQL语法，提供了丰富的API用于数据的处理，使用起来非常方便。</li><li>支持多种环境部署：Spark可以运行在Hadoop、Apache Mesos、Kubernetes、standalone，还可以读取不同来源的数据。</li></ul><p>让我们赶紧进入Spark的大数据世界！</p><a id="more"></a><h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><p>以我使用的Mac OSX为例，搭建一个基本的Spark环境。</p><h3 id="安装Java-Scala-SDK"><a href="#安装Java-Scala-SDK" class="headerlink" title="安装Java/Scala SDK"></a>安装Java/Scala SDK</h3><p>此处省略。</p><h3 id="下载Spark"><a href="#下载Spark" class="headerlink" title="下载Spark"></a>下载Spark</h3><p>从<a href="https://spark.apache.org/downloads.html" target="_blank" rel="external">官网</a>download 2.x版本的Spark，然后解压出来放到一个目录。这里我下载的是2.2.2版本的Spark。（2.x版本的Spark和1.x版本的Spark运行时用到Hadoop环境也不同，目前主流应用都是2.x版本了。）</p><h2 id="三、基本示例"><a href="#三、基本示例" class="headerlink" title="三、基本示例"></a>三、基本示例</h2><h3 id="1-从Spark命令行运行"><a href="#1-从Spark命令行运行" class="headerlink" title="1. 从Spark命令行运行"></a>1. 从Spark命令行运行</h3><p>由于下载的Spark内置了Hadoop的Java Library，我们可以直接在命令行里面启动Spark，体验它的功能。</p><p>以经典的word count为例，我们从命令行体验一下Spark。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 进入刚才解压好的Spark目录，运行下面spark-shell</div><div class="line">$ ./bin/spark-shell</div><div class="line">Using Spark's default log4j profile: org/apache/spark/log4j-defaults.<span class="built_in">properties</span></div><div class="line">Setting default <span class="built_in">log</span> level to <span class="string">"WARN"</span>.</div><div class="line">To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</div><div class="line"><span class="number">18</span>/<span class="number">09</span>/<span class="number">26</span> <span class="number">16</span>:<span class="number">33</span>:<span class="number">31</span> WARN NativeCodeLoader: Unable to <span class="built_in">load</span> native-hadoop library <span class="keyword">for</span> your platform... using builtin-java classes where applicable</div><div class="line">Spark <span class="built_in">context</span> Web UI available <span class="built_in">at</span> http://<span class="number">10.22</span>.123.167:<span class="number">4040</span></div><div class="line">Spark <span class="built_in">context</span> available as 'sc' (master = <span class="built_in">local</span>[*], app id = <span class="built_in">local</span>-<span class="number">1537950811993</span>).</div><div class="line">Spark session available as 'spark'.</div><div class="line">Welcome to</div><div class="line">      ____              <span class="symbol">__</span></div><div class="line">     / <span class="symbol">__</span>/<span class="symbol">__</span>  ___ _____/ /<span class="symbol">__</span></div><div class="line">    <span class="symbol">_</span>\ \/ <span class="symbol">_</span> \/ <span class="symbol">_</span> `/ <span class="symbol">__</span>/  '<span class="symbol">_</span>/</div><div class="line">   /___/ .<span class="symbol">__</span>/\<span class="symbol">_</span>,<span class="symbol">_</span>/<span class="symbol">_</span>/ /<span class="symbol">_</span>/\<span class="symbol">_</span>\   version <span class="number">2.2</span>.2</div><div class="line">      /<span class="symbol">_</span>/</div><div class="line"></div><div class="line">Using Scala version <span class="number">2.11</span>.8 (Java HotSpot(TM) <span class="number">64</span>-Bit Server VM, Java <span class="number">1.8</span>.0_66)</div><div class="line">Type <span class="keyword">in</span> expressions to have them evaluated.</div><div class="line">Type :help <span class="keyword">for</span> more information.</div></pre></td></tr></table></figure><p>然后读取一个文本文件到RDD（Resilient Distribute Data，关于Spark RDD，可以看一下官方的<a href="http://spark.apachecn.org/paper/zh/spark-rdd.html" target="_blank" rel="external">spark-rdd论文</a>）中：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; val textRDD = spark<span class="selector-class">.sparkContext</span><span class="selector-class">.textFile</span>(<span class="string">"README.md"</span>)</div><div class="line">textRDD: org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rdd</span><span class="selector-class">.RDD</span>[String] = README<span class="selector-class">.md</span> MapPartitionsRDD[<span class="number">1</span>] at textFile at &lt;console&gt;:<span class="number">23</span></div></pre></td></tr></table></figure><p>然后对这个RDD进行操作，计算各个单词的数量（word count有很多思路，我这里用了一种比较简单的）：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; val wordCountRDD = textRDD.flatMap(line =&gt; line.<span class="built_in">split</span>(<span class="string">" "</span>)).map(word =&gt; (word, <span class="number">1</span>)).reduceByKey(<span class="keyword">_</span> + <span class="keyword">_</span>)</div><div class="line">wordCountRDD: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[<span class="number">4</span>] <span class="built_in">at</span> reduceByKey <span class="built_in">at</span> &lt;console&gt;:<span class="number">25</span></div></pre></td></tr></table></figure><p>把结果打印出来看下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">scala</span>&gt; <span class="selector-tag">wordCountRDD</span><span class="selector-class">.foreach</span>(println)</div><div class="line">(package,<span class="number">1</span>)</div><div class="line">(For,<span class="number">3</span>)</div><div class="line">(this,<span class="number">1</span>)</div><div class="line">(Programs,<span class="number">1</span>)</div><div class="line">(Version"](<span class="attribute">http</span>:<span class="comment">//spark.apache.org/docs/latest/building-spark.html#specifying-the-hadoop-version),1)</span></div><div class="line">(Spark,<span class="number">16</span>)</div><div class="line">(Because,<span class="number">1</span>)</div><div class="line">(particular,<span class="number">2</span>)</div><div class="line">... 省略 ...</div></pre></td></tr></table></figure><h3 id="2-打包成完整的程序运行"><a href="#2-打包成完整的程序运行" class="headerlink" title="2. 打包成完整的程序运行"></a>2. 打包成完整的程序运行</h3><p>在命令行中运行只是一种基本的体验，真正的生产环境都是要打包后放到集群上去跑的，下面了解一下怎么打包。</p><p>官网的Quick Start文档中其实有sbt打包的说明，但本人比较喜欢gradle，所以也希望使用gradle来打包Spark应用。</p><p>我借助了<a href="https://github.com/faizanahemad/spark-gradle-template.git" target="_blank" rel="external">https://github.com/faizanahemad/spark-gradle-template.git</a>这个模板工程来编写、打包Spark应用。（其实Spark程序就是一个可以执行的jar，所以不管是用gradle还是sbt都可以。）</p><h4 id="下载并修改模板工程"><a href="#下载并修改模板工程" class="headerlink" title="下载并修改模板工程"></a>下载并修改模板工程</h4><p>下载模板之后，我们简单做一下修改，把Spark依赖改成前面我下载的<code>2.2.2</code>。</p><p>简单修改一下<code>build.gradle</code>以及<code>gradle.properties</code>文件（注意：这里只是最小的改动了一下，能满足基本体验，如果要作为一个干净的模板，还需要稍微多改点）。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// gradle.properties</span></div><div class="line">scalaVersion=<span class="number">2.11</span>.<span class="number">8</span></div><div class="line">sparkVersion=<span class="number">2.2</span>.<span class="number">2</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// build.gradle</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'org.apache.spark:spark-core_2.11:'</span>+sparkVersion</div><div class="line"><span class="keyword">compile</span> <span class="string">'org.apache.spark:spark-sql_2.11:'</span>+sparkVersion</div></pre></td></tr></table></figure><p>然后模板工程中new一个scala对象<code>WordCount</code>，在main方法中编写单词统计的代码：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> template.spark</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) = &#123;</div><div class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder()</div><div class="line">      .appName(<span class="string">"Word count example"</span>)</div><div class="line">      .master(<span class="string">"local[*]"</span>)</div><div class="line">      .getOrCreate()</div><div class="line">    <span class="keyword">val</span> inputFile = <span class="keyword">if</span> (args.length &gt;= <span class="number">1</span>) args(<span class="number">0</span>) <span class="keyword">else</span> <span class="string">"people-example.csv"</span></div><div class="line">    <span class="keyword">val</span> textRDD = spark.sparkContext.textFile(inputFile)</div><div class="line">    <span class="keyword">val</span> wordCountRDD = textRDD.flatMap(line =&gt; line.split(<span class="string">" "</span>)).map(word =&gt; (word, <span class="number">1</span>)).reduceByKey(_ + _)</div><div class="line">    wordCountRDD.foreach(println)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>进入工程目录，运行下面的命令，即可打包出jar文件，在工程目录下的<code>/build/libs/spark-gradle-template-1.0-SNAPSHOT.jar</code>：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">./gradlew</span> jar</div></pre></td></tr></table></figure><h4 id="提交到本地的Spark环境运行"><a href="#提交到本地的Spark环境运行" class="headerlink" title="提交到本地的Spark环境运行"></a>提交到本地的Spark环境运行</h4><p>回到命令行，输入：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/你解压的Spark根目录/</span>spark-<span class="number">2.2</span>.<span class="number">2</span>-bin-hadoop2.<span class="number">7</span><span class="regexp">/bin/</span>spark-submit --<span class="keyword">class</span> <span class="string">"template.spark.WordCount"</span> --master <span class="string">"local[2]"</span> .<span class="regexp">/build/</span>libs<span class="regexp">/spark-gradle-template-1.0-SNAPSHOT-all.jar ./</span>README.md</div></pre></td></tr></table></figure><p>即可运行打包好的Spark-WordCount程序。注意，这里需要指定MainClass的名称为<code>template.spark.WordCount</code>，并在jar文件后面带上参数即可。</p><blockquote><p>如果你的工程还需要依赖第三方Library（包括远程依赖和本地libs依赖），且打包的时候需要把它们都打入到你的jar包时，可以运行<code>./gradlew shadowjar</code>，这样就可以打包出一个包含所有依赖的fatjar文件了。</p></blockquote><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><p>万事开头难，动手让程序跑起来最重要。Spark对我们提供了很清晰的API（tranform和action算子），屏蔽掉了很多分布式大数据背后的细节，使得我们可以专注于编写业务代码，实现数据的统计分析。当然，为了让自己的程序更优秀，我们在集群上运行Spark任务的时候，还需要进行资源的设置（spark-conf），以及代码的优化。Spark官方提供了很多学习文档，需要好好阅读，希望接下来可以学习到更多大数据处理的思想和最佳实践，继续加油吧。</p><h2 id="五、参考资料和延伸阅读（必看）"><a href="#五、参考资料和延伸阅读（必看）" class="headerlink" title="五、参考资料和延伸阅读（必看）"></a>五、参考资料和延伸阅读（必看）</h2><ul><li><a href="https://spark.apache.org/docs/latest/quick-start.html" target="_blank" rel="external">Spark Quick Start</a></li><li><a href="http://spark.apachecn.org/paper/zh/spark-rdd.html" target="_blank" rel="external">Spark RDD</a></li><li><a href="https://spark.apache.org/docs/latest/rdd-programming-guide.html" target="_blank" rel="external">RDD Programming Guide</a></li><li><a href="https://spark.apache.org/docs/latest/cluster-overview.html" target="_blank" rel="external">Cluster Mode Overview</a></li><li><a href="https://spark.apache.org/docs/latest/sql-programming-guide.html" target="_blank" rel="external">Spark SQL, DataFrames and Datasets Guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;p&gt;Spark是现在非常流行的一个大数据分析引擎，许多大公司的数据分析都在使用它。简单来讲，Spark主要有以下几个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;速度快：得益于其DAG计算模型，更容易在内存中一次性完成操作，使得Spark比MapReduce要快很多。&lt;/li&gt;
&lt;li&gt;支持多种语言：支持Java、Scala、Python等编程语言，甚至支持SQL语法，提供了丰富的API用于数据的处理，使用起来非常方便。&lt;/li&gt;
&lt;li&gt;支持多种环境部署：Spark可以运行在Hadoop、Apache Mesos、Kubernetes、standalone，还可以读取不同来源的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们赶紧进入Spark的大数据世界！&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spark" scheme="http://unclechen.github.io/tags/Spark/"/>
    
      <category term="大数据" scheme="http://unclechen.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>揭开JS无埋点技术的神秘面纱</title>
    <link href="http://unclechen.github.io/2018/06/24/%E6%8F%AD%E5%BC%80JS%E6%97%A0%E5%9F%8B%E7%82%B9%E6%8A%80%E6%9C%AF%E7%9A%84%E7%A5%9E%E7%A7%98%E9%9D%A2%E7%BA%B1/"/>
    <id>http://unclechen.github.io/2018/06/24/揭开JS无埋点技术的神秘面纱/</id>
    <published>2018-06-24T00:00:00.000Z</published>
    <updated>2018-06-24T03:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>相信很多人都接触过<strong>“埋点”</strong>这个概念，无论是前端还是后端开发，我们都可以使用这门技术来生产出一些运营性质的原始数据（接口耗时、程序安装/启动、用户交互行为等等），然后分析它们得到一些抽象指标（例如留存率、转化率），进而决定产品运营或者代码优化的方向。现在业界有许多比较知名数据平台，比如Google Analytics、Facebook Pixel、Mixpanel、GrowingIO、诸葛IO、TalkingData、神策数据等数不胜数一大票，这些平台有单纯做数据分析的，也有服务于特定领域例如广告监测转化的，都提供了多端（Android、iOS、Web、小程序、ReactNative）的埋点SDK和比较全面的BI服务。这一两年，不少平台都开始宣传一种叫<strong>“无埋点”</strong>的技术，下面以Web端为例，揭开它的神秘面纱。</p><a id="more"></a><h2 id="二、什么是无埋点？"><a href="#二、什么是无埋点？" class="headerlink" title="二、什么是无埋点？"></a>二、什么是无埋点？</h2><p><strong>“无埋点”</strong>在国外一些平台被叫做<code>Codeless Tracking</code>，顾名思义就是可以写“更少”的埋点代码。而<strong>“代码埋点”</strong>一般需要开发人员编写代码，监听某个html元素的产生的事件，然后调用上报数据的接口，发送数据。而无埋点则可以由非技术人员（例如运营、产品），在可视化的工具中作出配置，然后就可以将html元素中产生的行为上报到后台。下面是Mixpanel平台的可视化工具的截图。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fsl72i76vnj30tk0d8dhs.jpg" alt=""></p><p>在这个工具里，需要首先输入页面的url，页面加载完成后，会出现可视化配置的工具条。点击创建事件，就可以进入元素选择模式，用鼠标点击页面上的某个元素（例如button、a这些element），就可以在弹出的对话框里面，设置这个事件的名称（比如叫<code>TEST</code>）。保存这个配置之后，如果页面在浏览器中被浏览，刚才配置的那个按钮发生点击时，就会向后台上报一个<code>TEST</code>事件。我们还可以设置上报<code>TEST</code>事件的时候，带上一些属性（properties），这些属性同样也是在页面中用鼠标去选择，然后保存起来的。</p><p>看到这里，首先从产品层面上，我们比较具体的了解到“无埋点”到底是干什么的了，无埋点就是用可视化工具配置页面中需要被监测的元素，并设置这个元素产生行为的时候需要上报的数据。<strong>但是还有非常关键的一点必须提到，要让“无埋点”工作起来，页面里面还是必须嵌入了一段JS SDK的基础代码，只是不需要再去调用SDK具体的数据上报接口罢了。</strong></p><p><strong>所以，“无埋点”技术的关键是：</strong></p><ul><li><strong>操作可视化配置工具，保存配置</strong></li><li><strong>SDK基础代码如何根据配置上报行为</strong></li></ul><p>下面介绍一下如何实现这两个关键。</p><h2 id="三、关键技术"><a href="#三、关键技术" class="headerlink" title="三、关键技术"></a>三、关键技术</h2><h3 id="1-基础代码"><a href="#1-基础代码" class="headerlink" title="1. 基础代码"></a>1. 基础代码</h3><p><strong>和代码埋点一样</strong>，要让“无埋点”工作起来，网页里也必须有一段“基础代码”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- start Mixpanel --&gt;&lt;script type="text/javascript"&gt;(function(e,a)&#123;if(!a.__SV)&#123;var b=window;try&#123;var c,l,i,j=b.location,g=j.hash;c=function(a,b)&#123;return(l=a.match(RegExp(b+"=([^&amp;]*)")))?l[1]:null&#125;;g&amp;&amp;c(g,"state")&amp;&amp;(i=JSON.parse(decodeURIComponent(c(g,"state"))),"mpeditor"===i.action&amp;&amp;(b.sessionStorage.setItem("_mpcehash",g),history.replaceState(i.desiredHash||"",e.title,j.pathname+j.search)))&#125;catch(m)&#123;&#125;var k,h;window.mixpanel=a;a._i=[];a.init=function(b,c,f)&#123;function e(b,a)&#123;var c=a.split(".");2==c.length&amp;&amp;(b=b[c[0]],a=c[1]);b[a]=function()&#123;b.push([a].concat(Array.prototype.slice.call(arguments,</div><div class="line">0)))&#125;&#125;var d=a;"undefined"!==typeof f?d=a[f]=[]:f="mixpanel";d.people=d.people||[];d.toString=function(b)&#123;var a="mixpanel";"mixpanel"!==f&amp;&amp;(a+="."+f);b||(a+=" (stub)");return a&#125;;d.people.toString=function()&#123;return d.toString(1)+".people (stub)"&#125;;k="disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset opt_in_tracking opt_out_tracking has_opted_in_tracking has_opted_out_tracking clear_opt_in_out_tracking people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");</div><div class="line">for(h=0;h&lt;k.length;h++)e(d,k[h]);a._i.push([b,c,f])&#125;;a.__SV=1.2;b=e.createElement("script");b.type="text/javascript";b.async=!0;b.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:"file:"===e.location.protocol&amp;&amp;"//cdn4.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//)?"https://cdn4.mxpnl.com/libs/mixpanel-2-latest.min.js":"//cdn4.mxpnl.com/libs/mixpanel-2-latest.min.js";c=e.getElementsByTagName("script")[0];c.parentNode.insertBefore(b,c)&#125;&#125;)(document,window.mixpanel||[]);</div><div class="line">mixpanel.init("46042714e64a7536dde6f02af1aec923");&lt;/script&gt;&lt;!-- end Mixpanel --&gt;</div></pre></td></tr></table></figure><p>上面是Mixpanel平台的基础代码，不同平台家的这段<strong>基础代码</strong>，大同小异，都是一段IIFE形式的、压缩过的js代码，执行完成之后，在head里面插入了一个新的script标签，<strong>异步</strong>去下载真正的核心SDK代码下来工作。所以并不是基础代码可以根据配置上报行为，而是基础代码会下载一段<strong>“更大”</strong>的SDK核心代码，这段代码才是SDK真正的功能实现。</p><p><strong>这样子做的好处是，基础代码很短，加载的时候不会影响到网页的性能，而且核心SDK代码的更新也不需要用户去更新这段基础代码。</strong></p><h3 id="2-页面的唯一标识"><a href="#2-页面的唯一标识" class="headerlink" title="2. 页面的唯一标识"></a>2. 页面的唯一标识</h3><p>在配置元素行为的时候，需要唯一标识一个页面，这样才能保证A页面的配置，不会下发给在B页面，不会导致B页面产生出A页面里配置的行为。在Web里面标识页面靠的是url，url由protocol、domain、port、path和参数组成，存储配置的时候要将url的参数提出来再存。而url的参数位置是可以变化的，比如urlA（<code>http://a.b.com/c.html?pa=1&amp;pb=2</code>）和urlB（<code>http://a.b.com/c.html?pb=2&amp;pa=1</code>）虽然<code>urlA ！== urlB</code>，但是其实它们是一个页面。</p><h3 id="3-元素的唯一标识"><a href="#3-元素的唯一标识" class="headerlink" title="3. 元素的唯一标识"></a>3. 元素的唯一标识</h3><p>唯一标识页面后，接下来就要唯一标识页面里面的元素，这样才能保证A页面中配置的元素A1可以被SDK找到，从而监听它产生的事件。</p><p>在html里面，元素是以DOM Tree组织的，如果沿着元素A1出发，一直向上记录它的parent和它在parent中的index，直到根节点body，那么就可以得到元素A1在DOM Tree中的唯一路径。</p><p>html的元素还会拥有很多属性，例如css class、id可以用来定位元素。通过Chrome开发者工具可以看到Mixpanel的可视化工具在配置元素的时候，使用的是<a href="https://github.com/Autarc/optimal-select" target="_blank" rel="external">https://github.com/Autarc/optimal-select</a>这个库来生成element的唯一标识的。而Github上还有<a href="https://github.com/rowthan/whats-element" target="_blank" rel="external">https://github.com/rowthan/whats-element</a>这样的库，也可以生成元素在DOM Tree中的唯一标识。</p><p>此外，还有平台在标识元素的时候，采用了<code>xpath</code>，这也是一个思路。</p><h3 id="4-如何查找元素"><a href="#4-如何查找元素" class="headerlink" title="4. 如何查找元素"></a>4. 如何查找元素</h3><p>上面说到元素可以有唯一标识，那么有了唯一标识，就可以利用它的原理，找到这个元素。有一个很好用的API是<code>document.querySelector()</code>，这个API可以根据CSS选择器找到对应的元素。此外，根据元素的标识方法，还可以使用<code>document.getElementById()</code>、<code>document.getElementByName()</code>来实现元素的查找。</p><p><strong>这里需要重点强调的是，如果页面在配置完成之后又发生了修改，导致DOM Tree发生变化，此时需要被监测的元素的唯一标识可能也会发生改变。很可能导致根据之前的配置无法找到该元素了，或者找到的并不是我们希望监测的元素，从而导致产生的事件数量发生比较明显的变化。为了数据的稳定性和准确性，应该设有相应的监测告警处理这种case，并提示用户去重新配置页面。我个人认为这是无埋点最大的缺点。</strong></p><h3 id="5-标记元素时的高亮效果和可视化交互实现"><a href="#5-标记元素时的高亮效果和可视化交互实现" class="headerlink" title="5. 标记元素时的高亮效果和可视化交互实现"></a>5. 标记元素时的高亮效果和可视化交互实现</h3><p>这是一个比较细节的点，其实熟悉js的大牛们都知道，有无数种方式去实现鼠标移动到元素上时的<code>类hover</code>效果，点击元素后弹出一个对话框，让用户输入配置的信息也so easy。但是我想说的是，一旦我们采用向页面中动态添加元素的方式去实现可视化工具的交互界面，那么有可能会破坏掉页面原来的DOM Tree结构。从而导致生成元素唯一标识的时候出现误差，所以这里必须要好好处理，保证生成的元素标识不会受到影响。</p><p>我看到Mixpanel采用了<code>CustomElement</code>和<code>ShadowDOM</code>，把可视化工具所有的功能都用自定义的<code>Web Component</code>实现了，虽然目前只有Chrome支持<code>Web Component</code>，但是真的有点叼。。这样自定义的元素和交互不会对用户的网页DOM产生影响。当然，如果你的可视化工具实现做的很轻，比如只是将用户的网页放在一个<code>iframe</code>里面，大部分交互都交给iframe的parent页面去处理，那也可以在配置的时候，最小程度的破坏用户的网页了。</p><h3 id="6-配置工具中如何控制页面的跳转"><a href="#6-配置工具中如何控制页面的跳转" class="headerlink" title="6. 配置工具中如何控制页面的跳转"></a>6. 配置工具中如何控制页面的跳转</h3><p>当进入可视化配置状态时，我们可以让用户点击一个元素，然后弹一个对话框，让用户对这个元素进行配置。此时，如果这个元素本身的<code>click</code>行为是页面跳转呢？我们应该怎么处理？</p><p>这里本质上是一个交互设计的问题。在可视化配置工具中，应该有两种基本交互操作。一种是让用户选中某一个元素，进行配置；另一种，是让用户可以触发页面原有的行为。</p><p>为什么要有第二种交互？因为我们的工具肯定要支持用户进行二级页面的可视化配置对不对？或者说，用户的页面中可能会弹出一个对话框，对话框里面有一个按钮，用户对监测这个按钮，对它做配置，对不对？简单来说，就是用户页面中原有的点击行为，可能会导致页面结构产生变化，例如跳转，页面内弹出对话框等等。</p><p>那问题就好解了，除了点击，再设计一种交互来支持用户网页中原有的点击行为不就好了。用“右键点击”或者“按住shift+点击”之类都可以。反正不要再和网页默认的交互很容易产生冲突的方式就行。</p><p>最后再提一下，之前想很久没有想明白，如何能够能防止用户点击的时候页面产生跳转。后来才知道，DOM的事件流分三个阶段：捕获、目标、冒泡。所以为了避免用户的点击产身页面跳转，给document在捕获阶段加一个listener，拦截掉这个事件的继续分发就行了。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fsl9liu6oej30l40jen1i.jpg" alt="DOM Event Mode"></p><p>简单的示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</div><div class="line">  <span class="comment">// 如果是按住shift的点击，那么保持原有的行为</span></div><div class="line">  <span class="keyword">if</span> (e.shiftKey) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 如果是单纯的点击，那么拦截分发</span></div><div class="line">  e.preventDefault();</div><div class="line">  e.stopImmediatePropagation();</div><div class="line">  <span class="comment">// 获取元素的唯一标识，然后让用户进行配置等等</span></div><div class="line">  <span class="keyword">this</span>._selectElement(e.target);</div><div class="line">&#125;, <span class="literal">true</span>); <span class="comment">// useCapture必须为true</span></div></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>可以看到“无埋点”并不是<strong>零侵入</strong>，用户的网页中依然需要加载SDK的代码（除非你是浏览器厂商，可以在加载网页的时候，给网页加inject基础代码）。只是每一个行为事件的上报代码不需要开发人员手动编写，而是由运营人员用可视化工具配置，所以叫它<strong>“可视化埋点”</strong>也许更加合适。我们知道数据采集是数据分析的基础和先决条件，数据采集做不好，其他的东西都是空中楼阁。</p><p>这里可以小结一下“无埋点”技术的优劣。无埋点的好处是技术成本低，对用户非常友好，不需要重新部署，配置完成就可以生效。但是其缺点也非常明显，不具有代码埋点的灵活性和深度，只能采集到用户肉眼可见的数据，无法获取内存里的数据，同时也无法适应页面结构的变化，所以在实际生产中，要选择性地在合适的地方使用无埋点技术。</p><p>多扯一点产品设计和技术方案的选择，产品上是否可以支持采集内存数据呢？当然可以，比如微信小程序的<a href="https://developers.weixin.qq.com/miniprogram/analysis/custom/#%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6" target="_blank" rel="external">“自定义分析”</a>，就可以支持上报页面<code>data</code>下面的属性，这时虽然同样是可视化配置，运营人员肯定不会知道代码里面的变量名字，必须得有开发人员参与配置才行。关于页面结构发生变化之后的数据丢失，也是有方案可以破的。比如Mixpanel平台的Codeless Tracking，实际上采集了页面中所有页面的点击事件上报，然后在后台再去根据用户的配置计算转化数量。这样做的好处就是如果页面变化后，用户接到告警，修改了配置，那么用于数据上报方案是全量的，所以平台是由能力将过去的数据回溯出来的。而上面我们说的根据配置下发，查找监测指定元素，再上报数据的方案属于按需上报，数据出现误差是无法回溯的。不过全量上报数据大家也知道，太不友好了，这个数据量太大，不仅前端消耗资源多，如果为了做数据回溯，后台的存储压力也会加大，而存储的数据大部分还是无效的，这个成本有点高了。</p><h2 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h2><ul><li><a href="http://unclechen.github.io/2017/12/24/JS%E5%9F%8B%E7%82%B9%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/">JS埋点技术分析</a></li><li><a href="https://github.com/Autarc/optimal-select" target="_blank" rel="external">https://github.com/Autarc/optimal-select</a></li><li><a href="https://github.com/rowthan/whats-element" target="_blank" rel="external">https://github.com/rowthan/whats-element</a></li><li><a href="https://www.zhihu.com/question/38000812" target="_blank" rel="external">https://www.zhihu.com/question/38000812</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;p&gt;相信很多人都接触过&lt;strong&gt;“埋点”&lt;/strong&gt;这个概念，无论是前端还是后端开发，我们都可以使用这门技术来生产出一些运营性质的原始数据（接口耗时、程序安装/启动、用户交互行为等等），然后分析它们得到一些抽象指标（例如留存率、转化率），进而决定产品运营或者代码优化的方向。现在业界有许多比较知名数据平台，比如Google Analytics、Facebook Pixel、Mixpanel、GrowingIO、诸葛IO、TalkingData、神策数据等数不胜数一大票，这些平台有单纯做数据分析的，也有服务于特定领域例如广告监测转化的，都提供了多端（Android、iOS、Web、小程序、ReactNative）的埋点SDK和比较全面的BI服务。这一两年，不少平台都开始宣传一种叫&lt;strong&gt;“无埋点”&lt;/strong&gt;的技术，下面以Web端为例，揭开它的神秘面纱。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="埋点" scheme="http://unclechen.github.io/tags/%E5%9F%8B%E7%82%B9/"/>
    
      <category term="无埋点" scheme="http://unclechen.github.io/tags/%E6%97%A0%E5%9F%8B%E7%82%B9/"/>
    
      <category term="JS" scheme="http://unclechen.github.io/tags/JS/"/>
    
      <category term="前端" scheme="http://unclechen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何实现网页和Chrome插件之间的通信</title>
    <link href="http://unclechen.github.io/2018/06/09/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E5%92%8CChrome%E6%8F%92%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>http://unclechen.github.io/2018/06/09/如何实现网页和Chrome插件之间的通信/</id>
    <published>2018-06-09T00:00:00.000Z</published>
    <updated>2018-06-09T09:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、需求场景"><a href="#一、需求场景" class="headerlink" title="一、需求场景"></a>一、需求场景</h2><p>前面我写过一篇博客<a href="http://unclechen.github.io/2017/06/16/%E4%BD%BF%E7%94%A8ReactJS%E5%BC%80%E5%8F%91Chrome%E6%8F%92%E4%BB%B6/">使用React.js开发Chrome插件</a>，里面介绍了作为一个新手怎么去开发Chrome插件。这次我总结一下在开发Chrome插件中很容易遇到的一些需求，比如在网页中判断是否安装了某个Chrome插件，安装的版本是多少？或者在网页上点击右键菜单里面的某个按钮，然后执行Chrome插件的某个功能。这些需求本质上都实现了网页和Chrome之间的通信。</p><a id="more"></a><p><strong>这里指的通信是指用户浏览的网页和Chrome插件的通信，不是指Chrome插件中的popup.html这种页面和js的通信。</strong></p><p>Chrome插件中有两类js代码，一种是<code>“background.js”</code>，只要Chrome插件一启用的时候，就会被运行起来。但是这个js运行在独立的隔离环境中，完全无法干预到网页的Dom和js运行；第二种是<code>“content.js”</code>，这类js可以在指定的条件下（例如某一类域名的网页中）运行，这个js运行的时候是直接运行在用户浏览的网页环境中的，可以操作用户的Dom，但是无法操作网页中运行的其他js。具体使用这两类js需要在<code>manifest.json</code>文件中声明一些配置，请参考官方文档，此处不赘述。</p><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><p>从Chrome插件里面两类js的能力出发，我们实现网页与Chrome插件通信时，有两个思路，其中第一个思路有两种方法。</p><h3 id="2-1-通过content-js操作DOM实现通信"><a href="#2-1-通过content-js操作DOM实现通信" class="headerlink" title="2.1 通过content.js操作DOM实现通信"></a>2.1 通过content.js操作DOM实现通信</h3><p>由于content.js可以操作用户的Dom，我们可以动态一个隐藏的Dom节点来作为通信的媒介。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// content.js</span></div><div class="line"><span class="keyword">var</span> installNode = <span class="built_in">document</span>.creatElement(<span class="string">'div'</span>);</div><div class="line">installNode.id = <span class="string">'my-chrome-extension-installed'</span>;</div><div class="line">installNode.style.display = <span class="string">'none'</span>;</div><div class="line">installNode.setAttribute(<span class="string">'version'</span>, chrome.extension.getManifest().version); <span class="comment">// 把版本号放到属性里</span></div><div class="line">installNode.innerText=<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">key</span>: <span class="string">'value'</span>&#125;); <span class="comment">// 把通信的data放到标签的html text里面</span></div><div class="line"><span class="built_in">document</span>.body.appendChild(installNode);</div></pre></td></tr></table></figure><p>这样，在安装了Chrome插件后，content.js就会生成这样一个Dom Node。然后只要在网页的js中去查找这个Node就可以判断是否安装了Chrome插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// page.js，指的是用户网页里面的js</span></div><div class="line"><span class="keyword">var</span> installNode = <span class="built_in">document</span>.getElementById(<span class="string">''</span>my-chrome-extension-installed<span class="string">''</span>);</div><div class="line"><span class="keyword">if</span> (installNode) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Chrome extension is installed! Here is the infomation: '</span> + installNode.innerText);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Chrome extention is not installed yet...'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>为了让通信真正有效率，我们还可以创建Dom Event。然后在js中通过监听事件的方式来保证消息的发送和接收。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// content.js</span></div><div class="line"><span class="comment">// ...接上面的代码</span></div><div class="line"><span class="comment">// 创建一个事件，表示从Chrome发送消息给网页</span></div><div class="line"><span class="keyword">var</span> eventFromChrome = <span class="built_in">document</span>.createEvent(<span class="string">'Event'</span>);</div><div class="line">eventFromChrome.initEvent(<span class="string">'EventFromChrome'</span>, <span class="literal">true</span>, <span class="literal">true</span>);</div><div class="line"><span class="comment">// 修改installNode的innerText把需要发送的消息内容放在里面</span></div><div class="line">installNode.innerText = <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">type</span>: <span class="string">'HELLO'</span>, <span class="attr">msg</span>: <span class="string">'FMVP is nothing for me'</span>&#125;);</div><div class="line"><span class="comment">// 发出事件</span></div><div class="line">installNode.dispatchEvent(eventFromChrome);</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// page.js</span></div><div class="line"><span class="comment">// ...接上面的代码</span></div><div class="line"><span class="comment">// 监听installNode的EventFromChrome事件</span></div><div class="line">installNode.addEventListener(<span class="string">'EventFromChrome'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(installNode.innerText);</div><div class="line">  <span class="built_in">console</span>.log(data.msg);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>这样就实现了<code>content.js</code>向<code>用户网页</code>发送消息的过程，反过来，可以在<code>page.js</code>中创建一个<code>EventFromPage</code>事件，然后在<code>content.js</code>中监听installNode的这个事件，实现双向通信。</p><p>实现了双向通信，就可以在用户的网页中使用各种Chrome插件的能力了。写到这里我想起Android里面也经常用到这个非常类似的技术方案，<strong>相信Android开发者一定记得WebView里面的JS和JAVA通信，也可以采用在Dom中添加一个iframe，然后通过改变iframe的src来实现JS与JAVA通信。</strong> 小感慨一下，技术很多时候真的是相通的有木有~</p><h3 id="2-2-通过window-postMessage实现通信"><a href="#2-2-通过window-postMessage实现通信" class="headerlink" title="2.2 通过window.postMessage实现通信"></a>2.2 通过window.postMessage实现通信</h3><p>到这里，我们再想一下，在<code>content.js</code>中，除了通过操作Dom这种方式，我们还有没有其他的方式实现用户网页的通信。我们知道<code>content.js</code>是运行用户的网页里面的，它们相互隔离，无法使用对方定义的变量和方法。这和我们用过的<code>iframe</code>之间的通信是不是有点像？？没错，我们可以通过<code>postMessage</code>实现用户网页和<code>content.js</code>的通信。这里我们可以把<code>content.js</code>看成一个<code>iframe</code>里面运行的js。</p><p>下面看下示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// page.js</span></div><div class="line"><span class="comment">// 向content.js发送消息，注意这里并非是真正的iframe，所以我们直接拿当前的window发消息</span></div><div class="line"><span class="built_in">window</span>.postMessage(&#123;<span class="attr">type</span>:<span class="string">'MsgFromPage'</span>, <span class="attr">msg</span>: <span class="string">'Hello, I am page.'</span>&#125;, <span class="string">'*'</span>);</div></pre></td></tr></table></figure><p>然后在<code>content.js</code>中接收这个message。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// content.js</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, funtion (event) &#123;</div><div class="line">  <span class="keyword">if</span> (event.source != <span class="built_in">window</span>) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(event.data);</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure><p>这样同样可以实现用户网页和Chrome插件的通信，比操作Dom的方式还要更加简洁高效一点。</p><h3 id="2-3-通过background-js收发Message实现通信"><a href="#2-3-通过background-js收发Message实现通信" class="headerlink" title="2.3 通过background.js收发Message实现通信"></a>2.3 通过background.js收发Message实现通信</h3><p>我们知道Chrome插件内部通信，可以用<code>chrome.runtime.sendMessage</code>实现。那么用户网页和Chrome插件之间的通信可以吗？官方也给我们提供了这种方式，但是这里有一点必须注意，这种方法要求我们的Chrome插件的<code>manifest.json</code>文件中必须加下面的配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"externally_connectable": &#123;</div><div class="line">  "matches": ["*://*.example.com/*"]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>注意：出于安全考虑，这里的<code>matches</code>配置，必须是具体的域名，不可以是通配符。</strong></p><p>配置好了以后，我们可以在用户网页的js代码中直接调用<code>chrome.runtime.sendMessage</code>来发送消息给Chrome插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// page.js</span></div><div class="line"><span class="keyword">var</span> targetExtensionId = <span class="string">"asdljiadjasjasdasdada"</span>; <span class="comment">// 插件的ID</span></div><div class="line">chrome.runtime.sendMessage(targetExtensionId, &#123;<span class="attr">type</span>: <span class="string">'MsgFromPage'</span>, <span class="attr">msg</span>: <span class="string">'Hello, I am page~'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(response);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code>background.js</code>中这么写来接收消息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// background.js</span></div><div class="line">chrome.runtime.onMessageExternal.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">request, sender, sendResponse</span>) </span>&#123;</div><div class="line">  <span class="comment">// 可以针对sender做一些白名单检查</span></div><div class="line">  <span class="comment">// sendResponse返回响应</span></div><div class="line">  <span class="keyword">if</span> (request.type == <span class="string">'MsgFromPage'</span>) &#123;</div><div class="line">    sendResponse(&#123;<span class="attr">tyep</span>: <span class="string">'MsgFromChrome'</span>, <span class="attr">msg</span>: <span class="string">'Hello, I am chrome extension~'</span>&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>可以看到在<code>background.js</code>中可以使用官方的<code>chrome.*</code>API实现消息发送和接收。但是需要注意的是，并不是所有的网页中都可以调用<code>chrome.rumtime.*</code>的API，必须是在<code>manifest.json</code>中配置过才可以。因为在写代码的时候，做一些异常检查判断比较好。</p><p><strong>需要注意</strong>，通过<code>background.js</code>与用户网页通信，还有一个好处就是不会受到<strong>Chrome插件首次安装时，内容脚本content.js不会在已经加载完成了的网页中运行的问题</strong>。内容脚本<code>content.js</code>的运行可以通过<code>manifest.json</code>清单声明，也可以通过代码动态执行，但是如果是声明式的运行，那么只能在<code>document_start|document_end|document_idel</code>等事件节点发生，然而已经加载完成了网页不会再发生这些事件，那么内容脚本也就不会在这些网页中运行了。</p><h2 id="三、如何在网页中实现一键安装Chrome插件（inline-install）"><a href="#三、如何在网页中实现一键安装Chrome插件（inline-install）" class="headerlink" title="三、如何在网页中实现一键安装Chrome插件（inline install）"></a>三、如何在网页中实现一键安装Chrome插件（inline install）</h2><p>前面讲了几种网页和Chrome插件的通信方式，再提一个比较实用的功能，那就是可以在网页中直接弹出安装Chrome插件的对话框，然后监听安装进度，提示用户去实用安装好的Chrome插件。</p><p>这个功能主要也是依赖于官方的接入方法——<a href="https://developer.chrome.com/webstore/inline_installation" target="_blank" rel="external">inline install</a>，需要做3件事：</p><ul><li>1.去谷歌的官网，认证你的网站。</li></ul><p>出于安全和用户体验考虑，不是所有的网页都可以具有这个inline install能力，必须在谷歌的管理系统认证你的网页才可以。认证方式有很多种，我觉得比较简单的一种就是在网页的头部添加这样一行代码，这个代码是你的谷歌的后台生成的，每个网站的content值是不同的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 省略其他代码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"djasdjoasjkdasdj0821038233dsda"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>2.在你的网页头部添加Chrome插件的资源地址：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 省略其他代码，这里的插件地址是随手乱打的 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"djasdjoasjkdasdj0821038233dsda"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"chrome-webstore-item"</span> <span class="attr">href</span>=<span class="string">"https://chrome.google.com/webstore/detail/dasdasdadasdsadsadsadsadasdsa"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>3.调用安装插件的API：<code>chrome.webstore.install()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设你有一个install按钮</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'intall chrome extension'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  chrome.webstore.install(<span class="literal">undefined</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'onInstalled'</span>);</div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error, errorCode</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'install failed...'</span>);</div><div class="line">  &#125;);</div><div class="line">  <span class="comment">// 如果你的头部只添加了一个插件地址，那么可以直接在调用chrome.webstore.install的时候，插件地址传入 undefined。如果有多个地址的话，那么需要传入你想要用户安装的那个插件的地址。</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>注意，建议写代码的时候，调用<code>chrome.webstore.*</code>时，也要做一下异常检查判断。</p><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><p>其实Chrome插件开发和普通的JS开发没有太大的区别，无法就是对Chrome提供的各种API进行熟悉和调用。所以只要仔细阅读官方文档，并评估清楚自己的需求，然后确定自己要使用的API是哪个就行了。下面是我在网上看到的一张关于Chrome插件通信相关的图，给大家一起分享一下。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fs51vu3sw2j317s10mwpv.jpg" alt="chrome message"></p><p>还有两个官方文档的地址，也贴出来，以后如果Chrome升级发生什么变化了，记得要先看官方文档：</p><ul><li><a href="https://developer.chrome.com/extensions/messaging" target="_blank" rel="external">https://developer.chrome.com/extensions/messaging</a></li><li><a href="https://developer.chrome.com/extensions/content_scripts" target="_blank" rel="external">https://developer.chrome.com/extensions/content_scripts#capabilities</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、需求场景&quot;&gt;&lt;a href=&quot;#一、需求场景&quot; class=&quot;headerlink&quot; title=&quot;一、需求场景&quot;&gt;&lt;/a&gt;一、需求场景&lt;/h2&gt;&lt;p&gt;前面我写过一篇博客&lt;a href=&quot;http://unclechen.github.io/2017/06/16/%E4%BD%BF%E7%94%A8ReactJS%E5%BC%80%E5%8F%91Chrome%E6%8F%92%E4%BB%B6/&quot;&gt;使用React.js开发Chrome插件&lt;/a&gt;，里面介绍了作为一个新手怎么去开发Chrome插件。这次我总结一下在开发Chrome插件中很容易遇到的一些需求，比如在网页中判断是否安装了某个Chrome插件，安装的版本是多少？或者在网页上点击右键菜单里面的某个按钮，然后执行Chrome插件的某个功能。这些需求本质上都实现了网页和Chrome之间的通信。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JS" scheme="http://unclechen.github.io/tags/JS/"/>
    
      <category term="Chrome插件" scheme="http://unclechen.github.io/tags/Chrome%E6%8F%92%E4%BB%B6/"/>
    
      <category term="前端" scheme="http://unclechen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>使用Play框架和React编写Web应用</title>
    <link href="http://unclechen.github.io/2018/05/20/%E4%BD%BF%E7%94%A8Play%E6%A1%86%E6%9E%B6%E5%92%8CReact%E7%BC%96%E5%86%99Web%E5%BA%94%E7%94%A8/"/>
    <id>http://unclechen.github.io/2018/05/20/使用Play框架和React编写Web应用/</id>
    <published>2018-05-20T00:00:00.000Z</published>
    <updated>2018-05-27T12:35:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>上一篇文章提到<a href="http://unclechen.github.io/2018/05/13/%E4%BD%BF%E7%94%A8Play%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99Web%E5%BA%94%E7%94%A8/">使用Play框架编写Web应用</a>，Play框架内置了模板引擎，支持MVC架构，但这本质还是一种Server Rendering。现在越来越多的网站（尤其是不需要seo的一些商业平台系统），都在变成SPA（Single Page Application），使用React、Vue、Angular进行开发。我们先不讨论哪种方式更好，只看看它们到底是怎么做的。</p><a id="more"></a><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><p>扯了这么多，下面看一下如何配置我们的Play工程，来使得我们可以方便编写ReactJS代码构建WebApp，同时方便地把Java代码和我们的前端代码打包到一起，进行发布。</p><h3 id="Play"><a href="#Play" class="headerlink" title="Play"></a>Play</h3><p>我使用的Play版本是2.6.x，关于这个Play的Starter工程，请参考前一篇文章<a href="http://unclechen.github.io/2018/05/13/%E4%BD%BF%E7%94%A8Play%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99Web%E5%BA%94%E7%94%A8/">使用Play框架编写Web应用</a>，我们就以这个工程作为基础。</p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><blockquote><p>关于如何使用React开发Web应用，我觉得只要你稍微懂一点js和html，你就可以对着React官方的教程开始编写应用。因为React支持ES6标准去写代码，而ES6已经具备一个主流的高级编程语言该有面向对象、FP（Functional Programing）等特性，简单来说就是对于有过类似Java编程基础的人来说非常友好。</p></blockquote><p>之前我也有一篇博客介绍了<a href="http://unclechen.github.io/2017/06/16/%E4%BD%BF%E7%94%A8ReactJS%E5%BC%80%E5%8F%91Chrome%E6%8F%92%E4%BB%B6/">使用React开发Chrome插件</a>，里面提到创建一个React应用最好的脚手架工具就是Facebook官方的<a href="https://github.com/facebook/create-react-app" target="_blank" rel="external">Create-React-App</a>，这里我们还继续用它，关于这个脚手架的用法和React工程配置的基础知识，这次暂时略过。如果想深入了解这个脚手架的用法，请参考<a href="https://github.com/facebook/create-react-app" target="_blank" rel="external">https://github.com/facebook/create-react-app</a>。</p><h2 id="三、整合React代码和Play工程的代码"><a href="#三、整合React代码和Play工程的代码" class="headerlink" title="三、整合React代码和Play工程的代码"></a>三、整合React代码和Play工程的代码</h2><p><strong>下面说正题，现在我们已经会写Play代码，也会写ReactJS代码了。要怎么组织我们的代码结构，才可以使得React的JS代码和Play的Java代码整合起来呢？</strong></p><h3 id="1-新建一个React项目"><a href="#1-新建一个React项目" class="headerlink" title="1.新建一个React项目"></a>1.新建一个React项目</h3><p>我们进入命令行，打开之前的Play工程，然后输入命令创建一个react-app：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd play-java-starter-example</div><div class="line">npx create-react-app web-app</div><div class="line">cd web-app</div><div class="line">npm start</div></pre></td></tr></table></figure><p>此时，我们的工程目录下面就多出了一个<code>web-app</code>的文件夹，我们就在这个文件夹里面编写JS代码。</p><p>运行上面的命令之后，控制台里面会提示我们可以访问<a href="http://localhost:3000" target="_blank" rel="external">localhost:3000</a>。</p><h3 id="2-配置development-server的proxy"><a href="#2-配置development-server的proxy" class="headerlink" title="2.配置development server的proxy"></a>2.配置development server的proxy</h3><p>我们知道上面启动React程序时，其实没有启动后端的服务器，而是脚手架里面默认配置好的一个Webpack development server。而前面我们知道Play框架启动的服务器监听的是<strong>9000</strong>端口，并非是<strong>3000</strong>端口。而且这两个程序完全是两个进程，通常是没法监听一个端口的。</p><p>所以为了在开发环境下，方便我们同时编写前端的JS代码和后端的Java代码，我们需要把development server接收到的请求转发到启动的Play项目的那个Server去。</p><p>我们需要修改<code>/web-app/package.json</code>文件，添加下面这行配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"proxy": "http://localhost:9000/"</div></pre></td></tr></table></figure><h3 id="3-启动Play项目作为后端服务器"><a href="#3-启动Play项目作为后端服务器" class="headerlink" title="3.启动Play项目作为后端服务器"></a>3.启动Play项目作为后端服务器</h3><p>这里还是和前一篇博客一样，我们运行<code>sbt run</code>启动了一个Server，监听着<code>9000</code>端口的请求。我们在开发的时候，一个request会经过Webpack dev server的代理，走到我们用Play编写的API Server。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1frq2914y76j30rs051wga.jpg" alt="Webpack dev server PROXY"></p><p>如此，我们就可以不用使用Play内置的模板引擎去编写Web App了，完全可以使用我们已经学会的ReactJS去写应用。</p><p><strong>这里必须强调的一点是：由于我们分离了JS代码和Java代码，JS使用的框架和Webpack开发环境支持热加载，我们在修改JS代码后，浏览器会自动刷新应用到最新的JS代码；Java使用的框架是Play，这个框架编写程序的时候也可以支持热加载，我们在修改Java代码后，当有请求过来时，也会重新编译最新的Java代码并应用它们。这可以使得我们的开发效率得到极大的提升！</strong></p><h3 id="4-验证效果"><a href="#4-验证效果" class="headerlink" title="4.验证效果"></a>4.验证效果</h3><p>现在我们已经分别启动了React应用和Play编写的后端应用，恰好这个Play的Starter工程下面还有一个<code>CountController.java</code>，负责处理<code>routes</code>中定义的<code>localhost:9000/count</code>请求，我们在JS中发一个请求到这里试试效果。打开<code>/web-app/src/App.js</code>，添加一个方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">componentDidMount() &#123;</div><div class="line">  fetch(<span class="string">'/count'</span>)</div><div class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(response)&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在这里我们向<code>localhost:3000/count</code>发送了请求，由于我们配置了Webpack Dev server的<code>proxy</code>，请求会被转发到<code>localhost:9000/count</code>。</p><p>然后打开Chrome浏览器，右键打开<code>inspect</code>，进入<code>network</code>，然后在地址栏输入<code>http://localhost:3000</code>，我们可以看到chrome调试器的network记录中出现了下面的请求，并且返回了<code>200 OK</code>。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1frq2os3885j31e00ltdpe.jpg" alt="chrome inspection proxy"></p><p>通常我们和后端接口通信用的都是JSON协议，这里我们也可以改造一下这个Controller。参考<a href="https://www.playframework.com/documentation/2.6.13/JavaJsonActions" target="_blank" rel="external">https://www.playframework.com/documentation/2.6.13/JavaJsonActions</a>，我们把<code>count</code>方法改成下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">count</span><span class="params">()</span> </span>&#123;</div><div class="line">    ObjectNode result = Json.newObject(); <span class="comment">// play框架使用的是Jackson处理json</span></div><div class="line">    result.put(<span class="string">"code"</span>, <span class="number">0</span>);</div><div class="line">    result.put(<span class="string">"message"</span>, <span class="string">"OK"</span>);</div><div class="line">    result.put(<span class="string">"data"</span>, counter.nextCount());</div><div class="line">    <span class="keyword">return</span> ok(result);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>即可返回JSON格式的response了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">200</span> OK</div><div class="line"><span class="attribute">Content-Type</span>: application/json; charset=utf-8</div><div class="line"></div><div class="line">&#123;"code":0,"message":"OK","data":1&#125;</div></pre></td></tr></table></figure><h3 id="4-打包和发布"><a href="#4-打包和发布" class="headerlink" title="4.打包和发布"></a>4.打包和发布</h3><p>上面讲的是开发模式里我们怎么配置代码的结构，其实<code>web-app</code>这个目录本质上放在任何一个地方都可以，尤其是那种JS和Java开发完全是不同的人在负责的团队。但是有些团队（比如我所在的团队），写JS的和写Java的就是一个人或者这个团队里的人，同时负责这两份代码，那么把JS代码和Java代码放在一起还是更好一些。</p><p>打包时，我们首先应该打包JS代码，create-react-app已经为我们准备了一个命令<code>npm run build</code>，即可把我们的js代码、css代码和index.html静态文件统一打包输出在<code>/web-app/build</code>目录。然后我们再把Java代码打包，在Play工程里面，运行<code>sbt package</code>，也可以把程序打包成一个可执行的jar包。</p><p>分别打包JS代码和Java代码之后，我们可以根据自己的需要，把它们放在同一个服务器上或者不同的路径下甚至是不同的服务器上，这里本质上其实是把两个程序在物理上分离了。其实还有一种方式就是把js、css和index.html这种静态文件也一起打入到jar里面，然后统一由这个jar来提供访问，这时在物理上两个程序是一起部署的。</p><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><p>上面介绍了使用Play框架做后端 + React框架做前端来编写一个Web App。但通常在一个更大型的业务系统中，这里介绍到东西只能算是前端(Web、Native App) -&gt; 中台，一般这个中台还会依赖一个更加纯粹的后台Service。中台代码负责处理请求校验和一些缓存，然后中台再向后台请求，后台的代码会操作数据库。有的团队（比如我所在的团队），在分工方面，前端和中台是一个人在负责，后台是一个人在负责。</p><p>本质上这里我们其实就是使用Play框架编写了一个后台API而已，其实用其他的框架也是一样OK的，比如SpringBoot，这里也有一篇文章介绍<a href="https://spring.io/guides/tutorials/react-and-spring-data-rest/" target="_blank" rel="external">https://spring.io/guides/tutorials/react-and-spring-data-rest/</a>。</p><p>下面是两篇参考资料：</p><ul><li><a href="http://ticofab.io/react-js-tutorial-with-play_scala_webjars/" target="_blank" rel="external">http://ticofab.io/react-js-tutorial-with-play_scala_webjars/</a></li><li><a href="https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/" target="_blank" rel="external">https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;p&gt;上一篇文章提到&lt;a href=&quot;http://unclechen.github.io/2018/05/13/%E4%BD%BF%E7%94%A8Play%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99Web%E5%BA%94%E7%94%A8/&quot;&gt;使用Play框架编写Web应用&lt;/a&gt;，Play框架内置了模板引擎，支持MVC架构，但这本质还是一种Server Rendering。现在越来越多的网站（尤其是不需要seo的一些商业平台系统），都在变成SPA（Single Page Application），使用React、Vue、Angular进行开发。我们先不讨论哪种方式更好，只看看它们到底是怎么做的。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java Web" scheme="http://unclechen.github.io/tags/Java-Web/"/>
    
      <category term="后端" scheme="http://unclechen.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="React" scheme="http://unclechen.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>使用Play框架编写Web应用</title>
    <link href="http://unclechen.github.io/2018/05/13/%E4%BD%BF%E7%94%A8Play%E6%A1%86%E6%9E%B6%E7%BC%96%E5%86%99Web%E5%BA%94%E7%94%A8/"/>
    <id>http://unclechen.github.io/2018/05/13/使用Play框架编写Web应用/</id>
    <published>2018-05-13T00:00:00.000Z</published>
    <updated>2018-05-20T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Play框架简介"><a href="#一、Play框架简介" class="headerlink" title="一、Play框架简介"></a>一、Play框架简介</h2><p><a href="https://www.playframework.com/" target="_blank" rel="external">Play</a>是一个Full-Stack的Web应用开发框架，使用它可以快速编写自己的Web应用，也可以使用它来编写RESTful API。与现在非常流行的Spring全家桶相比，Play略显小众，但它的设计思想天生就是分布式、异步的，也得到许多开发者的认可，在实际生产环境中也有像Linkedin这样的大公司采用。对于一个没有开发过Web应用或者后台应用的开发者来讲，学习和使用Play框架也许是一个不错的选择。</p><a id="more"></a><p>可能有些接触过Scala语言的开发者，或多或少听过Play这个框架，也知道Play框架大部分代码是使用Scala开发的。不禁会有疑问，是不是一定要学会Scala才可以使用Play呢？这个疑问我也有过，但是据使用过Play的开发者介绍，在Play框架中使用Java语言开发Web应用的过程中，基本上是不会需要你真正去学习Scala的。Play框架本身对Java的支持非常全面，不用担心自己不会Scala。我举一个例子，做过Android开发的同学，一定记得在2014年，我们从Eclipse切换的Android Studio时，需要将自己的ant.xml打包脚本移植到gradle脚本。当时我还在实习，完全是一个菜鸟，也不懂groovy，而且那时候网上关于gradle的资料也非常的少，但是即使这样，我依然能够把一个ant编写的打包脚本移植到gradle，如此类比一下，相信大家应该心里有数了。</p><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><p>我使用的Play版本是2.6.x，系统是macosx 10.12.5。配置环境的时候，推荐按照<a href="https://www.playframework.com/documentation/2.6.x/Home" target="_blank" rel="external">官方文档</a>操作。</p><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>Play 2.6.x要求必须是Java 8，现在使用到的SBT版本是1.x。</p><h3 id="SBT"><a href="#SBT" class="headerlink" title="SBT"></a>SBT</h3><p>SBT(simple-build tool)，Play默认使用的构建工具。可以用homebrew安装，也可以手动下载sbt程序到电脑。</p><blockquote><p>提醒一下，我在mac osx 10.12上运行<code>brew install sbt@1</code>时，提示需要安装9.x版本的xcode，才可以用brew安装sbt。所以我采用了手动下载sbt，然后配置环境变量的方法，使得电脑上可以使用<code>sbt</code>命令。但是请记住一点，手动安装的sbt，目录是你自己放的文件目录，而不是默认的<code>usr/local/sbt</code>，如果你需要修改<code>sbtopt</code>这种配置文件的话，记得在自己正确的目录下操作。</p></blockquote><h3 id="Intellij-IDEA"><a href="#Intellij-IDEA" class="headerlink" title="Intellij IDEA"></a>Intellij IDEA</h3><p>安装IDEA后，还需要安装Scala插件。关于IDE的设置，请参考<a href="https://www.playframework.com/documentation/2.6.x/IDE" target="_blank" rel="external">这里</a>。</p><blockquote><p>尽量安装新版的IDEA和对应版本的Scala插件，亲测2017.2的IDEA安装插件后可能会有BUG。</p></blockquote><h2 id="三、认识Play项目的结构"><a href="#三、认识Play项目的结构" class="headerlink" title="三、认识Play项目的结构"></a>三、认识Play项目的结构</h2><p>Play框架的文档很全面，如果要全面深入地学习Play，可以仔细阅读官方的Document。这里可以从Play的示例<a href="https://github.com/playframework/play-java-starter-example" target="_blank" rel="external">play-java-starter-example</a>入手，开始认识Play框架的结构，并了解如何使用Play来开发Web应用。</p><p>使用idea的<code>Import Project</code>导入play-java-started-example工程，记得在import wizard中选择<code>Import project from external model</code>的<code>SBT project</code>，然后点击下一步。导入项目后，进入终端输入<code>sbt run</code>就可以让这个项目运行起来了。</p><blockquote><p>注意：sbt第一次运行时比较慢，需要耐心等待。</p></blockquote><p>根据console的提示，在浏览器中打开<code>http://localhost:9000</code>，我们可以看到一个Web欢迎页面。</p><hr><p>搞定上面的准备工作之后，我们开始看Play应用的目录是如何组织起来的，进而分析一下我们在浏览器中输入<code>http://localhost:9000</code>之后，Play是如何工作的。</p><p>下面是来自<a href="https://www.playframework.com/documentation/2.6.x/Anatomy" target="_blank" rel="external">Play官方文档中的Anatomy of a Play application</a>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">app                      → Application sources</div><div class="line"> └ assets                → Compiled asset sources</div><div class="line">    └ stylesheets        → Typically LESS CSS sources</div><div class="line">    └ javascripts        → Typically CoffeeScript sources</div><div class="line"> └ controllers           → Application controllers</div><div class="line"> └ models                → Application business layer</div><div class="line"> └ views                 → Templates</div><div class="line">build.sbt                → Application build script</div><div class="line">conf                     → Configurations files <span class="keyword">and</span> other non-compiled resources (on classpath)</div><div class="line"> └ application.conf      → Main configuration file</div><div class="line"> └ routes                → Routes definition</div><div class="line">dist                     → Arbitrary files <span class="keyword">to</span> be included <span class="keyword">in</span> your projects distribution</div><div class="line">public                   → Public assets</div><div class="line"> └ stylesheets           → CSS files</div><div class="line"> └ javascripts           → Javascript files</div><div class="line"> └ images                → Image files</div><div class="line">project                  → sbt configuration files</div><div class="line"> └ build.properties      → Marker <span class="keyword">for</span> sbt project</div><div class="line"> └ plugins.sbt           → sbt plugins including the declaration <span class="keyword">for</span> Play itself</div><div class="line">lib                      → Unmanaged libraries dependencies</div><div class="line">logs                     → Logs folder</div><div class="line"> └ application.log       →<span class="built_in"> Default </span>log file</div><div class="line">target                   → Generated stuff</div><div class="line"> └ resolution-cache      → <span class="builtin-name">Info</span> about dependencies</div><div class="line"> └ scala-2.11</div><div class="line">    └ api                → Generated API docs</div><div class="line">    └ classes            → Compiled class files</div><div class="line">    └ routes             → Sources generated <span class="keyword">from</span> routes</div><div class="line">    └ twirl              → Sources generated <span class="keyword">from</span> templates</div><div class="line"> └ universal             → Application packaging</div><div class="line"> └ web                   → Compiled web assets</div><div class="line">test                     → source folder <span class="keyword">for</span> unit <span class="keyword">or</span> functional tests</div></pre></td></tr></table></figure><p>Play框架采用了MVC架构，把Web应用分成模型层、控制层和视图层。每个层次对应的文件存放在不同的目录下面，下面依次介绍一下关键的几个目录。</p><h3 id="app-目录"><a href="#app-目录" class="headerlink" title="app/目录"></a><code>app/</code>目录</h3><p>存放着所有的Java源代码代码、Scala源代码、模板和编译后的资源文件（如LESS CSS、CoffeeScript）。在这个目录下，一般会有三个默认的package：controllers、models、views。</p><blockquote><p>和以往我们看到的代码package不同的是，play默认的package layout没有<code>com.youcompany</code>这样的前缀。不过我们如果想添加前缀也完全是OK的。包括<code>app/assets</code>目录，完全也是可选的。</p></blockquote><h3 id="public-目录"><a href="#public-目录" class="headerlink" title="public/目录"></a><code>public/</code>目录</h3><p><code>public/</code>目录下面存放的是一些静态资源文件，这个目录默认被分成3个子目录，分别用来存放我们的js、css、image这3类文件。</p><blockquote><p>在一个新创建的应用中，<code>public/</code>目录默认会被映射到<code>assets</code>这个URL路径下，需要的话我们也可以手动修改。</p></blockquote><h3 id="conf-目录"><a href="#conf-目录" class="headerlink" title="conf/目录"></a><code>conf/</code>目录</h3><p>顾名思义，这个目录下面放的是配置文件，Play中主要用两类配置文件：</p><ul><li><code>application.conf</code>：整个应用的配置参数，例如db连接参数、缓存策略等配置</li><li><code>routes</code>：路由定义</li></ul><h3 id="build-sbt文件"><a href="#build-sbt文件" class="headerlink" title="build.sbt文件"></a><code>build.sbt</code>文件</h3><p>项目的构建脚本，主要的构建配置都在这里，例如项目依赖的jar包、应用的版本号等等。不过<code>project/</code>目录下的<code>.scala</code>文件也会对项目的配置起作用。这个文件有点类似于我们的<code>build.gradle</code>。</p><h3 id="lib-目录"><a href="#lib-目录" class="headerlink" title="lib/目录"></a><code>lib/</code>目录</h3><p>这个目录用于存放一些以来的外部jar包等等，是一个可选目录。不过一般我们都可以在<code>build.sbt</code>中添加依赖。</p><h3 id="project-目录"><a href="#project-目录" class="headerlink" title="project/目录"></a><code>project/</code>目录</h3><p>前面就说到这个目录下的scala文件也会对项目配置起作用。这里包含两个sbt构建配置文件：</p><ul><li><code>plugin.sbt</code>：定义了需要用到哪些sbt插件。我感觉有点类似于<code>build.gradle</code>里面写的<code>apply &#39;idea&#39;</code>。</li><li><code>build.properties</code>：定义了sbt的版本。我感觉有点类似于的<code>gradle-wrapper.properties</code>。</li></ul><h3 id="target-目录"><a href="#target-目录" class="headerlink" title="target/目录"></a><code>target/</code>目录</h3><p>这个目录存放着工程构建完以后生成的文件，从这里可以了解到代码经过sbt构建后，最终变成了什么样的结果。主要包括下面几个子目录：</p><ul><li><code>classes/</code>：编译后的class文件（来自Java和Scala源码）</li><li><code>classes_managed</code>：<code>classes/</code>目录下组织好的其他子目录，包含框架生成的class文件，例如routes和template引擎生成的class文件。</li><li><code>resource_managed</code>：组织好的、生成的资源，比如编译过的LESS CSS、CoffeeScript结果。</li><li><code>src_managed</code>：组织好的生成的代码文件，例如模板引擎生成的Scala文件。</li><li><code>web/</code>：sbt-web任务生成的资源文件，例如来自<code>app/assets</code>和<code>public</code>文件夹里面的文件。</li></ul><blockquote><p>Play应用默认的文件组织结构与SBT默认的并不相同。如果我们想用SBT默认的代码和文件组织结构，可以禁用掉PlayLayoutPlugin。但是这有一定的风险。</p></blockquote><p>通过上面应用组织结构，可以看到其实Play框架采用的也是<strong>约定优于配置</strong>的规范，让我们集中精力在程序的开发上面，而不是去写太多的配置文件。</p><h2 id="四、使用Play开发Web应用"><a href="#四、使用Play开发Web应用" class="headerlink" title="四、使用Play开发Web应用"></a>四、使用Play开发Web应用</h2><p>在上面我们运行<code>sbt run</code>命令后，可以访问<a href="http://localhost:9000" target="_blank" rel="external">http://localhost:9000</a>来访问这个示例程序，看到了一个Welcome Page。</p><p>Play框架是一个典型的MVC架构，下面分析一下这个示例工程是工作起来的，从而了解怎么使用Play开发Web应用。</p><h3 id="定义路由和Controller"><a href="#定义路由和Controller" class="headerlink" title="定义路由和Controller"></a>定义路由和Controller</h3><p>前面介绍了<code>conf/routes</code>文件定义了整个应用的路由，也就是说我们在浏览器输入的url（request），经过这个文件的映射，会交给相应的Controller处理，然后返回结果给浏览器。看一下<code>routes</code>文件的内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Routes</span></div><div class="line"><span class="comment"># This file defines all application routes (Higher priority routes first)</span></div><div class="line"><span class="comment"># ~~~~</span></div><div class="line"></div><div class="line"><span class="comment"># An example controller showing a sample home page</span></div><div class="line"><span class="builtin-name">GET</span>     /                           controllers.HomeController.index</div><div class="line"></div><div class="line"><span class="comment"># 省略其他路由配置</span></div><div class="line"><span class="built_in">..</span>.</div></pre></td></tr></table></figure><p>所以当访问<code>http://localhost:9000</code>时，会交给<code>app/controllers/HomeController.index()</code>方法来处理这个请求，并得到结果返回给浏览器。</p><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>下面看一下<code>HomeController.index</code>方法是如何渲染出Html页面来的。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Result <span class="keyword">index</span>() &#123;</div><div class="line">    <span class="keyword">return</span> ok(<span class="keyword">index</span>.render(<span class="string">"Your new application is ready."</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里调用了<code>ok</code>方法来返回一个<code>Result</code>对象，我们仔细分析一下这个方法的签名。</p><p>先看<code>ok</code>方法的返回值类型<code>Result</code>，在Play中，<code>Result</code>类可以理解为一个定义了http响应的数据结构，包含了响应的HTTP Status Code和的content。那<code>ok</code>方法是哪里定义的呢？原来<code>HomeController</code>继承了<code>Controller</code>类，<code>Controller</code>类继承了<code>Results</code>类，而<code>ok</code>方法是<code>Results</code>类里面定义的，这个方法可以返回一个Result对象。</p><p>再看<code>ok</code>方法的参数，这个参数是<code>Content</code>类，它定义了响应的contentType和body。这里的Content是由<code>index.render</code>方法生成的。</p><p>接着我们再看<code>index.render</code>是如何生成的<code>Content</code>的，这里的<code>index</code>类，并不是我们写的，而是Play生成的，使用idea可以很容易找到它在<code>target/scala-2.12/twirl/main/views/html/index.template.scala</code>这个scala文件里，这个文件定义了一个scala里面的单例（我们可以暂时不要纠结这个Scala文件里面<code>object index ....</code>是怎么生成一个单例对象的，只需要知道这个文件是从<code>app/views/index.scala.html</code>生成的）。好了，我们知道<code>index</code>对象是Play生成的，看看它的<code>render</code>方法，这个方法接收一个<code>String类型</code>的参数，然后返回了前面的<code>Content</code>。</p><p>所以我们浏览器展示Html的是<code>app/views/index.scala.html</code>这个模板渲染出来，这是<a href="https://www.playframework.com/documentation/2.6.13/ScalaTemplates" target="_blank" rel="external">Play模板引擎</a>的工作了，我们看下里面有什么内容。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@*</div><div class="line"> * This template takes a single argument, a String containing a</div><div class="line"> * message to display.</div><div class="line"> *@</div><div class="line">@(message: String)</div><div class="line"></div><div class="line">@*</div><div class="line"> * Call the `<span class="javascript">main</span>` template with two arguments. The first</div><div class="line"> * argument <span class="keyword">is</span> a `<span class="javascript"><span class="built_in">String</span></span>` with the title <span class="keyword">of</span> the page, the second</div><div class="line"> * argument <span class="keyword">is</span> an `<span class="javascript">Html</span>` object containing the body <span class="keyword">of</span> the page.</div><div class="line"> *@</div><div class="line">@main(<span class="string">"Welcome to Play"</span>) &#123;</div><div class="line"></div><div class="line">    @*</div><div class="line">     * Get an `<span class="javascript">Html</span>` object <span class="keyword">by</span> calling the built-<span class="keyword">in</span> Play welcome</div><div class="line">     * template <span class="keyword">and</span> passing a `<span class="javascript"><span class="built_in">String</span></span>` message.</div><div class="line">     *@</div><div class="line">    @welcome(message, style = <span class="string">"java"</span>)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Play内置了基于Scala语言的Twirl模板引擎，跟着注释就可以了解这个模板是怎么被渲染成我们看到的html的。</p><p>首先<code>index</code>模板接收了一个字符串作为参数（<code>Your new application is ready.</code>），然后把两个参数传递给了<code>main</code>模板，一个是字符串<code>Welcome to Play</code>，另一个是调用<code>welcome</code>模板生成的<code>Html</code>对象。<code>welcome</code>模板接收了<code>Your new application is ready.</code>参数和<code>style=&quot;java&quot;</code>参数，然后渲染成了Html对象。打开<code>Welcome.scala.html</code>可以看到一些Html标签以及传入的第一个参数被放在了最上方的<section>里面。</section></p><blockquote><p>我们可以看到其实Play框架帮我们生成的很多文件，都是基于Scala的，因此学习一下Scala对我们理解Play框架非常有帮助。</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>以上就是从play-java-start-example这个示例工程来了解如何使用Play开发Web应用，这个示例比较简单，甚至没有涉及到model层的代码。开发一个完整的应用，还需要学习更多知识，比如<a href="https://www.playframework.com/documentation/2.6.x/Filters" target="_blank" rel="external">filters拦截器</a>、异步处理、状态保持、如何集成ORM框架、支持WebSocket、编写RESTFul APIs、安全以及使用其他的模板引擎等等。</p><h2 id="五、其他话题"><a href="#五、其他话题" class="headerlink" title="五、其他话题"></a>五、其他话题</h2><h3 id="Play框架与React集成"><a href="#Play框架与React集成" class="headerlink" title="Play框架与React集成"></a>Play框架与React集成</h3><p>现在前端开发中有很多都转向了React，我们也可以使用Play框架和React一起编写Web应用。毕竟模板引擎这么多，如果如果已经会使用React开发Web前端，没有必要非得用到Play里面的模板引擎。因此使用React替换掉Play的模板引擎做的工作，是完全没有问题的。</p><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li><a href="https://www.playframework.com/documentation/2.6.x/Home" target="_blank" rel="external">官方文档Home</a></li><li><a href="https://www.playframework.com/documentation/2.6.x/Tutorials" target="_blank" rel="external">官方的Tutorials</a></li><li><a href="https://playframework.com/download/#starters" target="_blank" rel="external">Play Starter Examples</a></li><li><a href="https://www.playframework.com/documentation/2.6.x/Anatomy" target="_blank" rel="external">Play工程的结构剖析</a></li></ul><h3 id="全栈开发"><a href="#全栈开发" class="headerlink" title="全栈开发"></a>全栈开发</h3><p>关于全栈，一个对技术有追求，乐于学习进步的人，不应拘泥于只学习某一项技能。有机会要多去熟悉一些其他的技术，做一个“T型”人才，全栈开发是很好的一个实践。除了像Play这样的框架，Ruby on Rails、Python Django，甚至NodeJS，都可以值得了解和学习的全栈框架。</p><p>我认为在学习某一个方向的技术时，需要学习它里面编程的思维方式，并找到一个方向上不同技术之间的共同点，比如学习编程语言的时候，我们都会学习数据类型、流程、异常处理等等；客户端或者前端，核心的基础知识是图形界面开发，从大学时候学的MFC，到现在的Android、iOS、小程序、快应用、React、Vue、Flutter，都需要处理界面的生命周期，比如<code>初始化 -&gt; 展现 - &gt; 消失 -&gt; 销毁</code>；而后端开发，一般都是在处理请求的生命周期，即把一个request变成一个response，比如<code>路由 -&gt; 处理请求参数 -&gt; 处理响应 -&gt; 返回给客户端</code>。希望大家都可以学习进步，走在技术时代的前面！</p><p>最后放上两个我个人觉得不错的学习资料，来自极客时间（InfoQ下面的极客帮面向广告互联网从业者做的一个应用，里面有一些老司机的分享，也有一些付费的知识分析）。最近我看到两个不错的、体系化的分享，与大家分享一下，下面是我的邀请链接，我已经开始学习，觉得帮助还是挺大的。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fr9zxjidkgj31gi1a64bg.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Play框架简介&quot;&gt;&lt;a href=&quot;#一、Play框架简介&quot; class=&quot;headerlink&quot; title=&quot;一、Play框架简介&quot;&gt;&lt;/a&gt;一、Play框架简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.playframework.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Play&lt;/a&gt;是一个Full-Stack的Web应用开发框架，使用它可以快速编写自己的Web应用，也可以使用它来编写RESTful API。与现在非常流行的Spring全家桶相比，Play略显小众，但它的设计思想天生就是分布式、异步的，也得到许多开发者的认可，在实际生产环境中也有像Linkedin这样的大公司采用。对于一个没有开发过Web应用或者后台应用的开发者来讲，学习和使用Play框架也许是一个不错的选择。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java Web" scheme="http://unclechen.github.io/tags/Java-Web/"/>
    
      <category term="后端" scheme="http://unclechen.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JS埋点技术分析</title>
    <link href="http://unclechen.github.io/2017/12/24/JS%E5%9F%8B%E7%82%B9%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    <id>http://unclechen.github.io/2017/12/24/JS埋点技术分析/</id>
    <published>2017-12-24T00:00:00.000Z</published>
    <updated>2018-05-20T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p><a href="http://unclechen.github.io/2017/12/18/Android%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/">上一篇博客</a>分析了Android上的埋点SDK技术原理，这次我看看Web页面上的埋点。Web页面上的埋点主要通过JS完成，在JS里面同样有代码埋点、全埋点、可视化埋点三种方案，如果对这几种方案的概念不了解可以看下上一篇博客。由于<a href="https://github.com/mixpanel/mixpanel-js" target="_blank" rel="external">mixpanel-js</a>和<a href="https://github.com/sensorsdata/sa-sdk-javascript" target="_blank" rel="external">Sensors Analytics JavaScript SDK</a>都开源了自己的SDK，就以它们为例进行分析。</p><a id="more"></a><h2 id="二、代码埋点"><a href="#二、代码埋点" class="headerlink" title="二、代码埋点"></a>二、代码埋点</h2><p>以Mixpanel为例（源码位于<code>/src/mixpanel-core.js</code>），看一下里面的实现。</p><h3 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h3><p>埋点之前，需要在head部分嵌入SDK，并调用SDK的初始化接口。以Mixpanel为例，官方介入文档提供的加载、初始化SDK代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- start Mixpanel --&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params">e,a</span>)</span>&#123;<span class="keyword">if</span>(!a.__SV)&#123;<span class="keyword">var</span> b=<span class="built_in">window</span>;<span class="keyword">try</span>&#123;<span class="keyword">var</span> c,l,i,j=b.location,g=j.hash;c=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span>(l=a.match(<span class="built_in">RegExp</span>(b+<span class="string">"=([^&amp;]*)"</span>)))?l[<span class="number">1</span>]:<span class="literal">null</span>&#125;;g&amp;&amp;c(g,<span class="string">"state"</span>)&amp;&amp;(i=<span class="built_in">JSON</span>.parse(<span class="built_in">decodeURIComponent</span>(c(g,<span class="string">"state"</span>))),<span class="string">"mpeditor"</span>===i.action&amp;&amp;(b.sessionStorage.setItem(<span class="string">"_mpcehash"</span>,g),history.replaceState(i.desiredHash||<span class="string">""</span>,e.title,j.pathname+j.search)))&#125;<span class="keyword">catch</span>(m)&#123;&#125;<span class="keyword">var</span> k,h;<span class="built_in">window</span>.mixpanel=a;a._i=[];a.init=<span class="function"><span class="keyword">function</span>(<span class="params">b,c,f</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">b,a</span>)</span>&#123;<span class="keyword">var</span> c=a.split(<span class="string">"."</span>);<span class="number">2</span>==c.length&amp;&amp;(b=b[c[<span class="number">0</span>]],a=c[<span class="number">1</span>]);b[a]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;b.push([a].concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,</span></div><div class="line"><span class="actionscript"><span class="number">0</span>)))&#125;&#125;<span class="keyword">var</span> d=a;<span class="string">"undefined"</span>!==<span class="keyword">typeof</span> f?d=a[f]=[]:f=<span class="string">"mixpanel"</span>;d.people=d.people||[];d.toString=<span class="function"><span class="keyword">function</span><span class="params">(b)</span></span>&#123;<span class="keyword">var</span> a=<span class="string">"mixpanel"</span>;<span class="string">"mixpanel"</span>!==f&amp;&amp;(a+=<span class="string">"."</span>+f);b||(a+=<span class="string">" (stub)"</span>);<span class="keyword">return</span> a&#125;;d.people.toString=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> d.toString(<span class="number">1</span>)+<span class="string">".people (stub)"</span>&#125;;k=<span class="string">"disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user"</span>.split(<span class="string">" "</span>);</span></div><div class="line"><span class="javascript"><span class="keyword">for</span>(h=<span class="number">0</span>;h&lt;k.length;h++)e(d,k[h]);a._i.push([b,c,f])&#125;;a.__SV=<span class="number">1.2</span>;b=e.createElement(<span class="string">"script"</span>);b.type=<span class="string">"text/javascript"</span>;b.async=!<span class="number">0</span>;b.src=<span class="string">"undefined"</span>!==<span class="keyword">typeof</span> MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:<span class="string">"file:"</span>===e.location.protocol&amp;&amp;<span class="string">"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js"</span>.match(<span class="regexp">/^\/\//</span>)?<span class="string">"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js"</span>:<span class="string">"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js"</span>;c=e.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];c.parentNode.insertBefore(b,c)&#125;&#125;)(<span class="built_in">document</span>,<span class="built_in">window</span>.mixpanel||[]);</span></div><div class="line"><span class="actionscript">mixpanel.init(<span class="string">"YOUR TOKEN"</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- end Mixpanel --&gt;</span></div></pre></td></tr></table></figure><p>这是一段立即执行的js代码，作用通常是去异步加载真正的JS SDK，然后调用SDK的初始化接口init方法，完成初始化的操作。</p><p>初始化的核心代码为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixpanel.init(<span class="string">'YOUR TOKEN'</span>, &#123; <span class="attr">your</span>: <span class="string">'config'</span> &#125;, <span class="string">'library_name'</span>)</div></pre></td></tr></table></figure><p>也可以简写为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixpanel.init(<span class="string">"YOUR TOKEN"</span>)</div></pre></td></tr></table></figure><p>看下init方里面几个参数的含义：</p><ul><li>第一个参数是你在后台注册的app token</li><li>第二个参数是SDK的配置，传入了一堆key-value，如果不传，SDK内部也有个默认配置，长下面这样：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DEFAULT_CONFIG = &#123;</div><div class="line">    <span class="string">'api_host'</span>: HTTP_PROTOCOL + <span class="string">'api.mixpanel.com'</span>,</div><div class="line">    <span class="string">'app_host'</span>: HTTP_PROTOCOL + <span class="string">'mixpanel.com'</span>,</div><div class="line">    <span class="string">'autotrack'</span>: <span class="literal">true</span>, <span class="comment">// 是否打开全埋点监测</span></div><div class="line">    <span class="string">'cdn'</span>: HTTP_PROTOCOL + <span class="string">'cdn.mxpnl.com'</span>,</div><div class="line">    <span class="string">'cross_subdomain_cookie'</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">'persistence'</span>: <span class="string">'cookie'</span>,</div><div class="line">    <span class="string">'persistence_name'</span>: <span class="string">''</span>,</div><div class="line">    <span class="string">'cookie_name'</span>: <span class="string">''</span>,</div><div class="line">    <span class="string">'loaded'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    <span class="string">'store_google'</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">'save_referrer'</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">'test'</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">'verbose'</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">'img'</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">'track_pageview'</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">'debug'</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">'track_links_timeout'</span>: <span class="number">300</span>,</div><div class="line">    <span class="string">'cookie_expiration'</span>: <span class="number">365</span>,</div><div class="line">    <span class="string">'upgrade'</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">'disable_persistence'</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">'disable_cookie'</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">'secure_cookie'</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">'ip'</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">'property_blacklist'</span>: []</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li>第三个参数是SDK全局变量名</li></ul><blockquote><p>Mixpanel接入文档：<a href="https://mixpanel.com/help/reference/javascript" target="_blank" rel="external">https://mixpanel.com/help/reference/javascript</a></p></blockquote><h3 id="2-2-上报的基本实现"><a href="#2-2-上报的基本实现" class="headerlink" title="2.2 上报的基本实现"></a>2.2 上报的基本实现</h3><p>代码埋点的方式通常都会被封装成类似<code>track(eventName, properties)</code>的接口，例如在Mixpanel中，可以用<code>mixpanel.track(&quot;Played song&quot;, {&quot;genre&quot;: &quot;hip-hop&quot;});</code>来上报事件。</p><p>这里是整个SDK中最重要的地方，使用频率也是最高的。代码位于<code>/src/mixpanel-core.js</code>里面，先撇开复杂的逻辑和条件控制，看一下track的基本实现，我稍微加了点注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  track方法实现</span></div><div class="line">MixpanelLib.prototype.track = <span class="function"><span class="keyword">function</span>(<span class="params">event_name, properties, callback</span>) </span>&#123;</div><div class="line">    <span class="comment">// 各种边界判断</span></div><div class="line">    ...</div><div class="line">    <span class="comment">// 获取一些公共参数，和用户传入的properties一起encode</span></div><div class="line">    <span class="keyword">var</span> truncated_data = _.truncate(data, <span class="number">255</span>);</div><div class="line">    <span class="keyword">var</span> json_data = _.JSONEncode(truncated_data);</div><div class="line">    <span class="keyword">var</span> encoded_data = _.base64Encode(json_data);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'MIXPANEL REQUEST:'</span>);</div><div class="line">    <span class="built_in">console</span>.log(truncated_data);</div><div class="line">    <span class="comment">// 调用_send_request发送请求</span></div><div class="line">    <span class="keyword">this</span>._send_request(</div><div class="line">        <span class="keyword">this</span>.get_config(<span class="string">'api_host'</span>) + <span class="string">'/track/'</span>,</div><div class="line">        &#123; <span class="string">'data'</span>: encoded_data &#125;,</div><div class="line">        <span class="keyword">this</span>._prepare_callback(callback, truncated_data)</div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> truncated_data;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 发送请求的实现，主要用的是XMLHttpRequest，如果浏览器不支持XMLHttpRequest，那么用动态添加img/script标签的方式</span></div><div class="line">MixpanelLib.prototype._send_request = <span class="function"><span class="keyword">function</span>(<span class="params">url, data, callback</span>) </span>&#123;</div><div class="line">    <span class="comment">// 一些特殊情况的处理</span></div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> (<span class="string">'img'</span> <span class="keyword">in</span> data) &#123;</div><div class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">        img.src = url;</div><div class="line">        <span class="built_in">document</span>.body.appendChild(img);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (USE_XHR) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            req.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</div><div class="line">            <span class="comment">// send the mp_optout cookie</span></div><div class="line">            <span class="comment">// withCredentials cannot be modified until after calling .open on Android and Mobile Safari</span></div><div class="line">            req.withCredentials = <span class="literal">true</span>;</div><div class="line">            req.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (req.readyState === <span class="number">4</span>) &#123; <span class="comment">// XMLHttpRequest.DONE == 4, except in safari 4</span></div><div class="line">                    <span class="keyword">if</span> (req.status === <span class="number">200</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (callback) &#123;</div><div class="line">                            <span class="keyword">if</span> (verbose_mode) &#123;</div><div class="line">                                callback(_.JSONDecode(req.responseText));</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                callback(<span class="built_in">Number</span>(req.responseText));</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">var</span> error = <span class="string">'Bad HTTP status: '</span> + req.status + <span class="string">' '</span> + req.statusText;</div><div class="line">                        <span class="built_in">console</span>.error(error);</div><div class="line">                        <span class="keyword">if</span> (callback) &#123;</div><div class="line">                            <span class="keyword">if</span> (verbose_mode) &#123;</div><div class="line">                                callback(&#123;<span class="attr">status</span>: <span class="number">0</span>, <span class="attr">error</span>: error&#125;);</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                callback(<span class="number">0</span>);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            req.send(<span class="literal">null</span>); <span class="comment">// 发送异步请求</span></div><div class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            <span class="built_in">console</span>.error(e);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">        script.type = <span class="string">'text/javascript'</span>;</div><div class="line">        script.async = <span class="literal">true</span>;</div><div class="line">        script.defer = <span class="literal">true</span>;</div><div class="line">        script.src = url;</div><div class="line">        <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'script'</span>)[<span class="number">0</span>];</div><div class="line">        s.parentNode.insertBefore(script, s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>上面就是事件上报代码的核心实现。但是由于Web应用自身的一些特性，比如在追踪页面跳转行为（链接的点击、表单的提交等）时，为了防止数据发送不及时导致的数据丢失，SDK中提供一些诸如<code>track_links</code>和<code>track_forms</code>特殊方法，这些方法内部用的其实是setTimeout或者等待服务器返回结果之后再让页面跳转。</p><h2 id="三、全埋点"><a href="#三、全埋点" class="headerlink" title="三、全埋点"></a>三、全埋点</h2><p>Mixpanel和神策都提供了名为<strong>“AutoTrack”</strong>的方案，只需要在初始化SDK的时候，传入一个参数即可打开这个功能。JS SDK可以自动监测网页中所有的点击、表单submit等事件，这和AndroidSDK里面监听所有按钮的点击有些类似。</p><h3 id="3-1-自动监测的元素、事件类型"><a href="#3-1-自动监测的元素、事件类型" class="headerlink" title="3.1 自动监测的元素、事件类型"></a>3.1 自动监测的元素、事件类型</h3><ul><li><p><strong>神策JS：</strong>设置AutoTrack之后，SDK就会自动追踪页面上的按钮(<code>a</code>、<code>button</code>、<code>input</code>) 这种html标签类型的点击情况，一旦页面某一个按钮发生了点击行为，SDK就会去采集此按钮的一些信息，例如: 这个按钮的标签类型，这个按钮的文本内容，这个按钮的<code>name</code>，这个按钮的<code>id</code>、<code>class</code>名，还有一些按钮特有的属性如<code>href</code>等。</p></li><li><p><strong>MixpanelJS：</strong>设置AutoTrack之后，SDK会监测页面上的所有<code>form表单</code>、<code>input标签</code>、<code>select和textarea标签</code>产生的<code>submit</code>、<code>change</code>、<code>click</code>事件，并采集这些标签上的属性一起上报。</p></li></ul><h3 id="3-2-全埋点监测的实现"><a href="#3-2-全埋点监测的实现" class="headerlink" title="3.2 全埋点监测的实现"></a>3.2 全埋点监测的实现</h3><p>以Mixpanel为例，在<code>/src/autotrack.js</code>代码中，把几个关键的方法扣出来看一下（不要问我为什么以Mixpanel为例，因为代码少一些。。。）。</p><p>当SDK初始化的时候，会执行autotrack里面的<code>_addDomEventHandlers</code>方法，给整个document的<code>submit</code>、<code>change</code>、<code>click</code>事件设置监听器。当监听到这几类事件时，会执行<code>_trackEvent</code>方法。</p><p>直接看代码，我给代码里面加了一点注释，来说明自动监测上报的过程。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SDK初始化时，通过register_event设置需要监听了submit、change、click这3类事件</span></div><div class="line"><span class="comment">// Mixpanel的js sdk代码里面自己封装了一个underscore模块，里面有一些工具方法</span></div><div class="line">_addDomEventHandlers: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> handler = _.bind(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            e = e || <span class="built_in">window</span>.event;</div><div class="line">            <span class="keyword">this</span>._trackEvent(e, instance);</div><div class="line">        &#125;, <span class="keyword">this</span>);</div><div class="line">        _.register_event(<span class="built_in">document</span>, <span class="string">'submit'</span>, handler, <span class="literal">false</span>, <span class="literal">true</span>);</div><div class="line">        _.register_event(<span class="built_in">document</span>, <span class="string">'change'</span>, handler, <span class="literal">false</span>, <span class="literal">true</span>);</div><div class="line">        _.register_event(<span class="built_in">document</span>, <span class="string">'click'</span>, handler, <span class="literal">false</span>, <span class="literal">true</span>);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">// register_event的实现，优先采用addEventListener的方式，如果浏览器不支持会尝试使用onXXX的方式</span></div><div class="line"><span class="keyword">var</span> register_event = <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler, oldSchool, useCapture</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!element) &#123;</div><div class="line">            <span class="built_in">console</span>.error(<span class="string">'No valid element provided to register_event'</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (element.addEventListener &amp;&amp; !oldSchool) &#123;</div><div class="line">            element.addEventListener(type, handler, !!useCapture);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> ontype = <span class="string">'on'</span> + type;</div><div class="line">            <span class="keyword">var</span> old_handler = element[ontype]; <span class="comment">// can be undefined</span></div><div class="line">            element[ontype] = makeHandler(element, handler, old_handler);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"><span class="comment">// 监听到事件发生后，调用_trackEvent方法来上报</span></div><div class="line">_trackEvent: <span class="function"><span class="keyword">function</span>(<span class="params">e, instance</span>) </span>&#123;</div><div class="line">        <span class="comment">// 首先找到这个事件的target</span></div><div class="line">        <span class="keyword">var</span> target = <span class="keyword">this</span>._getEventTarget(e);</div><div class="line">        <span class="keyword">if</span> (target.nodeType === TEXT_NODE) &#123;</div><div class="line">            target = target.parentNode;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 然后判断是不是autotrack要监测的事件，如果不是的话，啥也不干直接返回。</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._shouldTrackDomEvent(target, e)) &#123;</div><div class="line">            <span class="comment">// 如果满足监测条件，那么从当前标签开始，向上追溯到body标签，并记录这条路径上所有的元素到一个数组中</span></div><div class="line">            <span class="keyword">var</span> targetElementList = [target];</div><div class="line">            <span class="keyword">var</span> curEl = target;</div><div class="line">            <span class="keyword">while</span> (curEl.parentNode &amp;&amp; !<span class="keyword">this</span>._isTag(curEl, <span class="string">'body'</span>)) &#123;</div><div class="line">                targetElementList.push(curEl.parentNode);</div><div class="line">                curEl = curEl.parentNode;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 按照刚才记录的路径开始遍历（相当于自底向上）</span></div><div class="line">            <span class="keyword">var</span> elementsJson = [];</div><div class="line">            <span class="keyword">var</span> href, elementText, form, explicitNoTrack = <span class="literal">false</span>;</div><div class="line">            _.each(targetElementList, <span class="function"><span class="keyword">function</span>(<span class="params">el, idx</span>) </span>&#123;</div><div class="line">                <span class="comment">// if the element or a parent element is an anchor tag</span></div><div class="line">                <span class="comment">// include the href as a property</span></div><div class="line">                <span class="comment">// 读取到a标签或者form标签时，记录它们的属性。</span></div><div class="line">                <span class="keyword">if</span> (el.tagName.toLowerCase() === <span class="string">'a'</span>) &#123;</div><div class="line">                    href = el.getAttribute(<span class="string">'href'</span>);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.tagName.toLowerCase() === <span class="string">'form'</span>) &#123;</div><div class="line">                    form = el;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// crawl up to max of 5 nodes to populate text content</span></div><div class="line">                <span class="comment">// 读取节点的文本内容，最多往上读个5层</span></div><div class="line">                <span class="keyword">if</span> (!elementText &amp;&amp; idx &lt; <span class="number">5</span> &amp;&amp; el.textContent) &#123;</div><div class="line">                    <span class="keyword">var</span> textContent = _.trim(el.textContent);</div><div class="line">                    <span class="keyword">if</span> (textContent) &#123;</div><div class="line">                        elementText = textContent.replace(<span class="regexp">/[\r\n]/g</span>, <span class="string">' '</span>).replace(<span class="regexp">/[ ]+/g</span>, <span class="string">' '</span>).substring(<span class="number">0</span>, <span class="number">255</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// allow users to programatically prevent tracking of elements by adding class 'mp-no-track'</span></div><div class="line">                <span class="comment">// 如果不希望某个节点被监测，开发者可以设置一个名为`mp-no-track`的css class</span></div><div class="line">                <span class="keyword">var</span> classes = <span class="keyword">this</span>._getClassName(el).split(<span class="string">' '</span>);</div><div class="line">                <span class="keyword">if</span> (_.includes(classes, <span class="string">'mp-no-track'</span>)) &#123;</div><div class="line">                    explicitNoTrack = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 读取每个标签的属性，最后这条路径上所有的标签都会被记录下来保存在elementsJson数组中</span></div><div class="line">                elementsJson.push(<span class="keyword">this</span>._getPropertiesFromElement(el));</div><div class="line">            &#125;, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 如果是一个开发者设置了不需要监测的标签，那么直接返回，不上报了</span></div><div class="line">            <span class="keyword">if</span> (explicitNoTrack) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 处理采集到的属性，这里面有几个getXXXProperties(element/elements)方法（_getPropertiesFromElement、_getDefaultProperties、_getCustomProperties、_getFormFieldProperties），就是在读取各种属性</span></div><div class="line">            <span class="keyword">var</span> props = _.extend(</div><div class="line">                <span class="keyword">this</span>._getDefaultProperties(e.type), <span class="comment">// 事件的基本属性，包含事件名称、window.location.host、window.location.pathname</span></div><div class="line">                &#123;</div><div class="line">                    <span class="string">'$elements'</span>: elementsJson, <span class="comment">// target标签到body标签这条路径上的所有标签及其属性</span></div><div class="line">                    <span class="string">'$el_attr__href'</span>: href, <span class="comment">// 采集到的href链接</span></div><div class="line">                    <span class="string">'$el_text'</span>: elementText <span class="comment">// target标签的文本内容</span></div><div class="line">                &#125;,</div><div class="line">                <span class="keyword">this</span>._getCustomProperties(targetElementList) <span class="comment">// 读取自定义属性，这里应该是指用户在后台管理界面配置的属性</span></div><div class="line">            );</div><div class="line">            <span class="keyword">if</span> (form &amp;&amp; (e.type === <span class="string">'submit'</span> || e.type === <span class="string">'click'</span>)) &#123;</div><div class="line">                _.extend(props, <span class="keyword">this</span>._getFormFieldProperties(form)); <span class="comment">// 读取表单的一些属性</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 调用了代码埋点中介绍的track方法上报一个名为`$web_event`的事件，并带上采集的到的属性</span></div><div class="line">            instance.track(<span class="string">'$web_event'</span>, props);</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">// _trackEvent之前，需要判断标签上的发生的事件是不是应该被autotrack监测上报</span></div><div class="line">_shouldTrackDomEvent: <span class="function"><span class="keyword">function</span>(<span class="params">element, event</span>) </span>&#123;</div><div class="line">        <span class="comment">// html根节点下面的事件不需要监测</span></div><div class="line">        <span class="keyword">if</span> (!element || <span class="keyword">this</span>._isTag(element, <span class="string">'html'</span>) || element.nodeType !== ELEMENT_NODE) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> tag = element.tagName.toLowerCase();</div><div class="line">        <span class="comment">// 查看标签的名字</span></div><div class="line">        <span class="comment">// 如果是html则不监听</span></div><div class="line">        <span class="comment">// 如果是form标签下的submit事件，或者是input-&gt;button、input-&gt;submit标签的change、click事件，或者是select、textarea标签下的change、click事件，可以监听</span></div><div class="line">        <span class="comment">// 如果是其他标签，监听click事件</span></div><div class="line">        <span class="keyword">switch</span> (tag) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'html'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'form'</span>:</div><div class="line">                <span class="keyword">return</span> event.type === <span class="string">'submit'</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'input'</span>:</div><div class="line">                <span class="keyword">if</span> ([<span class="string">'button'</span>, <span class="string">'submit'</span>].indexOf(element.getAttribute(<span class="string">'type'</span>)) === <span class="number">-1</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> event.type === <span class="string">'change'</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> event.type === <span class="string">'click'</span>;</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">case</span> <span class="string">'select'</span>:</div><div class="line">            <span class="keyword">case</span> <span class="string">'textarea'</span>:</div><div class="line">                <span class="keyword">return</span> event.type === <span class="string">'change'</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> event.type === <span class="string">'click'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div></pre></td></tr></table></figure><h3 id="3-3-全埋点小结"><a href="#3-3-全埋点小结" class="headerlink" title="3.3 全埋点小结"></a>3.3 全埋点小结</h3><p>可以看到全埋点还是有点暴力的，会采集的数据量也挺大，并且采集到的属性也比较多，可以看到在MixpanelSDK中，如果页面结构比较深，那么数据报过去分析起来可能还是需要花点时间的，同时也会产生大量可能不会使用的数据，对资源也是一种浪费。在神策SDK的接入文档中也提到，建议那些按钮不是很多的，相对简单的页面可以采用这个方法。一般情况下，如果网页上的按钮比较多的话，因为每次按钮的点击都会发数据，数据量很大。</p><h2 id="四、可视化埋点"><a href="#四、可视化埋点" class="headerlink" title="四、可视化埋点"></a>四、可视化埋点</h2><p>Mixpanel和神策等平台，都提供了JS可视化埋点功能，与全埋点相比，这种方式可以指定自己想要监测的元素和属性（所有可以点击的元素），既可以做到动态配置，又不会像全埋点那样产生大量的数据（但也有例外，比如Mixpanel的可视化埋点仍然上报了全量点击数据，只是在后台根据可视化配置过滤出实际的数据）。</p><p>可视化埋点首先需要进入埋点模式，以Mixpanel为例，可视化埋点的入口在后台管理界面，需要在后台输入需要埋点的页面url，然后再进入我的Web页面，此时就会加载可视化标记的编辑器（代码见<code>autotrack.js</code>中的<code>_maybeLoadEditor</code>方法，需要注意的是这个页面必须已经嵌入了JS SDK）。</p><blockquote><p>这里一定要从平台登录才可以进入可视化编辑状态，这实际上是对安全性的一个保证，试想如果只要嵌入SDK就可以做可视化埋点，那岂不是我的Web应用随便就可以被别人埋点，对我的数据产生干扰了。在Mixpanel JS SDK内部，通常会<strong>判断当前页面的sessionStorge/localStorage中是否有一个开启可视化编辑器标志字段（例如Mixpanel是<code>_mpcehash</code>字段）</strong>，读取这个字段，解析到其中的打开可视化编辑器的开关开启之后，就会加载可视化编辑器。由此可见其实从SDK后台管理界面跳转到可视化标记页面时，就是向SessionStorage中写入了相应的标志。</p></blockquote><p><strong>可视化埋点的两个关键点是：</strong></p><ul><li><strong>标记元素，保存配置</strong>：这一步要保存好需要追踪的元素的element_path，以及需要追踪的元素。</li><li><strong>下发配置，查找元素，监听点击，上报行为</strong>：这一步要通过element_path找到元素，给它添加一个点击监听器，当点击事件发生时SDK上报事件。</li></ul><p>这里最重要的就是：<strong>元素的标记和查找</strong>，不同的SDK就是实现标记和查找的时候稍微有一些差异。</p><h3 id="4-1-标记元素，保存配置"><a href="#4-1-标记元素，保存配置" class="headerlink" title="4.1 标记元素，保存配置"></a>4.1 标记元素，保存配置</h3><blockquote><p>MixpanelJS加载可视化编辑器时，需要从<code>//mixpanel.com/js-bundle/reports/collect-everything/editor.js?_ts={$timestamp}</code>去加载一个js文件，<strong>这个js差不多可以看成一个独立的标记SDK，</strong>最后这个请求会被重定向到一个cdn地址（<code>https://cdn4.mxpnl.com/static/asset-cache/3fc4abfdcebcb5121f1ebf143415b232/compiled/reports/collect-everything/editor.min.js</code>），随便打开这个js看下就有两万多行，因此单独做成了一个按需加载的模块。</p></blockquote><p>由于Mixpanel就没有提供标记SDK的源码，不过从体验和<strong>抓包分析后台下发的配置</strong>，我仍然可以推测出技术实现的细节。</p><p><strong>从体验的角度来讲，</strong>当进入可视化编辑状态时，在开发者web页面上，用户的鼠标经过<strong>可以被点击</strong>的元素（例如a、button标签等）时，这个元素会被一种颜色高亮提示，此时点击一下这个元素，就会弹出一个浮窗，用户填写信息，设置一个事件和一些属性，保存之后就算完成对这个元素的标记操作了，当标记过的元素的配置保存好了以后，这个元素会用另外一种特殊的颜色高亮标识起来。</p><p><strong>从技术的角度来讲，</strong>我看下神策JS SDK中的<code>vtrack.sdk.js</code>这个文件，当神策SDK进入可视化标记模式的时候，会去加载<code>vendor.js</code>和<code>vendor.css</code>，这两个文件可以看作一个标记SDK。那么<code>vendor.js</code>代码里是<strong>如何标记需要追踪的元素的</strong>呢？</p><p>在<code>vendor.js</code>中，有一个<code>EventDefine</code>模块，这个模块负责把一个标签处理成我要保存的selector。</p><p><strong>EventDefine</strong>有三个方法：</p><ul><li>getSelfAttr：获取一个标签内的文本内容，举例来说，一个<code>&lt;p&gt;This is another paragraph.&lt;/p&gt;</code>得到的内容是<code>This is another paragraph.</code>。</li><li>toSelector：把一个标签的tagName、id、classNames解析出来，拼成一个串。举例来说，一个<code>&lt;div id=&quot;test&quot; class=&quot;uncle chen&quot;&gt;&lt;/div&gt;</code>标签，它的selector是<code>div#id.uncle.chen</code>，这个selector是可以直接给jQuery用来查找元素的。</li><li>toAllSelector：选择一个需要追踪的标签，并给这个标签定义点击时上报的事件（EventDefine），最后将这个事件转成一个selector保存下来，selector就是用于给jQuery来查找元素的选择器，这里需要注意，如果一个元素是在iFrame里面的，那么SDK保存的选择器路径是相对iFrame内部的，而不是最外层的document。</li></ul><p>前两个方法都是给<code>toAllSelector</code>方法调用的，<code>toAllSelector</code>方法是神策的标记SDK的重点，这个方法的实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">toAllSelector: <span class="function"><span class="keyword">function</span>(<span class="params">$target, outDocuemnt</span>) </span>&#123;</div><div class="line">    outDocuemnt = outDocuemnt ? $(outDocuemnt) : $(<span class="built_in">document</span>);</div><div class="line">    <span class="keyword">var</span> $parent, newSelSize, newSelector, parts, selSize, selector, targetSel;</div><div class="line">    selector = <span class="keyword">this</span>.toSelector($target, outDocuemnt);</div><div class="line">    $parent = $target.parent();</div><div class="line">    selSize = outDocuemnt.find(selector).length;</div><div class="line">    <span class="keyword">while</span> ($parent.prop(<span class="string">'tagName'</span>) !== <span class="string">'BODY'</span> &amp;&amp; selSize !== <span class="number">1</span>) &#123;</div><div class="line">      newSelector = <span class="string">''</span> + (<span class="keyword">this</span>.toSelector($parent)) + <span class="string">' '</span> + selector; <span class="comment">// 如果向上回溯的话，selector会用空格分开保存</span></div><div class="line">      newSelSize = outDocuemnt.find(newSelector).length;</div><div class="line">      <span class="keyword">if</span> (newSelSize &lt; selSize) &#123;</div><div class="line">        selector = newSelector;</div><div class="line">        selSize = newSelSize;</div><div class="line">      &#125;</div><div class="line">      $parent = $parent.parent();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> nthEle = selector;</div><div class="line">    <span class="keyword">var</span> selfAttr = <span class="keyword">this</span>.getSelfAttr($target);</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      nthEle: nthEle,</div><div class="line">      selfAttr: selfAttr</div><div class="line">    &#125;;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>当选中一个标签时，SDK会提取出这个标签的selector，然后用jQuery选择器查找这个selector指向的元素，如果这个selector指向的元素有多个（<code>selSize !== 1</code>，也就是说这个元素有着多个兄弟标签），那么还需要进一步去提取其父标签的selector，直到找出可以<strong>唯一</strong>标识这个元素的selector为止，最后将需要追踪的这个元素以{nthEle: nthEle, selfAttr: selfAttr}`，nthEle是selector，selfAttr是文本内容。</p><p><strong>简单总结一下元素的标记，在Web页面中，一个元素的唯一css选择器生成算法，应该记录了从body到这个元素的完整路径，并记录每一个节点是其父亲节点的第几个孩子节点，即这个元素在整个Dom Tree中的深度和下标。此外，为了在一定程度上抵抗Dom Tree的变化，下标应该记录的是这个元素在父节点中相同类型元素的index（nth-of-type），而不是其父节点下面所有孩子节点的index（nth-child）。</strong></p><h3 id="4-2-查找元素，监听上报"><a href="#4-2-查找元素，监听上报" class="headerlink" title="4.2 查找元素，监听上报"></a>4.2 查找元素，监听上报</h3><p>标记元素，保存配置之后，SDK如何根据配置来监测配置好的元素，并进行上报呢？前面我说到Mixpanel在可视化埋点的上报实现里，仍然保持了全量点击事件上报，并在每个上报中把元素在Dom Tree的完整路径一起上报到了后台，由后台去过滤出可视化事件。</p><p>所以这里我看下神策js的代码，在可视化模块<code>vtrack.sdk.js</code>中，正常模式下，会去解析后台下发的配置，找到标记过的元素，绑定事件。</p><p><strong>1.下发配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 进入普通模式时，会从后台的一个接口去拉去标记过的元素（这里也叫“部署”过的元素）的关键信息，然后进行解析</span></div><div class="line">  enterNormalMode: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    sd.vtrack_mode = <span class="string">'normalMode'</span>;</div><div class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">this</span>.getDeployFile().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      me.parseDeployFile(); <span class="comment">// 解析配置</span></div><div class="line">    &#125;);</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><p>由于神策的后台代码是走私有化部署的，我没有办法体验，这里看一份诸葛IO平台可视化配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"code"</span>: <span class="number">10001</span>,</div><div class="line">  <span class="attr">"msg"</span>: <span class="string">"Request success"</span>,</div><div class="line">  <span class="attr">"visual_events"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"event_name"</span>: <span class="string">"button3333"</span>,</div><div class="line">      <span class="attr">"url"</span>: <span class="string">"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=kc0vtnal8qahrd2tq5obomukh8"</span>, </div><div class="line">      <span class="attr">"element"</span>: [</div><div class="line">        <span class="string">"#b"</span></div><div class="line">      ],</div><div class="line">      <span class="attr">"attr"</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"ppp"</span>,</div><div class="line">          <span class="attr">"selector"</span>: <span class="string">"body&gt;p:eq(0)"</span></div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      <span class="attr">"app_id"</span>: <span class="number">56070</span>,</div><div class="line">      <span class="attr">"platform"</span>: <span class="number">3</span>,</div><div class="line">      <span class="attr">"create_date_time"</span>: <span class="string">"2018-01-23 17:45:53"</span>,</div><div class="line">      <span class="attr">"hidden"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"stop"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"alias_name"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"edit_url"</span>: <span class="string">"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=kc0vtnal8qahrd2tq5obomukh8"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"event_name"</span>: <span class="string">"button点击2222"</span>,</div><div class="line">      <span class="attr">"url"</span>: <span class="string">""</span>,</div><div class="line">      <span class="attr">"element"</span>: [</div><div class="line">        <span class="string">"#b"</span></div><div class="line">      ],</div><div class="line">      <span class="attr">"attr"</span>: [],</div><div class="line">      <span class="attr">"app_id"</span>: <span class="number">56070</span>,</div><div class="line">      <span class="attr">"platform"</span>: <span class="number">3</span>,</div><div class="line">      <span class="attr">"create_date_time"</span>: <span class="string">"2018-01-23 17:39:16"</span>,</div><div class="line">      <span class="attr">"hidden"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"stop"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"alias_name"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"edit_url"</span>: <span class="string">"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=k9d5hjmkqt1ethu1ao51cf4t9e"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"event_name"</span>: <span class="string">"20180123"</span>,</div><div class="line">      <span class="attr">"url"</span>: <span class="string">""</span>,</div><div class="line">      <span class="attr">"element"</span>: [</div><div class="line">        <span class="string">"#b"</span></div><div class="line">      ],</div><div class="line">      <span class="attr">"attr"</span>: [],</div><div class="line">      <span class="attr">"app_id"</span>: <span class="number">56070</span>,</div><div class="line">      <span class="attr">"platform"</span>: <span class="number">3</span>,</div><div class="line">      <span class="attr">"create_date_time"</span>: <span class="string">"2018-01-23 17:08:04"</span>,</div><div class="line">      <span class="attr">"hidden"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"stop"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"alias_name"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"edit_url"</span>: <span class="string">"http://localhost:63343/sa-sdk-javascript/zhuge.html?_ijt=ir7e9n0scm88b0k2uvotnc4ntd"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"event_name"</span>: <span class="string">"hello链接点击"</span>,</div><div class="line">      <span class="attr">"url"</span>: <span class="string">"http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#"</span>,</div><div class="line">      <span class="attr">"element"</span>: [</div><div class="line">        <span class="string">"body&gt;a:eq(0)"</span></div><div class="line">      ],</div><div class="line">      <span class="attr">"attr"</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"自定义属性"</span>,</div><div class="line">          <span class="attr">"selector"</span>: <span class="string">"body&gt;p:eq(0)"</span></div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      <span class="attr">"app_id"</span>: <span class="number">56070</span>,</div><div class="line">      <span class="attr">"platform"</span>: <span class="number">3</span>,</div><div class="line">      <span class="attr">"create_date_time"</span>: <span class="string">"2017-12-22 16:25:29"</span>,</div><div class="line">      <span class="attr">"hidden"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">"stop"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">"alias_name"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"edit_url"</span>: <span class="string">"http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意，上面这份配置有两个字段，一个是url，另一个是editUrl，editUrl表示标记元素的时候，是在哪一个页面里操作的。url表示应该去哪个url下面查找标记的元素。因为有些情况下，虽然我们是在某一个页面标记的元素，但是我们有很多其他页面和这个页面长得类似，比如商品详情类的页面，所以我们其实希望在所有的商品详情页都可以上报某些事件。所以，如果url为一个具体的值，例如”<a href="http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#" target="_blank" rel="external">http://localhost:63342/sa-sdk-javascript/zhuge.html?_ijt=hg3r25mmicg2icf0jtndtaskh7#</a>“，说明只应该在这个url对应的页面中查找元素，上报行为即可；如果url=””，说明我们应该在整个Web应用中的所有页面都去依据路径查找元素，上报事件。</p><p><strong>2.解析配置，监测元素</strong></p><p>还是直接看神策代码实现，里面加了点注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解析配置，查看当前页面中是否有元素需要被追踪，把需要追踪的元素的配置保存到requiredData变量中</span></div><div class="line">parseDeployFile: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.requireData = <span class="keyword">this</span>.checkUrl(<span class="keyword">this</span>.deployData);</div><div class="line">  <span class="keyword">this</span>.listenEvents();</div><div class="line">&#125;,</div><div class="line"><span class="comment">// 找到元素，绑定点击事件的处理，当元素被点击时，上报事件</span></div><div class="line">listenEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> data = <span class="keyword">this</span>.requireData;</div><div class="line">  <span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</div><div class="line">    <span class="keyword">this</span>.getEle(data[i]).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        me.doVTrackAction(ev);</div><div class="line">      &#125;</div><div class="line">    &#125;(data[i]));</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">doVTrackAction: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  sd.track(</div><div class="line">    data.eventName,</div><div class="line">    &#123;</div><div class="line">      $from_vtrack: <span class="built_in">String</span>(data.trigger_id)</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      $lib_method: <span class="string">'vtrack'</span>,</div><div class="line">      $lib_detail: <span class="built_in">String</span>(data.trigger_id)</div><div class="line">    &#125;</div><div class="line">  );</div><div class="line">&#125;,</div><div class="line"><span class="comment">// 通过jQuery的选择器来找到元素，我在前一节的标记操作中知道，标记SDK会把一个定义好的事件eventDefine转化成一个&#123;nthEle: nthEle, selfAttr: selfAttr&#125;结构保存起来，这里去寻找元素的时候和标记那里的逻辑其实是一个逆操作。</span></div><div class="line"><span class="comment">// 这里要注意，和标记时一样元素，碰到iframe时要特殊处理一下。</span></div><div class="line">getEle: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ele;</div><div class="line">  <span class="keyword">if</span> ($(data.nthEle[<span class="number">0</span>]) &amp;&amp; $(data.nthEle[<span class="number">0</span>]).prop(<span class="string">'tagName'</span>) === <span class="string">'IFRAME'</span>) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      ele = $(data.nthEle[<span class="number">0</span>]).contents().find(data.nthEle.slice(<span class="number">1</span>).join(<span class="string">' '</span>));</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    &#125;</div><div class="line">    ;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    ele = $(data.nthEle.join(<span class="string">' '</span>));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (data.selfAttr &amp;&amp; data.selfAttr.text !== <span class="keyword">void</span> <span class="number">0</span>) &#123;</div><div class="line">    ele = ele.filter(<span class="string">':contains('</span> + data.selfAttr.text + <span class="string">')'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> ele;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>神策查找元素的时候用到了jQuery，而在Mixpanel中没有用jQuery，而是用的<code>Document.querySelectorAll</code>这个API。毕竟有很多移动页面为了优化加载速度，不会用jQuery这么重的库。</p><p>此外，当追踪一些特殊的标签时，可以考虑用<a href="http://www.w3school.com.cn/xpath/" target="_blank" rel="external">XPath</a>去定位，今日头条的广告监测插件其实就用到了XPath。</p><p><strong>3.给事件上报添加属性</strong></p><p>单独把添加属性拿出来讲，是因为它的原理是类似的。前面我们只提到标记一个元素，当它被点击的时候上报事件，但是这样没有在上报事件的同时带上自定义的一些属性。</p><p>其实只要是Web页面上出现了的元素，我们都可以把它记录下来，然后在事件发生的时候，查找到这些元素，并把它们的内容作为事件的属性上报上来。我们可以在标记了一个元素的时候，再去标记其他的一些元素（例如一些文本标签），并设置其他这些元素各自所对应的key，当事件发生时，我们可以找到其他这些元素，并获取到其中显示的文本内容，作为各自参数的值，上报到后台。</p><h3 id="4-3-可视化埋点小结"><a href="#4-3-可视化埋点小结" class="headerlink" title="4.3 可视化埋点小结"></a>4.3 可视化埋点小结</h3><p>可以看出，在JS上实现可视化埋点不是一件太麻烦的事情，我认为最关键的两件事就是标记元素和查找元素。不过它缺点是只会读取页面上的标签元素的展示出来的属性，也不会像代码埋点的方案那样去理解业务场景，获取上下文（通常在内存里）的一些属性；另外，当页面的结构发生变化的时候，可能要重新进行一次标记操作。有些平台是通过对事件监测的告警来提醒用户的，当事件数量同比大幅减少的时候，大概率是因为某次改版导致页面Dom Tree产生了变化，通过配置下发里面的元素路径找不到之前标记的元素了，这时就应该提醒用户重新标记。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>本文从代码埋点、全埋点、可视化埋点三个角度，以Mixpanel、神策数据的JS SDK的源代码，分析了Web页面埋点的实现方案的实现。在流量红利逐渐消失的现在，数据的采集、分析和精细化的运营显得更加重要，下面简单列一个表格对以上三种方式的埋点方案进行对比，还是那句话，三种埋点方式相辅相成，结合业务需求搭配使用，适合自己的才是最好的。</p><table><thead><tr><th style="text-align:center">埋点方案</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th><th style="text-align:left">适用场景</th></tr></thead><tbody><tr><td style="text-align:center">代码埋点</td><td style="text-align:left">可以按照业务上报详细、定制化的数据</td><td style="text-align:left">需要开发人员参与，更新维护成本高，无法获得历史数据</td><td style="text-align:left">对上下文理解要求较高的业务数据</td></tr><tr><td style="text-align:center">全埋点</td><td style="text-align:left">对发人员依赖低，仅需嵌入一次SDK，可以全量上报通用数据，可以拿到历史数据</td><td style="text-align:left">数量量太大，占用更多资源，且无法收集业务上下文数据，给后续数据筛选和分析带来一定的难度</td><td style="text-align:left">上下文相对独立的、通用的数据</td></tr><tr><td style="text-align:center">可视化埋点</td><td style="text-align:left">对开发人员依赖低，可以按照业务需求上报数据，对上下文数据有一定收集能力</td><td style="text-align:left">标记事件有一定的操作难度，事件需要被更新时无法获得历史数据，界面变化时标记的元素可能失效</td><td style="text-align:left">业务上下文数据相对简单，操作交互比较固定的界面</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://unclechen.github.io/2017/12/18/Android%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/&quot;&gt;上一篇博客&lt;/a&gt;分析了Android上的埋点SDK技术原理，这次我看看Web页面上的埋点。Web页面上的埋点主要通过JS完成，在JS里面同样有代码埋点、全埋点、可视化埋点三种方案，如果对这几种方案的概念不了解可以看下上一篇博客。由于&lt;a href=&quot;https://github.com/mixpanel/mixpanel-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mixpanel-js&lt;/a&gt;和&lt;a href=&quot;https://github.com/sensorsdata/sa-sdk-javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sensors Analytics JavaScript SDK&lt;/a&gt;都开源了自己的SDK，就以它们为例进行分析。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SDK" scheme="http://unclechen.github.io/tags/SDK/"/>
    
      <category term="埋点" scheme="http://unclechen.github.io/tags/%E5%9F%8B%E7%82%B9/"/>
    
      <category term="无埋点" scheme="http://unclechen.github.io/tags/%E6%97%A0%E5%9F%8B%E7%82%B9/"/>
    
      <category term="可视化埋点" scheme="http://unclechen.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%8B%E7%82%B9/"/>
    
      <category term="JS" scheme="http://unclechen.github.io/tags/JS/"/>
    
      <category term="监测" scheme="http://unclechen.github.io/tags/%E7%9B%91%E6%B5%8B/"/>
    
      <category term="数据" scheme="http://unclechen.github.io/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Android埋点技术分析</title>
    <link href="http://unclechen.github.io/2017/12/18/Android%E5%9F%8B%E7%82%B9%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    <id>http://unclechen.github.io/2017/12/18/Android埋点技术分析/</id>
    <published>2017-12-18T00:00:00.000Z</published>
    <updated>2018-05-20T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><p>埋点，是对网站、App或者后台等应用程序进行数据采集的一种方法。通过埋点，可以收集用户在应用中的产生行为，进而用于分析和优化产品后续的体验，也可以为产品的运营提供数据支撑，其中常见的指标有PV、UV、页面时长和按钮的点击等，通常可以采集到下面这些数据。</p><ul><li>行为数据：时间、地点、人物、交互的内容等</li><li>质量数据：App运行情况、浏览器加载情况、错误异常等</li><li>环境数据：手机型号、操作系统版本、浏览器UA、地理、运营商、网络环境等</li><li>运营数据：PV、UV、点击量、日活、留存、渠道来源等</li></ul><p>采集行为数据时，通常需要在Web页面/App里面添加一些代码，当用户的行为达到某种条件时，就会向服务器上报用户的行为。其实添加这些代码的过程就可以叫做“埋点”，在很久以前就已经出现了这种技术。随着技术的发展和大家对数据采集要求的不断提高，我认为埋点的技术方案走过了下面几个阶段：</p><ul><li><p><strong>代码埋点：代码埋点是指在某个事件发生时调用数据发送接口上报数据。</strong>例如开发人员按照产品/运营的需求，在Web页面/App的源码里面添加行为上报的代码，当用户的行为满足某一个条件时，这些代码就会被执行，向服务器上报行为数据。这种方案是最基础的方案，每次增加或者修改数据上报的条件，都需要开发人员的参与，并且只能在下一个版本上线后才能看到效果。基本上所有的数据平台都提供了这类数据上报的SDK，将行为上报的后台服务器接口封装成了简单的客户端SDK接口。开发者可以通过嵌入这类SDK，在埋点的地方调用少量的代码就可以上报行为数据。</p></li><li><p><strong>全埋点：全埋点指的是将Web页面/App内产生的所有的、满足某个条件的行为，全部上报到后台服务器。</strong>例如把一个App中所有的按钮点击都进行上报，然后由产品/运营去后台筛选所需要的行为数据。这种方案的优点非常明显，就是可以不用在新增/修改行为上报条件时，再找开发人员去修改埋点的代码。然而它的缺点也和优点一样明显，那就是上报的数据量比代码埋点大很多，里面可能很多是没有价值的数据。此外，这种方案更倾向于独立去看待用户的行为，而没有关注行为的上下文，给数据分析带来了一些难度。很多公司也提供了这类功能的SDK，通过静态或者动态的方式，<strong>“Hook”了原有的App代码</strong>，从而实现了行为的监测，在数据上报时通常是采用累积多条再上报的方案来合并请求。</p></li><li><p><strong>可视化埋点：可视化埋点是指通过可视化工具配置采集节点，在App/Web解析配置查找节点，监听节点产生的事件并上报。</strong>例如产品在Web页面/App的界面上进行圈选，配置需要监测界面上哪一个元素，然后保存这个配置，当App启动时会从后台服务器获得产品/运营预先圈选好的配置，然后根据这份配置查找并监测App界面上的元素，当某一个元素满足条件时，就会上报行为数据到后台服务器。有了暴力的全埋点技术方案，很容易联想到按需埋点，可视化埋点就是一种按需配置埋点的方案。现在也有一些公司提供了这类SDK，圈选监测元素时，有的是提供一个Web管理界面，手机在安装并初始化了SDK之后，可以和管理界面了连接，让用户在Web管理界面上配置需要监测的元素，有的是直接让用户在手机上圈选元素进行埋点。</p></li></ul><blockquote><p>hook直译是钩子的意思，以前学信息安全的时候在windows上听到过，大体意思是通过某种手段去改变系统API的一个行为，绕过系统的某个方法，或者改变系统的工作流程。在这里其实是指把本来要执行某个方法的对象替换成另一个，一般用的是反射或者代理，需要找到hook的代码位置，甚至还可以在编译阶段实现替换。全埋点和可视化埋点都需要Hook掉App原本的代码实现。</p></blockquote><p>业界有多家SDK都支持上面介绍的3种埋点方案中的一种或者全部，例如Mixpanel、Sensorsdata、TalkingData、GrowingIO、诸葛IO、Heap Analytics、MTA、Umeng Analytics、百度，只是大家对后两种埋点的称呼不完全相同，有的叫无埋点或者codeless埋点。由于<a href="https://github.com/mixpanel/mixpanel-android" target="_blank" rel="external">Mixpanel</a>（支持代码埋点、可视化埋点）和<a href="https://github.com/sensorsdata/sa-sdk-android" target="_blank" rel="external">Sensorsdata</a>（全部支持）都开源了自己的全部SDK，技术方案也比较类似，下面以它们的Android SDK为例，简单分析一下3种埋点方案的技术实现。关于JS的SDK技术实现，可以看下我的另一篇博客-<a href="http://unclechen.github.io/2017/12/24/JS%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/">JS埋点SDK技术分析</a>。</p><a id="more"></a><h1 id="二、代码埋点"><a href="#二、代码埋点" class="headerlink" title="二、代码埋点"></a>二、代码埋点</h1><p>包含Mixpanel SDK在内的大部分SDK，都会把这种埋点方案封装成一个比较简单的接口，在这里是<code>track(String eventName, JSONObject properties)</code>，开发者在调用这个接口时，可以把一个事件名称和事件的属性传入，然后就可以上报到后台了。一般代码埋点长这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">    <span class="comment">// 业务代码</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="comment">// 埋点上报</span></div><div class="line">    JSONObject properties = <span class="keyword">new</span> JSONObject();</div><div class="line">    properties.put(<span class="string">"price"</span>, <span class="number">6800</span>);</div><div class="line">    properties.put(<span class="string">"name"</span>, <span class="string">"Pixel2 XL"</span>);</div><div class="line">    Tracker.track(<span class="string">"PURCHASE"</span>, properties);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure><p>Mixpanel SDK内部采用一条HandlerThread线程来处理事件，当开发者调用<code>track(String eventName, JSONObject properties)</code>方法时，<strong>主线程切换到HandlerThread</strong>当中，并先将事件存入数据库。然后看SDK中是否累计到了40个事件，如果累计到40个事件的话，就合并它们上报到后台。</p><p>当开发者设置为debug模式，或者手动调用<code>flush</code>接口时，可以立即上报累计的所有事件，不过由于只有一条线程，所以如果在flush的时候，前面的事件还没有处理完成，SDK会间隔1分钟再次去处理后面的这些事件。</p><p>开发者可以设置累计上报的事件数量阈值、事件阻塞时再次尝试上报的时间间隔等。这种方案比较基础，相信大部分开发者都接触过，不需要过多分析。</p><h1 id="三、全埋点"><a href="#三、全埋点" class="headerlink" title="三、全埋点"></a>三、全埋点</h1><h2 id="3-1-基本原理"><a href="#3-1-基本原理" class="headerlink" title="3.1 基本原理"></a>3.1 基本原理</h2><p>全埋点要对方法进行Hook，按照<strong>是否在运行时</strong>这个条件来区分，Android全埋点可以有下面两种方式：</p><ul><li><strong>静态Hook：</strong>AspectJ实现AOP，编译期修改代码</li><li><strong>动态Hook：</strong>运行时替换View.OnClickListener等事件回调</li></ul><p>这里的Hook其实就是一种AOP实现。</p><blockquote><p>那么什么是AOP？AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。（from baidu baike）</p><p>简而言之，AOP是可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。</p></blockquote><p><strong>Sensors Analytics AndroidSDK全埋点的实现就是通过在代码编译阶段，找到源代码中需要上报事件的位置，插入SDK的事件上报代码。它用到的框架是<a href="https://www.eclipse.org/aspectj/" target="_blank" rel="external">AspectJ</a>。</strong></p><h2 id="3-2-使用AspectJ做静态Hook"><a href="#3-2-使用AspectJ做静态Hook" class="headerlink" title="3.2 使用AspectJ做静态Hook"></a>3.2 使用AspectJ做静态Hook</h2><h3 id="3-2-1-AspectJ基本概念"><a href="#3-2-1-AspectJ基本概念" class="headerlink" title="3.2.1 AspectJ基本概念"></a>3.2.1 AspectJ基本概念</h3><p>在很多地方我们可以看到AspectJ的身影，例如JakeWharton大神贡献的一个注解日志和性能调优框架<a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">Hugo</a>，在Spring框架里面也有应用到AspectJ的概念（不过Spring AOP的实现是用的动态代理）。我理解AspectJ里面的主要几个概念有：</p><ul><li><strong>JPoint：</strong>代码切点（就是我们要插入代码的地方）</li><li><strong>Aspect：</strong>代码切点的描述<ul><li><strong>Pointcut：</strong>描述切点具体是什么样的点，如函数被调用的地方（<code>Call(MethodSignature)</code>）、函数执行的内部（<code>execution(MethodSignature)</code>）</li><li><strong>Advice：</strong>描述在切点的什么位置插入代码，如在Pointcut前面（<code>@Before</code>）还是后面（<code>@After</code>），还是环绕整个Pointcut（<code>@Around</code>）</li></ul></li></ul><p>由此可见，在实现AOP功能时，需要做下面几件事：</p><ul><li>定义一个Aspect，这个Aspect里面必须有Pointcut和Advice两个属性</li><li>编写在匹配到符合Pointcut和Advice描述的代码时，需要注入的代码</li><li>在代码编译时，通过特殊的java编译器（Aspect的ajc编译器），找到符合我们定义的Aspect的代码，将需要注入的代码插入到Advice指定的位置。</li></ul><p>如果你对AspectJ有了解的话，已经可以猜到SDK内部是怎么实现全埋点的了；如果没有接触，我觉得也不用急于全面地去学习AspectJ，毕竟AspectJ的功能很强大（可远不止前置、后置这么简单的增强），埋点这种业务只用到了AspectJ当中的一小部分功能而已，可以直接看下面的分析。</p><h3 id="3-2-2-实现"><a href="#3-2-2-实现" class="headerlink" title="3.2.2 实现"></a>3.2.2 实现</h3><p>神策SDK里面是如何监测View点击事件呢？我把SDK代码简化一下进行分析，有下面几个步骤：</p><h4 id="3-2-2-1-定义一个Aspect"><a href="#3-2-2-1-定义一个Aspect" class="headerlink" title="3.2.2.1 定义一个Aspect"></a>3.2.2.1 定义一个Aspect</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class="line"></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewOnClickListenerAspectj</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * android.view.View.OnClickListener.onClick(android.view.View)</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint JoinPoint</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@After</span>(<span class="string">"execution(* android.view.View.OnClickListener.onClick(android.view.View))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClickAOP</span><span class="params">(<span class="keyword">final</span> JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        AopUtil.sendTrackEventToSDK(joinPoint, <span class="string">"onViewOnClick"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段Aspect的代码定义了：<strong>在执行android.view.View.OnClickListener.onClick(android.view.View)方法原有的实现后面，需要插入<code>AopUtil.sendTrackEventToSDK(joinPoint, &quot;onViewOnClick&quot;);</code>这段代码。</strong></p><p><code>AopUtil.sendTrackEventToSDK(joinPoint, &quot;onViewOnClick&quot;);</code>这段代码做的事情就是点击事件的上报。因为神策SDK将全埋点功能和主SDK包分离成了两个jar包，所以通过AopUtil工具去调用真正的事件上报代码，这里不细述其实现，下面直接看这段代码背后真正的点击上报实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SensorsDataAPI.sharedInstance().track(AopConstants.APP_CLICK_EVENT_NAME, properties);</div></pre></td></tr></table></figure><p>可以看到AOP实现的点击监测，最后也走<code>track</code>方法进行上报了。</p><h4 id="3-2-2-2-使用ajc编译器向源代码中“织入”Aspect代码"><a href="#3-2-2-2-使用ajc编译器向源代码中“织入”Aspect代码" class="headerlink" title="3.2.2.2 使用ajc编译器向源代码中“织入”Aspect代码"></a>3.2.2.2 使用ajc编译器向源代码中“织入”Aspect代码</h4><p>采用AspectJ框架编写的代码，想要注入原来的工程的代码，需要在<code>/app/build.gradle</code>中引用ajc编译器，脚本如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">import</span> org.aspectj.bridge.IMessage</div><div class="line"><span class="keyword">import</span> org.aspectj.bridge.MessageHandler</div><div class="line"><span class="keyword">import</span> org.aspectj.tools.ajc.Main</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'org.aspectj:aspectjtools:1.8.10'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile <span class="string">'org.aspectj:aspectjrt:1.8.10'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="keyword">def</span> log = project.logger</div><div class="line"><span class="keyword">final</span> <span class="keyword">def</span> variants = project.android.applicationVariants</div><div class="line"></div><div class="line">variants.all &#123; variant -&gt;</div><div class="line">    <span class="keyword">if</span> (!variant.buildType.isDebuggable()) &#123;</div><div class="line">        log.debug(<span class="string">"Skipping non-debuggable build type '$&#123;variant.buildType.name&#125;'."</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    JavaCompile javaCompile = variant.javaCompile</div><div class="line">    javaCompile.doLast &#123;</div><div class="line">        String[] args = [<span class="string">"-showWeaveInfo"</span>,</div><div class="line">                     <span class="string">"-1.5"</span>,</div><div class="line">                     <span class="string">"-inpath"</span>, javaCompile.destinationDir.toString(),</div><div class="line">                     <span class="string">"-aspectpath"</span>, javaCompile.classpath.asPath,</div><div class="line">                     <span class="string">"-d"</span>, javaCompile.destinationDir.toString(),</div><div class="line">                     <span class="string">"-classpath"</span>, javaCompile.classpath.asPath,</div><div class="line">                     <span class="string">"-bootclasspath"</span>, project.android.bootClasspath.join(File.pathSeparator)]</div><div class="line">        log.debug <span class="string">"ajc args: "</span> + Arrays.toString(args)</div><div class="line"></div><div class="line">        MessageHandler handler = <span class="keyword">new</span> MessageHandler(<span class="literal">true</span>);</div><div class="line">        <span class="keyword">new</span> Main().run(args, handler);</div><div class="line">        <span class="keyword">for</span> (IMessage <span class="string">message :</span> handler.getMessages(<span class="literal">null</span>, <span class="literal">true</span>)) &#123;</div><div class="line">           <span class="keyword">switch</span> (message.getKind()) &#123;</div><div class="line">                <span class="keyword">case</span> IMessage.<span class="string">ABORT:</span></div><div class="line">                <span class="keyword">case</span> IMessage.<span class="string">ERROR:</span></div><div class="line">                <span class="keyword">case</span> IMessage.<span class="string">FAIL:</span></div><div class="line">                    log.error message.message, message.thrown</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> IMessage.<span class="string">WARNING:</span></div><div class="line">                    log.warn message.message, message.thrown</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> IMessage.<span class="string">INFO:</span></div><div class="line">                    log.info message.message, message.thrown</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> IMessage.<span class="string">DEBUG:</span></div><div class="line">                    log.debug message.message, message.thrown</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在SensorsAndroidSDK中，把上面这段脚本编写成了一个<a href="https://github.com/sensorsdata/sa-sdk-android-plugin2" target="_blank" rel="external">gradle插件</a>，开发者只需要在<code>app/build.gradle</code>引用这个插件即可。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.sensorsdata.analytics.android'</span></div></pre></td></tr></table></figure><h4 id="3-2-2-3-查看织入后的class文件"><a href="#3-2-2-3-查看织入后的class文件" class="headerlink" title="3.2.2.3 查看织入后的class文件"></a>3.2.2.3 查看织入后的class文件</h4><p>完成上面两步，就可以实现在<code>android.view.View.OnClickListener.onClick(android.view.View)</code>方法中插入我们的数据上报代码了。我们在demo代码中加一个Button，并给它set一个OnClickListener，编译一下代码，查看<code>/build/intermediates/classes/debug/</code>里面class文件，经过ajc编译之后，原始代码中插入了Aspect的代码，并调用了<code>ViewOnClickListenerAspectj</code>里面的<code>onViewClickAOP</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="keyword">this</span>.setContentView(<span class="number">2130968603</span>);</div><div class="line">        Button btnTst = (Button)<span class="keyword">this</span>.findViewById(<span class="number">2131427422</span>);</div><div class="line">        btnTst.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                JoinPoint var2 = Factory.makeJP(ajc$tjp_0, <span class="keyword">this</span>, <span class="keyword">this</span>, v);</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Log.i(<span class="string">"MainActivity"</span>, <span class="string">"button clicked"</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</div><div class="line">                    ViewOnClickListenerAspectj.aspectOf().onViewClickAOP(var2);</div><div class="line">                    <span class="keyword">throw</span> var5;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                ViewOnClickListenerAspectj.aspectOf().onViewClickAOP(var2);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">static</span> &#123;</div><div class="line">                ajc$preClinit();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>AspectJ的基本用法就是这样，除了对<code>OnClickListener</code>进行替换，理论上可以对任何已知的方法进行替换，所以在埋点SDK中还可以采用对RatingBar、CheckBox、RadioButton等控件的点击进行监听。</p><p>神策AndroidSDK借助AspectJ插入Aspect代码，就是一种静态Hook的方式。本质上是在程序没有运行之前，通常是编译或者链接的阶段，对字节码进行修改，插入事件上报的代码。</p><p>修改字节码除了这种方案之外，还有Android Gradle插件提供的trasform api（1.5.0版本以上）、ASM、Javassist。在网易乐得的埋点方案，Nuwa热修复项目都可以见到这些技术的实践。</p><h2 id="3-3-使用代理模式实现动态Hook"><a href="#3-3-使用代理模式实现动态Hook" class="headerlink" title="3.3 使用代理模式实现动态Hook"></a>3.3 使用代理模式实现动态Hook</h2><h3 id="3-3-1-代理模式"><a href="#3-3-1-代理模式" class="headerlink" title="3.3.1 代理模式"></a>3.3.1 代理模式</h3><p>上面分析了以AspectJ为代表的<strong>“静态Hook”</strong>实现方案，有没有其他办法可以不修改源代码，只是<strong>在App运行的时候去“动态Hook”</strong>点击行为的处理呢？答案是肯定的，JAVA里面有一个设计模式叫代理模式，从这个角度出发，看下怎么<strong>在运行时</strong>实现点击事件的监测上报。</p><p>在<a href="https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/view/View.java" target="_blank" rel="external">android.view.View.java</a>的源码（<code>API&gt;=14</code>）中，有这么几个关键的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// getListenerInfo方法：返回所有的监听器信息mListenerInfo</span></div><div class="line"><span class="function">ListenerInfo <span class="title">getListenerInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mListenerInfo != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> mListenerInfo;</div><div class="line">    &#125;</div><div class="line">    mListenerInfo = <span class="keyword">new</span> ListenerInfo();</div><div class="line">    <span class="keyword">return</span> mListenerInfo;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 监听器信息</span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerInfo</span> </span>&#123;</div><div class="line">    ... <span class="comment">// 此处省略各种xxxListener</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Listener used to dispatch click events.</span></div><div class="line"><span class="comment">     * This field should be made private, so it is hidden from the SDK.</span></div><div class="line"><span class="comment">     * &#123;<span class="doctag">@hide</span>&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> OnClickListener mOnClickListener;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Listener used to dispatch long click events.</span></div><div class="line"><span class="comment">     * This field should be made private, so it is hidden from the SDK.</span></div><div class="line"><span class="comment">     * &#123;<span class="doctag">@hide</span>&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">protected</span> OnLongClickListener mOnLongClickListener;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">ListenerInfo mListenerInfo;</div><div class="line"></div><div class="line"><span class="comment">// 我们非常熟悉的方法，内部其实是把mListenerInfo的mOnClickListener设成了我们创建的OnclickListner对象</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(@Nullable OnClickListener l)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isClickable()) &#123;</div><div class="line">        setClickable(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    getListenerInfo().mOnClickListener = l;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 判断这个View是否设置了点击监听器</span></div><div class="line"><span class="comment"> * Return whether this view has an attached OnClickListener.  Returns</span></div><div class="line"><span class="comment"> * true if there is a listener, false if there is none.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasOnClickListeners</span><span class="params">()</span> </span>&#123;</div><div class="line">    ListenerInfo li = mListenerInfo;</div><div class="line">    <span class="keyword">return</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过上面几个方法可以看到，点击监听器其实被保存在了<strong><code>mListenerInfo.mOnClickListener</code></strong>里面。那么实现<strong>Hook点击监听器</strong>时，只要将这个<code>mOnClickListener</code>替换成我们包装的<strong>点击监听器代理对象</strong>就可以实现点击监听的代理了。</p><h3 id="3-3-2-实现"><a href="#3-3-2-实现" class="headerlink" title="3.3.2 实现"></a>3.3.2 实现</h3><h4 id="3-3-2-1-创建点击监听器的代理类"><a href="#3-3-2-1-创建点击监听器的代理类" class="headerlink" title="3.3.2.1 创建点击监听器的代理类"></a>3.3.2.1 创建点击监听器的代理类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 点击监听器的代理类，具有上报点击行为的功能</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnClickListenerWrapper</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="comment">// 原始的点击监听器对象</span></div><div class="line">    <span class="keyword">private</span> View.OnClickListener onClickListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OnClickListenerWrapper</span><span class="params">(View.OnClickListener onClickListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.onClickListener = onClickListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">// 让原来的点击监听器正常工作</span></div><div class="line">        <span class="keyword">if</span>(onClickListener != <span class="keyword">null</span>)&#123;</div><div class="line">            onClickListener.onClick(view);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 点击事件上报，可以获取被点击view的一些属性</span></div><div class="line">        track(APP_CLICK_EVENT_NAME, getSomeProperties(view));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-3-2-2-反射获取一个View的mListenerInfo-mOnClickListener，替换成代理的点击监听器"><a href="#3-3-2-2-反射获取一个View的mListenerInfo-mOnClickListener，替换成代理的点击监听器" class="headerlink" title="3.3.2.2 反射获取一个View的mListenerInfo.mOnClickListener，替换成代理的点击监听器"></a>3.3.2.2 反射获取一个View的mListenerInfo.mOnClickListener，替换成代理的点击监听器</h4><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对一个View的点击监听器进行hook</span></div><div class="line">public void hookView(<span class="keyword">View</span> <span class="keyword">view</span>) &#123;</div><div class="line">    <span class="comment">// 1. 反射调用View的getListenerInfo方法（API&gt;=14），获得mListenerInfo对象</span></div><div class="line">    <span class="keyword">Class</span> viewClazz = <span class="keyword">Class</span>.forName(<span class="string">"android.view.View"</span>)<span class="comment">;</span></div><div class="line">    Method getListenerInfoMethod = viewClazz.getDeclaredMethod(<span class="string">"getListenerInfo"</span>)<span class="comment">;</span></div><div class="line">    <span class="keyword">if</span> (!getListenerInfoMethod.isAccessible()) &#123;</div><div class="line">        getListenerInfoMethod.setAccessible(true)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    Object mListenerInfo = listenerInfoMethod.invoke(<span class="keyword">view</span>)<span class="comment">;</span></div><div class="line">    </div><div class="line">    <span class="comment">// 2. 然后从mListenerInfo中反射获取mOnClickListener对象</span></div><div class="line">    <span class="keyword">Class</span> listenerInfoClazz = <span class="keyword">Class</span>.forName(<span class="string">"android.view.View$ListenerInfo"</span>)<span class="comment">;</span></div><div class="line">    Field onClickListenerField = listenerInfoClazz.getDeclaredField(<span class="string">"mOnClickListener"</span>)<span class="comment">;</span></div><div class="line">    <span class="keyword">if</span> (!onClickListenerField.isAccessible()) &#123;</div><div class="line">        onClickListenerField.setAccessible(true)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">View</span>.OnClickListener mOnClickListener = (<span class="keyword">View</span>.OnClickListener) onClickListenerField.get(mListenerInfo)<span class="comment">;</span></div><div class="line">    </div><div class="line">    <span class="comment">// 3. 创建代理的点击监听器对象</span></div><div class="line">    <span class="keyword">View</span>.OnClickListener mOnClickListenerWrapper = <span class="keyword">new</span> OnClickListenerWrapper(mOnClickListener)<span class="comment">;</span></div><div class="line">    </div><div class="line">    <span class="comment">// 4. 把mListenerInfo的mOnClickListener设成新的onClickListenerWrapper</span></div><div class="line">    onClickListenerField.<span class="keyword">set</span>(mListenerInfo, mOnClickListenerWrapper)<span class="comment">;</span></div><div class="line">    <span class="comment">// 用这个似乎也可以：view.setOnClickListener(mOnClickListenerWrapper);     </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意，如果是<code>API&lt;14</code>的话，mOnClickListener直接是直接以一个Field保存在View对象中的，没有ListenerInfo，因此反射的次数要更少一些。</p><h4 id="3-3-2-3-对App中所有的View进行动态Hook"><a href="#3-3-2-3-对App中所有的View进行动态Hook" class="headerlink" title="3.3.2.3 对App中所有的View进行动态Hook"></a>3.3.2.3 对App中所有的View进行动态Hook</h4><p>我们在分析的是全埋点，那么怎样把App里面所有的View点击都Hook到呢？有两种方式：</p><ul><li><p>第一种：当Activity创建完成后，开始从Activity的DecorView开始自顶向下深度遍历ViewTree，遍历到一个View的时候，对它进行hookView操作。这种方式有点暴力，由于这里面遍历ViewTree的时候用到了大量反射，性能会有影响。</p></li><li><p>第二种：比第一种方式稍微优秀一些，来源是一个Github上的开源库<a href="https://github.com/foolchen/AndroidTracker" target="_blank" rel="external">AndroidTracker</a>（Kotlin实现）。他的处理方式是当Activity创建完成后，在DecorView中添加一个透明的View作为子View，在这个子View的onTouchEvent方法中，根据触摸坐标找到屏幕中包含了这个坐标的View，再对这些View尝试进行hookView操作。<strong>这种方式比较取巧，首先是拿到了手指按下的位置，根据这个位置来找需要被Hook的View，避免了在遍历ViewTree的同时对View进行反射。具体实现是在遍历ViewTree中的每个View时，判断这个View的坐标是否包含手指按下的坐标，以及View是否Visible，如果满足这两个条件，就把这个View保存到一个ArrayList<view>hitViews。然后再遍历这个ArrayList里面的View，如果一个View#hasOnClickListeners返回true，那么才对他进行hookView操作。</view></strong></p></li></ul><h3 id="3-3-3-动态Hook小结"><a href="#3-3-3-动态Hook小结" class="headerlink" title="3.3.3 动态Hook小结"></a>3.3.3 动态Hook小结</h3><p>整体来看，动态Hook的思路这里用到了反射，难免对程序性能产生影响，如果要采用这种方式实现全埋点方案，还需要好好评估。既然提到了代理，要说一下<strong>这里的“代理模式”其实还是JAVA的静态代理</strong>，不是动态代理。因为<code>OnClickListener</code>和<code>OnClickListenerWrapper</code>是在编写代码的时候就确定了，并不是在运行时动态生成了一个<code>OnClickListenerWrapper</code>。在JDK中动态代理是使用Native去生成了代理类的字节码（比如使用ASM等工具），并使用ClassLoader加载进来的。</p><h2 id="3-4-全埋点参考资料"><a href="#3-4-全埋点参考资料" class="headerlink" title="3.4 全埋点参考资料"></a>3.4 全埋点参考资料</h2><ul><li>Aspect Oriented Programming in Android：<a href="https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/" target="_blank" rel="external">https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/</a></li><li>AOP之AspectJ全面剖析in Android（AspectJ详细用法）：<a href="http://www.jianshu.com/p/f90e04bcb326" target="_blank" rel="external">http://www.jianshu.com/p/f90e04bcb326</a></li><li>沪江开源了一个叫做AspectJX的插件，扩展了AspectJ，除了对src代码进行AOP，还支持kotlin、工程中引用的jar和aar进行AOP：<a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx" target="_blank" rel="external">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a></li><li>关于 Spring AOP (AspectJ) 你该知晓的一切：<a href="http://blog.csdn.net/javazejian/article/details/56267036" target="_blank" rel="external">http://blog.csdn.net/javazejian/article/details/56267036</a></li></ul><h1 id="四、可视化埋点"><a href="#四、可视化埋点" class="headerlink" title="四、可视化埋点"></a>四、可视化埋点</h1><p>第三章介绍的是App全埋点，显然这种方式产生的数据太多，无论是对用户资源的节约，还是后续的数据分析都不太好。那么能否<strong>同样借助动态Hook技术，在运行时，只对我们感兴趣的控件进行埋点呢？</strong>这就是可视化埋点。</p><h2 id="4-1-可视化埋点原理"><a href="#4-1-可视化埋点原理" class="headerlink" title="4.1 可视化埋点原理"></a>4.1 可视化埋点原理</h2><p>可视化埋点，需要经过两个步骤，可以由非技术人员操作完成。</p><ul><li><strong>第一步：通过可视化工具配置采集的View。</strong>例如使用已经嵌入了SDK的App连接管理界面，当手机App与后台同步时，后台管理界面上会显示和手机App一样的界面，用户可以在管理界面上用鼠标选择需要监测的元素，设置事件名称，保存这个配置。（也有一些SDK，比如GrowingIO的SDK圈选操作是在手机悬浮了一个原点，拖动圆点到需要监测的元素上来设置埋点位置的，不管是什么方式本质上是一样的，需要保存一份配置到后台）。</li><li><strong>第二步：App解析配置，找到View，Hook它的事件并上报数据。</strong>例如嵌入了SDK的App启动时，会从服务器获取到一份配置，再根据这份配置去检测App中的界面及其元素，满足配置的条件时向服务器上报事件。</li></ul><p>这里面最重要的技术点就是如何把手机上需要埋点的元素记录下来，然后根据配置信息找到需要埋点的控件，再替换这个控件的交互事件处理方法（如点击、长按等）。下面以Mixpanel、SensorsdataSDK为例（这两个SDK实现是一样的），简单分析一下技术方案的实现。</p><h2 id="4-2-可视化埋点实现"><a href="#4-2-可视化埋点实现" class="headerlink" title="4.2 可视化埋点实现"></a>4.2 可视化埋点实现</h2><h3 id="4-2-1-圈选需要监测的View，保存配置"><a href="#4-2-1-圈选需要监测的View，保存配置" class="headerlink" title="4.2.1 圈选需要监测的View，保存配置"></a>4.2.1 圈选需要监测的View，保存配置</h3><h4 id="4-2-1-1-创建WebSocket连接后台"><a href="#4-2-1-1-创建WebSocket连接后台" class="headerlink" title="4.2.1.1 创建WebSocket连接后台"></a>4.2.1.1 创建WebSocket连接后台</h4><p>采用WebSocket连接是因为要让手机和后台长时间保持连接，是一个<strong>持续的、实时的双向通信</strong>，WebSocket正适合这种场景。</p><p>在Mixpanel和神策SDK里面其实都用到了开源的<a href="https://github.com/TooTallNate/Java-WebSocket" target="_blank" rel="external">Java-WebSocket</a>实现。此外，还有一个非常著名的Android同屏工具<a href="https://www.vysor.io/" target="_blank" rel="external">Vysor</a>，里面也有一个基于WebSocket的网络框架<a href="https://github.com/koush/AndroidAsync" target="_blank" rel="external">AndroidAsync</a>。如果对WebSocket感兴趣，可以看看它们。这里其实只要是用Java实现的WebSocket通信就行。</p><h4 id="4-2-1-2-把App界面截图和里面的子View信息发送到后台"><a href="#4-2-1-2-把App界面截图和里面的子View信息发送到后台" class="headerlink" title="4.2.1.2 把App界面截图和里面的子View信息发送到后台"></a>4.2.1.2 把App界面截图和里面的子View信息发送到后台</h4><p>创建WebSocket连接后，SDK会在主线程中，对App中启动的Activity进行扫描，找到界面的RootView（其实是DecorView）。在查找RootView的同时，会采用反射调用View类<code>createSnapshot</code>方法对RootView进行截图，从而实现了对屏幕的截图。</p><p>截图之后，SDK内部会判断图片的hash值，如果图片发生了变化，会采用<strong>先序</strong>的方式遍历Activity的ViewTree，遍历同时读取View的属性（id、top、left、width、height、class名称、layoutRules等等）。下面举一个栗子：</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fn1f3fcrrkj30rs06twfj.jpg" alt=""></p><p>一个简单的Activity，ContentView里面有一个LineaLayout，LinearLayout里面放了一个Button。先序遍历Activity的ViewTree后，SDK会把下面这些数据传到WebSocket的服务器（数据有点多，大概有13k，数据主要来自截图）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"snapshot_response"</span>, </div><div class="line">    <span class="attr">"payload"</span>: &#123;</div><div class="line">        <span class="attr">"activities"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"activity"</span>: <span class="string">"com.sensorsdata.analytics.android.demo.MainActivity"</span>, </div><div class="line">                <span class="attr">"scale"</span>: <span class="number">0.3809524</span>, </div><div class="line">                <span class="attr">"serialized_objects"</span>: &#123;</div><div class="line">                    <span class="attr">"rootObject"</span>: <span class="number">88528516</span>, </div><div class="line">                    <span class="attr">"objects"</span>: [</div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">"hashCode"</span>: <span class="number">88528516</span>, </div><div class="line">                            <span class="attr">"id"</span>: <span class="number">-1</span>, </div><div class="line">                            <span class="attr">"index"</span>: <span class="number">-1</span>, </div><div class="line">                            <span class="attr">"sa_id_name"</span>: <span class="literal">null</span>, </div><div class="line">                            <span class="attr">"top"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"left"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"width"</span>: <span class="number">1080</span>, </div><div class="line">                            <span class="attr">"height"</span>: <span class="number">1920</span>, </div><div class="line">                            <span class="attr">"scrollX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"scrollY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"visibility"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"classes"</span>: [</div><div class="line">                                <span class="string">"com.android.internal.policy.DecorView"</span>, </div><div class="line">                                <span class="string">"android.widget.FrameLayout"</span>, </div><div class="line">                                <span class="string">"android.view.ViewGroup"</span>, </div><div class="line">                                <span class="string">"android.view.View"</span></div><div class="line">                            ], </div><div class="line">                            <span class="attr">"subviews"</span>: [</div><div class="line">                                <span class="number">57495077</span>, </div><div class="line">                                <span class="number">150453242</span></div><div class="line">                            ]</div><div class="line">                        &#125;, </div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">"hashCode"</span>: <span class="number">57495077</span>, </div><div class="line">                            <span class="attr">"id"</span>: <span class="number">16908822</span>, </div><div class="line">                            <span class="attr">"index"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"sa_id_name"</span>: <span class="literal">null</span>, </div><div class="line">                            <span class="attr">"top"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"left"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"width"</span>: <span class="number">1080</span>, </div><div class="line">                            <span class="attr">"height"</span>: <span class="number">1920</span>, </div><div class="line">                            <span class="attr">"scrollX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"scrollY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"visibility"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"classes"</span>: [</div><div class="line">                                <span class="string">"com.android.internal.widget.ActionBarOverlayLayout"</span>, </div><div class="line">                                <span class="string">"android.view.ViewGroup"</span>, </div><div class="line">                                <span class="string">"android.view.View"</span></div><div class="line">                            ], </div><div class="line">                            <span class="attr">"subviews"</span>: [</div><div class="line">                                <span class="number">12620808</span>, </div><div class="line">                                <span class="number">88713121</span></div><div class="line">                            ]</div><div class="line">                        &#125;, </div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">"hashCode"</span>: <span class="number">12620808</span>, </div><div class="line">                            <span class="attr">"id"</span>: <span class="number">16908290</span>, </div><div class="line">                            <span class="attr">"index"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"sa_id_name"</span>: <span class="string">"android:content"</span>, </div><div class="line">                            <span class="attr">"top"</span>: <span class="number">210</span>, </div><div class="line">                            <span class="attr">"left"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"width"</span>: <span class="number">1080</span>, </div><div class="line">                            <span class="attr">"height"</span>: <span class="number">1710</span>, </div><div class="line">                            <span class="attr">"scrollX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"scrollY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"visibility"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"classes"</span>: [</div><div class="line">                                <span class="string">"android.widget.FrameLayout"</span>, </div><div class="line">                                <span class="string">"android.view.ViewGroup"</span>, </div><div class="line">                                <span class="string">"android.view.View"</span></div><div class="line">                            ], </div><div class="line">                            <span class="attr">"subviews"</span>: [</div><div class="line">                                <span class="number">150314438</span></div><div class="line">                            ]</div><div class="line">                        &#125;, </div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">"hashCode"</span>: <span class="number">150314438</span>, </div><div class="line">                            <span class="attr">"id"</span>: <span class="number">-1</span>, </div><div class="line">                            <span class="attr">"index"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"sa_id_name"</span>: <span class="literal">null</span>, </div><div class="line">                            <span class="attr">"top"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"left"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"width"</span>: <span class="number">1080</span>, </div><div class="line">                            <span class="attr">"height"</span>: <span class="number">1710</span>, </div><div class="line">                            <span class="attr">"scrollX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"scrollY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"visibility"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"classes"</span>: [</div><div class="line">                                <span class="string">"android.widget.LinearLayout"</span>, </div><div class="line">                                <span class="string">"android.view.ViewGroup"</span>, </div><div class="line">                                <span class="string">"android.view.View"</span></div><div class="line">                            ], </div><div class="line">                            <span class="attr">"subviews"</span>: [</div><div class="line">                                <span class="number">104340701</span></div><div class="line">                            ]</div><div class="line">                        &#125;, </div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">"hashCode"</span>: <span class="number">104340701</span>, </div><div class="line">                            <span class="attr">"id"</span>: <span class="number">2131427422</span>, </div><div class="line">                            <span class="attr">"index"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"sa_id_name"</span>: <span class="string">"buttonTest"</span>, </div><div class="line">                            <span class="attr">"top"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"left"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"width"</span>: <span class="number">1080</span>, </div><div class="line">                            <span class="attr">"height"</span>: <span class="number">126</span>, </div><div class="line">                            <span class="attr">"scrollX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"scrollY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"visibility"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"classes"</span>: [</div><div class="line">                                <span class="string">"android.widget.Button"</span>, </div><div class="line">                                <span class="string">"android.widget.TextView"</span>, </div><div class="line">                                <span class="string">"android.view.View"</span></div><div class="line">                            ], </div><div class="line">                            <span class="attr">"subviews"</span>: [ ]</div><div class="line">                        &#125;, </div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">"hashCode"</span>: <span class="number">88713121</span>, </div><div class="line">                            <span class="attr">"id"</span>: <span class="number">16908669</span>, </div><div class="line">                            <span class="attr">"index"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"sa_id_name"</span>: <span class="literal">null</span>, </div><div class="line">                            <span class="attr">"top"</span>: <span class="number">63</span>, </div><div class="line">                            <span class="attr">"left"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"width"</span>: <span class="number">1080</span>, </div><div class="line">                            <span class="attr">"height"</span>: <span class="number">147</span>, </div><div class="line">                            <span class="attr">"scrollX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"scrollY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"visibility"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"classes"</span>: [</div><div class="line">                                <span class="string">"com.android.internal.widget.ActionBarContainer"</span>, </div><div class="line">                                <span class="string">"android.widget.FrameLayout"</span>, </div><div class="line">                                <span class="string">"android.view.ViewGroup"</span>, </div><div class="line">                                <span class="string">"android.view.View"</span></div><div class="line">                            ], </div><div class="line">                            <span class="attr">"subviews"</span>: [</div><div class="line">                                <span class="number">164355104</span>, </div><div class="line">                                <span class="number">161393113</span></div><div class="line">                            ]</div><div class="line">                        &#125;, </div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">"hashCode"</span>: <span class="number">164355104</span>, </div><div class="line">                            <span class="attr">"id"</span>: <span class="number">16908668</span>, </div><div class="line">                            <span class="attr">"index"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"sa_id_name"</span>: <span class="literal">null</span>, </div><div class="line">                            <span class="attr">"top"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"left"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"width"</span>: <span class="number">1080</span>, </div><div class="line">                            <span class="attr">"height"</span>: <span class="number">147</span>, </div><div class="line">                            <span class="attr">"scrollX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"scrollY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"visibility"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"classes"</span>: [</div><div class="line">                                <span class="string">"android.widget.Toolbar"</span>, </div><div class="line">                                <span class="string">"android.view.ViewGroup"</span>, </div><div class="line">                                <span class="string">"android.view.View"</span></div><div class="line">                            ], </div><div class="line">                            <span class="attr">"subviews"</span>: [</div><div class="line">                                <span class="number">222758006</span>, </div><div class="line">                                <span class="number">64817783</span></div><div class="line">                            ]</div><div class="line">                        &#125;, </div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">"hashCode"</span>: <span class="number">222758006</span>, </div><div class="line">                            <span class="attr">"id"</span>: <span class="number">-1</span>, </div><div class="line">                            <span class="attr">"index"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"sa_id_name"</span>: <span class="literal">null</span>, </div><div class="line">                            <span class="attr">"top"</span>: <span class="number">38</span>, </div><div class="line">                            <span class="attr">"left"</span>: <span class="number">42</span>, </div><div class="line">                            <span class="attr">"width"</span>: <span class="number">553</span>, </div><div class="line">                            <span class="attr">"height"</span>: <span class="number">71</span>, </div><div class="line">                            <span class="attr">"scrollX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"scrollY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"visibility"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"classes"</span>: [</div><div class="line">                                <span class="string">"android.widget.TextView"</span>, </div><div class="line">                                <span class="string">"android.view.View"</span></div><div class="line">                            ], </div><div class="line">                            <span class="attr">"subviews"</span>: [ ]</div><div class="line">                        &#125;, </div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">"hashCode"</span>: <span class="number">64817783</span>, </div><div class="line">                            <span class="attr">"id"</span>: <span class="number">-1</span>, </div><div class="line">                            <span class="attr">"index"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"sa_id_name"</span>: <span class="literal">null</span>, </div><div class="line">                            <span class="attr">"top"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"left"</span>: <span class="number">1080</span>, </div><div class="line">                            <span class="attr">"width"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"height"</span>: <span class="number">147</span>, </div><div class="line">                            <span class="attr">"scrollX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"scrollY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"visibility"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"classes"</span>: [</div><div class="line">                                <span class="string">"android.widget.ActionMenuView"</span>, </div><div class="line">                                <span class="string">"android.widget.LinearLayout"</span>, </div><div class="line">                                <span class="string">"android.view.ViewGroup"</span>, </div><div class="line">                                <span class="string">"android.view.View"</span></div><div class="line">                            ], </div><div class="line">                            <span class="attr">"subviews"</span>: [ ]</div><div class="line">                        &#125;, </div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">"hashCode"</span>: <span class="number">161393113</span>, </div><div class="line">                            <span class="attr">"id"</span>: <span class="number">16908673</span>, </div><div class="line">                            <span class="attr">"index"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"sa_id_name"</span>: <span class="literal">null</span>, </div><div class="line">                            <span class="attr">"top"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"left"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"width"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"height"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"scrollX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"scrollY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"visibility"</span>: <span class="number">8</span>, </div><div class="line">                            <span class="attr">"translationX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"classes"</span>: [</div><div class="line">                                <span class="string">"com.android.internal.widget.ActionBarContextView"</span>, </div><div class="line">                                <span class="string">"com.android.internal.widget.AbsActionBarView"</span>, </div><div class="line">                                <span class="string">"android.view.ViewGroup"</span>, </div><div class="line">                                <span class="string">"android.view.View"</span></div><div class="line">                            ], </div><div class="line">                            <span class="attr">"subviews"</span>: [ ]</div><div class="line">                        &#125;, </div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">"hashCode"</span>: <span class="number">150453242</span>, </div><div class="line">                            <span class="attr">"id"</span>: <span class="number">16908335</span>, </div><div class="line">                            <span class="attr">"index"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"sa_id_name"</span>: <span class="string">"android:statusBarBackground"</span>, </div><div class="line">                            <span class="attr">"top"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"left"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"width"</span>: <span class="number">1080</span>, </div><div class="line">                            <span class="attr">"height"</span>: <span class="number">63</span>, </div><div class="line">                            <span class="attr">"scrollX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"scrollY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"visibility"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationX"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"translationY"</span>: <span class="number">0</span>, </div><div class="line">                            <span class="attr">"classes"</span>: [</div><div class="line">                                <span class="string">"android.view.View"</span></div><div class="line">                            ], </div><div class="line">                            <span class="attr">"subviews"</span>: [ ]</div><div class="line">                        &#125;</div><div class="line">                    ]</div><div class="line">                &#125;, </div><div class="line">                <span class="attr">"image_hash"</span>: <span class="string">"785C4DC3B01B4AFA56BA0E3A56CE8657"</span>, </div><div class="line">                <span class="attr">"screenshot"</span>: <span class="string">""</span></div><div class="line">            &#125;</div><div class="line">        ], </div><div class="line">        <span class="attr">"snapshot_time_millis"</span>: <span class="number">403</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后面的<code>screenshot</code>就是手机的截图，以base64编码。</p><blockquote><p><strong>为了简化分析，在上面的数据里面没有体现View的一些属性，例如Button上显示的text文字，实际上在遍历ViewTree里面每一个View的同时也会上报这个信息，因为我们的Activity和里面View大部分情况下都会是复用的，一个购物的Activity界面，里面的按钮可以显示不同的文字，我们需要统计不同商品的点击次数，就必须要知道按钮上显示的文字是什么。</strong></p></blockquote><p>对于View来讲，关键信息有这些：</p><ul><li>activity：Activity类名</li><li>hashcode：view的hashcode</li><li>id：在Apk中的id</li><li>index：在父控件中的同类元素的顺序，如果是根View，那么为-1，如果父View没有多个同类型的子View，那么为0（例如LinearLayout中只有一个Button）</li><li>sa_id_name：在Apk中的控件的id的字符串名称，例如android:id=”@+id/button2”，结果就是<code>button2</code></li><li>top：距离屏幕上边距</li><li>left：距离屏幕的左边距</li><li>width：宽</li><li>height：高</li><li>classes：View自身以及所有的父类类名，是一个数组，这里决定了一个View到底可以有哪些交互，比如点击、长按等</li><li>subviews：子View的hashcode，是一个数组</li></ul><h4 id="4-2-1-3-保存待监测的元素的关键信息"><a href="#4-2-1-3-保存待监测的元素的关键信息" class="headerlink" title="4.2.1.3 保存待监测的元素的关键信息"></a>4.2.1.3 保存待监测的元素的关键信息</h4><p>将上面收集到数据发送到连接的WebSocket后台，由后台解析之后，可以把App界面的截图展示在Web页面。然后把可以监测的元素以方框的形式添加在界面上提示用户（web页面实现时，我推测只需要用到这个View的left、top、width、height属性在html上加一个div标签，然后设置一个有颜色的border属性即可）。用户可以在这个Web页面点击需要监测的元素，设置这个元素的事件名称（event_type和event_name），点击保存。保存一个需要监测的元素时，需要保存这个元素在当前Activity的ViewTree的路径<code>path</code>，以及这个View在父控件中的<code>index</code>，具体有下面几个信息：</p><ul><li>target_activity：View所在的Activity类名</li><li>event_type：事件类型，例如点击事件</li><li>event_name：事件名称</li><li>trigger_id：事件id</li><li>path：View在ViewTree中查找路径<ul><li>prefix：表示是否需要监测这个View的兄弟元素，当为<code>shortest</code>时，表示只匹配到索引为index那一个元素，否则匹配所有的父控件下面所有的同类子元素</li><li>view_class：view的类名</li><li>index：View在父控件中同类元素的下标索引，<strong>这个属性一定程序上可以对抗ViewTree的更新导致的元素监测失效问题，因为父控件加入一个不同类的元素时，index的值不会发生改变</strong></li><li>id：View在Apk中的id</li><li>sa_id_name：View在Apk中的id的字符串名称</li></ul></li></ul><h3 id="4-2-2-获取配置，查找View，监测View的行为后上报事件"><a href="#4-2-2-获取配置，查找View，监测View的行为后上报事件" class="headerlink" title="4.2.2 获取配置，查找View，监测View的行为后上报事件"></a>4.2.2 获取配置，查找View，监测View的行为后上报事件</h3><h4 id="4-2-2-1-获取配置，查找View"><a href="#4-2-2-1-获取配置，查找View" class="headerlink" title="4.2.2.1 获取配置，查找View"></a>4.2.2.1 获取配置，查找View</h4><p>SDK启动时，会从服务器拉取一份JSON格式的配置，保存到sharedPreference里，同时SDK会扫描<code>android.R</code>文件里面的资源id和资源的name并缓存起来。</p><p>SDK得到配置之后，解析成JSON对象，读取<code>event_bindings</code>字段，再进一步读取<code>events</code>字段，这个字段下面包含了一个数组，数组的每个元素都描述了一类事件，并包含了这类事件需要监测的元素所在的Activity和元素的路径。这份配置基本上是这样的一个结构：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">event_bindings: &#123;</div><div class="line">    events:[</div><div class="line">        &#123;</div><div class="line">            target_activity: ""</div><div class="line">            event_name: "",</div><div class="line">            event_type: "",</div><div class="line">            ...</div><div class="line">            path: [</div><div class="line">                &#123;</div><div class="line">                    prefix:</div><div class="line">                    view_class:</div><div class="line">                    index:</div><div class="line">                    id:</div><div class="line">                    sa_id_name:</div><div class="line">                &#125;, </div><div class="line">                &#123;</div><div class="line">                    ...</div><div class="line">                &#125;</div><div class="line">                ...</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>收到了这份配置之后，SDK会把根据每个event信息，生成一个<code>ViewVisitor</code>。<code>ViewVisitor</code>的作用就是把<code>path</code>数组里面指向的所有View元素都找到，并且根据event_type，<strong>给这个View设置相应的行为监测器</strong>，当这个View发生指定行为时，监测器就会监测到，并上报行为。</p><p>在生成ViewVisitor之后，SDK内部是以<code>Map&lt;activity, ViewVisitor&gt;</code>结构保存它们的，这也比较容易理解，毕竟我们的界面是随着一个一个的Activity被create，onResume之后才被用户看见的嘛。在ViewVisitor对象中还有一个<code>PathFinder</code>对象，这个对象负责在ViewTree中根据path去查找View（这里其实是在一个tree里面查找node的问题）。</p><h4 id="4-2-2-2-监测View的行为，上报事件"><a href="#4-2-2-2-监测View的行为，上报事件" class="headerlink" title="4.2.2.2 监测View的行为，上报事件"></a>4.2.2.2 监测View的行为，上报事件</h4><p><code>ViewVisitor</code>是怎么给View设置监听器，监测元素的产生的行为呢？<strong>答案就是<code>View.AccessibilityDelegate</code>。</strong></p><p>在Android SDK里面，AccessibilityService（无障碍服务）为我们提供了一系列的事件回调，帮助我们指示一些用户界面的状态变化。我们可以派生辅助功能类，进而对不同的AccessibilityEvent进行处理，我们看下AccessibilityEvent里面有哪些事件类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Represents the event of clicking on a &#123;<span class="doctag">@link</span> android.view.View&#125; like</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.widget.Button&#125;, &#123;<span class="doctag">@link</span> android.widget.CompoundButton&#125;, etc.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_VIEW_CLICKED = <span class="number">0x00000001</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Represents the event of long clicking on a &#123;<span class="doctag">@link</span> android.view.View&#125; like</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.widget.Button&#125;, &#123;<span class="doctag">@link</span> android.widget.CompoundButton&#125;, etc.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_VIEW_LONG_CLICKED = <span class="number">0x00000002</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Represents the event of selecting an item usually in the context of an</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.widget.AdapterView&#125;.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_VIEW_SELECTED = <span class="number">0x00000004</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Represents the event of setting input focus of a &#123;<span class="doctag">@link</span> android.view.View&#125;.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_VIEW_FOCUSED = <span class="number">0x00000008</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Represents the event of changing the text of an &#123;<span class="doctag">@link</span> android.widget.EditText&#125;.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_VIEW_TEXT_CHANGED = <span class="number">0x00000010</span>;</div><div class="line">...</div></pre></td></tr></table></figure><p><strong>以点击事件<code>TYPE_VIEW_CLICKED</code>为例</strong>，当Activity界面的RootView开始绘制的时候（ViewTreeObserver.OnGlobalLayoutListener的onGlobalLayout回调时），ViewVisitor也会开始寻找指定的View，并给这个View设置新的AccessibilityDelegate。简单看一下这个新的View.AccessibilityDelegate是怎么写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TrackingAccessibilityDelegate</span> <span class="keyword">extends</span> <span class="title">View</span>.<span class="title">AccessibilityDelegate</span> </span>&#123;</div><div class="line">...</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="title">TrackingAccessibilityDelegate</span><span class="params">(View.AccessibilityDelegate realDelegate)</span> </span>&#123;</div><div class="line">                mRealDelegate = realDelegate;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">public</span> View.<span class="function">AccessibilityDelegate <span class="title">getRealDelegate</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> mRealDelegate;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            ...</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAccessibilityEvent</span><span class="params">(View host, <span class="keyword">int</span> eventType)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (eventType == mEventType) &#123;</div><div class="line">                    fireEvent(host); <span class="comment">// 事件上报</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != mRealDelegate) &#123;</div><div class="line">                    mRealDelegate.sendAccessibilityEvent(host, eventType);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">private</span> View.AccessibilityDelegate mRealDelegate;</div><div class="line">        &#125;</div><div class="line">        ...</div></pre></td></tr></table></figure><p>可以看到在SDK的<code>TrackingAccessibilityDelegate#sendAccessibilityEvent</code>方法里面，发出了事件上报。</p><p>这么说View的点击处理方法中应该要调用<code>sendAccessibilityEvent</code>才行，那么View在点击方法的内部实现里有调用<code>sendAccessibilityEvent</code>方法吗？看一下View处理点击事件 - <code>View.performClick</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> result;</div><div class="line">    <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</div><div class="line">    <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">        playSoundEffect(SoundEffectConstants.CLICK);</div><div class="line">        li.mOnClickListener.onClick(<span class="keyword">this</span>);</div><div class="line">        result = <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        result = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAccessibilityEvent</span><span class="params">(<span class="keyword">int</span> eventType)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mAccessibilityDelegate != <span class="keyword">null</span>) &#123;</div><div class="line">        mAccessibilityDelegate.sendAccessibilityEvent(<span class="keyword">this</span>, eventType);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        sendAccessibilityEventInternal(eventType);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccessibilityDelegate</span><span class="params">(@Nullable AccessibilityDelegate delegate)</span> </span>&#123;</div><div class="line">    mAccessibilityDelegate = delegate;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由此可见View的点击处理内部确实调用到了<code>sendAccessibilityEvent</code>，所以在RootView开始绘制的时候，给View注册AccessibilityDelegate可以监测到它的点击事件。可视化埋点这里对View的事件监测也是一种<strong>“动态Hook”</strong>的实现，不过没有采用第三章中介绍的反射获取OnClickListener的方案，而是采用了获取AccessibilityDelegate来实现，这种方式反射次数少一些，效率上会更好一些。</p><blockquote><p>在网上看到有网友提出，setAccessibilityDelegate来监测View的点击对大多数厂商的机型和版本都是可以的，但是有部分机型是无法成功捕获监控到点击事件。从View的标识生成，以及监测原理来讲，这个方案的稳定性存在一些疑问。</p></blockquote><h2 id="4-3-可视化埋点的难点和优化"><a href="#4-3-可视化埋点的难点和优化" class="headerlink" title="4.3 可视化埋点的难点和优化"></a>4.3 可视化埋点的难点和优化</h2><p>上面简单分析了Mixpanel和SensorsSDK可视化埋点的基本实现，里面最重要有一个技术点值得仔细琢磨，那就是<strong>如何唯一标识App中的一个View？由于View是长在ViewTree上的一个节点，那么用纵向的路径，以及横向的下标应该可以标识一个View。</strong></p><ul><li>纵向的路径：是指从根View到这个View的父控件的路径上经过的每一个节点</li><li>横向的下标：是指这个View在父控件中的同类元素的下标索引（例如一个LinearLayout中有两个Button，那么第一个Button的下标就是0，第二个Button的下标就是1，这种方式可以抵抗父控件中加入一个非Button类型的元素时对ViewTree的改变，保证仍然可以找到Button，但是无法抵抗父控件中加入同类型的元素）</li></ul><p>上面仅仅提到了标识一个View的基本方法，但是有很多实际场景，会对View的查找造成毁灭性的影响，例如界面中Fragment的变化，ViewTree的变化，ListView中控件的复用等等，这里有两篇网易的博客，里面对一些场景的优化做了详细地说明，可以仔细看看：</p><ul><li><a href="http://www.infoq.com/cn/presentations/netease-happy-to-no-burial-point-data-collection-practice-road" target="_blank" rel="external">http://www.infoq.com/cn/presentations/netease-happy-to-no-burial-point-data-collection-practice-road</a></li><li><a href="http://www.jianshu.com/p/b5ffe845fe2d" target="_blank" rel="external">http://www.jianshu.com/p/b5ffe845fe2d</a></li></ul><h2 id="4-4-可视化埋点参考资料"><a href="#4-4-可视化埋点参考资料" class="headerlink" title="4.4 可视化埋点参考资料"></a>4.4 可视化埋点参考资料</h2><ul><li>sensorsdata git，包含了Android、iOS、js、JAVA等多个版本的SDK：<a href="https://github.com/sensorsdata" target="_blank" rel="external">https://github.com/sensorsdata</a></li><li>Mixpanel git，包含了Android、iOS、js、JAVA等多个版本的SDK：<a href="https://github.com/mixpanel" target="_blank" rel="external">https://github.com/mixpanel</a></li><li>网易移动端数据收集和分析博客：<a href="http://www.jianshu.com/c/ee326e36f556" target="_blank" rel="external">http://www.jianshu.com/c/ee326e36f556</a></li><li>美团点评前端无痕埋点实践：<a href="https://tech.meituan.com/mt-mobile-analytics-practice.html" target="_blank" rel="external">https://tech.meituan.com/mt-mobile-analytics-practice.html</a></li></ul><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>最后简单总结一下几种方案的优缺点和使用场景，在实际应用中多种方式配合使用，平衡效率和可靠性，适合自己的业务才是最好的。</p><table><thead><tr><th style="text-align:center">埋点方案</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th><th style="text-align:left">适用场景</th></tr></thead><tbody><tr><td style="text-align:center">代码埋点</td><td style="text-align:left">1.使用灵活，精确控制发送时机 <br> 2.方便设置自定义业务相关的属性</td><td style="text-align:left">1.埋点成本高，工作量大，必须是技术人员才能完成 <br> 2.更新成本高，一旦上线很难修改。只能通过热修复或者重新发版 <br> 3.对业务代码的侵入大</td><td style="text-align:left">对业务上下文理解要求较高的业务数据，如电商购物这类可能经过多次页面跳转，埋点时还需要带上前面页面中的一些信息</td></tr><tr><td style="text-align:center">全埋点</td><td style="text-align:left">1.开发、维护成本低 <br> 2.可以追溯历史数据 <br> 3.对业务代码侵入小 <br> 4.可以收集到一些额外信息，例如界面的热力图</td><td style="text-align:left">1.高额流量和计算成本 <br> 2.无法灵活收集属性 <br> 3.动态的Hook方式支持的控件有限、事件类型有限，大量事件监测时反射对App运行性能有影响 <br> 4.静态的Hook方式需要第三方编译器参与，打包时间增长</td><td style="text-align:left">上下文相对独立的、通用的数据，如点击热力图，性能监控和日志</td></tr><tr><td style="text-align:center">可视化埋点</td><td style="text-align:left">1.开发、维护成本低 <br> 2.可以按需埋点，灵活性好 <br> 3.对业务代码侵入小</td><td style="text-align:left">1.界面的结构发生变化时，圈选的待监测元素可能会失效 <br> 2.支持的控件和事件类型有限 <br> 3.无法灵活地收集到上下文属性</td><td style="text-align:left">上下文相对简单，依靠控件可以获得上下文信息，界面结构比较简单固定，如新闻阅读、游戏分享界面</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、概念&quot;&gt;&lt;a href=&quot;#一、概念&quot; class=&quot;headerlink&quot; title=&quot;一、概念&quot;&gt;&lt;/a&gt;一、概念&lt;/h1&gt;&lt;p&gt;埋点，是对网站、App或者后台等应用程序进行数据采集的一种方法。通过埋点，可以收集用户在应用中的产生行为，进而用于分析和优化产品后续的体验，也可以为产品的运营提供数据支撑，其中常见的指标有PV、UV、页面时长和按钮的点击等，通常可以采集到下面这些数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行为数据：时间、地点、人物、交互的内容等&lt;/li&gt;
&lt;li&gt;质量数据：App运行情况、浏览器加载情况、错误异常等&lt;/li&gt;
&lt;li&gt;环境数据：手机型号、操作系统版本、浏览器UA、地理、运营商、网络环境等&lt;/li&gt;
&lt;li&gt;运营数据：PV、UV、点击量、日活、留存、渠道来源等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;采集行为数据时，通常需要在Web页面/App里面添加一些代码，当用户的行为达到某种条件时，就会向服务器上报用户的行为。其实添加这些代码的过程就可以叫做“埋点”，在很久以前就已经出现了这种技术。随着技术的发展和大家对数据采集要求的不断提高，我认为埋点的技术方案走过了下面几个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码埋点：代码埋点是指在某个事件发生时调用数据发送接口上报数据。&lt;/strong&gt;例如开发人员按照产品/运营的需求，在Web页面/App的源码里面添加行为上报的代码，当用户的行为满足某一个条件时，这些代码就会被执行，向服务器上报行为数据。这种方案是最基础的方案，每次增加或者修改数据上报的条件，都需要开发人员的参与，并且只能在下一个版本上线后才能看到效果。基本上所有的数据平台都提供了这类数据上报的SDK，将行为上报的后台服务器接口封装成了简单的客户端SDK接口。开发者可以通过嵌入这类SDK，在埋点的地方调用少量的代码就可以上报行为数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;全埋点：全埋点指的是将Web页面/App内产生的所有的、满足某个条件的行为，全部上报到后台服务器。&lt;/strong&gt;例如把一个App中所有的按钮点击都进行上报，然后由产品/运营去后台筛选所需要的行为数据。这种方案的优点非常明显，就是可以不用在新增/修改行为上报条件时，再找开发人员去修改埋点的代码。然而它的缺点也和优点一样明显，那就是上报的数据量比代码埋点大很多，里面可能很多是没有价值的数据。此外，这种方案更倾向于独立去看待用户的行为，而没有关注行为的上下文，给数据分析带来了一些难度。很多公司也提供了这类功能的SDK，通过静态或者动态的方式，&lt;strong&gt;“Hook”了原有的App代码&lt;/strong&gt;，从而实现了行为的监测，在数据上报时通常是采用累积多条再上报的方案来合并请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;可视化埋点：可视化埋点是指通过可视化工具配置采集节点，在App/Web解析配置查找节点，监听节点产生的事件并上报。&lt;/strong&gt;例如产品在Web页面/App的界面上进行圈选，配置需要监测界面上哪一个元素，然后保存这个配置，当App启动时会从后台服务器获得产品/运营预先圈选好的配置，然后根据这份配置查找并监测App界面上的元素，当某一个元素满足条件时，就会上报行为数据到后台服务器。有了暴力的全埋点技术方案，很容易联想到按需埋点，可视化埋点就是一种按需配置埋点的方案。现在也有一些公司提供了这类SDK，圈选监测元素时，有的是提供一个Web管理界面，手机在安装并初始化了SDK之后，可以和管理界面了连接，让用户在Web管理界面上配置需要监测的元素，有的是直接让用户在手机上圈选元素进行埋点。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;hook直译是钩子的意思，以前学信息安全的时候在windows上听到过，大体意思是通过某种手段去改变系统API的一个行为，绕过系统的某个方法，或者改变系统的工作流程。在这里其实是指把本来要执行某个方法的对象替换成另一个，一般用的是反射或者代理，需要找到hook的代码位置，甚至还可以在编译阶段实现替换。全埋点和可视化埋点都需要Hook掉App原本的代码实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;业界有多家SDK都支持上面介绍的3种埋点方案中的一种或者全部，例如Mixpanel、Sensorsdata、TalkingData、GrowingIO、诸葛IO、Heap Analytics、MTA、Umeng Analytics、百度，只是大家对后两种埋点的称呼不完全相同，有的叫无埋点或者codeless埋点。由于&lt;a href=&quot;https://github.com/mixpanel/mixpanel-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mixpanel&lt;/a&gt;（支持代码埋点、可视化埋点）和&lt;a href=&quot;https://github.com/sensorsdata/sa-sdk-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sensorsdata&lt;/a&gt;（全部支持）都开源了自己的全部SDK，技术方案也比较类似，下面以它们的Android SDK为例，简单分析一下3种埋点方案的技术实现。关于JS的SDK技术实现，可以看下我的另一篇博客-&lt;a href=&quot;http://unclechen.github.io/2017/12/24/JS%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/&quot;&gt;JS埋点SDK技术分析&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="SDK" scheme="http://unclechen.github.io/tags/SDK/"/>
    
      <category term="埋点" scheme="http://unclechen.github.io/tags/%E5%9F%8B%E7%82%B9/"/>
    
      <category term="无埋点" scheme="http://unclechen.github.io/tags/%E6%97%A0%E5%9F%8B%E7%82%B9/"/>
    
      <category term="可视化埋点" scheme="http://unclechen.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%8B%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Android混合开发之——WebView中使用原生组件替换标签元素</title>
    <link href="http://unclechen.github.io/2017/10/15/Android%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E4%B9%8BWebView%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9F%E7%BB%84%E4%BB%B6%E6%9B%BF%E6%8D%A2%E6%A0%87%E7%AD%BE%E5%85%83%E7%B4%A0/"/>
    <id>http://unclechen.github.io/2017/10/15/Android混合开发之WebView中使用原生组件替换标签元素/</id>
    <published>2017-10-15T00:00:00.000Z</published>
    <updated>2018-05-20T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>在Android混合开发中，常常会把界面渲染全部交给html，而后台数据相关的处理交给Native。然而在有些时候html无法完全满足我们在界面处理上的要求，比如像要有一个自己定制的软键盘或者在html里面播放视频，或者想要把html里面的图片替换成Native中统一封装的ImageView等等。这不，跟WebView打交道这么多年，我最近还真遇到这样的需要了，希望把html中展示的一个大图换成Native实现的播放器，这个播放器是自己封装过的，播放控制的界面和交互也全部都由Native实现。拍脑袋一想，这有点困难啊？html里面的标签怎么替换成Native组件呢？这不可能啊？难道要实现一套把html全部转成Native的框架？这岂不是得自己做一套ReactNative？</p><a id="more"></a><p>你别说我还真在万能的Github上找到一个叫<a href="https://github.com/hsllany/HtmlNative" target="_blank" rel="external">HtmlNative</a>的库，这货就真的实现了把一部分css+html转成Native，看了下它的demo，效果其实不错。但是对于我来讲还有点偏重了，因为如果一旦我们开始转换css，那么到底对css支持到一个什么样的程度呢？这种无法走到尽头的大难路，我不想走。于是我又开始看微信小程序，发现小程序大部分的组件还是WebView渲染的dom，只有几个组件入输入框，视频播放器是原生的，并且我很惊讶地发现它就是把原生组件“嵌入”到了WebView中！！！看到这里我觉得如果是把html里面的某些指定的元素替换成Native组件，是可行的，这时我开始想办法了。从界面绘制的角度，界面由一个个的View组成，每个View都应该由坐标和尺寸来描述，从而可以被摆放到正确的位置上。举个最简单的例子，我们知道ViewGroup里面的onLayout方法，当我们实现一个ViewGroup的时候，需要在onLayout方法中调用每一个子View的layout方法，并给这个方法传入left、top、right、bottom参数，这几个参数表示这个View距离父控件的左、上、右、下距离。<strong>如果我可以把html中需要替换的元素，相对WebView控件的left、top、right、bottom参数获取，并通过js传给Native，Native再把一个原生组件盖在WebView的位置上，是不是就可以实现“原声组件嵌入WebView里？”</strong></p><h1 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h1><p>这里我们就以一个简单场景来做示例，比如有一个组件是包装WebView实现的，转门用于加载html格式的广告。现在需要把这个WebView里面<strong>img标签变成一个ImageView</strong>，思路如下：</p><ul><li>1.把WebView放到一个FrameLayout里面，使用WebView加载这个html，让其中的元素都被加载、渲染完成，这时img标签的位置和尺寸才可以确定。</li><li>2.自定义WebViewClient，监听onPageFinished回调，当回调发生时，执行一段js，去获取指定的img标签的left、top、width、height属性，然后传给Native</li><li>3.Native接收到之后，把ImageView添加到第一步中的FrameLayout里面。</li></ul><h1 id="三、具体实现方案"><a href="#三、具体实现方案" class="headerlink" title="三、具体实现方案"></a>三、具体实现方案</h1><h2 id="1-准备html"><a href="#1-准备html" class="headerlink" title="1.准备html"></a>1.准备html</h2><p>html中一定要能清楚的获取到需要替换的img标签，例如我们可以给这个img标签加上特定的id，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.container</span>&#123; <span class="attribute">margin</span>:<span class="number">0</span> auto; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">overflow</span>:hidden&#125; </span></div><div class="line"><span class="css"><span class="selector-class">.container</span> <span class="selector-tag">img</span>&#123; <span class="attribute">float</span>:left; <span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">100px</span>&#125; </span></div><div class="line"><span class="css"><span class="selector-class">.container</span> <span class="selector-class">.right</span>&#123; <span class="attribute">float</span>:right; <span class="attribute">width</span>:<span class="number">180px</span>; <span class="attribute">text-align</span>:left&#125; </span></div><div class="line"><span class="css"><span class="selector-class">.container</span> <span class="selector-class">.right</span> <span class="selector-tag">h3</span>&#123; <span class="attribute">height</span>:<span class="number">20px</span>; <span class="attribute">line-height</span>:<span class="number">20px</span>; <span class="attribute">font-family</span>:<span class="string">"Microsoft YaHei"</span>; <span class="attribute">font-size</span>:<span class="number">16px</span>; <span class="attribute">overflow</span>:hidden;&#125; </span></div><div class="line"><span class="css"><span class="selector-class">.container</span> <span class="selector-class">.right</span> <span class="selector-tag">div</span>&#123; <span class="attribute">padding-top</span>:<span class="number">0px</span>; <span class="attribute">height</span>:<span class="number">50px</span>; <span class="attribute">overflow</span>:hidden&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"imageHolder"</span> <span class="attr">src</span>=<span class="string">"./img.jpeg"</span>/&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是一个标题好吗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>无论事态变迁，你总有一颗人仰马翻的少年心<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>这段html里面的有两个需要注意的地方：</p><ul><li>需要替换的html标签img，我们给它加上了一个id叫“imageHolder”，后面我们需要通过js获取这个标签。</li><li>viewport里面把device-width设为设备的宽度，这样我们获取到的图片位置和宽高都是dp为单位。</li></ul><h1 id="2-准备好获取img标签left、top、width、height属性的js方法，提供给Native调用"><a href="#2-准备好获取img标签left、top、width、height属性的js方法，提供给Native调用" class="headerlink" title="2.准备好获取img标签left、top、width、height属性的js方法，提供给Native调用"></a>2.准备好获取img标签left、top、width、height属性的js方法，提供给Native调用</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="keyword">var</span> jsFun = &#123;</span></div><div class="line"><span class="actionscript">  <span class="comment">// 测量图片的大小和位置</span></span></div><div class="line"><span class="actionscript">  measureImagePlaceHolder: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"imageHolder"</span>);</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> left = img.getBoundingClientRect().left + img.scrollLeft;</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> top = img.getBoundingClientRect().top + img.scrollTop;</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> width = img.getBoundingClientRect().right - left;</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> height = img.getBoundingClientRect().bottom - top;</span></div><div class="line"><span class="undefined">    JavaFun.replaceImgWithImageView(left, top, width, height);</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>这段代码的功能就是获取img标签在网页中的绝对位置和大小，我是从阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html" target="_blank" rel="external">博客</a>学到的，把这段js加入到html的body最后即可。</p><p>这时其实已经可以用chrome打开这个页面，进入inspect界面，手动调用一下<code>measureImagePlaceHolder</code>方法已经可以看到效果了，如下图所示。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fkjcqk16dgj30rs082774.jpg" alt="chrome查看js"></p><h1 id="3-在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。"><a href="#3-在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。" class="headerlink" title="3.在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。"></a>3.在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。</h1><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    rootView = (FrameLayout) findViewById(R.id.root_view);</div><div class="line">    initView();</div><div class="line">    initWebView();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initWebView</span><span class="params">()</span> </span>&#123;</div><div class="line">    webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">    webView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">            view.loadUrl(<span class="string">"javascriprt:jsFun.measureImagePlaceHolder();"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">    webView = <span class="keyword">new</span> WebView(<span class="keyword">this</span>);</div><div class="line">    imageView = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">    FrameLayout.LayoutParams layoutParams = <span class="keyword">new</span> FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</div><div class="line">    rootView.addView(webView, layoutParams);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="4-Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法"><a href="#4-Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法" class="headerlink" title="4.Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法"></a>4.Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">JavaFun</span> &#123;</div><div class="line">    @JavascriptInterface</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceImgWithImageView</span>(<span class="params"><span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height</span>) </span>&#123;</div><div class="line">        final Context context = MainActivity.<span class="keyword">this</span>.getApplicationContext();</div><div class="line">        <span class="keyword">if</span> (imageView == <span class="literal">null</span>) &#123;</div><div class="line">            imageView = <span class="keyword">new</span> ImageView(MainActivity.<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">        final FrameLayout.LayoutParams <span class="keyword">params</span> = <span class="keyword">new</span> FrameLayout.LayoutParams(dp2px(context, width), dp2px(context, height));</div><div class="line">        <span class="keyword">params</span>.leftMargin = dp2px(context, left);</div><div class="line">        <span class="keyword">params</span>.topMargin = dp2px(context, top);</div><div class="line">        <span class="keyword">new</span> Handler(Looper.getMainLooper()).post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                rootView.addView(imageView, <span class="keyword">params</span>);</div><div class="line">                imageView.setBackgroundColor(Color.WHITE);</div><div class="line">                imageView.setImageDrawable(context.getResources().getDrawable(R.drawable.shepherd));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 此后还需要在initWebView方法添加一行。把一个名为JavaFun的对象注入js：webView.addJavascriptInterface(new JavaFun(), "JavaFun");</span></div><div class="line"><span class="comment">// 然后在js的measureImagePlaceHolder方法后面添加一行调用Java的代码：JavaFun.replaceImgWithImageView(left, top, width, height);</span></div></pre></td></tr></table></figure><p>关于Java和JS通信的方法，这里不做介绍，感兴趣的同学可以看看前面写过的博客。</p><p>我们看下两种模式下的效果，左边是html的img标签渲染图片的效果，右边是ImageView渲染图片的效果，为了明显对比，我用了两张不同的图片，打开了开发者模式的布局边界：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fkjcpehayoj30xc08kk08.jpg" alt="two mode"></p><p>怎么样，是不是还可以用来其他的Native组件来替换html标签啊？哈哈，我要用我们的视频组件去替换喽。上面这个小例子的代码在<a href="https://github.com/unclechen/ReplaceElementInHtml" target="_blank" rel="external">这里</a>，仅供大家参考，更复杂的例子还需要具体情况具体分析了。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>在界面开发的时候，不论是Android、iOS还是html，其实我们都是在处理布局，也就是说撇开各个平台上它们自己定义的一套标准，大部分时候，我们编写界面就是在处理界面上每一个元素在这个界面的位置和这个元素自身的大小。ReactNative类的框架干得事情就是帮开发者把html里面那套布局转换到Android和iOS各自的平台，站在现在看，可能会有人会争论html什么时候统一天下。但也许将来会出现一个新标准，在各个平台上都可以执行，而不是现阶段的哪个平台去取代哪个平台这么简单。前段时间看到过一个叫<a href="https://flutter.io/" target="_blank" rel="external">Flutter</a>的东西，好像就有点这个方向的意思，感兴趣的同学可以看看去。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;在Android混合开发中，常常会把界面渲染全部交给html，而后台数据相关的处理交给Native。然而在有些时候html无法完全满足我们在界面处理上的要求，比如像要有一个自己定制的软键盘或者在html里面播放视频，或者想要把html里面的图片替换成Native中统一封装的ImageView等等。这不，跟WebView打交道这么多年，我最近还真遇到这样的需要了，希望把html中展示的一个大图换成Native实现的播放器，这个播放器是自己封装过的，播放控制的界面和交互也全部都由Native实现。拍脑袋一想，这有点困难啊？html里面的标签怎么替换成Native组件呢？这不可能啊？难道要实现一套把html全部转成Native的框架？这岂不是得自己做一套ReactNative？&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="WebView" scheme="http://unclechen.github.io/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>使用React.js开发Chrome插件</title>
    <link href="http://unclechen.github.io/2017/06/16/%E4%BD%BF%E7%94%A8ReactJS%E5%BC%80%E5%8F%91Chrome%E6%8F%92%E4%BB%B6/"/>
    <id>http://unclechen.github.io/2017/06/16/使用ReactJS开发Chrome插件/</id>
    <published>2017-06-16T00:00:00.000Z</published>
    <updated>2018-05-20T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>相信看到这篇文章的人应该都用过Chrome插件吧，最近刚好有个这方面的需求，我就把Chrome插件的相关知识学习了一下，发现其实Chrome插件的开发和大前端Web开发的底子是一样的，无非就是runtime只限于Chrome浏览器，并且可以调用Chrome提供的一些<code>chrome.*</code> API来实现一些基于Chrome浏览器的小功能。这里非要类比的话，我理解<code>chrome.*</code> API就像我们开发Hybird应用一样，需要有一个bridge层来提供底层原生的能力给js。我是做Android开发出生的，这只是我的个人理解，可能对大Web技术的理解还是不够。</p><p>其实Chrome上的插件，从UI上主要分成两类：一类是浏览器按钮（<a href="https://crxdoc-zh.appspot.com/extensions/browserAction" target="_blank" rel="external">BrowserAction</a>），另一类是页面按钮（<a href="https://crxdoc-zh.appspot.com/extensions/pageAction" target="_blank" rel="external">PageAction</a>）。两者的开发大同小异，我这里今天主要介绍的主角不是Chrome插件开发，而是<strong>如何使用React.js来开发Chrome插件</strong>，本文先简单介绍下Chrome插件的开发和ReactJS，最后介绍如何采用Facebook官方推荐的creat-react-app脚手架来开发Chrome插件。</p><a id="more"></a><h1 id="二、Chrome插件开发基础知识"><a href="#二、Chrome插件开发基础知识" class="headerlink" title="二、Chrome插件开发基础知识"></a>二、Chrome插件开发基础知识</h1><p>下面是我看的几篇教程，简单看一下应该就可以算Chrome插件速成了：</p><ul><li><a href="https://crxdoc-zh.appspot.com/extensions/getstarted" target="_blank" rel="external">入门：建立 Chrome 扩展程序</a></li><li><a href="https://wizardforcel.gitbooks.io/chrome-doc/content/" target="_blank" rel="external">Chrome 扩展开发文档</a></li><li><a href="http://www.ituring.com.cn/book/miniarticle/60223" target="_blank" rel="external">Chrome扩展及应用开发</a></li></ul><p>简单来说，一个最基本Chrome插件应用需要有一个manifest.json清单文件，这个文件一般长这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line"></div><div class="line">  <span class="attr">"name"</span>: <span class="string">"One-click Kittens"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"This extension demonstrates a browser action with kittens."</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</div><div class="line"></div><div class="line">  <span class="attr">"permissions"</span>: [</div><div class="line">    <span class="string">"https://secure.flickr.com/"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"browser_action"</span>: &#123;</div><div class="line">    <span class="attr">"default_icon"</span>: <span class="string">"icon.png"</span>,</div><div class="line">    <span class="attr">"default_popup"</span>: <span class="string">"popup.html"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个文件里描述了插件应用的一些属性，如名称、版本、需要的权限、界面的对应的html文件名等等。额！！乍一看怎么和AndroidManifest.xml的<strong>功能</strong>这么像啊？是的大兄弟！！恭喜你对技术的理解已经融会贯通了！</p><p>根据manifest.json文件可以看到，一个Chrome插件最少得有：manifest.json文件，icon.png图标和popup.html文件。当然文件名可以随便改，只要和manifest.json里声明的一致就行。</p><p>这里就不浪费时间具体说怎么开发插件了，各路前端大牛比我强100倍。但我只强调一点，那就是popup.html中引用的js文件只能是外部引入，不能在popup.html文件里面写js代码。所以一般我们还有见到popup.js文件。另外如果你想知道自己使用的插件有什么秘密，完全可以去Chrome浏览器的安装目录下面把它们给扒出来。。</p><h1 id="三、React-JS基础知识"><a href="#三、React-JS基础知识" class="headerlink" title="三、React JS基础知识"></a>三、React JS基础知识</h1><p>React.js不需要多说了吧，从React这个词在技术界诞生起，就是一颗明星，连我这种死抱着Native技术的人都不得不去学习它。。</p><p>简单扯两句React JS的话题（React Native下次再说），作为一个Android App/SDK开发，我没有开发过太多传统意义上的Web页面，但是经过我学习了大概一周多的时间，我发现React JS开发Web页面的思路其实和客户端很像，不去用jQuery/Zepto啊操作DOM，而是关注数据本身，以数据驱动去改变界面。重构写好了静态html后，哪块地方需要变化，你就把哪里变成一个变量放到组件的State/Props里面（至于组件怎么切分，哪个数据放State，哪个放Prop不是今天要讨论的话题），然后就只用关注数据的变化，然后setState一下界面就可以刷新了。理解了这一点，就会发现其实开发Web页面很简单。比起操作DOM，一些模板引擎之类的东西，我认为React这个思想非常容易接受，写起来也很舒服，完全没有那种混乱的感觉，而且现在ReactJS生态圈非常大，诸如Redux这类的库使得ReactJS越发的犀利，很多公司早就用得飞起了。</p><p>扯得有点远了，ReactJS开发我推荐大家就看<a href="https://facebook.github.io/react/docs/hello-world.html" target="_blank" rel="external">Facebook官方的示例</a>就够了。英文不好的朋友可以看看<a href="http://www.ruanyifeng.com/blog/2015/03/react" target="_blank" rel="external">阮一峰老师的博客</a>，或者看看<a href="https://github.com/kdchang/reactjs101" target="_blank" rel="external">这篇入门教程</a>也是阔以的。</p><h1 id="四、应该用哪个脚手架？"><a href="#四、应该用哪个脚手架？" class="headerlink" title="四、应该用哪个脚手架？"></a>四、应该用哪个脚手架？</h1><p>当然是Facebook官方推荐的<a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">creat-react-app</a>。打开终端，依次输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install -g create-react-app</div><div class="line"></div><div class="line">create-react-app my-app</div><div class="line">cd my-app/</div></pre></td></tr></table></figure><p>然后就在<code>my-app</code>下面看到这些文件了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">my-app/</div><div class="line">  README.md</div><div class="line">  node_modules/</div><div class="line">  package.json</div><div class="line">  .gitignore</div><div class="line">  public/</div><div class="line">    favicon.ico</div><div class="line">    index.html</div><div class="line">    manifest.json</div><div class="line">  src/</div><div class="line">    App.css</div><div class="line">    App.js</div><div class="line">    App.test.js</div><div class="line">    index.css</div><div class="line">    index.js</div><div class="line">    logo.svg</div><div class="line">    registerServiceWorker.js</div></pre></td></tr></table></figure><p>到此为止，是一个标准的ReactJS编写WebApp的步骤，在终端输入<code>npm start</code>，就可以在浏览器中访问本地的localServer了。</p><h2 id="1-怎么让这个项目支持Chrome插件开发呢？"><a href="#1-怎么让这个项目支持Chrome插件开发呢？" class="headerlink" title="1.怎么让这个项目支持Chrome插件开发呢？"></a>1.怎么让这个项目支持Chrome插件开发呢？</h2><p>前面介绍了，Chrome插件最重要的文件就是manifest.json清单文件。我们先看下脚手架给我们默认生成的manifest.json长啥样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"short_name"</span>: <span class="string">"React App"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"Create React App Sample"</span>,</div><div class="line">  <span class="attr">"icons"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"src"</span>: <span class="string">"favicon.ico"</span>,</div><div class="line">      <span class="attr">"sizes"</span>: <span class="string">"192x192"</span>,</div><div class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"start_url"</span>: <span class="string">"./index.html"</span>,</div><div class="line">  <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</div><div class="line">  <span class="attr">"theme_color"</span>: <span class="string">"#000000"</span>,</div><div class="line">  <span class="attr">"background_color"</span>: <span class="string">"#ffffff"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于一个普通的WebApp来说，manifest.json文件在缓存、离线模式以及最新的PWA场景下会起作用，但是这里我们是要开发Chrome插件，那么把它原来的内容通通删掉，改成你的Chrome插件所需要的格式和内容就好了。例如可以改成这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"MyChromeExt"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"My first chrome extension."</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"icons"</span>: &#123;</div><div class="line"><span class="attr">"16"</span>: <span class="string">"img/icon-16.png"</span>,</div><div class="line"><span class="attr">"128"</span>: <span class="string">"img/icon-128.png"</span></div><div class="line">&#125;,</div><div class="line">  <span class="attr">"browser_action"</span>: &#123;</div><div class="line">    <span class="attr">"default_icon"</span>: &#123;</div><div class="line"><span class="attr">"19"</span>: <span class="string">"img/icon-19.png"</span>,</div><div class="line"><span class="attr">"38"</span>: <span class="string">"img/icon-38.png"</span></div><div class="line">&#125;,</div><div class="line">    <span class="attr">"default_title"</span>: <span class="string">"MyChromeExt"</span>,</div><div class="line">    <span class="attr">"default_popup"</span>: <span class="string">"index.html"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"permissions"</span>: [</div><div class="line">    <span class="string">"tabs"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"background"</span>: &#123;</div><div class="line">    <span class="attr">"scripts"</span>: [<span class="string">"background.js"</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里尽可能对脚手架的东西做最小的改动，把default_popup的文件名改成了<code>index.html</code>，因为脚手架默认会把js文件都打包到一个main.js文件中，并在index.html中插入这个main.js。</p><p>我们运行一下<code>npm run build</code>命令，就会发现生成了一个<code>my-app/build</code>目录，这个目录就是我们可以在<a href="chrome://extensions/" target="_blank" rel="external">chrome://extensions/</a>去加载的插件目录，当然也可以用Chrome把这个目录打包成一个crx插件。</p><p>使用creat-react-app脚手架开发Chrome插件的基本方法就是这样了，但是在实际中我们会遇到很多的问题，有时甚至会想要运行<a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#available-scripts" target="_blank" rel="external">npm run eject</a>，然后去完全自定义<code>webpack.config.js</code>来实现打包。</p><h2 id="2-background-js怎么打包？"><a href="#2-background-js怎么打包？" class="headerlink" title="2.background.js怎么打包？"></a>2.background.js怎么打包？</h2><p>我们在开发插件的时候，非常可能需要用到后台的background.js，原因如下：</p><blockquote><p>注意：不要在popup页面的js空间变量中保存数据。由于popup页面只在用户点击图标时才会开启，当用户关闭这个页面时就会停止，并没有一个从始至终的实例分配给popup页面。所以每当用户打开popup页面时，它都是崭新的，之前保存在变量中的数据都会消失。如果需要通过popup页面保存用户的数据，可以通过通信将数据交给后台页面（background页面）处理，或者通过localStorage和chrome.storage将数据保存在用户的硬盘上。</p></blockquote><p>所以background.js最后也是要进入到我们的发布文件夹下面的，这里建议还是要坚持<strong>最低程度地修改</strong>脚手架的设置，建议不要npm run eject之后来修改webpack的配置，因为实在是真的有点复杂。</p><p>这次修改下<code>package.json</code>文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"my-app"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"react-scripts"</span>: <span class="string">"1.0.7"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"react"</span>: <span class="string">"^15.6.1"</span>,</div><div class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^15.6.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"react-scripts start"</span>,</div><div class="line">    <span class="attr">"build"</span>: <span class="string">"react-scripts build"</span>,</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"react-scripts test --env=jsdom"</span>,</div><div class="line">    <span class="attr">"eject"</span>: <span class="string">"react-scripts eject"</span>,</div><div class="line">    <span class="attr">"build-chrome-ext"</span>: <span class="string">"react-scripts build &amp;&amp; cp src/background.js build/background.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到我们添加了一个命令<code>npm run build-chrome-ext</code>，并把background.js丢到了build目录下。如果你还有其他的js，我建议在<code>my-app/src</code>下建立一个<code>my-app/src/chrome</code>文件夹，专用于存在chrome相关其他js代码，然后在build的时候统一丢到build里面。如果要minify这些js，同样可以采用<code>&amp;&amp;</code>方式去添加命令。修改</p><h2 id="3-需要注意的细节"><a href="#3-需要注意的细节" class="headerlink" title="3.需要注意的细节"></a>3.需要注意的细节</h2><p>由于使用了一些<code>chrome.*</code> API，我们需要在编译js的时候将<code>chrome</code>这个全局对象声明一下。</p><p>creat-react-app这个脚手架在<strong>非eject模式</strong>下，没办法修改ESlint的配置来添加global对象，只能在用到了 <code>chrome.*</code> API的代码处添加 <code>// eslint-disable-line</code> 注释来实现保证编译通过。</p><p>如果你已经<code>npm run eject</code>了，在<strong>eject模式</strong>下，可以在<code>package.json</code>文件里配置ESLint：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">"eslintConfig"</span>: &#123;</div><div class="line"><span class="string">"extends"</span>: <span class="string">"react-app"</span>,</div><div class="line"><span class="string">"globals"</span>: &#123;</div><div class="line">  <span class="string">"chrome"</span>: true</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="五、其他脚手架推荐"><a href="#五、其他脚手架推荐" class="headerlink" title="五、其他脚手架推荐"></a>五、其他脚手架推荐</h1><p>除了自己改造Facebook推荐的<a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">creat-react-app</a>外，下面两个脚手架也算是用户比较多的，专门用于开发Chrome插件的脚手架。</p><ul><li><a href="https://github.com/jhen0409/react-chrome-extension-boilerplate" target="_blank" rel="external">https://github.com/jhen0409/react-chrome-extension-boilerplate</a>：默认支持ReactJS，基于webpack。</li><li><a href="https://github.com/yeoman/generator-chrome-extension" target="_blank" rel="external">https://github.com/yeoman/generator-chrome-extension</a>：没有默认支持ReactJS，需要自己修改，基于gulp打包。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;相信看到这篇文章的人应该都用过Chrome插件吧，最近刚好有个这方面的需求，我就把Chrome插件的相关知识学习了一下，发现其实Chrome插件的开发和大前端Web开发的底子是一样的，无非就是runtime只限于Chrome浏览器，并且可以调用Chrome提供的一些&lt;code&gt;chrome.*&lt;/code&gt; API来实现一些基于Chrome浏览器的小功能。这里非要类比的话，我理解&lt;code&gt;chrome.*&lt;/code&gt; API就像我们开发Hybird应用一样，需要有一个bridge层来提供底层原生的能力给js。我是做Android开发出生的，这只是我的个人理解，可能对大Web技术的理解还是不够。&lt;/p&gt;
&lt;p&gt;其实Chrome上的插件，从UI上主要分成两类：一类是浏览器按钮（&lt;a href=&quot;https://crxdoc-zh.appspot.com/extensions/browserAction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BrowserAction&lt;/a&gt;），另一类是页面按钮（&lt;a href=&quot;https://crxdoc-zh.appspot.com/extensions/pageAction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PageAction&lt;/a&gt;）。两者的开发大同小异，我这里今天主要介绍的主角不是Chrome插件开发，而是&lt;strong&gt;如何使用React.js来开发Chrome插件&lt;/strong&gt;，本文先简单介绍下Chrome插件的开发和ReactJS，最后介绍如何采用Facebook官方推荐的creat-react-app脚手架来开发Chrome插件。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React" scheme="http://unclechen.github.io/tags/React/"/>
    
      <category term="Chrome插件" scheme="http://unclechen.github.io/tags/Chrome%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Web" scheme="http://unclechen.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>WebView缓存原理分析和应用</title>
    <link href="http://unclechen.github.io/2017/05/13/WebView%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%92%8C%E5%BA%94%E7%94%A8/"/>
    <id>http://unclechen.github.io/2017/05/13/WebView缓存原理分析和应用/</id>
    <published>2017-05-13T00:00:00.000Z</published>
    <updated>2018-05-20T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>现在的App开发，或多或少都会用到Hybrid模式，到了WebView这边，经常会加载一些js文件（例如和WebView用来Native通信的bridge.js），而这些js文件不会经常发生变化，所以我们希望js在WebView里面加载一次之后，如果js没有发生变化，下次就不用再发起网络请求去加载，从而减少流量和资源的占用。那么有什么方式可以达到这个目的呢？先得从WebView的缓存原理入手。</p><h1 id="二、WebView的缓存类型"><a href="#二、WebView的缓存类型" class="headerlink" title="二、WebView的缓存类型"></a>二、WebView的缓存类型</h1><p>WebView主要包括两类缓存，<strong>一类是浏览器自带的网页数据缓存</strong>，这是所有的浏览器都支持的、由HTTP协议定义的缓存；<strong>另一类是H5缓存</strong>，这是由web页面的开发者设置的，H5缓存主要包括了App Cache、DOM Storage、Local Storage、Web SQL Database 存储机制等，这里我们主要介绍App Cache来缓存js文件。</p><a id="more"></a><h1 id="三、浏览器自带的网页数据缓存"><a href="#三、浏览器自带的网页数据缓存" class="headerlink" title="三、浏览器自带的网页数据缓存"></a>三、浏览器自带的网页数据缓存</h1><h2 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h2><p>浏览器缓存机制是通过HTTP协议Header里的Cache-Control（或Expires）和Last-Modified（或 Etag）等字段来控制文件缓存的机制。关于这几个字段的作用和浏览器的缓存更新机制，大家可以看看这两篇文章(<a href="http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=267" target="_blank" rel="external">H5 缓存机制浅析 移动端 Web 加载性能优化</a>，<a href="http://www.jianshu.com/p/5e7075f4875f" target="_blank" rel="external">Android：手把手教你构建 WebView 的缓存机制 &amp; 资源预加载方案</a>)，里面有详细的介绍。下面从我实际应用的角度，介绍一下通常会在HTTP协议中遇到的Header。</p><p>这两个字段是<strong>接收响应时，浏览器决定文件是否需要被缓存；或者需要加载文件时，浏览器决定是否需要发出请求</strong>的字段。</p><ul><li><p><strong>Cache-Control:max-age=315360000，</strong>这表示缓存时长为315360000秒。如果315360000秒内需要再次请求这个文件，那么浏览器不会发出请求，直接使用本地的缓存的文件。这是HTTP/1.1标准中的字段。</p></li><li><p><strong>Expires: Thu, 31 Dec 2037 23:55:55 GMT，</strong>这表示这个文件的过期时间是2037年12月31日晚上23点55分55秒，在这个时间之前浏览器都不会再次发出请求去获取这个文件。这是HTTP/1.0中的字段，如果客户端和服务器时间不同步会导致缓存出现问题，因此才有了上面的Cache-Control，当它们同时出现在HTTP Response的Header中时，Cache-Control优先级更高。 </p></li></ul><p>下面两个字段是<strong>发起请求时，服务器决定文件是否需要更新</strong>的字段。</p><ul><li><p><strong>Last-Modified:Wed, 28 Sep 2016 09:24:35 GMT，</strong>这表示这个文件最后的修改时间是2016年9月28日9点24分35秒。这个字段对于浏览器来说，会在下次请求的时候，作为Request Header的If-Modified-Since字段带上。例如浏览器缓存的文件已经超过了Cache-Control（或者Expires），那么需要加载这个文件时，就会发出请求，请求的Header有一个字段为<code>If-Modified-Since：Wed, 28 Sep 2016 09:24:35 GMT</code>，服务器接收到请求后，会把文件的Last-Modified时间和这个时间对比，如果时间没变，那么浏览器将返回<code>304 Not Modified</code>给浏览器，且content-length肯定是0个字节。如果时间有变化，那么服务器会返回<code>200 OK</code>，并返回相应的内容给浏览器。</p></li><li><p><strong>ETag:”57eb8c5c-129”，</strong>这是文件的特征串。功能同上面的Last-Modified是一样的。只是在浏览器下次请求时，ETag是作为Request Header中的<code>If-None-Match:&quot;57eb8c5c-129&quot;</code>字段传到服务器。服务器和最新的文件特征串对比，如果相同那么返回<code>304 Not Modified</code>，不同则返回<code>200 OK</code>。当ETag和Last-Modified同时出现时，任何一个字段只要生效了，就认为文件是没有更新的。</p></li></ul><h2 id="2-WebView如何设置才能支持上面的协议"><a href="#2-WebView如何设置才能支持上面的协议" class="headerlink" title="2.WebView如何设置才能支持上面的协议"></a>2.WebView如何设置才能支持上面的协议</h2><p>由上面的介绍可知，只要是个主流的、合格的浏览器，都应该能够支持HTTP协议层面的这几个字段。这不是我们开发者可以修改的，也不是我们应该修改的配置。在Android上，我们的WebView也支持这几个字段。但是我们可以通过代码去<strong>设置WebView的Cache Mode</strong>，而使得协议生效或者无效。WebView有下面几个Cache Mode：</p><ul><li>LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据。</li><li>LOAD_DEFAULT: 根据cache-control决定是否从网络上取数据。 </li><li>LOAD_CACHE_NORMAL: API level 17中已经废弃，从API level 11开始作用同LOAD_DEFAULT模式 </li><li>LOAD_NO_CACHE: 不使用缓存，只从网络获取数据。</li><li>LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。本地没有缓存时才从网络上获取。</li></ul><p>设置WebView缓存的Cache Mode示例代码如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WebSettings<span class="built_in"> settings </span>= webView.getSettings();</div><div class="line">settings.setCacheMode(WebSettings.LOAD_DEFAULT);</div></pre></td></tr></table></figure><p>网上很多人都说根据网络条件去选择Cache Mode，当有网络时，设置为LOAD_DEFAULT，当没有网络时设置为LOAD_CACHE_ELSE_NETWORK。但是在我的业务中，js文件的更新都是非覆盖式的更新，也就是时候每次改变js文件的时候，文件的url地址一定会发生变化，所以我希望浏览器能够缓存下来js，并且一直使用它，那么我就给它只设置为LOAD_CACHE_ELSE_NETWORK。当然如果你要是可以改js的cdn服务器的Cache-Control字段，那也行啊，用LOAD_DEFAULT就ok了。至于文件是应该采用覆盖式or非覆盖式的更新，不是我今天要讨论的内容，在web前端领域，这是一个可以聊聊的topic。</p><blockquote><p>关于iOS的WebView，我同事在实际测试的时候竟然发现，控制文件缓存的Response Header是Expires字段。。而且iOS无法针对整个WebView设置Cache Mode，只能针对每一个URLRequest去设置。。后续有机会要学习一下iOS那块的情况。</p></blockquote><h2 id="3-在手机里面的存储路径"><a href="#3-在手机里面的存储路径" class="headerlink" title="3.在手机里面的存储路径"></a>3.在手机里面的存储路径</h2><p>浏览器默认缓存下来的文件是怎么被存储到了哪里呢？这个问题在接触到WebView以来，就一直是一个谜题。这次由于工作的需要，我特意root了两台手机，一台红米1（Android 4.4）和一台小米4c（Android 5.1），在root高系统版本（6.0和7.1）的两台Nexus都以失败告终之后，我决定还是先看看4.4和5.1系统上，WebView自带的缓存存到了哪里。</p><p>首先，不用思考就知道，这些文件一定是在<strong>/data/data/包名/</strong>目录下，在我之前的一篇博客里面提到过，这是每一个应用自己的内部存储目录。</p><p>接着，我们打开终端，使用adb连接手机，然后按照下面命令操作一下。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.先进入shell</span></div><div class="line">adb shell</div><div class="line"><span class="comment">// 2.开启root账号 </span></div><div class="line">su</div><div class="line"><span class="comment">// 3.修改文件夹权限</span></div><div class="line">chmod <span class="number">777</span> <span class="keyword">data</span>/<span class="keyword">data</span>/你的应用包名/</div><div class="line"><span class="comment">// 4.修改子文件夹的权限，因为Android命令行不支持向Linux那样的-R命令实现递归式的chmod。。。</span></div><div class="line">chmod <span class="number">777</span> <span class="keyword">data</span>/<span class="keyword">data</span>/你的应用包名<span class="comment">/*</span></div><div class="line"><span class="comment">// 5.所以如果你对应用目录层级更深，你就要进一步地chmod。。。</span></div><div class="line"><span class="comment">chmod 777 data/data/你的应用包名/*/</span>*</div><div class="line"><span class="comment">// 6.直到终端里提示你说，no such file or directory时，说明chmod完了，所有的内部存储里面的文件夹和文件都可以看到了，如果大家有更好的方法请一定告诉我，多谢了~</span></div></pre></td></tr></table></figure><ul><li>Android 4.4的目录：<code>/data/data/包名/app_webview/cache/</code>，如下图所示的第二个文件夹。</li></ul><p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1ffjvarjyijj30jg05k0yr.jpg" alt="Android4.4系统WebView自带缓存路径"></p><p>可能你注意到了，第一个文件夹是叫Application Cache，我们后面再说它。</p><ul><li>Android 5.1的目录：<code>/data/data/包名/cache/org.chromium.android_webview/</code>下面，如下图所示。</li></ul><p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1ffjvztg93zj30jg0a247x.jpg" alt=""></p><p>但是在5.1系统上，<code>/data/data/包名/app_webview/</code>文件夹依然存在，只是4.4系统上面存储WebView自带缓存的<code>app_webview/cache</code>文件夹不再存在了（注意下App Cache目录还在），如下图所示。</p><p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1ffjw46ygoqj30jg06443v.jpg" alt="Android5.1系统WebView自带缓存路径"></p><p>综上所述，WebView自带的浏览器协议支持的缓存，在不同的系统版本上，位置是不一样的。也许除了我root过的4.4、5.1以外，其他版本系统的WebView自带缓存还可能存在于不同的目录里面。</p><p>另外一个是关于<strong>缓存文件的存储格式和索引格式</strong>，在不同的手机上可能也有差别，因为之前看到网上的人都说有叫<strong>webview.db</strong>或者<strong>webviewCache.db</strong>的文件，这个文件呢，还不是在<code>app_webview/cache</code>或者<code>org.chromium.android_webview</code>下面，而是在<code>/data/data/包名/database/</code>里面。但是，我这两台root过的手机都没有看到这种文件，而且我把<code>/data/data/包名/</code>下面所有的db文件都打开看了，并没有发现有存储url记录的table。。</p><p>实际上，以5.1系统为例，我看到了<code>/data/data/包名/cache/org.chromium.android_webview/</code>下面有叫<strong>index</strong>和<strong>/index-dir/the-real-index</strong>的文件，以及一堆名称为<strong>md5+下划线+数字</strong>的文件，上面的图中也可以看得到，这块的原理仍然有些疑问，也希望专业的大神可以解答一下。</p><h1 id="四、H5的缓存"><a href="#四、H5的缓存" class="headerlink" title="四、H5的缓存"></a>四、H5的缓存</h1><p>讲完了WebView自带的缓存，下面讲一下H5里面的App Cache。这个Cache是由开发Web页面的开发者控制的，而不是由Native去控制的，但是Native里面的WebView也需要我们做一下设置才能支持H5的这个特性。</p><h2 id="1-工作原理-1"><a href="#1-工作原理-1" class="headerlink" title="1.工作原理"></a>1.工作原理</h2><p>写Web页面代码时，指定manifest属性即可让页面使用App Cache。通常html页面代码会这么写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"xxx.appcache"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>xxx.appcache文件用的是相对路径，这时appcache文件的路径是和页面一样的。也可以使用的绝对路径，但是域名要保持和页面一致。</p><p>完整的xxx.appcache文件一般包括了3个section，基本格式如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CACHE MANIFEST</div><div class="line"><span class="meta"># 2017-05-13 v1.0.0</span></div><div class="line">/bridge.js</div><div class="line"> </div><div class="line"><span class="symbol">NETWORK:</span></div><div class="line">*</div><div class="line"> </div><div class="line"><span class="symbol">FALLBACK:</span></div><div class="line">/<span class="number">404.</span>html</div></pre></td></tr></table></figure><ul><li>CACHE MANIFEST下面文件就是要被浏览器缓存的文件</li><li>NETWORK下面的文件就是要被加载的文件</li><li>FALLBACK下面的文件是目标页面加载失败时的显示的页面</li></ul><p><strong>AppCache工作的原理：</strong>当一个设置了manifest文件的html页面被加载时，CACHE MANIFEST指定的文件就会被缓存到浏览器的App Cache目录下面。当下次加载这个页面时，会首先应用通过manifest已经缓存过的文件，然后发起一个加载xxx.appcache文件的请求到服务器，如果xxx.appcache文件没有被修改过，那么服务器会返回<code>304 Not Modified</code>给到浏览器，如果xxx.appcache文件被修改过，那么服务器会返回<code>200 OK</code>，并返回新的xxx.appcache文件的内容给浏览器，浏览器收到之后，再把新的xxx.appcache文件中指定的内容加载过来进行缓存。</p><p>可以看到，AppCache缓存需要在每次加载页面时都发出一个xxx.appcache的请求去检查manifest文件是不是有更新（byte by byte）。根据这篇文章（<a href="http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=267" target="_blank" rel="external">H5 缓存机制浅析 移动端 Web 加载性能优化</a>）的介绍，AppCache有一些坑的地方，且官方已经不推荐使用了，但目前主流的浏览器依然是支持的。文章里主要提到下面这些坑：</p><ul><li>要更新缓存的文件，需要更新包含它的 manifest 文件，那怕只加一个空格。常用的方法，是修改 manifest 文件注释中的版本号。如：# 2012-02-21 v1.0.0</li><li>被缓存的文件，浏览器是先使用，再通过检查 manifest 文件是否有更新来更新缓存文件。这样缓存文件可能用的不是最新的版本。</li><li>在更新缓存过程中，如果有一个文件更新失败，则整个更新会失败。</li><li>manifest 和引用它的HTML要在相同 HOST。</li><li>manifest 文件中的文件列表，如果是相对路径，则是相对 manifest 文件的相对路径。</li><li>manifest 也有可能更新出错，导致缓存文件更新失败。</li><li>没有缓存的资源在已经缓存的 HTML 中不能加载，即使有网络。例如：[url=]<a href="http://appcache-demo.s3-website-us-east-1.amazonaws.com/without-network/[/url" target="_blank" rel="external">http://appcache-demo.s3-website-us-east-1.amazonaws.com/without-network/[/url</a>]</li><li>manifest 文件本身不能被缓存，且 manifest 文件的更新使用的是浏览器缓存机制。所以 manifest 文件的 Cache-Control 缓存时间不能设置太长。</li></ul><h2 id="2-WebView如何设置才能支持AppCache"><a href="#2-WebView如何设置才能支持AppCache" class="headerlink" title="2.WebView如何设置才能支持AppCache"></a>2.WebView如何设置才能支持AppCache</h2><p>WebView默认是没有开启AppCache支持的，需要添加下面这几行代码来设置：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WebSettings webSettings = webView.getSettings<span class="params">()</span>;</div><div class="line">webSettings.<span class="keyword">set</span>AppCacheEnabled<span class="params">(true)</span>;</div><div class="line">String cachePath = getApplicationContext<span class="params">()</span><span class="string">.getCacheDir</span><span class="params">()</span><span class="string">.getPath</span><span class="params">()</span>; <span class="string">//</span> 把内部私有缓存目录'<span class="string">/data/data/</span>包名<span class="string">/cache/</span>'作为WebView的AppCache的存储路径</div><div class="line">webSettings.<span class="keyword">set</span>AppCachePath<span class="params">(cachePath)</span>;</div><div class="line">webSettings.<span class="keyword">set</span>AppCacheMaxSize<span class="params">(5 * 1024 * 1024)</span>;</div></pre></td></tr></table></figure><p>注意：WebSettings的setAppCacheEnabled和setAppCachePath都必须要调用才行。</p><h2 id="3-存储AppCache的路径"><a href="#3-存储AppCache的路径" class="headerlink" title="3.存储AppCache的路径"></a>3.存储AppCache的路径</h2><p>按照Android SDK的API说明，setAppCachePath是可以用来设置AppCache路径的，但是我实际测试发现，不管你怎么设置这个路径，设置到应用自己的内部私有目录还是外部SD卡，都无法生效。AppCache缓存文件最终都会存到<code>/data/data/包名/app_webview/cache/Application Cache</code>这个文件夹下面，在上面的Android 4.4和5.1系统目录截图可以看得到，<strong>但是如果你不调用setAppCachePath方法，WebView将不会产生这个目录</strong>。这里有点让我觉得奇怪，我猜测可能从某一个系统版本开始，为了缓存文件的完整性和安全性考虑，SDK实现的时候就吧AppCache缓存目录设置到了内部私有存储。</p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>WebView自带的缓存和AppCache都是可以用来做文件级别的缓存的，基本上比较好地满足对于非覆盖式的js、css等文件更新。</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ul><li>WebView自带的缓存是是协议层实现的（浏览器内核标准实现，开发者无法改变）；而AppCache是应用层实现的。</li><li>WebView的缓存目录在不同系统上可能是不同的；而对于AppCache而言，AppCache的存储路径虽然有方法设置，但是最终都存储到了一个固定的内部私有目录下。</li><li>WebView自带的缓存可以在缓存生效的时候不用再发HTTP请求；而AppCache一定会发出一个manifest文件的请求。</li><li>WebView自带的缓存可以通过设置CacheMode来改变WebView的缓存机制；而AppCache的缓存策略是由manifest文件控制的，也就是说是由web页面开发者控制的。</li></ul><p>最后说一下，其实很多时候，这两类缓存是共同在工作的，当manifest文件没有控制某些资源加载时，例如我上面写的xxx.appcache文件里，NETWORK section下面用的是*号，意思是所有不缓存的文件都要去网络加载。此时，这些资源就会走到WebView自带的缓存机制去，结合WebView的CacheMode，我们实际上对这些文件进行了一次WebView自带的缓存。搞清楚这两类缓存的原理有利于我们更好的设计自己的页面和App，尽可能减少网络请求，提高App运行效率。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;现在的App开发，或多或少都会用到Hybrid模式，到了WebView这边，经常会加载一些js文件（例如和WebView用来Native通信的bridge.js），而这些js文件不会经常发生变化，所以我们希望js在WebView里面加载一次之后，如果js没有发生变化，下次就不用再发起网络请求去加载，从而减少流量和资源的占用。那么有什么方式可以达到这个目的呢？先得从WebView的缓存原理入手。&lt;/p&gt;
&lt;h1 id=&quot;二、WebView的缓存类型&quot;&gt;&lt;a href=&quot;#二、WebView的缓存类型&quot; class=&quot;headerlink&quot; title=&quot;二、WebView的缓存类型&quot;&gt;&lt;/a&gt;二、WebView的缓存类型&lt;/h1&gt;&lt;p&gt;WebView主要包括两类缓存，&lt;strong&gt;一类是浏览器自带的网页数据缓存&lt;/strong&gt;，这是所有的浏览器都支持的、由HTTP协议定义的缓存；&lt;strong&gt;另一类是H5缓存&lt;/strong&gt;，这是由web页面的开发者设置的，H5缓存主要包括了App Cache、DOM Storage、Local Storage、Web SQL Database 存储机制等，这里我们主要介绍App Cache来缓存js文件。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="WebView" scheme="http://unclechen.github.io/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>python利用beautifulsoup+selenium自动翻页抓取网页内容</title>
    <link href="http://unclechen.github.io/2016/12/11/python%E5%88%A9%E7%94%A8beautifulsoup+selenium%E8%87%AA%E5%8A%A8%E7%BF%BB%E9%A1%B5%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9/"/>
    <id>http://unclechen.github.io/2016/12/11/python利用beautifulsoup+selenium自动翻页抓取网页内容/</id>
    <published>2016-12-11T00:00:00.000Z</published>
    <updated>2018-05-20T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>记录一次周末在家速成的爬虫实现之旅。受人之托，想要把这个页面<a href="http://baike.baidu.com/starrank?fr=lemmaxianhua" target="_blank" rel="external">http://baike.baidu.com/starrank?fr=lemmaxianhua</a>的明星排行榜爬取下来。用chrome打开一看，其实就1000条记录。然后“右键菜单”-&gt;“检查”，看下网页的结构，也不是特别复杂。所以我目测只要用<strong>python</strong>自带的<code>urllib2</code>库打开网页，获取html代码，再交给<code>BeautifulSoup</code>库解析html代码，应该就可以快速搞定。</p><a id="more"></a><p><img src="http://ww3.sinaimg.cn/large/006y8lVagw1famy31l1mvj30go0gjwh6.jpg" alt="webpage"></p><p>但仔细一看，<strong>点击下一页，网页的url没有任何变化</strong>，只是用js去加载了新的数据，然后动态地改变了table里面的数据。这可和本菜菜以前爬的页面可不一样，所以这次要想办法<strong>模拟翻页，然后重新读取新的html代码，再去解析</strong>。</p><p>实现翻页可以有两种办法，<strong>第一种是分析js的实现来模拟翻页。</strong>翻页操作实际上js向后台发出了请求，这里肯定是带着跳转的目的页码请求了后台，然后拿到新数据后重新渲染了html的表格部分。这种方法会更加高效，但难度也会更大一些。因为如果你已经能够模拟请求了，那其实相当于你连人家的服务器接口都已经知道了，那么进一步分析下响应就可以拿到结果了，这甚至不需要再去分析html代码了是不是？<strong>第二种比较简单暴力，也是我这里用的方法，那就是模拟点击网页中的下一页按钮，然后重新读取html代码来解析。</strong></p><h1 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h1><p>在前面已经说了，这里把思路流程化：</p><ul><li>1.打开网页</li><li>2.读取当前页面的html代码，解析列表里面的明星名字</li><li>3.<strong><em>模拟</em></strong>点击“下一页”</li><li>4.重复第2步的工作，直到页面里没有“下一页”的按钮</li></ul><p>在这里打开网页和读取网页的html代码，是通过<code>selenium</code>实现的；<br>解析html代码，是通过<code>beautifulsoup</code>实现的。</p><h1 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h1><h2 id="1-准备工作，安装依赖库"><a href="#1-准备工作，安装依赖库" class="headerlink" title="1.准备工作，安装依赖库"></a>1.准备工作，安装依赖库</h2><ul><li>安装beautifulsoup</li></ul><p>在下用的是mac，所以直接easy_install命令行安装。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sudo</span> easy_install beautifulsoup4</div></pre></td></tr></table></figure><ul><li>安装selenium</li></ul><p>还是用easy_install命令装。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sudo</span> easy_install selenium</div></pre></td></tr></table></figure><blockquote><p>这里selenium版本已经到了3.0.2，想要用这个版本的selenium去打开一个网页，需要用到对应的driver。于是下面我还需要安装一个driver。</p></blockquote><ul><li>安装chromedirver</li></ul><p>我这里用的是homebrew安装的chromediver，安装完成后<strong>大家记得找到chromediver的安装目录</strong>，我们在下面去写代码的时候会用到的。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>chromedirver</div></pre></td></tr></table></figure><blockquote><p>注意：mac下有很多软件管理包，除了我的安装方法，用<code>pip</code>之类的去安装，或者直接去官网下载安装程序，都是可以的。但是一定要安装上面的3个程序才行。这里我突然有个想法，要是python也有像gradle一样的构建管理工具多好，讲真，今天我安装这几个依赖的library花的时间比写代码还多呢。。</p></blockquote><h2 id="2-分析网页"><a href="#2-分析网页" class="headerlink" title="2.分析网页"></a>2.分析网页</h2><p>简单贴一段我要爬的网页的部分html代码，里面我用//写了点注释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tables-container"</span> <span class="attr">style</span>=<span class="string">"height: 1417px"</span>&gt;</span></div><div class="line">// 本周排行榜，这是我要抓的内容</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ranking-table cur"</span> <span class="attr">data-cat</span>=<span class="string">"thisWeek"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"padding-left: 30px; width: 101px"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://baike.bdimg.com/static/wiki-activity/starRanking/resource/img/trophy-blue_05c0f47.png"</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"padding-left: 115px; width: 226px"</span>&gt;</span>明星<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"padding-left: 50px; width: 175px"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://baike.bdimg.com/static/wiki-activity/starRanking/resource/img/flower-blue_31b8b3b.png"</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;鲜花数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"padding-left: 80px; width: 154px"</span>&gt;</span>TOP粉丝<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">class</span>=<span class="string">"list-container"</span>&gt;</span>                           </div><div class="line">             <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"star-index star-index-0"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                 // 这个td标签，star-name的css class是我要抓的内容</div><div class="line">                 <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"star-name"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/subview/3938672/10939278.htm"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://imgsa.baidu.com/baike/whcrop%3D100%2C100/sign=b5ae35ac11d8bc3ec65d5088edfb9b2f/8d5494eef01f3a29f4da55589125bc315c607c12.jpg"</span>&gt;</span>王俊凯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"star-score"</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">span</span>&gt;</span>1790892<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"star-score-sendFlower"</span> <span class="attr">data-lemmaid</span>=<span class="string">"75850"</span>&gt;</span>送花<span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"star-fans"</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span>183*****630<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>2<span class="tag">&lt;/<span class="name">i</span>&gt;</span>185*****759<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>3<span class="tag">&lt;/<span class="name">i</span>&gt;</span>wx526298988<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">             ...此处省略巨量代码...</div><div class="line">         <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">// 这里是本周排行榜分页的html代码，可以看到一页20个明星，共有50页</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ranking-pager wgt_horPager wgt_horPager_tpl_noEllipsis"</span> <span class="attr">nslog</span>=<span class="string">"area"</span> <span class="attr">nslog-type</span>=<span class="string">"20100105"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag first disabled"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"separator disabled"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag prev disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>&amp;lt;<span class="tag">&lt;/<span class="name">em</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"separator disabled"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag cur"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag"</span> <span class="attr">p-index</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag"</span> <span class="attr">p-index</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag"</span> <span class="attr">p-index</span>=<span class="string">"4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag"</span> <span class="attr">p-index</span>=<span class="string">"5"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"separator"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    // 这里就是要模拟点击的下一页按钮</div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag next"</span> <span class="attr">p-index</span>=<span class="string">"2"</span>&gt;</span>下一页<span class="tag">&lt;<span class="name">em</span>&gt;</span>&amp;gt;<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"separator"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag last"</span> <span class="attr">p-index</span>=<span class="string">"50"</span>&gt;</span>尾页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">// 下面开始就是“上周排行榜”，html结构和上面完全类似</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ranking-table"</span> <span class="attr">data-cat</span>=<span class="string">"lastWeek"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">...此处再次省略巨量代码...</div></pre></td></tr></table></figure><h2 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3.完整代码"></a>3.完整代码</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>) <span class="comment"># 设置编码</span></div><div class="line"></div><div class="line">url = <span class="string">'http://baike.baidu.com/starrank?fr=lemmaxianhua'</span></div><div class="line"></div><div class="line"></div><div class="line">driver = webdriver.Chrome(<span class="string">'/usr/local/Cellar/chromedriver/2.20/bin/chromedriver'</span>) <span class="comment"># 创建一个driver用于打开网页，记得找到brew安装的chromedriver的位置，在创建driver的时候指定这个位置</span></div><div class="line">driver.get(url) <span class="comment"># 打开网页</span></div><div class="line"></div><div class="line">name_counter = <span class="number">1</span></div><div class="line">page = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> page &lt; <span class="number">50</span>: <span class="comment"># 共50页，这里是手工指定的</span></div><div class="line">soup = BeautifulSoup(driver.page_source, <span class="string">"html.parser"</span>)</div><div class="line">current_names = soup.select(<span class="string">'div.ranking-table'</span>) <span class="comment"># 选择器用ranking-table css class，可以取出包含本周、上周的两个table的div标签</span></div><div class="line"><span class="keyword">for</span> current_name_list <span class="keyword">in</span> current_names:</div><div class="line"><span class="comment"># print current_name_list['data-cat']</span></div><div class="line"><span class="keyword">if</span> current_name_list[<span class="string">'data-cat'</span>] == <span class="string">'thisWeek'</span>: <span class="comment"># 这次我只想抓取本周，如果想抓上周，改一下这里为lastWeek即可</span></div><div class="line">names = current_name_list.select(<span class="string">'td.star-name &gt; a'</span>) <span class="comment"># beautifulsoup选择器语法</span></div><div class="line">counter = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> star_name <span class="keyword">in</span> names:</div><div class="line">counter = counter + <span class="number">1</span>;</div><div class="line"><span class="built_in">print</span> star_name.text <span class="comment"># 明星的名字是a标签里面的文本，虽然a标签下面除了文本还有一个与文本同级别的img标签，但是.text输出的只是文本而已</span></div><div class="line">name_counter = name_counter + <span class="number">1</span>;</div><div class="line">driver.find_element_by_xpath(<span class="string">"//a[contains(text(),'下一页')]"</span>).click() <span class="comment"># selenium的xpath用法，找到包含“下一页”的a标签去点击</span></div><div class="line">page = page + <span class="number">1</span></div><div class="line">time.sleep(<span class="number">2</span>) <span class="comment"># 睡2秒让网页加载完再去读它的html代码</span></div><div class="line"></div><div class="line"><span class="built_in">print</span> name_counter <span class="comment"># 共爬取得明星的名字数量</span></div><div class="line">driver.quit()</div></pre></td></tr></table></figure><h1 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h1><p>这里只是简单记录一次稍微复杂点的网页爬取的实现思路，关于selenium和beatifulsoup，还有很多的用法，我还没仔细看过。下面是一些参考资料，以后有机会还要多学习一下。</p><ul><li><a href="http://cuiqingcai.com/1319.html" target="_blank" rel="external">Python爬虫利器二之Beautiful Soup的用法</a>：介绍了安装bs的方法，以及不同的parser，如html5、xml有什么区别。</li><li><a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">Beautiful Soup 4.4.0 文档</a>：其实bs支持不同语言，这次写python就是因为代码少，但是安装依赖确实是麻烦。</li><li><a href="http://www.seleniumhq.org/" target="_blank" rel="external">selenium官网</a>：selenium其实有官方的IDE，也支持不同的语言。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;记录一次周末在家速成的爬虫实现之旅。受人之托，想要把这个页面&lt;a href=&quot;http://baike.baidu.com/starrank?fr=lemmaxianhua&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baike.baidu.com/starrank?fr=lemmaxianhua&lt;/a&gt;的明星排行榜爬取下来。用chrome打开一看，其实就1000条记录。然后“右键菜单”-&amp;gt;“检查”，看下网页的结构，也不是特别复杂。所以我目测只要用&lt;strong&gt;python&lt;/strong&gt;自带的&lt;code&gt;urllib2&lt;/code&gt;库打开网页，获取html代码，再交给&lt;code&gt;BeautifulSoup&lt;/code&gt;库解析html代码，应该就可以快速搞定。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://unclechen.github.io/tags/python/"/>
    
      <category term="爬虫" scheme="http://unclechen.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>利用属性动画在Android4.x上实现Android L的元素转场动画效果（shared elements transition）</title>
    <link href="http://unclechen.github.io/2016/11/08/%E5%88%A9%E7%94%A8%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E5%9C%A8Android4.x%E4%B8%8A%E5%AE%9E%E7%8E%B0Android%20L%E7%9A%84%E5%85%83%E7%B4%A0%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <id>http://unclechen.github.io/2016/11/08/利用属性动画在Android4.x上实现Android L的元素转场动画效果/</id>
    <published>2016-11-08T00:00:00.000Z</published>
    <updated>2018-05-20T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>随着谷歌推出的MaterialDesign不断被各种实践，最近我也碰到这么一个需求，就是要求实现一个图片的转场效果。在第一个界面上，图片被点击后，会渐渐地滑动到第二个界面中去。</p><p>其实仔细观察一下Google相册也有用到这种效果，大概的效果图是这样的：</p><p><img src="http://ww2.sinaimg.cn/large/801b780agw1f9kunqk6sqg20b40jre86.gif" alt="transition-ui-demo"></p><p>按照我的理解，这种效果要是直接把View拿出来复用就可以。但是经过学习（国内外各种大神的博客）和实践发现，里面有不少可以思考的地方。</p><a id="more"></a><p>根据官方介绍的<a href="https://developer.android.com/training/material/animations.html#Transitions" target="_blank" rel="external">Transitions</a>，在Android 5.0以后，可以使用<strong>shared elements transition</strong>来实现这个效果，非常方便。但是我们的App一般还需要向下兼容到4.x，所以在4.x上得想其它的办法实现。</p><p>下面我以上图的ImageView转场动画为例子，介绍一下是怎么实现这个效果的。（代码都在<a href="https://github.com/unclechen/ActivityTransitionDemo" target="_blank" rel="external">这里</a>）</p><blockquote><p>注意：为了说明转场效果实现的核心内容，一些无关的东西都用了最简单的实现。</p></blockquote><h1 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h1><h2 id="1-入场"><a href="#1-入场" class="headerlink" title="1.入场"></a>1.入场</h2><ul><li>（1）保存第一个Activity中ImageView（我们叫它originImageView）的位置信息、宽、高，然后把这些信息传给第二个Activity。</li><li>（2）去掉Activity默认的转场动画。</li><li>（3）进入第二个Activity之后，拿到第一个Activity传过来的ImageView的位置、宽、高信息，并在第二个Activity动态添加一个一模一样的ImageView（我叫它sourceImageView）。</li><li>（4）在第二个Activity中，找到最终的ImageView（我叫它targetImageView），并取出它最终所在的位置。</li><li>（5）对比sourceImageView和targetImageView的位置、大小等等各种<strong>属性</strong>的区别，然后使用属性动画将sourceImageView变换成targetImageView。</li><li>（6）当动画结束时，显示出targetImageView，隐藏sourceImageView。</li></ul><blockquote><p>注意：这里当动画结束时，我们需要将sourceImageView的LayoutParams改成和targetImageView的LayoutParams一模一样，用于退出时做转场动画使用。<br>其实退场效果和入场效果是完全相反的步骤。</p></blockquote><h2 id="2-退场"><a href="#2-退场" class="headerlink" title="2.退场"></a>2.退场</h2><ul><li>（1）将之前隐藏的sourceImageView显示出来，隐藏targetImageView。</li><li>（2）通过属性动画将sourceImageView从当前的位置和宽、高大小，变换到刚进入第二个Activity时的状态。（这里的动画代码几乎一样，只是把开始值和结束值调换了位置）</li><li>（3）动画结束时，关闭第二个Activity，去掉Activity的转场动画。</li></ul><p>上面就是实现思路，其实很好理解。实现这个思路的重点，就在于属性动画的应用了。也就是上面提到的<strong>入场的第5步</strong>和<strong>退场的第2步</strong>，这里面用到的属性动画代码见下一章。</p><h1 id="三、实现代码"><a href="#三、实现代码" class="headerlink" title="三、实现代码"></a>三、实现代码</h1><h2 id="1-入场-1"><a href="#1-入场-1" class="headerlink" title="1.入场"></a>1.入场</h2><h3 id="（1）先复原出sourceImageView"><a href="#（1）先复原出sourceImageView" class="headerlink" title="（1）先复原出sourceImageView"></a>（1）先复原出sourceImageView</h3><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个和第一个界面一模一样的ImageView，作为这个界面的sourceImageView</span></div><div class="line">private void initSourceImageView() &#123;</div><div class="line">    <span class="comment">// 先动态创建出这个sourceImageView，把它添加到第二个界面的ContentView中。</span></div><div class="line">    <span class="type">FrameLayout</span> contentView = (<span class="type">FrameLayout</span>) getWindow().getDecorView().findViewById(android.<span class="type">R</span>.id.content);</div><div class="line">    mSourceImageView = <span class="function"><span class="keyword">new</span> <span class="title">ImageView</span>(this);</span></div><div class="line"><span class="function">    <span class="title">contentView</span>.<span class="title">addView</span>(mSourceImageView);</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    <span class="comment">// 读取第一个界面传过来的信息</span></span></div><div class="line"><span class="function">    <span class="title">Bundle</span> <span class="title">bundle</span> = <span class="title">getIntent</span>().<span class="title">getExtras</span>();</span></div><div class="line"><span class="function">    <span class="title">mRect</span> = (<span class="type">Rect</span>) <span class="title">getIntent</span>().<span class="title">getParcelableExtra</span>(<span class="type">IMAGE_ORIGIN_RECT</span>);</span></div><div class="line"><span class="function">    <span class="title">ImageView</span>.<span class="title">ScaleType</span> <span class="title">scaleType</span> = (<span class="type">ImageView</span>.<span class="type">ScaleType</span>) <span class="title">bundle</span>.<span class="title">getSerializable</span>(<span class="type">IMAGE_SCALE_TYPE</span>);</span></div><div class="line"><span class="function">    <span class="title">mResId</span> = <span class="title">bundle</span>.<span class="title">getInt</span>(<span class="type">IMAGE_RES_ID</span>);</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    <span class="comment">// 设置为和第一个界面一样的图片</span></span></div><div class="line"><span class="function">    <span class="title">mSourceImageView</span>.<span class="title">setImageResource</span>(mResId);</span></div><div class="line"><span class="function">    <span class="title">mTargetImageView</span>.<span class="title">setImageResource</span>(mResId);</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    <span class="comment">// 设为和原来一样的裁剪模式</span></span></div><div class="line"><span class="function">    <span class="title">mSourceImageView</span>.<span class="title">setScaleType</span>(scaleType);</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    <span class="comment">// 设置为和原来一样的位置</span></span></div><div class="line"><span class="function">    <span class="title">FrameLayout</span>.<span class="title">LayoutParams</span> <span class="title">layoutParams</span> = (<span class="type">FrameLayout</span>.<span class="type">LayoutParams</span>) <span class="title">mSourceImageView</span>.<span class="title">getLayoutParams</span>();</span></div><div class="line"><span class="function">    <span class="title">layoutParams</span>.<span class="title">width</span> = <span class="title">mRect</span>.<span class="title">width</span>();</span></div><div class="line"><span class="function">    <span class="title">layoutParams</span>.<span class="title">height</span> = <span class="title">mRect</span>.<span class="title">height</span>();</span></div><div class="line"><span class="function">    <span class="title">layoutParams</span>.<span class="title">setMargins</span>(mRect.left, mRect.top, <span class="number">0</span>, <span class="number">0</span>);</span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure><h3 id="（2）找到targetImageView的位置和宽高"><a href="#（2）找到targetImageView的位置和宽高" class="headerlink" title="（2）找到targetImageView的位置和宽高"></a>（2）找到targetImageView的位置和宽高</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initImageEnterAnimation</span><span class="params">()</span> </span>&#123;</div><div class="line">    mTargetImageView.getViewTreeObserver().addOnPreDrawListener(<span class="keyword">new</span> ViewTreeObserver.OnPreDrawListener() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onPreDraw</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 第一帧被绘制时，TargetImageView已经具有了实际的尺寸和位置，这是就应该开始播放动画。</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span>[] finalLocationOnTheScreen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">            mTargetImageView.getLocationOnScreen(finalLocationOnTheScreen);</div><div class="line">            mTargetLeft = finalLocationOnTheScreen[<span class="number">0</span>];</div><div class="line">            mTargetTop = finalLocationOnTheScreen[<span class="number">1</span>];</div><div class="line">            mTargetWidth = mTargetImageView.getWidth();</div><div class="line">            mTargetHeight = mTargetImageView.getHeight();</div><div class="line">            playEnteringAnimation(mTargetLeft, mTargetTop, mTargetWidth, mTargetHeight);</div><div class="line">            mTargetImageView.getViewTreeObserver().removeOnPreDrawListener(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="（3）播放入场动画"><a href="#（3）播放入场动画" class="headerlink" title="（3）播放入场动画"></a>（3）播放入场动画</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 属性动画走起，将sourceImageView变换到targetImageView</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">playEnteringAnimation</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> left, <span class="keyword">final</span> <span class="keyword">int</span> top, <span class="keyword">final</span> <span class="keyword">int</span> width, <span class="keyword">final</span> <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">    <span class="comment">// 1.改变ImageView的位置、宽高</span></div><div class="line">    PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(<span class="string">"left"</span>, mSourceImageView.getLeft(), left);</div><div class="line">    PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(<span class="string">"top"</span>, mSourceImageView.getTop(), top);</div><div class="line">    PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(<span class="string">"right"</span>, mSourceImageView.getRight(), left + width);</div><div class="line">    PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(<span class="string">"bottom"</span>, mSourceImageView.getBottom(), top + height);</div><div class="line"></div><div class="line">    ObjectAnimator positionAnimator = ObjectAnimator.ofPropertyValuesHolder(mSourceImageView,</div><div class="line">            propertyLeft, propertyTop, propertyRight, propertyBottom);</div><div class="line">    positionAnimator.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">            <span class="comment">// 为了退出动画，需要把sourceImageView的LayoutParams改成targetImageView</span></div><div class="line">            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mSourceImageView.getLayoutParams();</div><div class="line">            layoutParams.height = height;</div><div class="line">            layoutParams.width = width;</div><div class="line">            layoutParams.setMargins(left, top, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 2.ImageView的矩阵动画</span></div><div class="line">    Matrix initMatrix = getImageMatrix(mSourceImageView);</div><div class="line">    initMatrix.getValues(mInitImageMatrixValues);</div><div class="line">    <span class="keyword">final</span> Matrix endMatrix = getImageMatrix(mTargetImageView);</div><div class="line">    mSourceImageView.setScaleType(ImageView.ScaleType.MATRIX);</div><div class="line">    <span class="comment">// ofObject()用法：传入自定义Property和Evaluator的用法</span></div><div class="line">    ObjectAnimator matrixAnimator = ObjectAnimator.ofObject(mSourceImageView, ANIMATED_TRANSFORM_PROPERTY, <span class="keyword">new</span> MatrixEvaluator(), initMatrix, endMatrix);</div><div class="line"></div><div class="line">    <span class="comment">// 3.顺便加个渐变动画</span></div><div class="line">    ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, <span class="string">"alpha"</span>, <span class="number">0.0</span>f, <span class="number">1.0</span>f);</div><div class="line"></div><div class="line">    <span class="comment">// 4.一起播放上面的动画</span></div><div class="line">    mEnteringAnimation = <span class="keyword">new</span> AnimatorSet();</div><div class="line">    mEnteringAnimation.setDuration(IMAGE_TRANSLATION_DURATION);</div><div class="line">    mEnteringAnimation.setInterpolator(DEFAULT_INTERPOLATOR);</div><div class="line">    mEnteringAnimation.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">            mEnteringAnimation = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mEnteringAnimation != <span class="keyword">null</span>) &#123;</div><div class="line">                mEnteringAnimation = <span class="keyword">null</span>;</div><div class="line">                mTargetImageView.setVisibility(View.VISIBLE);</div><div class="line">                mSourceImageView.setVisibility(View.INVISIBLE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    mEnteringAnimation.playTogether(positionAnimator, matrixAnimator, fadeInAnimator);</div><div class="line">    mEnteringAnimation.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="（4）2个关键的入场动画的说明"><a href="#（4）2个关键的入场动画的说明" class="headerlink" title="（4）2个关键的入场动画的说明"></a>（4）2个关键的入场动画的说明</h3><p>在（3）中，用到下面两个关键的动画：</p><ul><li><p>ObjectAnimator - positionAnimator：改变sourceImageView的top、left、right、bottom属性，动画的起始值就是sourceImageView的这4个属性，结束值就是targetImageView的这4个属性。</p></li><li><p>ObjectAnimator - matrixAnimator：通过改变sourceImageView的Matrix，来改变其中显示的图片（drawable）的Bounds，从而使ImageView呈现出渐变效果。</p></li></ul><p>介绍这两个关键动画的实现细节之前，需要具备属性动画的基础知识。如果不熟悉的话，建议先看下这几篇博客，里面详细地介绍了属性动画的各种用法。</p><ul><li><p><a href="http://blog.csdn.net/harvic880925/article/details/50525521" target="_blank" rel="external">ValueAnimator基本使用</a></p></li><li><p><a href="http://blog.csdn.net/harvic880925/article/details/50546884" target="_blank" rel="external">ValueAnimator高级进阶（一）</a></p></li><li><p><a href="http://blog.csdn.net/harvic880925/article/details/50549385" target="_blank" rel="external">ValueAnimator高级进阶（二）</a></p></li><li><p><a href="http://blog.csdn.net/harvic880925/article/details/50598322" target="_blank" rel="external">ObjectAnimator基本使用</a></p></li><li><p><a href="http://blog.csdn.net/harvic880925/article/details/50752838" target="_blank" rel="external">PropertyValuesHolder与Keyframe</a></p></li><li><p><a href="http://blog.csdn.net/harvic880925/article/details/50759059" target="_blank" rel="external">联合动画的代码实现</a></p></li></ul><hr><p>下面介绍这两个关键的动画实现</p><h4 style="color:#ff0000">关键动画之 ObjectAnimator - positionAnimator 实现：改变ImageView的位置和大小</h4><p>我们知道，设置一个动画，就要给它设置起始值和结束值。所以我们的positionAnimator就需要设置sourceImageView的left、top、right、bottom这4个属性起始值和结束值。在动画执行的过程中，就可以渐渐地改变sourceImageView的这4个属性了。</p><p>下面这行代码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">PropertyValuesHolder propertyLeft</span> = PropertyValuesHolder.ofInt(<span class="string">"left"</span>, mSourceImageView.getLeft(), left);</div></pre></td></tr></table></figure><p>用<strong>PropertyValuesHolder</strong>可以给sourceImageView的left属性设置了起始值、结束值。</p><p>对于left属性，起始值就是sourceImageView的left值，我们已经从第一个Activity传过来了。<br>而left属性的结束值，我们可以从targetImageView的left属性值。<br>其他的top、right、bottom属性也是一样的道理。</p><blockquote><p>需要需要特别注意的一点就是targetImageView的宽高获取方法，我们都知道获取一个View的宽高必须要等它绘制完了，而<strong>targetImageView不会在setContentView之后立刻绘制完成</strong>。<br>因此我们需要监听targetImageView的绘制状态，也就是监听<strong>ViewTreeObserver</strong>的各种回调，这里我们要监听的是<strong>OnPreDrawListener</strong>。<br>关于ViewTreeObserver，可以参考<a href="http://souly.cn/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/2015/11/16/viewTreeObserver%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">《Viewtreeobserver解析》</a>这篇文章学习一下。</p></blockquote><h4 style="color:#ff0000">关键动画之ObjectAnimator - matrixAnimator实现：使ImageView展示的图片呈现渐变效果</h4><p>这里的数值计算比positionAnimator要复杂一点。</p><p>首先我们要<strong>自定义一个计算器MatrixEvaluator</strong>，它的作用是返回动画执行过程中的Matrix，然后再使用这个Matrix去改变sourceImageView的Matrix属性。</p><p>这个自定义计算器evaluate方法非常简单，就是根据起始Matrix（startMatrix）和结束Matrix（endMatrix）之间的差值diff，然后乘以当前<strong>加速器</strong>返回的动画的<strong>数值</strong>进度即可得到当前实时的Matrix值。</p><p>下面看它的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MatrixEvaluator</span> <span class="keyword">implements</span> <span class="title">TypeEvaluator</span>&lt;<span class="title">Matrix</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> TypeEvaluator&lt;Matrix&gt; NULL_MATRIX_EVALUATOR = <span class="keyword">new</span> TypeEvaluator&lt;Matrix&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Matrix <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, Matrix startValue, Matrix endValue)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">float</span>[] mTempStartValues = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</div><div class="line">        <span class="keyword">float</span>[] mTempEndValues = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</div><div class="line">        Matrix mTempMatrix = <span class="keyword">new</span> Matrix();</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Matrix <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, Matrix startValue, Matrix endValue)</span> </span>&#123;</div><div class="line">            startValue.getValues(mTempStartValues);</div><div class="line">            endValue.getValues(mTempEndValues);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">                <span class="keyword">float</span> diff = mTempEndValues[i] - mTempStartValues[i];</div><div class="line">                <span class="comment">// fraction是加速器中的返回值，表示当前动画的“数值”进度。我们用的是Android SDK中提供的AccelerateDecelerateInterpolator。</span></div><div class="line">                mTempEndValues[i] = mTempStartValues[i] + (fraction * diff); </div><div class="line">            &#125;</div><div class="line">            mTempMatrix.setValues(mTempEndValues);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> mTempMatrix;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>有了这个计算器，得到动画执行过程中的Matrix值，怎么动态地赋给sourceImageView呢？</p><p>我们知道，在普通的<code>ObjectAnimator#ofFloat(Object target, String propertyName, float... values)</code>方法中，当Evaluator接收到最后一个可变长参数values后，可以得到起始值和结束值后。然后在<strong>evaluate</strong>方法中计算出动画执行过程的应该赋予的属性的值，然后调用目标对象（这里就是我们的ImageView）的setter方法把这个值赋给目标对象。</p><blockquote><p>例如这句代码，<code>ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, &quot;alpha&quot;, 0.0f, 1.0f);</code>其实就是在计算出了动画过程中每一个时刻的alpha值，然后再调用mContainer的setAlpha(float alpha)方法去改变mContainer的透明度。</p></blockquote><p>但是要改变sourceImageView的Matrix值，我们需要调用<strong>ImageView#animateTransform()</strong>这个方法，这个方法在Android SDK中属于隐藏API，其代码片段所示：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ImageView#animateTransform()源代码</span></div><div class="line"><span class="comment">/** @hide */</span></div><div class="line">public void animateTransform(<span class="keyword">Matrix</span> <span class="keyword">matrix</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (mDrawable == <span class="built_in">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">matrix</span> == <span class="built_in">null</span>) &#123;</div><div class="line">            mDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, mDrawableWidth, mDrawableHeight);</div><div class="line">            <span class="keyword">if</span> (mDrawMatrix == <span class="built_in">null</span>) &#123;</div><div class="line">                mDrawMatrix = <span class="keyword">new</span> <span class="keyword">Matrix</span>();</div><div class="line">            &#125;</div><div class="line">            mDrawMatrix.set(<span class="keyword">matrix</span>);</div><div class="line">        &#125;</div><div class="line">        invalidate();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>而且这个方法的名字也不叫<strong>setXXX</strong>，所以我们没法调用像<code>ofFloat</code>这样的方法去改变sourceImageView的Matrix。</p><p>这时候需要采用自定义Property，并且实现它的<strong>set</strong>方法，自定义Property代码如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Property&lt;ImageView, Matrix&gt; ANIMATED_TRANSFORM_PROPERTY = <span class="keyword">new</span> Property&lt;ImageView, Matrix&gt;(Matrix.class, <span class="string">"animatedTransform"</span>) &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(ImageView imageView, Matrix matrix)</span> </span>&#123;</div><div class="line">            <span class="comment">// 这里模仿了SDK源码中ImageView#animateTransform的实现</span></div><div class="line">            Drawable drawable = imageView.getDrawable();</div><div class="line">            <span class="keyword">if</span> (drawable == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (matrix == <span class="keyword">null</span>) &#123;</div><div class="line">                drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, imageView.getWidth(), imageView.getHeight());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());</div><div class="line">                Matrix drawMatrix = imageView.getImageMatrix();</div><div class="line">                <span class="keyword">if</span> (drawMatrix == <span class="keyword">null</span>) &#123;</div><div class="line">                    drawMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">                    imageView.setImageMatrix(drawMatrix);</div><div class="line">                &#125;</div><div class="line">                imageView.setImageMatrix(matrix);</div><div class="line">            &#125;</div><div class="line">            imageView.invalidate();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function">Matrix <span class="title">get</span><span class="params">(ImageView object)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure><p>自定义一个Property必须要实现里面的get方法，但是在我们的这里例子中，get方法不会被调用。</p><p>因为在属性动画中，只有当你传入的可变长参数values（也就是起始值、中间值1、中间值2. … 结束值）长度为1，也就是说你只传了一个值的时候，才会对我们的target调用getter方法去获取初始值。所以这里我们是不需要getter方法的。</p><p>自定义Property完成后，通过<code>ObjectAnimator#ofObject(T target, Property&lt;T, V&gt; property, TypeEvaluator&lt;V&gt; evaluator, V... values)</code> 方法，就可以把计算器计算出的动画执行过程中的Matrix值，通过自定义Property中的set方法，赋给当前的目标对象，即sourceImageView！从而使得sourceImageView呈现出渐变效果。</p><blockquote><p>这里的实现是来自这位大神的博客<a href="https://medium.com/@v.danylo/implementing-imageview-transition-between-activities-for-pre-lollipop-devices-8b24bc387a2a#.7c6qxvf59" target="_blank" rel="external">Implementing ImageView transition between activities for pre-Lollipop devices</a>。<br>我们首先感谢这位大神的分享！这位大神在文中也提到，用动画来实现图片的渐进式改变，起实来自于我们Android SDK中的隐藏API——<strong>ImageView#animateTransform</strong>。</p></blockquote><h2 id="2-退场-1"><a href="#2-退场-1" class="headerlink" title="2.退场"></a>2.退场</h2><p>退场动画完全是入场动画的逆操作，直接看代码。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 图片退出的转场动画：完全是和之前相反的过程</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">playExitAnimations</span><span class="params">(<span class="keyword">int</span> sourceImageViewLeft, <span class="keyword">int</span> sourceImageViewTop, <span class="keyword">int</span> sourceImageViewWidth, <span class="keyword">int</span> sourceImageViewHeight, <span class="keyword">float</span>[] imageMatrixValues)</span> </span>&#123;</div><div class="line">    mSourceImageView.setVisibility(View.VISIBLE);</div><div class="line">    mTargetImageView.setVisibility(View.INVISIBLE);</div><div class="line"></div><div class="line">    <span class="comment">// 改变SourceView的位置、宽高属性。这里每个属性的起始值和结束值和入场时刚好相反。</span></div><div class="line">    <span class="keyword">int</span>[] locationOnScreen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">    mSourceImageView.getLocationOnScreen(locationOnScreen);</div><div class="line">    PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(<span class="string">"left"</span>, locationOnScreen[<span class="number">0</span>], sourceImageViewLeft);</div><div class="line">    PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(<span class="string">"top"</span>, locationOnScreen[<span class="number">1</span>], sourceImageViewTop);</div><div class="line">    PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(<span class="string">"right"</span>, locationOnScreen[<span class="number">0</span>] + mSourceImageView.getWidth(), sourceImageViewLeft + sourceImageViewWidth);</div><div class="line">    PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(<span class="string">"bottom"</span>, mSourceImageView.getBottom(), sourceImageViewTop + sourceImageViewHeight);</div><div class="line">    ObjectAnimator positionAnimator = ObjectAnimator.ofPropertyValuesHolder(mSourceImageView, propertyLeft, propertyTop, propertyRight, propertyBottom);</div><div class="line"></div><div class="line">    <span class="comment">// ImageView的矩阵动画</span></div><div class="line">    Matrix initialMatrix = getImageMatrix(mSourceImageView);</div><div class="line"></div><div class="line">    Matrix endMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">    endMatrix.setValues(imageMatrixValues);</div><div class="line">    mSourceImageView.setScaleType(ImageView.ScaleType.MATRIX);</div><div class="line">    <span class="comment">// 这里Matrix的起始值和结束值和入场时也刚好相反。</span></div><div class="line">    ObjectAnimator matrixAnimator = ObjectAnimator.ofObject(mSourceImageView, ANIMATED_TRANSFORM_PROPERTY, <span class="keyword">new</span> MatrixEvaluator(), initialMatrix, endMatrix);</div><div class="line"></div><div class="line">    <span class="comment">// 渐变动画</span></div><div class="line">    ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, <span class="string">"alpha"</span>, <span class="number">1.0</span>f, <span class="number">0.0</span>f);</div><div class="line"></div><div class="line">    mExitingAnimation = <span class="keyword">new</span> AnimatorSet();</div><div class="line">    mExitingAnimation.setDuration(IMAGE_TRANSLATION_DURATION);</div><div class="line">    mExitingAnimation.setInterpolator(<span class="keyword">new</span> AccelerateInterpolator());</div><div class="line">    mExitingAnimation.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mExitingAnimation != <span class="keyword">null</span>) &#123;</div><div class="line">                mExitingAnimation = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 关闭第二个界面</span></div><div class="line">            Activity activity = (Activity) mSourceImageView.getContext();</div><div class="line">            activity.finish();</div><div class="line">            activity.overridePendingTransition(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 同样去掉默认的转场动画</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    mExitingAnimation.playTogether(positionAnimator, matrixAnimator, fadeInAnimator);</div><div class="line">    mExitingAnimation.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="四、涉及到的知识点"><a href="#四、涉及到的知识点" class="headerlink" title="四、涉及到的知识点"></a>四、涉及到的知识点</h1><p>我认为实现demo里面的效果需要了解下面的知识点，如果不熟悉的话，建议先看一下上一章推荐的属性动画讲解的几篇博客。</p><h2 id="1-ImageView的ScaleType"><a href="#1-ImageView的ScaleType" class="headerlink" title="1.ImageView的ScaleType"></a>1.ImageView的ScaleType</h2><p>不管将ScaleType设为多少，bitmap始终都是一个。如果在Android Studio打开debug模式来查看bitmap实际的图片，用一个ImageView去展示一张图片，不管你怎么改变ScaleType，其实里面的图片对象都是一样的。</p><h2 id="2-属性动画之插值器-Interpolator"><a href="#2-属性动画之插值器-Interpolator" class="headerlink" title="2.属性动画之插值器 - Interpolator"></a>2.属性动画之插值器 - Interpolator</h2><p>控制动画数值进度的转换器，我们给动画是指一个duration之后，插值器负责把动画的<strong>自然</strong>进度转成<strong>数值</strong>进度。自然进度就是指随着时间匀速增长的值。</p><p>所有的插值器都实现了<strong>TimeInterpolator接口里面的public float getInterpolation(float input)</strong>方法，input就是随时间流逝的自然进度，在这个方法中根据实际需求，用input计算出实际数字，作为数值进度返回。</p><h2 id="3-属性动画之计算器-TypeEvaluator"><a href="#3-属性动画之计算器-TypeEvaluator" class="headerlink" title="3.属性动画之计算器 - TypeEvaluator"></a>3.属性动画之计算器 - TypeEvaluator</h2><p>计算器就是计算动画执行过程中，目标对象的某个属性的数值。</p><p>TypeEvaluator接口中有一个<strong>public T evaluate(float fraction, T startValue, T endValue)</strong>方法，fraction就是插值器返回的数值进度，而startValue就是对象的某一个属性的起始值，endValue是这个属性的结束值。</p><p>这里利用的是泛型编程，我们可以把属性的起始、结束值看成一个Type。传入自己定义的任何Type后，在evaluate方法中，计算出当前应该改变<strong>对象</strong>的<strong>属性</strong>的具体Type值。再调用这个对象的setter方法，将Type值赋给这个对象。</p><p>很多时候，我们不会像这个demo中自定义Property，然后把它set给一个系统封装好的ImageView。我们很可能会有一个自定义的CustomView，然后在这个CustomView中提供一个setXXX方法。这样也可以在自定义的计算器中实现CustomView的属性动态改变。</p><h2 id="4-属性动画之中的ObjectAnimator和ValueAnimator的区别"><a href="#4-属性动画之中的ObjectAnimator和ValueAnimator的区别" class="headerlink" title="4.属性动画之中的ObjectAnimator和ValueAnimator的区别"></a>4.属性动画之中的ObjectAnimator和ValueAnimator的区别</h2><p>ObjectAnimator是ValueAnimator的子类，ValueAnimator只负责计算动画过程中，目标对象（一般是一个View或者其他UI元素）属性的值，但是需要我们自己监听动画的update状态，再把监听到的值set给目标对象的属性。</p><p>ObjectAnimator除了可以计算动画过程中的属性值外，还可以调用目标对象的setter方法，改变这个属性的值。所以它的功能比ValueAnimator要强大。</p><h2 id="4-属性动画之PropertyValuesHolder用法"><a href="#4-属性动画之PropertyValuesHolder用法" class="headerlink" title="4.属性动画之PropertyValuesHolder用法"></a>4.属性动画之PropertyValuesHolder用法</h2><p>一般直接使用<code>ObjectAnimator ofFloat(Object target, String propertyName, float... values)</code>只能改变目标对象的一个属性值。</p><p>如果我们想要改一个目标对象的的多个属性时，可以先使用<code>PropertyValuesHolder ofInt(String propertyName, int... values)</code>创建PropertyValuesHolder。</p><p>然后再用<code>ObjectAnimator ofPropertyValuesHolder(Object target, PropertyValuesHolder... values)</code>创建出改变多个属性的属性动画对象ObjectAnimator。</p><h2 id="5-如何向ContentView中动态添加View"><a href="#5-如何向ContentView中动态添加View" class="headerlink" title="5.如何向ContentView中动态添加View"></a>5.如何向ContentView中动态添加View</h2><p>首先要从当前的Activity中获得根视图：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">getWindow</span>()<span class="selector-class">.getDecorView</span>()<span class="selector-class">.findViewById</span>(<span class="selector-tag">android</span><span class="selector-class">.R</span><span class="selector-class">.id</span><span class="selector-class">.content</span>);</div></pre></td></tr></table></figure><p>这是个FrameLayout，然后我们就可以用java代码动态向它里面添加sourceImageView了。</p><p>关于DecorView再多说两句，它是Activity界面的根View，继承自FrameLayout。在它里面又是一个LinearLayout，在这个LinearLayout里面又包含了<strong>id为@android:id/title_container</strong>的标题栏，和一个<strong>id为@android:id/content</strong>的ContentView，结构大概是下面这个样子的：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> DecorView</span></div><div class="line"><span class="ruby">    - LinearLayout</span></div><div class="line"><span class="ruby">        - ...</span></div><div class="line"><span class="ruby">        - FrameLayout：<span class="symbol">android:</span>id/title_container</span></div><div class="line"><span class="ruby">        - FrameLayout：@android<span class="symbol">:id/content</span></span></div></pre></td></tr></table></figure><p>当我们在onCreate方法中调用Activity#setContentView()时，会把我们自己写的布局添加到这个ContentView中去。</p><h1 id="五、Android-5-0上的实现方法"><a href="#五、Android-5-0上的实现方法" class="headerlink" title="五、Android 5.0上的实现方法"></a>五、Android 5.0上的实现方法</h1><p>下面是在Android 5.0以上一种示例，非常简单，只需要几行代码就可实现：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一个Activity，利用ActivityOptions创建SceneTransitionAnimation</span></div><div class="line">private void transitionOnAndroidL() &#123;</div><div class="line">    <span class="comment">// 把需要共享的元素-ImageView，传给第二个界面</span></div><div class="line">    <span class="type">Intent</span> intent = <span class="function"><span class="keyword">new</span> <span class="title">Intent</span>(<span class="type">MainActivity</span>.this, <span class="type">DetailActivityLollipop</span>.class);</span></div><div class="line"><span class="function">    <span class="comment">// 一定要传入shareElementName</span></span></div><div class="line"><span class="function">    <span class="title">String</span> <span class="title">shareElementName</span> = "<span class="title">sharedImageView</span>";</span></div><div class="line"><span class="function">    <span class="title">ActivityOptions</span> <span class="title">activityOptions</span> = <span class="title">ActivityOptions</span>.<span class="title">makeSceneTransitionAnimation</span>(this, mImageView, shareElementName);</span></div><div class="line"><span class="function">    <span class="title">getWindow</span>().<span class="title">setSharedElementEnterTransition</span>(new <span class="type">ChangeImageTransform</span>(this, null));</span></div><div class="line"><span class="function">    <span class="title">intent</span>.<span class="title">putExtra</span>(<span class="type">DetailActivityLollipop</span>.<span class="type">SHARED_ELEMENT_KEY</span>, shareElementName);</span></div><div class="line"><span class="function">    <span class="title">intent</span>.<span class="title">putExtra</span>(<span class="type">DetailActivityLollipop</span>.<span class="type">IMAGE_RES_ID</span>, mImageResId);</span></div><div class="line"><span class="function">    <span class="comment">// 打开它</span></span></div><div class="line"><span class="function">    <span class="title">startActivity</span>(intent, activityOptions.toBundle());</span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="comment">// 第二个Activity，取出shareElementName，再调用ViewCompat#setTransitionName</span></span></div><div class="line"><span class="function"><span class="title">private</span> <span class="title">void</span> <span class="title">initImageEnterTransition</span>() &#123;</span></div><div class="line"><span class="function">    <span class="title">imageView</span>.<span class="title">setVisibility</span>(<span class="type">View</span>.<span class="type">VISIBLE</span>);</span></div><div class="line"><span class="function">    <span class="title">String</span> <span class="title">imageTransitionName</span> = <span class="title">getIntent</span>().<span class="title">getStringExtra</span>(<span class="type">SHARED_ELEMENT_KEY</span>);</span></div><div class="line"><span class="function">    <span class="title">ViewCompat</span>.<span class="title">setTransitionName</span>(imageView, imageTransitionName);</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    <span class="title">View</span> <span class="title">mainContainer</span> = <span class="title">findViewById</span>(<span class="type">R</span>.id.activityContanierDetail);</span></div><div class="line"><span class="function">    <span class="title">mainContainer</span>.<span class="title">setAlpha</span>(<span class="number">1.0</span>f);</span></div><div class="line"><span class="function">    <span class="title">int</span> <span class="title">resId</span> = <span class="title">getIntent</span>().<span class="title">getExtras</span>().<span class="title">getInt</span>(<span class="type">IMAGE_RES_ID</span>);</span></div><div class="line"><span class="function">    <span class="title">imageView</span>.<span class="title">setImageResource</span>(resId);</span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure><p>官方介绍的<a href="https://developer.android.com/training/material/animations.html#Transitions" target="_blank" rel="external">Transitions</a>中用xml也可以实现。另外，还有多个元素的转场动画效果，这里就不详细说了，如果有需要，也可以参考下这篇文章——<a href="https://guides.codepath.com/android/Shared-Element-Activity-Transition" target="_blank" rel="external">Shared Element Activity Transition</a>。</p><h1 id="六、其他实现方法"><a href="#六、其他实现方法" class="headerlink" title="六、其他实现方法"></a>六、其他实现方法</h1><p>在我的demo中只演示了核心的View转场实现，没有和其他的稍微复杂一些的需求相结合。网上还有很多关于这种效果实现的分享，也有应用到一些更复杂场景，下面推荐出来一起多多学习。</p><p>文章推荐：</p><ul><li><p><a href="http://wl9739.github.io/2016/10/16/Android-%E4%B8%AD%E7%9A%84%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%E5%8F%8A%E5%85%BC%E5%AE%B9%E5%A4%84%E7%90%86/" target="_blank" rel="external">Android中的转场动画及兼容处理</a></p></li><li><p><a href="http://www.jianshu.com/p/340c938e9f32" target="_blank" rel="external">Android共享元素转场动画兼容实践</a></p></li><li><p><a href="http://immortalz.me/859.html" target="_blank" rel="external">两步实现类似格瓦拉的转场动画</a></p></li><li><p><a href="https://guides.codepath.com/android/Shared-Element-Activity-Transition" target="_blank" rel="external">Shared Element Activity Transition</a>：详细介绍了5.0以上的各种共享元素转场效果。</p></li></ul><p>开源Library推荐：</p><ul><li><p><a href="https://github.com/takahirom/PreLollipopTransition" target="_blank" rel="external">PreLollipopTransition</a></p></li><li><p><a href="https://github.com/vikramkakkar/ImageTransition" target="_blank" rel="external">ImageTransition</a></p></li><li><p><a href="https://github.com/alexvasilkov/GestureViews" target="_blank" rel="external">GestureViews</a>：手势操作库，其demo本身就实现了一个类似的转场的动画效果。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;随着谷歌推出的MaterialDesign不断被各种实践，最近我也碰到这么一个需求，就是要求实现一个图片的转场效果。在第一个界面上，图片被点击后，会渐渐地滑动到第二个界面中去。&lt;/p&gt;
&lt;p&gt;其实仔细观察一下Google相册也有用到这种效果，大概的效果图是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/801b780agw1f9kunqk6sqg20b40jre86.gif&quot; alt=&quot;transition-ui-demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;按照我的理解，这种效果要是直接把View拿出来复用就可以。但是经过学习（国内外各种大神的博客）和实践发现，里面有不少可以思考的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="动画" scheme="http://unclechen.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android View的可见性检查方法（上）</title>
    <link href="http://unclechen.github.io/2016/10/17/Android%20View%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7%E6%A3%80%E6%9F%A5%E6%96%B9%E6%B3%95-%E4%B8%8A%E7%AF%87/"/>
    <id>http://unclechen.github.io/2016/10/17/Android View的可见性检查方法-上篇/</id>
    <published>2016-10-17T00:00:00.000Z</published>
    <updated>2018-05-20T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>在Android开发中有时候会遇到需要检查一个View是不是对用户可见，比如在消息流中，根据ImageView是否在屏幕中出现了再决定加载它，或者当视频滑入屏幕被用户可见时才播放、滑出屏幕就自动停止播放等等。乍一看好像都是在ListView、RecyclerView、ScrollView这些组件里面比较需要做这件事，今天总结一下我在实际开发中是怎么处理View可见性检查的。</p><a id="more"></a><h1 id="二、检查View是否可见的基本方法（从外部检查View）"><a href="#二、检查View是否可见的基本方法（从外部检查View）" class="headerlink" title="二、检查View是否可见的基本方法（从外部检查View）"></a>二、检查View是否可见的基本方法（从外部检查View）</h1><h2 id="1-View-getVisibility"><a href="#1-View-getVisibility" class="headerlink" title="1 View.getVisibility()"></a>1 View.getVisibility()</h2><p>很显然，我们可以用<code>View.getVisibility()</code>来检查一个它是否处于<strong>View.VISIBLE</strong>状态。这是<strong>最基本</strong>的检查，如果连这个方法得到的返回值都是<strong>View.INVISIBLE或者View.GONE</strong>的话，那么它对用户肯定是不可见的。</p><h2 id="2-View-isShown"><a href="#2-View-isShown" class="headerlink" title="2. View.isShown()"></a>2. View.isShown()</h2><p>这个方法相当于对View的所有祖先调用getVisibility方法。看下它的实现：</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Returns the visibility of this view and all of its ancestors</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> True if this view and all of its ancestors are &#123;<span class="doctag">@link</span> #VISIBLE&#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isShown() &#123;</div><div class="line">    View current = this;</div><div class="line">    <span class="comment">//noinspection ConstantConditions</span></div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">if</span> ((current.mViewFlags &amp; VISIBILITY_MASK) != VISIBLE) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        ViewParent <span class="keyword">parent</span> = current.mParent;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">parent</span> == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// We are not attached to the view root</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!(<span class="keyword">parent</span> <span class="keyword">instanceof</span> View)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        current = (View) <span class="keyword">parent</span>;</div><div class="line">    &#125; <span class="keyword">while</span> (current != <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看代码注释便知，这个方法<strong>递归地</strong>去检查这个View以及它的parentView的Visibility属性是不是等于<strong>View.VISIBLE</strong>，这样就对这个View的所有parentView做了一个检查。</p><p>另外这个方法还在递归的检查过程中，检查了<code>parentView == null</code>，也就是说所有的parentView都不能为null。否则就说明这个View根本没有被<code>addView</code>过（比如使用Java代码创建界面UI时，可能会先new一个View，然后根据条件动态地把它add带一个ViewGroup中），那肯定是不可能对用户可见的，这里很好理解。</p><h2 id="3-View-getGlobalVisibleRect"><a href="#3-View-getGlobalVisibleRect" class="headerlink" title="3 View.getGlobalVisibleRect"></a>3 View.getGlobalVisibleRect</h2><p>先看下什么是<a href="https://developer.android.com/reference/android/graphics/Rect.html" target="_blank" rel="external">Rect</a>：</p><blockquote><p>Rect holds four integer coordinates for a rectangle. The rectangle is represented by the coordinates of its 4 edges (left, top, right bottom).<br>Rect代表一个矩形，这个矩形可以由它左上角坐标(left, top)、右下角坐标(right, bottom)表示。所以每一个Rect对象里面都有left, top, right bottom这4个属性。</p></blockquote><p>使用这个方法的代码非常简单，如下所示，直接可以得到rect对象和方法的返回值visibility：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Rect <span class="built_in">rect</span> = <span class="keyword">new</span> Rect();</div><div class="line"><span class="keyword">boolean</span> visibility = bottom.getGlobalVisibleRect(<span class="built_in">rect</span>);</div></pre></td></tr></table></figure><p>看一下该方法的注释：当这个View只要有一部分仍然在屏幕中（没有被父View遮挡，所谓的<strong>not clipped by any of its parents</strong>），那么将把没有被遮挡的那部分区域保存在rect对象中返回，且方法的返回值是true，即visibility=true。此时的rect是以手机屏幕作为坐标系（所谓的<strong>global coordinates</strong>），即原点是屏幕左上角；如果它全部被父View遮挡住了或者本身就是不可见的，返回的visibility就为false。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * If <span class="keyword">some</span> part <span class="keyword">of</span> this view <span class="keyword">is</span> <span class="keyword">not</span> clipped <span class="keyword">by</span> any <span class="keyword">of</span> <span class="keyword">its</span> parents, <span class="keyword">then</span></div><div class="line">     * <span class="literal">return</span> <span class="keyword">that</span> area <span class="keyword">in</span> r <span class="keyword">in</span> <span class="keyword">global</span> (root) coordinates. To convert r <span class="keyword">to</span> <span class="keyword">local</span></div><div class="line">     * coordinates (<span class="keyword">without</span> taking possible View rotations <span class="keyword">into</span> account), <span class="built_in">offset</span></div><div class="line">     * <span class="keyword">it</span> <span class="keyword">by</span> -globalOffset (e.g. r.<span class="built_in">offset</span>(-globalOffset.x, -globalOffset.y)).</div><div class="line">     * If <span class="keyword">the</span> view <span class="keyword">is</span> completely clipped <span class="keyword">or</span> translated out, <span class="literal">return</span> <span class="literal">false</span>.</div><div class="line">     *</div><div class="line">     * @param r If <span class="literal">true</span> <span class="keyword">is</span> returned, r holds <span class="keyword">the</span> <span class="keyword">global</span> coordinates <span class="keyword">of</span> <span class="keyword">the</span></div><div class="line">     *        visible portion <span class="keyword">of</span> this view.</div><div class="line">     * @param globalOffset If <span class="literal">true</span> <span class="keyword">is</span> returned, globalOffset holds <span class="keyword">the</span> dx,dy</div><div class="line">     *        <span class="keyword">between</span> this view <span class="keyword">and</span> <span class="keyword">its</span> root. globalOffet may be null.</div><div class="line">     * @<span class="literal">return</span> <span class="literal">true</span> <span class="keyword">if</span> r <span class="keyword">is</span> non-empty (i.e. part <span class="keyword">of</span> <span class="keyword">the</span> view <span class="keyword">is</span> visible <span class="keyword">at</span> <span class="keyword">the</span></div><div class="line">     *         root level.</div><div class="line">     */</div></pre></td></tr></table></figure><p>举例子看一下，先看布局：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">                <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">View</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#0000ff"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"-90dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"-90dp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure><p>在xml中定义了一个View，给它设置负值的marginLeft和marginTop，让它只有一部分可以显示在屏幕中。可以看到这个View只有10x10dp大小可以出现在屏幕里面，但是只要有这么点大小可以在屏幕中，上面的方法的返回值就是：<strong>visibility=true</strong>。</p><p>执行的效果如下图所示，可以看到100x100dp的蓝色矩形虽然只剩下<strong>左上角的10x10dp蓝色小方块</strong>可见，但是visibility仍然等于true。</p><p><img src="http://ww1.sinaimg.cn/large/006y8mN6gw1f8v777610gj30go0efgm6.jpg" alt="self-visibility"></p><p>此时的GlobalVisibleRect的左上角(left,top)和右下角(right,bottom)分别为<code>(0, 280)和(36, 316)</code>。在这里top不为0是因为标题栏和系统状态栏已经占据了一定的屏幕高度。</p><blockquote><p>tips：这里写代码时测试getGlobalVisibleRect方法时，记得要等View已经绘制完成后，再去调用View的getGlobalVisibleRect方法，否则无法得到的返回值都是0。这和获取View的宽高原理是一样的，如果View没有被绘制完成，那么View.getWidth和View.getHeight一定是等于0的。</p></blockquote><h4 id="关于getGlobalVisibleRect方法的特别说明"><a href="#关于getGlobalVisibleRect方法的特别说明" class="headerlink" title="关于getGlobalVisibleRect方法的特别说明"></a>关于<strong>getGlobalVisibleRect</strong>方法的特别说明</h4><p><strong>这个方法只能检查出这个View在手机屏幕（或者说是相对它的父View）的位置，而不能检查出与其他兄弟View的相对位置</strong>。</p><p>比如说有一个ViewGroup，下面有View1、View2这两个子View，View1和View2是平级关系。此时如果View2盖住了View1，那么用getGlobalVisibleRect方法检查View1的可见性，得到的返回值依然是true，得到的可见矩形区域rect也是没有任何变化的。也就是说<strong>View1.getGlobalVisibleRect(rect)得到的结果与View2没有任何关系。</strong></p><p>空说无凭，看个具体的例子，先看xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">View</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/bottom_view"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"-90dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"-90dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#0000ff"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 这里为了看清bottom_view, 给top_view的背景色加了一个透明度 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">View</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/top_view"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#9000ffff"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure><p>这个xml很简单，两个View，分别是下层的bottom_view（100x100dp，在父ViewGroup中居中），<br>top_view（200x200dp，也在父ViewGroup居中，因此可以完全盖住bottom_view）。</p><p><img src="http://ww4.sinaimg.cn/large/006y8mN6gw1f8v77fhy24j30go0eqaat.jpg" alt="related-visibility"></p><p>我们用getGlobalVisibleRect来获取一下bottom_view的visibleRect和visibility，得到的结果是：<strong>visibility=true，rect的左上角(left, top)和右下角(right, bottom)是(545, 1161)和(895, 1511)。</strong></p><p>即使把top_view从xml里面删掉，我们得到visibility和rect也是一样的。</p><p>所以<code>getGlobalVisibleRect</code>方法并不是万能的，因为它只能检查View和他们的ParentView之间的位置进而判它断是不是在屏幕中可见。</p><blockquote><p>PS：有一次我还想到个奇葩思路，那就是把这个View的兄弟View找出来，也拿出它的GlobalVisibleRect，然后对比兄弟View和这个View的GlobalVisibleRect，看是不是有重合的地方。但是这也只能表明屏幕这一块区域内有两个View，还是无法判断到底是谁遮挡住了谁。</p></blockquote><h2 id="4-View-getLocalVisibleRect"><a href="#4-View-getLocalVisibleRect" class="headerlink" title="4 View.getLocalVisibleRect"></a>4 View.getLocalVisibleRect</h2><p>这个方法和getGlobalVisibleRect有些类似，也可以拿到这个View在屏幕的可见区域的坐标，<strong>唯一的区别getLocalVisibleRect(rect)获得的rect坐标系的原点是View自己的左上角，而不是屏幕左上角。</strong></p><p>先看例子，仍然是使用上面第2个例子的代码，加上下面的代码，执行一下：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Rect localRect</span> = new Rect();</div><div class="line"><span class="attribute">boolean localVisibility</span> = bottom.getLocalVisibleRect(localRect);</div></pre></td></tr></table></figure><p>得到的local坐标结果是：<strong>localVisibility=true，localRect的左上角(left, top)和右下角(right, bottom)为(0, 0)和(350, 350)</strong>。</p><p>而global坐标的结果是：<strong>visibility=true，rect的左上角为(545, 1161)，右下角为(895,1511)。</strong></p><p><strong>看下getLocalVisibleRect的源码</strong>，原来就是先获取View的offset point（相对屏幕或者ParentView的偏移坐标），然后再去调用getGlobalVisibleRect(Rect r, Point globalOffset)方法来获取可见区域，最后再把得到的GlobalVisibleRect和Offset坐标做一个加减法，转换坐标系原点。</p><p><strong>所以只要这个View的左上角在屏幕中，它的LocalVisibleRect的左上角坐标就一定是(0,0)，如果View的右下角在屏幕中，它的LocalVisibleRect右下角坐标就一定是(view.getWidth(), view.getHeight())。</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">getLocalVisibleRect</span><span class="params">(Rect r)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Point offset = mAttachInfo != <span class="keyword">null</span> ? mAttachInfo.mPoint : <span class="keyword">new</span> Point();</div><div class="line">        <span class="keyword">if</span> (getGlobalVisibleRect(r, offset)) &#123;</div><div class="line">            r.offset(-offset.x, -offset.y); <span class="comment">// make r local</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="5-判断手机屏幕是否熄灭or是否解锁"><a href="#5-判断手机屏幕是否熄灭or是否解锁" class="headerlink" title="5. 判断手机屏幕是否熄灭or是否解锁"></a>5. 判断手机屏幕是否熄灭or是否解锁</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);</div><div class="line">boolean isScreenOn = pm.isScreenOn();</div><div class="line">boolean isInteractive = pm.isInteractive();</div><div class="line"><span class="comment">// 可能有些版本上面isScreenOn方法隐藏了或者是deprecated了，可以尝试反射调用它，但是要记得用的时候catch异常</span></div><div class="line"><span class="function"><span class="keyword">Method</span> <span class="title">isScreenOnMethod</span> = <span class="title">pm</span>.<span class="title">getClass</span><span class="params">()</span>.<span class="title">getMethod</span><span class="params">("isScreenOn")</span>;</span></div><div class="line">boolean isScreenOn = (Boolean) isScreenOnMethod.invoke(pm);</div></pre></td></tr></table></figure><p>这里不深究解锁和屏幕是否熄灭的实现方法了，检查View的可见性虽然和屏幕的状态看起来没有直接关系，但是在做检查前先对屏幕的状态做一个检查也是很有必要的，如果屏幕都已经关闭了，那这个View当然是对用户不可见的。</p><h1 id="三、ListView、RecyclerView、ScrollView中如何检查View的可见性"><a href="#三、ListView、RecyclerView、ScrollView中如何检查View的可见性" class="headerlink" title="三、ListView、RecyclerView、ScrollView中如何检查View的可见性"></a>三、ListView、RecyclerView、ScrollView中如何检查View的可见性</h1><p>说实话感觉App开发中用得最多的就是各种列表啊、滚动滑动的View。在Android里面这几个可以滚动的View，都有着各自的特点。在用到上面的检测方法时，可以好好结合这几个View的特点，在它们各自的滚动过程中，更加有效的去检查View的可见性。我们可以先根据自己的业务需要，把上面提到的方法封装成一个<code>VisibilityCheckUtil</code>工具类，例如可以提供一个check方法，当View的物理面积有50%可见时，就返回true。</p><h2 id="1-ScrollView"><a href="#1-ScrollView" class="headerlink" title="1. ScrollView"></a>1. ScrollView</h2><p>假设我们有一个mView在mScrollView中，我们可以监听mScrollView的滚动，在onScrollChanged中检查mView的可见性。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">mScrollView.getViewTreeObserver().addOnScrollChangedListener(</div><div class="line">        <span class="keyword">new</span> ViewTreeObserver.OnScrollChangedListener() &#123;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onScrollChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 可以先判断ScrollView中的mView是不是在屏幕中可见</span></div><div class="line">            Rect scrollBounds = <span class="keyword">new</span> Rect();</div><div class="line">            mScrollView.getHitRect(scrollBounds);</div><div class="line">            <span class="keyword">if</span> (!mView.getLocalVisibleRect(scrollBounds)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">// 再用封装好的工具类检查可见性是否大于50%</span></div><div class="line">            <span class="keyword">if</span> (VisibilityCheckUtil.check(mView)) &#123;</div><div class="line">                <span class="comment">// do something</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><h2 id="2-ListView"><a href="#2-ListView" class="headerlink" title="2. ListView"></a>2. ListView</h2><p>假设我们在mListView的第10个位置（界面上是第11个item）有一个需要检查可见性的mView。</p><p>首先要监听mListView的滚动，接着在onScroll回调中，调用mListView.getFirstVisiblePosition和mListView.getLastVisiblePosition查看第10个位置是否处于可见范围，然后在调用封装好的VisibilityCheckUtil去检查mView是否可见。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">mListView.setOnScrollListener(<span class="keyword">new</span> OnScrollListener() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</div><div class="line">        mScrollState = scrollState;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="keyword">public</span> <span class="keyword">void</span> onScroll(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount,</div><div class="line">          <span class="keyword">int</span> totalItemCount) &#123;</div><div class="line">        <span class="keyword">if</span> (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) &#123;</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> first = mListView.getFirstVisiblePosition();</div><div class="line">        <span class="keyword">int</span> last = mListView.getLastVisiblePosition();</div><div class="line">        <span class="comment">// 满足3个条件：先判断ListView中的mView是不是在可见范围中，再判断是不是大于50%面积可见</span></div><div class="line">        <span class="keyword">if</span> (<span class="number">10</span> &gt;= first &amp;&amp; <span class="number">10</span> &lt;= last &amp;&amp; VisibilityCheckUtil.check(mView)) &#123;</div><div class="line">            <span class="comment">// do something</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><h2 id="3-RecyclerView"><a href="#3-RecyclerView" class="headerlink" title="3. RecyclerView"></a>3. RecyclerView</h2><p>和上面类似，还是把mView摆放在第10个位置，检查原理和ListView类似。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">mLinearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">mRecyclerView.setLayoutManager(mLinearLayoutManager);</div><div class="line">mRecyclerView.addOnScrollListener(<span class="keyword">new</span> RecyclerView.OnScrollListener() &#123;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);</div><div class="line">        <span class="keyword">if</span> (mLinearLayoutManager == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> firstVisiblePosition = mLinearLayoutManager.findFirstVisibleItemPosition();</div><div class="line">        <span class="keyword">int</span> lastVisiblePosition = mLinearLayoutManager.findLastVisibleItemPosition();</div><div class="line">        <span class="comment">// 同样是满足3个条件</span></div><div class="line">        <span class="keyword">if</span> (<span class="number">10</span> &gt;= firstVisiblePosition &amp;&amp; <span class="number">10</span> &lt;= lastVisiblePosition &amp;&amp; VisibilityCheckUtil.check(mView)) &#123;</div><div class="line">          <span class="comment">// do something</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><p>实际的开发中肯定会遇到更多的场景，我们都要先分析界面的特点，再结合前面提到的几个方法，更有效地检查View的可见性。这里最后再给大家推荐一个开源的项目——<a href="https://github.com/danylovolokh/VideoPlayerManager" target="_blank" rel="external">VideoPlayerManager</a>，里面就用到<code>getLocalVisibleRect</code>来检测View的可见面积，进而控制在ListView和RecyclerView中哪一个Item应该显示什么内容。</p><h1 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h1><p>本篇博客的思路，都是从View的外部去检查一个View的可见性。首先提到了一些基本的方法，然后介绍了几种常见的界面下可以怎么使用这些各种方法。</p><p>如果是App开发者的话，自己写的界面自己去判断View的可见性，有上面这些方法应该就够用了。但是如果你是一个SDK开发者，给App开发者提供第三方的library时（通常是自定义View这类的库），也能够检查开发者的使用到的View，并根据可见性来自动管理一些View的操作，那就非常棒了。这时从外部去检查一个View的可见性可能就不够用了，我们可以换一个角度，从内部去检查一个View的可见性，具体内容详见<a href="http://unclechen.github.io/2016/10/21/Android-View的可见性检查方法-下篇/">Android View的可见性检查方法-下篇</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;在Android开发中有时候会遇到需要检查一个View是不是对用户可见，比如在消息流中，根据ImageView是否在屏幕中出现了再决定加载它，或者当视频滑入屏幕被用户可见时才播放、滑出屏幕就自动停止播放等等。乍一看好像都是在ListView、RecyclerView、ScrollView这些组件里面比较需要做这件事，今天总结一下我在实际开发中是怎么处理View可见性检查的。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="View" scheme="http://unclechen.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>App动态配置探讨</title>
    <link href="http://unclechen.github.io/2016/09/25/App%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E6%8E%A2%E8%AE%A8/"/>
    <id>http://unclechen.github.io/2016/09/25/App动态配置探讨/</id>
    <published>2016-09-25T00:00:00.000Z</published>
    <updated>2018-05-20T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>App开发中一个比较常见的问题就是动态化，有时我们会需要程序的某一个逻辑可以动态改变而不需要发版本让用户重新安装。例如，App中的某个WebView有一个url白名单，我们希望它可以动态改变。这是个常见的需求，现在无论是技术面上还是产品上大家都在讲一个动态化，所以一波接一波出了各种插件化，甚至是ReactNative、weex、微信小程序等等这些轮子。</p><p>但是在实际中需要考虑到很多的业务特点，使得我们在<strong>统一化</strong>和<strong>个性化</strong>的时候比较难以选择，半年前天猫的技术博客就出了这篇文章–<a href="http://pingguohe.net/2016/03/18/config-center.html" target="_blank" rel="external">动态调整的基础 —— 配置中心</a>，里面介绍了阿里的团队在这方面的实践经验。今天我以一个遇到的实际需求为例，总结下我的想法。</p><a id="more"></a><h1 id="二、需求-amp-目标：设计一个动态配置中心"><a href="#二、需求-amp-目标：设计一个动态配置中心" class="headerlink" title="二、需求&amp;目标：设计一个动态配置中心"></a>二、需求&amp;目标：设计一个动态配置中心</h1><ul><li><p><strong>需求：</strong>支持不同业务、不同平台、不同版本（一般是版本的范围），按需动态下发配置。这里业务可以是不同的App、也可以是同一个App里面不同的模块，或者不同的SDK。</p></li><li><p><strong>目标：</strong>业务方（App开发者）可以自助到配置中心添加新的配置项或者修改以前的配置，按需下发到客户端。</p></li></ul><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>这里参考天猫动态配置的设计，我的动态配置中心也有下面两个的<strong>数据模型：</strong></p><ul><li>1.配置的数据结构</li></ul><p>这是客户端希望拿到的下发配置信息，这里我的需求就是一个<strong>key-value</strong>形式的json字符串，value里面是客户端可以自己解析出来使用的结构即可。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"base_setting"</span>: &#123;</div><div class="line">        <span class="string">"key_1"</span>: <span class="string">"value_1"</span>,</div><div class="line">        <span class="string">"key_2"</span>: <span class="string">"value_2"</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>2.元信息（meta-info）：<strong>业务(bizType) -&gt; 平台(platform) -&gt; 版本(version)</strong></li></ul><p>元信息代表着按需选择配置的条件。例如，对于同一个配置项<code>key_1</code>，对于业务1，它的值是0，对于业务2，它的值是1。或者对于配置项<code>key_2</code>，不会下发给业务1，只下发给业务2。这两类情况都应该能够在配置中心实现配置。</p><p>此外，<strong>业务-&gt;平台-&gt;版本</strong>，这三个<strong>元信息之间的优先级顺序关系一定要明确</strong>，例如，业务1下面可以有iOS、Android两个平台；iOS下面又可以有1.0.0、2.0.0等多个版本。因此我认为版本的配置优先级要高于平台，平台的配置优先级要高于业务。</p><h1 id="三、数据关系的设计"><a href="#三、数据关系的设计" class="headerlink" title="三、数据关系的设计"></a>三、数据关系的设计</h1><p>数据关系如何设计，取决于两点：</p><ul><li><strong>1.每一项配置是如何生成的？</strong></li></ul><p>（1）当用户添加一个新的配置时，需要添加它的<strong>key（下发的key）、defaultValue（默认值）、name（语义上可读配置名称）</strong>。</p><p>（2）然后根据需要，按照<strong>业务 -&gt; 平台 -&gt; 版本</strong>的顺序，逐级地选择这个配置支持的元信息。每一步选择时都需要设定一个单独的value。这里可以不用每一级元信息都要选择，只要选择到了第一级的<strong>业务</strong>，客户端就已经可以拿到这个配置了，如果需要更加细粒度的控制配置的value，才需要选择第二级的<strong>平台</strong>和<strong>版本</strong>。</p><p>（3）把这个配置，和它对应的业务、平台、版本这三个元信息关系，以及各个元信息下面的value都存储下来。所以配置是直接关联着业务、平台、版本这3个元信息的。</p><p>（4）存储业务、平台、版本之间的对应关系，这样才可以明确在逐级选择配置时，每一级都有哪些元信息。这里我实际中存储的是版本范围信息和平台的关系，如<code>bizA | Android | 1.0.0-2.0.0</code>、<code>bizA | iOS | 1.0.0 - 2.0.0</code>。其实在创建每一级元信息的setting-value之前，就应该建立好了这个关系。</p><ul><li><strong>2.对于每一个请求，配置中心是如何处理、最后得到属于这个请求的配置？</strong></li></ul><p>当配置中心的Server接收到一个请求时：</p><p>（1）提取出元信息：业务(bizType)、平台(platform)、版本(version)</p><p>（2）根据业务、平台、版本找到和它关联的所有配置项。</p><blockquote><p>结合一个实例理解上面的两点：假设有2种业务，2个平台，2个版本范围，那么元信息的各种组合最多就是8种，所以每一个配置项的取值最多就是8种，我们可以选择不给某一种元信息下发这个配置，或者下发它独立的配置值。</p></blockquote><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>在设计过程中，其实就是要解决：配置结构长什么样，需要哪些元信息，元信息之间的关系是什么样的，怎么保存元信息之间的关系。这里我的需求比较简单，想到的方案也可能不是很好。实际中可能还有更多元信息，例如如果含有渠道ID，我们还可能加一个app_setting来覆盖base_setting。希望可以见到更多关于这方面的讨论和分享。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;App开发中一个比较常见的问题就是动态化，有时我们会需要程序的某一个逻辑可以动态改变而不需要发版本让用户重新安装。例如，App中的某个WebView有一个url白名单，我们希望它可以动态改变。这是个常见的需求，现在无论是技术面上还是产品上大家都在讲一个动态化，所以一波接一波出了各种插件化，甚至是ReactNative、weex、微信小程序等等这些轮子。&lt;/p&gt;
&lt;p&gt;但是在实际中需要考虑到很多的业务特点，使得我们在&lt;strong&gt;统一化&lt;/strong&gt;和&lt;strong&gt;个性化&lt;/strong&gt;的时候比较难以选择，半年前天猫的技术博客就出了这篇文章–&lt;a href=&quot;http://pingguohe.net/2016/03/18/config-center.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;动态调整的基础 —— 配置中心&lt;/a&gt;，里面介绍了阿里的团队在这方面的实践经验。今天我以一个遇到的实际需求为例，总结下我的想法。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="客户端" scheme="http://unclechen.github.io/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
      <category term="服务器" scheme="http://unclechen.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="动态化" scheme="http://unclechen.github.io/tags/%E5%8A%A8%E6%80%81%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android反编译技术总结</title>
    <link href="http://unclechen.github.io/2016/09/07/Android%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://unclechen.github.io/2016/09/07/Android反编译技术总结/</id>
    <published>2016-09-07T00:00:00.000Z</published>
    <updated>2018-05-20T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Apk反编译工具及其使用方法"><a href="#一、Apk反编译工具及其使用方法" class="headerlink" title="一、Apk反编译工具及其使用方法"></a>一、Apk反编译工具及其使用方法</h1><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h2><p>学习反编译之前，建议先学习一下Apk打包的过程，明白打包完成后的Apk里面都有什么文件，各种文件都是怎么生成的。</p><p>这里有两篇AndroidWeekly中推荐过的好文章：</p><ul><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&amp;mid=2247483789&amp;idx=1&amp;sn=6aed8c7907d5bd9c8a5e7f2c2dcdac2e&amp;scene=1&amp;srcid=0831CCuRJsbJNuz1WxU6uUsI#wechat_redirect" target="_blank" rel="external">浅析 Android 打包流程</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzI1NjEwMTM4OA==&amp;mid=2651232113&amp;idx=1&amp;sn=02f413999ab0865e23d272e69b9e6196&amp;scene=1&amp;srcid=0831gT4p6M0NFG5HTTeRHTUC#wechat_redirect" target="_blank" rel="external">Android构建过程分析</a></p></li></ul><p>Apk技术也有非常多的技术可以学习，主要都是围绕着如何减小体积，如何提高打包速度展开，这里先不多说了。下面是一张基本的Apk文件结构图。</p><p><img src="http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l2d6e4z5j20a80a0jrw.jpg" alt="APK文件结构"></p><a id="more"></a><p>Apk文件本质上其实是一个zip包。直接拿解压工具解压就可以看到其中包含了什么。下面简单介绍一下Apk文件的结构。</p><ul><li>AndroidManifest.xml：应用的全局配置文件</li><li>assets文件夹：原始资源文件夹，对应着Android工程的assets文件夹，一般用于存放原始的网页、音频等等，与res文件夹的区别这里不再赘述，可以参考上面介绍的两篇文章。</li><li>classes.dex：源代码编译成class后，转成jar，再压缩成dex文件，dex是可以直接在Android虚拟机上运行的文件。</li><li>lib文件夹：引用的第三方sdk的so文件。</li><li>META-INF文件夹：Apk签名文件。</li><li>res文件夹：资源文件，包括了布局、图片等等。</li><li>resources.arsc：记录资源文件和资源id的映射关系。</li></ul><p>上面的截图中每个文件都是一个最基本的Apk<br>文件应该包含在内的。但是直接把Apk当做zip解压后的这些文件是没法直接阅读的，毕竟他们都是经过了build-tools打包工具处理过的。我们直接用文本编辑器打开这里面的Manifest文件看看。</p><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f7kzdom045j20go06sjul.jpg" alt="反编译前的Manifest文件"></p><p><strong>反编译Apk</strong>的目的就是Apk拆成我们可以阅读的文件。通过反编译，我们一般想要得到里面的<strong>AndroidManifest.xml文件</strong>、<strong>res文件</strong>和<strong>java代码</strong>。</p><h2 id="2-Apk反编译步骤"><a href="#2-Apk反编译步骤" class="headerlink" title="2.Apk反编译步骤"></a>2.Apk反编译步骤</h2><h3 id="1-ApkTool拆包，得到AndroidManifest和res等资源文件"><a href="#1-ApkTool拆包，得到AndroidManifest和res等资源文件" class="headerlink" title="(1) ApkTool拆包，得到AndroidManifest和res等资源文件"></a>(1) ApkTool拆包，得到AndroidManifest和res等资源文件</h3><p><strong>工具下载地址：</strong><a href="https://bitbucket.org/iBotPeaches/apktool/downloads" target="_blank" rel="external">https://bitbucket.org/iBotPeaches/apktool/downloads</a></p><p><strong>功能：</strong>拆解Apk文件，反编译其中的资源文件，将它们反编译为可阅读的<strong>AndroidManifest.xml文件</strong>和<strong>res文件</strong>。前面讲过，直接把Apk文件当做zip解压，得到的xml资源文件，都是无法直接用文本编辑器打开阅读的，因为它们在打包时经过了build-tools的处理。</p><p><strong>用法：</strong>官网<a href="https://ibotpeaches.github.io/Apktool/documentation/" target="_blank" rel="external">https://ibotpeaches.github.io/Apktool/documentation/</a>有介绍，最新版本是<strong>2.2.0</strong>，运行环境需要<strong>jre1.7</strong>。</p><p>这里，我演示一下用apktool来拆解Apk文件的基本方法，只需要在终端里面执行下面的命令。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">java -jar apktool<span class="selector-class">.jar</span> d yourApkFile.apk</div><div class="line"><span class="comment">// 注意`apktool.jar`是刚才下载后的jar的名称，`d`参数表示decode</span></div><div class="line"><span class="comment">// 在这个命令后面还可以添加像`-o -s`之类的参数，例如</span></div><div class="line"><span class="comment">// java -jar apktool.jar d yourApkFile.apk -o destiantionDir -s</span></div><div class="line"><span class="comment">// 几个主要的参数设置方法及其含义：</span></div><div class="line">-f 如果目标文件夹已存在，强制删除现有文件夹</div><div class="line">-o 指定反编译的目标文件夹的名称（默认会将文件输出到以Apk文件名命名的文件夹中）</div><div class="line">-s 保留classes.dex文件（默认会将dex文件解码成smali文件）</div><div class="line">-r 保留resources.arsc文件（默认会将resources.arsc解码成具体的资源文件）</div></pre></td></tr></table></figure><p>下面我们看一下<code>java -jar apktool.jar d yourApkFile.apk</code>拆解后的结果：</p><p><img src="http://ww1.sinaimg.cn/large/801b780agw1f7kxk0y0i9j20h00c6dgm.jpg" alt="Apk拆包结果"></p><p>我们已经得到一个可以用文本编辑器打开的阅读的<strong>AndroidManifest.xml文件、assets文件夹、res文件夹、smali文件夹</strong>等等。original文件夹是原始的AndroidManifest.xml文件，res文件夹是反编译出来的所有资源，smali文件夹是反编译出来的代码。注意，smali文件夹下面，结构和我们的源代码的package一模一样，只不过换成了smali语言。它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言。</p><p>这时，我们已经可以文本编辑器打开<strong>AndroidManifest.xml</strong>文件和<strong>res下面的layout文件</strong>了。这样，我们就可以查看到这个Apk文件的<strong>package包名、Activity组件、程序所需要的权限、xml布局、图标</strong>等等信息。其实我们把Apk上传到应用市场时，应用市场也会通过类似的方式解析我们的apk。</p><blockquote><p><strong>note1：</strong>其实还有一种方法，可以省去每次解包时，都要输入<code>java -jar apktool.jar xxx</code>这行命令，官网也有说明，就是将这个命令包装成shell脚本，方法见：<a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="external">https://ibotpeaches.github.io/Apktool/install/</a></p><p><strong>note2：</strong>如果你在编译的时候，发现终端里面提示发生了<strong>brut.android.UndefinedResObject</strong>错误，说明你的apktool.jar版本太低了，需要去下载新版工具了。</p><p><strong>note3：</strong>如果想要自己实现一个解析Apk文件，提取版本、权限信息的<strong><em>java</em></strong>服务时，可以引用<code>apktool.jar</code>中的<code>ApkDecoder</code>，调用<code>decode</code>方法来实现。可以看下图中，apktool.jar里面有解析Apk文件的实现。</p></blockquote><p><img src="http://ww4.sinaimg.cn/large/801b780agw1f7kxsfcc9gj20m80f8ju0.jpg" alt="apktool.jar"></p><h3 id="2-dex2jar反编译dex文件，得到java源代码"><a href="#2-dex2jar反编译dex文件，得到java源代码" class="headerlink" title="(2) dex2jar反编译dex文件，得到java源代码"></a>(2) dex2jar反编译dex文件，得到java源代码</h3><p>上一步中，我们得到了反编译后的资源文件，这一步我们还想看java源代码。这里要用的工具就是<strong>dex2jar</strong>。</p><p><strong>工具下载地址：</strong><a href="https://sourceforge.net/projects/dex2jar/" target="_blank" rel="external">https://sourceforge.net/projects/dex2jar/</a></p><p><strong>功能：</strong>将dex格式的文件，转换成jar文件。dex文件时Android虚拟机上面可以执行的文件，jar文件大家都是知道，其实就是java的class文件。在<a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="external">官网</a>有详细介绍。</p><p><strong>用法：</strong>打开下载的dex2jar-2.0文件夹，里面有shell和bat脚本，进入终端，就可以在命令行使用了。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d2j-dex2jar classes.dex</div><div class="line"><span class="comment">// 获取classes.dex文件在最前面说过，只要把Apk当做zip解压出来，里面就有dex文件了</span></div><div class="line"><span class="comment">// 或者用apktool反编译时带上 `-s` 参数</span></div></pre></td></tr></table></figure><p>运行后，可以看到<strong>classes.dex</strong>已经变成了<strong>classes-dex2jar.jar</strong>。</p><p><img src="http://ww4.sinaimg.cn/large/801b780agw1f7kyy6qkwhj20go0e675q.jpg" alt="进入dex2jar文件夹"></p><blockquote><p><strong>note1：</strong>第一次下载下来后，在mac里运行的时候可能会提示需要管理员的权限，这里我给这些sh脚本<code>chmod 777</code>后，即可运行它。</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/801b780agw1f7kz7zdeewj20go018t92.jpg" alt="root执行dex2jar"></p><blockquote><p><strong>note2：</strong>写完这一节的时候，我发现<strong>把dex转换成jar</strong>已经有了更好的工具<strong>enjarify</strong>，<a href="https://github.com/google/enjarify" target="_blank" rel="external">https://github.com/google/enjarify</a>这个工具是谷歌官方开源的用于反编译dex文件的。使用方法和dex2jar差不多，也是简单的命令行操作。这个工具的主页中也提到dex2jar已经是一个比较老的工具，在遇到混淆等等复杂的情况时，可能无法正常工作。所以这里推荐大家使用<strong>enjarify</strong>这个工具。</p></blockquote><h3 id="3-jd-gui查看java源代码"><a href="#3-jd-gui查看java源代码" class="headerlink" title="(3) jd-gui查看java源代码"></a>(3) jd-gui查看java源代码</h3><p><strong>工具下载地址：</strong>官网<a href="http://jd.benow.ca/" target="_blank" rel="external">http://jd.benow.ca/</a>上选择自己所需要的版本。</p><p><strong>功能：</strong>这个工具不用多说，写java的人都知道。有时候我们自己开发一个jar包给别人用，也会用它来查看class是不是都被正确的打入到了jar内，我以前介绍的gradle自定义打包jar的博客中也提到过它。</p><p><strong>用法：</strong>下载后双击既可以运行这个工具，直接把上一步得到的<strong>classes-dex2jar.jar</strong>拖到jd-gui程序的界面上即可打开了，效果如下图所示。</p><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f7kzaffqirj20go04lmxb.jpg" alt="classes-dex2jar.jar"></p><h3 id="反编译Apk步骤小结"><a href="#反编译Apk步骤小结" class="headerlink" title="反编译Apk步骤小结"></a>反编译Apk步骤小结</h3><p>反编译一个Apk，查看它的资源文件和java代码，我们需要用到3个工具。</p><ul><li>apktool：<a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">https://ibotpeaches.github.io/Apktool/</a></li><li>dex2jar：<a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="external">https://github.com/pxb1988/dex2jar</a></li><li>jd-gui：<a href="http://jd.benow.ca/" target="_blank" rel="external">http://jd.benow.ca/</a></li></ul><p>反编译就是用这3个工具得到AndroidManifest.xml、res、java代码等。但是我们可以看到，如果你要对一个Apk做尽可能彻底的反编译，把它扒得干干净净，这一步一步的基本操作还是稍显麻烦。另外加固过Apk的情况可能更复杂，需要我们勤动手尝试。为了能提高效率，下面我把自己见过的一些集成工具介绍给大家，尽可能实现可以一键反编译Apk。</p><h1 id="二、自动化工具汇总（一键反编译Apk）"><a href="#二、自动化工具汇总（一键反编译Apk）" class="headerlink" title="二、自动化工具汇总（一键反编译Apk）"></a>二、自动化工具汇总（一键反编译Apk）</h1><h2 id="1-谷歌提供的工具：android-classyshark"><a href="#1-谷歌提供的工具：android-classyshark" class="headerlink" title="1.谷歌提供的工具：android-classyshark"></a>1.谷歌提供的工具：<a href="http://classyshark.com/" target="_blank" rel="external">android-classyshark</a></h2><p><strong>下载地址：</strong><a href="https://github.com/google/android-classyshark/releases" target="_blank" rel="external">https://github.com/google/android-classyshark/releases</a>，下载下来之后是一个可执行的jar文件，win下或者mac下都只要双击即可运行。</p><p><strong>功能：</strong>带有界面，一键反编译Apk工具，直接打开Apk文件，就可以看到Apk中所有的文件结构，甚至还集成了dex文件查看，java代码查看，方法数分析、导入混淆mapping文件等一系列工具。谷歌推出这个工具的目的是为了让我们开发者更清楚的了解自己的Apk中都有什么文件、混淆前后有什么变化，并方便我们进一步优化自己的Apk打包实现。下面带上几张截图，真是帅气的一笔的好工具啊！</p><p><img src="http://ww1.sinaimg.cn/large/801b780agw1f7l03o4znvj20m80e8n0f.jpg" alt="dex文件查看"></p><p><img src="http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l21d8lm6j20p009iac1.jpg" alt="方法数分析"></p><p>即将到来的<strong>Android Studio 2.2</strong>中集成了一个叫做<strong>APK Analyzer</strong>的功能，这个功能不知道是不是和这个工具有关系呢，本人还没有尝试过2.2版本，有兴趣的朋友可以体验一下<a href="http://android-developers.blogspot.com/2016/05/android-studio-22-preview-new-ui.html" target="_blank" rel="external">preview版本</a>。</p><h2 id="2-Python实现的工具：AndroidGuard"><a href="#2-Python实现的工具：AndroidGuard" class="headerlink" title="2.Python实现的工具：AndroidGuard"></a>2.Python实现的工具：<a href="https://github.com/androguard/androguard" target="_blank" rel="external">AndroidGuard</a></h2><p><strong>下载地址：</strong><a href="https://github.com/androguard/androguard/releases" target="_blank" rel="external">https://github.com/androguard/androguard/releases</a></p><p><strong>功能：</strong>集成了反编译资源、代码等各种文件的工具包。需要安装Python环境来运行这个工具，这个工具按照不同的反编译需求，分别写成了不同的py功能模块，还有静态分析的功能。所以如果想要用Python开发一个解析Apk文件并进行静态扫描分析的服务，可以引用这个工具来实现。</p><p><strong>用法：</strong>具体用法比较多，这里也不再展开了。可以通过工具内置的<code>-h</code>帮助指令查看各个模块的功能。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">unclechendeiMac:androguard-2.0 unclechen$ python androaxml.py -<span class="built_in">h</span></div><div class="line">Usage: androaxml.py [options]</div><div class="line"></div><div class="line">Options:</div><div class="line">  -<span class="keyword">h</span>, --<span class="keyword">help</span>            show this <span class="keyword">help</span> message and <span class="keyword">exit</span></div><div class="line">  -i <span class="keyword">INPUT</span>, --<span class="keyword">input</span>=<span class="keyword">INPUT</span></div><div class="line">                        filename <span class="keyword">input</span> (APK or android's binary xml)</div><div class="line">  -o OUTPUT, --output=OUTPUT</div><div class="line">                        filename output of the xml</div><div class="line">  -v, --<span class="keyword">version</span>         <span class="keyword">version</span> of the API</div><div class="line"></div><div class="line"><span class="comment">// androaxml.py这个模块是用来解析AndroidManifest文件的，`-i` 表示输入的apk文件，`-o` 表示输出xml文件。</span></div></pre></td></tr></table></figure><h2 id="3-Mac专属工具：Android-Crack-Tool"><a href="#3-Mac专属工具：Android-Crack-Tool" class="headerlink" title="3.Mac专属工具：Android-Crack-Tool"></a>3.Mac专属工具：<a href="https://github.com/Jermic/Android-Crack-Tool" target="_blank" rel="external">Android-Crack-Tool</a></h2><p><strong>功能：</strong>这是网上一位名为<a href="https://github.com/Jermic" target="_blank" rel="external">Jermic</a>的大神开发的、在Mac环境下使用的App，集成了Android开发中常见的一些编译/反编译工具，方便用户对Apk进行逆向分析，提供Apk信息查看功能。工具的截图如下所示，非常强大。</p><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f7l1q0hwugj20rs0gtwjl.jpg" alt="Android-Crack-Tool.app"></p><h2 id="4-手机上的反编译工具：ApkParser"><a href="#4-手机上的反编译工具：ApkParser" class="headerlink" title="4.手机上的反编译工具：ApkParser"></a>4.手机上的反编译工具：<a href="https://github.com/jaredrummler/APKParser" target="_blank" rel="external">ApkParser</a></h2><p><strong>功能：</strong>在电脑上已经有了这么多的工具，在手机上的也有很方便的工具。<strong>APKParser</strong>是一款在查看手机上已经安装的Apk的信息的工具，他可以查看软件的<strong>AndroidManifest.xml文件、方法数、res资源文件</strong>，并在手机上直接展示出来。个人觉得这是一个非常实用的工具，作为开发者，手机里面必须要有它。</p><p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f7l1wnbkv1j20m80b4jtf.jpg" alt="ApkParser"></p><h2 id="5-工具汇总"><a href="#5-工具汇总" class="headerlink" title="5.工具汇总"></a>5.工具汇总</h2><p>以上几款工具都是我体验过、感觉不错的集成工具，推荐给大家。临近本文结束前，又发现了这么一个福利网站-<a href="http://www.androiddevtools.cn/" target="_blank" rel="external">http://www.androiddevtools.cn/</a>，其中有一章专门总结了各种Apk反编译的工具。相信有了这么多的利器，大家应该有100种方法将一个App扒得干干净净了。</p><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f7l112kl4yj20m80pfwiq.jpg" alt="Apk反编译工具汇总"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、Apk反编译工具及其使用方法&quot;&gt;&lt;a href=&quot;#一、Apk反编译工具及其使用方法&quot; class=&quot;headerlink&quot; title=&quot;一、Apk反编译工具及其使用方法&quot;&gt;&lt;/a&gt;一、Apk反编译工具及其使用方法&lt;/h1&gt;&lt;h2 id=&quot;1-原理&quot;&gt;&lt;a href=&quot;#1-原理&quot; class=&quot;headerlink&quot; title=&quot;1.原理&quot;&gt;&lt;/a&gt;1.原理&lt;/h2&gt;&lt;p&gt;学习反编译之前，建议先学习一下Apk打包的过程，明白打包完成后的Apk里面都有什么文件，各种文件都是怎么生成的。&lt;/p&gt;
&lt;p&gt;这里有两篇AndroidWeekly中推荐过的好文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&amp;amp;mid=2247483789&amp;amp;idx=1&amp;amp;sn=6aed8c7907d5bd9c8a5e7f2c2dcdac2e&amp;amp;scene=1&amp;amp;srcid=0831CCuRJsbJNuz1WxU6uUsI#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅析 Android 打包流程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NjEwMTM4OA==&amp;amp;mid=2651232113&amp;amp;idx=1&amp;amp;sn=02f413999ab0865e23d272e69b9e6196&amp;amp;scene=1&amp;amp;srcid=0831gT4p6M0NFG5HTTeRHTUC#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android构建过程分析&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apk技术也有非常多的技术可以学习，主要都是围绕着如何减小体积，如何提高打包速度展开，这里先不多说了。下面是一张基本的Apk文件结构图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l2d6e4z5j20a80a0jrw.jpg&quot; alt=&quot;APK文件结构&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="反编译" scheme="http://unclechen.github.io/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Android地理位置服务解析</title>
    <link href="http://unclechen.github.io/2016/09/02/Android%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E8%A7%A3%E6%9E%90/"/>
    <id>http://unclechen.github.io/2016/09/02/Android地理位置服务解析/</id>
    <published>2016-09-02T00:00:00.000Z</published>
    <updated>2018-05-20T13:04:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手机设备有哪几种定位方式"><a href="#手机设备有哪几种定位方式" class="headerlink" title="手机设备有哪几种定位方式"></a>手机设备有哪几种定位方式</h1><h2 id="GPS"><a href="#GPS" class="headerlink" title="GPS"></a>GPS</h2><p>基于卫星发射的信号，可以推算出手机到每颗卫星的距离，根据卫星的位置，推测出手机的位置。</p><p>这是一张简单的GPS定位原理图，需要一点数学知识，先不讨论这个细节，需要的同学看<a href="http://baike.baidu.com/view/193655.htm" target="_blank" rel="external">这里</a>。</p><p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f7fbixzcaxj20dw0bo750.jpg" alt="gps定位原理图"></p><p>现在卫星信号全球都覆盖了，手机一般都有GPS芯片，因此可以实现定位。GPS方式准确度是最高的，走卫星通道，不需要联网就可以要使用。但是它的缺点也非常明显：</p><ul><li>1.比较耗电; </li><li>2.绝大部分用户默认不开启GPS模块，也不会长时间开着; </li><li>3.从GPS模块启动到获取第一次定位数据，可能需要<strong>比较长的时间</strong>; </li><li>4.<strong>只能在户外使用</strong>，当有遮挡物干扰时，几乎无法使用，如城市大楼密集的地方。</li></ul><a id="more"></a><h2 id="WiFi"><a href="#WiFi" class="headerlink" title="WiFi"></a>WiFi</h2><p>通过获取当前所连接的WiFi热点的一些信息，然后访问定位服务以获得经纬度坐标。</p><p>这是一张简单的WiFi定位原理图。</p><p><img src="http://ww3.sinaimg.cn/large/65e4f1e6gw1f7fbjjbmesj20b408a0t0.jpg" alt="WiFi定位原理图"></p><p>因为WiFi热点一般都是固定位置，所以只要能知道手机连接的WiFi热点的位置，也就可以推算出手机的位置。而且由于手机一般连接的WiFi不会太远，所以其实精确度也不会太差。也不会像GPS那样需要耗时比较久才能获得位置信息。</p><h2 id="Cell-ID"><a href="#Cell-ID" class="headerlink" title="Cell-ID"></a>Cell-ID</h2><p>采集到手机所连接的基站ID号(cellid)和其它的一些信息(MNC，MCC，LAC等)，然后通过网络访问定位服务，获取并返回对应的经纬度坐标。</p><p>这是一张简单的基站定位原理图。</p><p><img src="http://ww2.sinaimg.cn/large/65e4f1e6gw1f7fbjts47yj20b40bqq3o.jpg" alt="基站定位原理"></p><p>现在各大运营商的基站已经覆盖了全国大部分地区，每个基站的ID号是全球唯一的，只要有手机信号，就能接收到周围基站的信号。基站定位的精确度不如GPS，但优点是能够在室内用，只要网络通畅就行。</p><p>其实各种定位方式，大体都是基于三角定位的原理，不过计算的时候会有一些自己的特点，这里先不深究背景知识了。下面进入正题。</p><h1 id="Android系统上如何获取地理位置"><a href="#Android系统上如何获取地理位置" class="headerlink" title="Android系统上如何获取地理位置"></a>Android系统上如何获取地理位置</h1><h2 id="方法1：Google-Play-Service提供的API"><a href="#方法1：Google-Play-Service提供的API" class="headerlink" title="方法1：Google Play Service提供的API"></a>方法1：Google Play Service提供的API</h2><p>这个不多说，因为国内不可用！！！ </p><p>需要的同学可以自己爬梯子看下用法，比较简单：<a href="https://developer.android.com/google/play-services/location.html" target="_blank" rel="external">https://developer.android.com/google/play-services/location.html</a></p><h2 id="方法2：系统提供的原生API：主要就是系统的android-location中提供的两个类。"><a href="#方法2：系统提供的原生API：主要就是系统的android-location中提供的两个类。" class="headerlink" title="方法2：系统提供的原生API：主要就是系统的android.location中提供的两个类。"></a>方法2：系统提供的原生API：主要就是系统的<code>android.location</code>中提供的两个类。</h2><ul><li><strong>LocationManager：</strong>和大多数系统提供的<strong>SystemService</strong>一样是单例，通过<code>locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);</code>来获取。</li><li><strong>LocationListener：</strong>非常典型的观察者模式，需要监听地理位置的时候，创建一个<strong>Listener</strong>，实现LocationListener中的几个回调方法。把Listener传给LocationManager，当地理位置变化的时候就会回调<code>onLocationChanged(Location location)</code>发出通知。</li><li>官方指导：<a href="https://developer.android.com/guide/topics/location/strategies.html" target="_blank" rel="external">https://developer.android.com/guide/topics/location/strategies.html</a></li></ul><h2 id="方法3：使用百度、高德之类的地图SDK。"><a href="#方法3：使用百度、高德之类的地图SDK。" class="headerlink" title="方法3：使用百度、高德之类的地图SDK。"></a>方法3：使用百度、高德之类的地图SDK。</h2><p>这简直就是大招了，各家都有自己的数据库，比起系统提供的API强太多了。这个这次也不说，各家的接入文档写的很清楚。</p><h1 id="使用原生API采集地理位置的方法"><a href="#使用原生API采集地理位置的方法" class="headerlink" title="使用原生API采集地理位置的方法"></a>使用原生API采集地理位置的方法</h1><p>下面介绍一下我对使用原生API的理解，毕竟不是所有场景都需要用到大招级别的sdk，有的情况我们需要自己实现定位服务。</p><h2 id="1-首先需要了解PROVIDER"><a href="#1-首先需要了解PROVIDER" class="headerlink" title="1.首先需要了解PROVIDER"></a>1.首先需要了解<strong>PROVIDER</strong></h2><p>看过前面介绍的3种定位方式之后，可以很容易理解PROVIDER是什么。其实它就对应着地理位置采集的几种方式：</p><ul><li>LocationManager.GPS_PROVIDER：通过gps来获取地理位置的经纬度信息，优点：获取地理位置信息精确度高，缺点：只能在户外使用，<strong>耗时，耗电</strong>。</li><li>LocationManager.NETWORK_PROVIDER：通过移动网络的基站或者WiFi来获得地理位置，优点：只要有网络，获取速度快，耗电低，在室内室外都可以使用。</li><li>LocationManager.PASSIVE_PROVIDER：被动的接收更新的地理位置信息，而不用自己主动请求地理位置。意思就是共享手机上其他App采集的位置信息，而不是自己主动去采集。</li></ul><p>下图是3种Provider的特点和区别：</p><p><img src="http://ww3.sinaimg.cn/large/65e4f1e6gw1f7f3p1sx4aj20kp0g5acw.jpg" alt="3种Provider的特点"></p><h2 id="2-打开手机的设置"><a href="#2-打开手机的设置" class="headerlink" title="2.打开手机的设置"></a>2.打开手机的设置</h2><p>先看下原生系统中地理位置设置的界面截图：</p><p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f47p124kj20rs0m376v.jpg" alt="地理位置设置截图"></p><p>以原生系统为例，需要采集地理位置时，需要：</p><ul><li>打开通知栏的GPS开关</li><li>进入<code>设置-&gt;位置信息-&gt;模式</code>，打开开关。然后我们可以看到，这里有3类模式：<ul><li>高精确度：使用GPS、WLAN、蓝牙或者移动网络确定位置</li><li>节电：使用WLAN、蓝牙或者移动网络确定位置</li><li>仅限设备：使用GPS确定位置</li></ul></li></ul><p><strong>PS：</strong>我发现小米手机上，即使你把通知栏里面地理位置开关关闭了，进入系统的设置界面，还是可以看到地理位置是开启的，默认选择的是<code>节电</code>模式。而原生系统你只要在通知栏关闭了开关，就无法使用定位服务了。这里感觉国内厂商在细节上可能会有一些不同的实现。</p><h2 id="3-给你的App注册权限"><a href="#3-给你的App注册权限" class="headerlink" title="3.给你的App注册权限"></a>3.给你的App注册权限</h2><p>当你在代码里面使用3种不同的Provider时，应该关注到两个权限：</p><ul><li>LocationManager.GPS_PROVIDER：android.permission.ACCESS_FINE_LOCATION</li><li>LocationManager.NETWORK_PROVIDER：android.permission.ACCESS_COARSE_LOCATION 或者 android.permission.ACCESS_FINE_LOCATION。<ul><li>当声明ACCESS_FINE_LOCATION时，拿到的位置信息将更精确（几十米到几百米）</li><li>当声明ACCESS_COARSE_LOCATION时，拿到的位置会粗略一点（几百米到几千米）</li></ul></li><li>LocationManager.PASSIVE_PROVIDER：android.permission.ACCESS_COARSE_LOCATION </li></ul><blockquote><p>注意：如果声明了ACCESS_FINE_LOCATION时，就不用再声明ACCESS_COARSE_LOCATION了，因为ACCESS_FINE_LOCATION已经包含了使用NETWORK_PROVIDER的能力。此外从Android6.0开始，ACCESS_FINE_LOCATION和ACCESS_COARSE_LOCATION已经是<strong><em>dangerous permission</em></strong>，开发者需要注意这一点，当用户在运行你的App时，如果没有授权，仍然是无法获取到地理位置信息的。</p></blockquote><h2 id="4-根据需求的场景写代码（记住要尽量省电）"><a href="#4-根据需求的场景写代码（记住要尽量省电）" class="headerlink" title="4.根据需求的场景写代码（记住要尽量省电）"></a>4.根据需求的场景写代码（<strong>记住要尽量省电</strong>）</h2><p><strong>一定要省电：</strong>这是一个非常重要的用户体验，我们应该对自己做的App负责。什么时候开始使用地理位置服务，什么时候停止使用，我们一定要想清楚，尽量不要一直占用着这种高耗电的资源。</p><h3 id="4-1基本代码"><a href="#4-1基本代码" class="headerlink" title="4.1基本代码"></a>4.1基本代码</h3><p>下面看代码，一段基本的获取地理位置的代码是这么写的，这段代码可以让你通过异步的方式获取到用户的地理位置。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获得Location Manager的实例</span></div><div class="line">LocationManager locationManager = (LocationManager) <span class="keyword">this</span>.getSystemService(Context.LOCATION_SERVICE);</div><div class="line"></div><div class="line"><span class="comment">// 定义一个监听器，实现onLocationChanged方法，在这个方法里面可以拿到更新后的地理位置</span></div><div class="line">LocationListener locationListener = <span class="keyword">new</span> LocationListener() &#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onLocationChanged</span><span class="params">(Location location)</span> </span>&#123;</div><div class="line">      <span class="comment">// 新的Location值在这里返回，Location实例中包含着纬度、经度、海拔、精确度、更新时间等一系列信息。</span></div><div class="line">      makeUseOfNewLocation(location);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onStatusChanged</span><span class="params">(String provider, <span class="keyword">int</span> status, Bundle extras)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onProviderEnabled</span><span class="params">(String provider)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onProviderDisabled</span><span class="params">(String provider)</span> </span>&#123;&#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"><span class="comment">// 注册监听器，当地理位置变化时，发出通知给Listener。这个方法很关键。4个参数需要了解清楚：</span></div><div class="line"><span class="comment">// 第1个参数：你所使用的provider名称，是个String</span></div><div class="line"><span class="comment">// 第2个参数minTime：地理位置更新时发出通知的最小时间间隔</span></div><div class="line"><span class="comment">// 第3个参数minDistance：地理位置更新发出通知的最小距离，第2和第3个参数的作用关系是“或”的关系，也就是满足任意一个条件都会发出通知。这里第2、3个参数都是0，意味着任何时间，只要位置有变化就会发出通知。</span></div><div class="line"><span class="comment">// 第4个参数：你的监听器</span></div><div class="line">locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, <span class="number">0</span>, <span class="number">0</span>, locationListener);</div></pre></td></tr></table></figure><h3 id="4-2如何优化"><a href="#4-2如何优化" class="headerlink" title="4.2如何优化"></a>4.2如何优化</h3><p>但是实战中一定要尽量去优化，虽然获取地理位置只能是异步的，但是仍然不建议一直不停地监听地理位置的变化。</p><p>谷歌官方也给出了一个采集地理位置的思路，非常值得我们来参考。思路的基本步骤如下：</p><ul><li>启动应用。</li><li>当用户进入到应用中需要使用地理位置场景时，选择一个合适的Provider，开始监听地理位置的变化。</li><li>获取系统中缓存的上次的地理位置<code>LastKnownLocation</code>，保存到当前地理位置变量<code>currentLocation</code>中作为备选值，当拿到新的地理位置后，对比两者，选择最优的那个继续保存它。</li><li>停止监听地理位置的变化。</li><li>使用当前维护着的这个Location作为用户的位置。</li></ul><p>谷歌还给出了这个方案的一个timeline图示。</p><p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f4svf6zsj20mj064ab0.jpg" alt="A timeline representing the window in which an application listens for location updates"></p><h3 id="4-3关键问题"><a href="#4-3关键问题" class="headerlink" title="4.3关键问题"></a>4.3关键问题</h3><p>我们比较关注下面4点：</p><ul><li>1.如何选择一个最好的provider？</li><li>2.什么时候开始监听地理位置变化，什么时候结束？</li><li>3.如何比较两个地理位置，决定哪个更好？</li><li>4.LastknownPostion怎么获取，怎么使用？</li></ul><p>下面介绍我的想法：</p><h4 id="第1点：如何选择一个最好的provider？"><a href="#第1点：如何选择一个最好的provider？" class="headerlink" title="第1点：如何选择一个最好的provider？"></a>第1点：如何选择一个最好的provider？</h4><p>这需要看你的需求。系统中也提供了一些方法来帮我们选择，可以设定一个条件<code>Criteria</code>，指定帅选最符合条件的地理位置提供者，根据Cirteria指定的条件，设备会自动选择哪种location provider。</p><p>代码如下：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="type">Criteria</span> criteria = <span class="function"><span class="keyword">new</span> <span class="title">Criteria</span>();<span class="comment">//</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setAccuracy</span>(<span class="type">Criteria</span>.<span class="type">ACCURACY_FINE</span>);<span class="comment">//设置定位精准度</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setAltitudeRequired</span>(false);<span class="comment">//是否要求海拔</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setBearingRequired</span>(true);<span class="comment">//是否要求方向</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setCostAllowed</span>(true);<span class="comment">//是否要求收费</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setSpeedRequired</span>(true);<span class="comment">//是否要求速度</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setPowerRequirement</span>(<span class="type">Criteria</span>.<span class="type">POWER_LOW</span>);<span class="comment">//设置相对省电</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setBearingAccuracy</span>(<span class="type">Criteria</span>.<span class="type">ACCURACY_HIGH</span>);<span class="comment">//设置方向精确度</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setSpeedAccuracy</span>(<span class="type">Criteria</span>.<span class="type">ACCURACY_HIGH</span>);<span class="comment">//设置速度精确度</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setHorizontalAccuracy</span>(<span class="type">Criteria</span>.<span class="type">ACCURACY_HIGH</span>);<span class="comment">//设置水平方向精确度</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setVerticalAccuracy</span>(<span class="type">Criteria</span>.<span class="type">ACCURACY_HIGH</span>);<span class="comment">//设置垂直方向精确度</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="comment">// 返回满足条件的，当前设备可用的location provider</span></span></div><div class="line"><span class="function"><span class="comment">// 当第2个参数为false时，返回当前设备所有provider中最符合条件的那个（但是不一定可用）。</span></span></div><div class="line"><span class="function"><span class="comment">// 当第2个参数为true时，返回当前设备所有可用的provider中最符合条件的那个。</span></span></div><div class="line"><span class="function"><span class="title">String</span> <span class="title">rovider</span>  = <span class="title">mLocationManager</span>.<span class="title">getBestProvider</span>(criteria,true);</span></div></pre></td></tr></table></figure><p>总之，一共就3个provider，其实对于大部分开发者，选来选去就是<code>gps</code> or <code>network</code>。</p><h4 id="第2点，什么时候开始，什么时候结束？"><a href="#第2点，什么时候开始，什么时候结束？" class="headerlink" title="第2点，什么时候开始，什么时候结束？"></a>第2点，什么时候开始，什么时候结束？</h4><p>我认为最好开启了监听器后，要尽可能早地结束它。也就是不要调用了<code>requestLocationUpdates(provider, minTime, minDistance, listener)</code>让位置服务开始工作后，很长时间都不去<code>removeUpdates(listener)</code>来停止服务。</p><p>虽然在<code>requestLocationUpdates</code>方法中，有<strong>minTime</strong>、<strong>minDistance</strong>参数可以设置。比如设置了60000ms的minTime，希望采更新完一次地理位置后休息60s。或者设置2000米的minDistance，希望位置变化不超过2公里，也休息。这样做<strong>看起来好像</strong>是可以省电。</p><p>但是实测中发现，如果调用<code>requestLocationUpdates(LocationManager.GPS_PROVIDER, 60000, 2000, listener)</code>注册监听器后，系统的状态栏上面的GPS那个小图标一直在显示。只要你不<code>removeUpdates(listener)</code>，他就一直在工作。其实我理解，即使你设置了minTime和minDistance，位置服务还是一直处于工作状态的，不然它怎么知道位置变化超过了你设定的minDistance呢？</p><p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f94tb263j20eu022t8r.jpg" alt="系统栏中的GPS图标"></p><p>所以我的建议是，当你调用<strong>requestLocationUpdates</strong>后，还应该是设置一个定时器，比如30s。当30s时间到了之后，就<strong>removeUpdate</strong>，不再监听地理位置了，转而使用备选的LastKnownLocation。当下次需要使用地理位置时，再重新注册监听器，监听30s，然后就移除监听器。如果对实时性要求高，我们可以在用户进入App中某个需要定位服务的场景之前，采用这个方法获取一次地理位置，把它保存下来。</p><h4 id="第3点，如何比较两个Location，选出更好的那个？"><a href="#第3点，如何比较两个Location，选出更好的那个？" class="headerlink" title="第3点，如何比较两个Location，选出更好的那个？"></a>第3点，如何比较两个Location，选出更好的那个？</h4><p>谷歌也给出了代码示例，先看一下。</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TWO_MINUTES = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">/** Determines whether one Location reading is better than the current Location fix</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> location  The new Location that you want to evaluate</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> currentBestLocation  The current Location fix, to which you want to compare the new one</span></div><div class="line"><span class="comment">  */</span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span> isBetterLocation(Location location, Location currentBestLocation) &#123;</div><div class="line">    <span class="keyword">if</span> (currentBestLocation == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// A new location is always better than no location</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Check whether the new location fix is newer or older</span></div><div class="line">    <span class="keyword">long</span> timeDelta = location.getTime() - currentBestLocation.getTime();</div><div class="line">    <span class="keyword">boolean</span> isSignificantlyNewer = timeDelta &gt; TWO_MINUTES;</div><div class="line">    <span class="keyword">boolean</span> isSignificantlyOlder = timeDelta &lt; -TWO_MINUTES;</div><div class="line">    <span class="keyword">boolean</span> isNewer = timeDelta &gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// If it's been more than two minutes since the current location, use the new location</span></div><div class="line">    <span class="comment">// because the user has likely moved</span></div><div class="line">    <span class="keyword">if</span> (isSignificantlyNewer) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="comment">// If the new location is more than two minutes older, it must be worse</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSignificantlyOlder) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Check whether the new location fix is more or less accurate</span></div><div class="line">    <span class="keyword">int</span> accuracyDelta = (<span class="keyword">int</span>) (location.getAccuracy() - currentBestLocation.getAccuracy());</div><div class="line">    <span class="keyword">boolean</span> isLessAccurate = accuracyDelta &gt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">boolean</span> isMoreAccurate = accuracyDelta &lt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">boolean</span> isSignificantlyLessAccurate = accuracyDelta &gt; <span class="number">200</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Check if the old and new location are from the same provider</span></div><div class="line">    <span class="keyword">boolean</span> isFromSameProvider = isSameProvider(location.getProvider(),</div><div class="line">            currentBestLocation.getProvider());</div><div class="line"></div><div class="line">    <span class="comment">// Determine location quality using a combination of timeliness and accuracy</span></div><div class="line">    <span class="keyword">if</span> (isMoreAccurate) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isNewer &amp;&amp; !isLessAccurate) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isNewer &amp;&amp; !isSignificantlyLessAccurate &amp;&amp; isFromSameProvider) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** Checks whether two providers are the same */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isSameProvider(String provider1, String provider2) &#123;</div><div class="line">    <span class="keyword">if</span> (provider1 == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> provider2 == <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> provider1.equals(provider2);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码的策略是：</p><ul><li><p>1.先看更新时间：设定一个时间范围，2分钟。</p><ul><li>如果新的Location比旧的Location获取时间更新，且超过2分钟，那么认为新的Location更好。</li><li>如果新的Location比旧的Location获取时间更老，且超过2分钟，那么认为新的Location不够好。</li><li>如果新的Location比旧的Location获取时间更新，但没有超过2分钟，那么看下它们的精确度。</li></ul></li><li><p>2.再看精确度：设定一个精确度范围，200米。</p><ul><li>如果新的Location比旧的Location精确度更高，那么认为新的Location更好。</li><li>如果新的Location和旧的Location精确度相等，且获取时间更新，那么认为新的Location更好。</li><li>如果新的Location比旧的Location精确度低200m以内，且获取时间更新，来自同一个provider，那么为认为新的Location更好。</li><li>其他情况都认为旧的Location更好。</li></ul></li></ul><p>这段代码是一个参考，我们实际开发中可以更具需要去定义自己的<strong>Better Location</strong>策略。</p><p>另外，从API&gt;=17开始，Location类还增加了一个<code>getElapsedRealtimeNanos</code>方法（获取从系统启动后走过的时间），这是为了解决<code>getTime</code>方法（获取UTC时间）不够精确，容易产生误差的问题。这个方法在比较两个Location时将更加可靠。</p><h4 id="第4点，怎么获取LastknownPostion，怎么使用？"><a href="#第4点，怎么获取LastknownPostion，怎么使用？" class="headerlink" title="第4点，怎么获取LastknownPostion，怎么使用？"></a>第4点，怎么获取LastknownPostion，怎么使用？</h4><p>相信有了第3点，应该知道怎么选择<strong>Better Location</strong>。至于获取LastKnownLocation直接看代码。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Location <span class="attr">gpsLocation</span> = <span class="literal">null</span>;</div><div class="line">Location <span class="attr">networkLocation</span> = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (context.checkCallingOrSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">    <span class="attr">gpsLocation</span> = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (context.checkCallingOrSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">    <span class="attr">networkLocation</span> = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 下面可以比较一下哪个更好...</div><div class="line">Location <span class="attr">currentLocation</span> = gpsLocation;</div><div class="line"><span class="keyword">if</span> (isBetterLocation(currentLocation, networkLocation))&#123;</div><div class="line">    <span class="attr">currentLocation</span> = networkLocation;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h1><p>说了一大堆，我觉得平时开发的时候应该这么做：</p><ul><li>1.确定自己的应用什么时候要开始监听地理位置变化，什么时候停止。</li><li>2.选择一个合适的provider，开始监听它提供的地理位置变化。</li><li>3.读取系统中GPS和NETWORK这两个Provide缓存的<strong>LastKnownPostion</strong>，选出Better Location保存到currentBestLocation变量中。</li><li>4.监听到地理位置更新后，把更新到的Location和保存的currentBestLocation比较，得出Better One，再保存到currentBestLocation变量中。</li><li>5.使用currentBestLocation作为用户的位置，并在合适时机移除监听器。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;手机设备有哪几种定位方式&quot;&gt;&lt;a href=&quot;#手机设备有哪几种定位方式&quot; class=&quot;headerlink&quot; title=&quot;手机设备有哪几种定位方式&quot;&gt;&lt;/a&gt;手机设备有哪几种定位方式&lt;/h1&gt;&lt;h2 id=&quot;GPS&quot;&gt;&lt;a href=&quot;#GPS&quot; class=&quot;headerlink&quot; title=&quot;GPS&quot;&gt;&lt;/a&gt;GPS&lt;/h2&gt;&lt;p&gt;基于卫星发射的信号，可以推算出手机到每颗卫星的距离，根据卫星的位置，推测出手机的位置。&lt;/p&gt;
&lt;p&gt;这是一张简单的GPS定位原理图，需要一点数学知识，先不讨论这个细节，需要的同学看&lt;a href=&quot;http://baike.baidu.com/view/193655.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/65e4f1e6gw1f7fbixzcaxj20dw0bo750.jpg&quot; alt=&quot;gps定位原理图&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在卫星信号全球都覆盖了，手机一般都有GPS芯片，因此可以实现定位。GPS方式准确度是最高的，走卫星通道，不需要联网就可以要使用。但是它的缺点也非常明显：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.比较耗电; &lt;/li&gt;
&lt;li&gt;2.绝大部分用户默认不开启GPS模块，也不会长时间开着; &lt;/li&gt;
&lt;li&gt;3.从GPS模块启动到获取第一次定位数据，可能需要&lt;strong&gt;比较长的时间&lt;/strong&gt;; &lt;/li&gt;
&lt;li&gt;4.&lt;strong&gt;只能在户外使用&lt;/strong&gt;，当有遮挡物干扰时，几乎无法使用，如城市大楼密集的地方。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="定位" scheme="http://unclechen.github.io/tags/%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
</feed>
