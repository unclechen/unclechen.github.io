<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UncleChen的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://unclechen.github.io/"/>
  <updated>2017-12-27T08:29:02.000Z</updated>
  <id>http://unclechen.github.io/</id>
  
  <author>
    <name>unclechen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS埋点技术分析</title>
    <link href="http://unclechen.github.io/2017/12/24/JS%E5%9F%8B%E7%82%B9%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    <id>http://unclechen.github.io/2017/12/24/JS埋点技术分析/</id>
    <published>2017-12-24T00:00:00.000Z</published>
    <updated>2017-12-27T08:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p><a href="http://unclechen.github.io/2017/12/18/Android%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/">上一篇博客</a>分析了Android上的埋点SDK技术原理，这次我们看一下这几种方案在Web页面上的实践。在JS里面同样有代码埋点、全埋点、可视化埋点三种方案，如果对这几种方案的概念不了解可以看下上一篇博客。由于<a href="https://github.com/mixpanel/mixpanel-js" target="_blank" rel="external">mixpanel-js</a>和<a href="https://github.com/sensorsdata/sa-sdk-javascript" target="_blank" rel="external">Sensors Analytics JavaScript SDK</a>都开源了自己的SDK，就以它们为例进行分析。</p><a id="more"></a><h2 id="二、代码埋点"><a href="#二、代码埋点" class="headerlink" title="二、代码埋点"></a>二、代码埋点</h2><p>以Mixpanel为例（源码位于<code>/src/mixpanel-core.js</code>），看一下里面的实现。</p><h3 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h3><p>埋点之前，需要加载SDK，并调用SDK的初始化接口。以Mixpanel为例，官方介入文档提供的加载、初始化SDK代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- start Mixpanel --&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params">e,a</span>)</span>&#123;<span class="keyword">if</span>(!a.__SV)&#123;<span class="keyword">var</span> b=<span class="built_in">window</span>;<span class="keyword">try</span>&#123;<span class="keyword">var</span> c,l,i,j=b.location,g=j.hash;c=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span>(l=a.match(<span class="built_in">RegExp</span>(b+<span class="string">"=([^&amp;]*)"</span>)))?l[<span class="number">1</span>]:<span class="literal">null</span>&#125;;g&amp;&amp;c(g,<span class="string">"state"</span>)&amp;&amp;(i=<span class="built_in">JSON</span>.parse(<span class="built_in">decodeURIComponent</span>(c(g,<span class="string">"state"</span>))),<span class="string">"mpeditor"</span>===i.action&amp;&amp;(b.sessionStorage.setItem(<span class="string">"_mpcehash"</span>,g),history.replaceState(i.desiredHash||<span class="string">""</span>,e.title,j.pathname+j.search)))&#125;<span class="keyword">catch</span>(m)&#123;&#125;<span class="keyword">var</span> k,h;<span class="built_in">window</span>.mixpanel=a;a._i=[];a.init=<span class="function"><span class="keyword">function</span>(<span class="params">b,c,f</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">b,a</span>)</span>&#123;<span class="keyword">var</span> c=a.split(<span class="string">"."</span>);<span class="number">2</span>==c.length&amp;&amp;(b=b[c[<span class="number">0</span>]],a=c[<span class="number">1</span>]);b[a]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;b.push([a].concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,</span></div><div class="line"><span class="actionscript"><span class="number">0</span>)))&#125;&#125;<span class="keyword">var</span> d=a;<span class="string">"undefined"</span>!==<span class="keyword">typeof</span> f?d=a[f]=[]:f=<span class="string">"mixpanel"</span>;d.people=d.people||[];d.toString=<span class="function"><span class="keyword">function</span><span class="params">(b)</span></span>&#123;<span class="keyword">var</span> a=<span class="string">"mixpanel"</span>;<span class="string">"mixpanel"</span>!==f&amp;&amp;(a+=<span class="string">"."</span>+f);b||(a+=<span class="string">" (stub)"</span>);<span class="keyword">return</span> a&#125;;d.people.toString=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> d.toString(<span class="number">1</span>)+<span class="string">".people (stub)"</span>&#125;;k=<span class="string">"disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user"</span>.split(<span class="string">" "</span>);</span></div><div class="line"><span class="javascript"><span class="keyword">for</span>(h=<span class="number">0</span>;h&lt;k.length;h++)e(d,k[h]);a._i.push([b,c,f])&#125;;a.__SV=<span class="number">1.2</span>;b=e.createElement(<span class="string">"script"</span>);b.type=<span class="string">"text/javascript"</span>;b.async=!<span class="number">0</span>;b.src=<span class="string">"undefined"</span>!==<span class="keyword">typeof</span> MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:<span class="string">"file:"</span>===e.location.protocol&amp;&amp;<span class="string">"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js"</span>.match(<span class="regexp">/^\/\//</span>)?<span class="string">"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js"</span>:<span class="string">"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js"</span>;c=e.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];c.parentNode.insertBefore(b,c)&#125;&#125;)(<span class="built_in">document</span>,<span class="built_in">window</span>.mixpanel||[]);</span></div><div class="line"><span class="actionscript">mixpanel.init(<span class="string">"YOUR TOKEN"</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- end Mixpanel --&gt;</span></div></pre></td></tr></table></figure><p>这是一段立即执行的js代码，作用通常是去异步加载真正的JS SDK，然后调用SDK的初始化接口init方法，完成初始化的操作。</p><p>初始化代码为<code>mixpanel.init(&#39;YOUR TOKEN&#39;, { your: &#39;config&#39; }, &#39;library_name&#39;);</code>，也可以简写为<code>mixpanel.init(&quot;YOUR TOKEN&quot;)</code>。</p><p>看下这几个参数的含义：</p><ul><li>第一个参数是你在后台注册的app token</li><li><p>第二个参数是SDK的配置，传入了一堆key-value，如果不传，SDK内部也有个默认配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="string">var</span> <span class="string">DEFAULT_CONFIG</span> <span class="string">=</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">    'api_host':</span> <span class="string">HTTP_PROTOCOL</span> <span class="string">+</span> <span class="string">'api.mixpanel.com'</span><span class="string">,</span></div><div class="line"><span class="attr">    'app_host':</span> <span class="string">HTTP_PROTOCOL</span> <span class="string">+</span> <span class="string">'mixpanel.com'</span><span class="string">,</span></div><div class="line"><span class="attr">    'autotrack':</span> <span class="literal">true</span><span class="string">,</span> <span class="string">//</span> <span class="string">是否打开全埋点监测</span></div><div class="line"><span class="attr">    'cdn':</span> <span class="string">HTTP_PROTOCOL</span> <span class="string">+</span> <span class="string">'cdn.mxpnl.com'</span><span class="string">,</span></div><div class="line"><span class="attr">    'cross_subdomain_cookie':</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    'persistence':</span> <span class="string">'cookie'</span><span class="string">,</span></div><div class="line"><span class="attr">    'persistence_name':</span> <span class="string">''</span><span class="string">,</span></div><div class="line"><span class="attr">    'cookie_name':</span> <span class="string">''</span><span class="string">,</span></div><div class="line"><span class="attr">    'loaded':</span> <span class="string">function()</span> <span class="string">&#123;&#125;,</span></div><div class="line"><span class="attr">    'store_google':</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    'save_referrer':</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    'test':</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">    'verbose':</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">    'img':</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">    'track_pageview':</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    'debug':</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">    'track_links_timeout':</span> <span class="number">300</span><span class="string">,</span></div><div class="line"><span class="attr">    'cookie_expiration':</span> <span class="number">365</span><span class="string">,</span></div><div class="line"><span class="attr">    'upgrade':</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">    'disable_persistence':</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">    'disable_cookie':</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">    'secure_cookie':</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">    'ip':</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">    'property_blacklist':</span> <span class="string">[]</span></div><div class="line"><span class="string">&#125;;</span></div></pre></td></tr></table></figure></li><li><p>第三个参数是SDK全局变量名（可以避免变量名污染）</p></li></ul><blockquote><p>Mixpanel接入文档：<a href="https://mixpanel.com/help/reference/javascript" target="_blank" rel="external">https://mixpanel.com/help/reference/javascript</a></p></blockquote><h3 id="2-2-上报的基本实现"><a href="#2-2-上报的基本实现" class="headerlink" title="2.2 上报的基本实现"></a>2.2 上报的基本实现</h3><p>代码埋点的方式通常都会被封装成类似<code>track(eventName, properties)</code>的接口，例如在Mixpanel中，可以用<code>mixpanel.track(&quot;Played song&quot;, {&quot;genre&quot;: &quot;hip-hop&quot;});</code>来上报事件。</p><p>这里是整个SDK中核心的地方，使用频率也是最高的。代码位于<code>/src/mixpanel-core.js</code>里面，先撇开复杂的逻辑和条件控制，看一下track的基本实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  track方法实现</span></div><div class="line">MixpanelLib.prototype.track = <span class="function"><span class="keyword">function</span>(<span class="params">event_name, properties, callback</span>) </span>&#123;</div><div class="line">    <span class="comment">// 各种边界判断</span></div><div class="line">    ...</div><div class="line">    <span class="comment">// 获取一些公共参数，和用户传入的properties一起encode</span></div><div class="line">    <span class="keyword">var</span> truncated_data = _.truncate(data, <span class="number">255</span>);</div><div class="line">    <span class="keyword">var</span> json_data = _.JSONEncode(truncated_data);</div><div class="line">    <span class="keyword">var</span> encoded_data = _.base64Encode(json_data);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'MIXPANEL REQUEST:'</span>);</div><div class="line">    <span class="built_in">console</span>.log(truncated_data);</div><div class="line">    <span class="comment">// 调用_send_request发送请求</span></div><div class="line">    <span class="keyword">this</span>._send_request(</div><div class="line">        <span class="keyword">this</span>.get_config(<span class="string">'api_host'</span>) + <span class="string">'/track/'</span>,</div><div class="line">        &#123; <span class="string">'data'</span>: encoded_data &#125;,</div><div class="line">        <span class="keyword">this</span>._prepare_callback(callback, truncated_data)</div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> truncated_data;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 发送请求的实现，主要用的是XMLHttpRequest，如果浏览器不支持XMLHttpRequest，那么用动态添加img/script标签的方式</span></div><div class="line">MixpanelLib.prototype._send_request = <span class="function"><span class="keyword">function</span>(<span class="params">url, data, callback</span>) </span>&#123;</div><div class="line">    <span class="comment">// 一些特殊情况的处理</span></div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> (<span class="string">'img'</span> <span class="keyword">in</span> data) &#123;</div><div class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">        img.src = url;</div><div class="line">        <span class="built_in">document</span>.body.appendChild(img);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (USE_XHR) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            req.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</div><div class="line">            <span class="comment">// send the mp_optout cookie</span></div><div class="line">            <span class="comment">// withCredentials cannot be modified until after calling .open on Android and Mobile Safari</span></div><div class="line">            req.withCredentials = <span class="literal">true</span>;</div><div class="line">            req.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (req.readyState === <span class="number">4</span>) &#123; <span class="comment">// XMLHttpRequest.DONE == 4, except in safari 4</span></div><div class="line">                    <span class="keyword">if</span> (req.status === <span class="number">200</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (callback) &#123;</div><div class="line">                            <span class="keyword">if</span> (verbose_mode) &#123;</div><div class="line">                                callback(_.JSONDecode(req.responseText));</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                callback(<span class="built_in">Number</span>(req.responseText));</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">var</span> error = <span class="string">'Bad HTTP status: '</span> + req.status + <span class="string">' '</span> + req.statusText;</div><div class="line">                        <span class="built_in">console</span>.error(error);</div><div class="line">                        <span class="keyword">if</span> (callback) &#123;</div><div class="line">                            <span class="keyword">if</span> (verbose_mode) &#123;</div><div class="line">                                callback(&#123;<span class="attr">status</span>: <span class="number">0</span>, <span class="attr">error</span>: error&#125;);</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                callback(<span class="number">0</span>);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            req.send(<span class="literal">null</span>); <span class="comment">// 发送异步请求</span></div><div class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            <span class="built_in">console</span>.error(e);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">        script.type = <span class="string">'text/javascript'</span>;</div><div class="line">        script.async = <span class="literal">true</span>;</div><div class="line">        script.defer = <span class="literal">true</span>;</div><div class="line">        script.src = url;</div><div class="line">        <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'script'</span>)[<span class="number">0</span>];</div><div class="line">        s.parentNode.insertBefore(script, s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>上面就是事件上报代码的核心实现。但是由于Web自身的一些特性，比如在追踪页面跳转行为（链接的点击、表单的提交等）时，为了防止数据发送不及时导致的数据丢失，SDK中提供一些诸如<code>track_links</code>和<code>track_forms</code>特殊方法，这些方法内部用的其实是setTimeout。</p><h2 id="三、全埋点"><a href="#三、全埋点" class="headerlink" title="三、全埋点"></a>三、全埋点</h2><p>Mixpanel和神策都提供了名为<strong>“AutoTrack”</strong>的方案，只需要在初始化SDK的时候，传入一个参数即可打开这个功能。JS SDK可以自动监测网页中所有的一类事件，这和AndroidSDK里面监听所有按钮的点击有些类似。</p><h3 id="3-1-自动监测的元素、事件类型"><a href="#3-1-自动监测的元素、事件类型" class="headerlink" title="3.1 自动监测的元素、事件类型"></a>3.1 自动监测的元素、事件类型</h3><ul><li><p><strong>神策JS：</strong>设置AutoTrack之后，SDK就会自动追踪页面上的按钮(<code>a</code>、<code>button</code>、<code>input</code>) 这种html标签类型的点击情况，一旦页面某一个按钮发生了点击行为，SDK就会去采集此按钮的一些信息，例如: 这个按钮的标签类型，这个按钮的文本内容，这个按钮的<code>name</code>，这个按钮的<code>id</code>、<code>class</code>名，还有一些按钮特有的属性如<code>href</code>等。</p></li><li><p><strong>MixpanelJS：</strong>设置AutoTrack之后，SDK会监测页面上的所有<code>form表单</code>、<code>input标签</code>、<code>select和textarea标签</code>产生的<code>submit</code>、<code>change</code>、<code>click</code>事件，并采集这些标签上的属性一起上报。</p></li></ul><h3 id="3-2-全埋点监测的实现"><a href="#3-2-全埋点监测的实现" class="headerlink" title="3.2 全埋点监测的实现"></a>3.2 全埋点监测的实现</h3><p>以Mixpanel为例，在<code>/src/autotrack.js</code>代码中，把几个关键的方法扣出来看一下（不要问我为什么以Mixpanel为例，因为代码少一些。。。）。</p><p>当SDK初始化的时候，会执行autotrack里面的<code>_addDomEventHandlers</code>方法，给整个document的<code>submit</code>、<code>change</code>、<code>click</code>事件设置监听器。当监听到这几类事件时，会执行<code>_trackEvent</code>方法。</p><p>直接看代码，我给代码里面加了一点注释，来说明自动监测上报的过程。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SDK初始化时，通过register_event设置需要监听了submit、change、click这3类事件</span></div><div class="line"><span class="comment">// Mixpanel的js sdk代码里面自己封装了一个underscore模块，里面有一些工具方法</span></div><div class="line">_addDomEventHandlers: <span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> handler = _.bind(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            e = e || <span class="built_in">window</span>.event;</div><div class="line">            <span class="keyword">this</span>._trackEvent(e, instance);</div><div class="line">        &#125;, <span class="keyword">this</span>);</div><div class="line">        _.register_event(<span class="built_in">document</span>, <span class="string">'submit'</span>, handler, <span class="literal">false</span>, <span class="literal">true</span>);</div><div class="line">        _.register_event(<span class="built_in">document</span>, <span class="string">'change'</span>, handler, <span class="literal">false</span>, <span class="literal">true</span>);</div><div class="line">        _.register_event(<span class="built_in">document</span>, <span class="string">'click'</span>, handler, <span class="literal">false</span>, <span class="literal">true</span>);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">// register_event的实现，优先采用addEventListener的方式，如果浏览器不支持会尝试使用onXXX的方式</span></div><div class="line"><span class="keyword">var</span> register_event = <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler, oldSchool, useCapture</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!element) &#123;</div><div class="line">            <span class="built_in">console</span>.error(<span class="string">'No valid element provided to register_event'</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (element.addEventListener &amp;&amp; !oldSchool) &#123;</div><div class="line">            element.addEventListener(type, handler, !!useCapture);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> ontype = <span class="string">'on'</span> + type;</div><div class="line">            <span class="keyword">var</span> old_handler = element[ontype]; <span class="comment">// can be undefined</span></div><div class="line">            element[ontype] = makeHandler(element, handler, old_handler);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"><span class="comment">// 监听到事件发生后，调用_trackEvent方法来上报</span></div><div class="line">_trackEvent: <span class="function"><span class="keyword">function</span>(<span class="params">e, instance</span>) </span>&#123;</div><div class="line">        <span class="comment">// 首先找到这个事件的target</span></div><div class="line">        <span class="keyword">var</span> target = <span class="keyword">this</span>._getEventTarget(e);</div><div class="line">        <span class="keyword">if</span> (target.nodeType === TEXT_NODE) &#123;</div><div class="line">            target = target.parentNode;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 然后判断是不是autotrack要监测的事件，如果不是的话，啥也不干直接返回。</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._shouldTrackDomEvent(target, e)) &#123;</div><div class="line">            <span class="comment">// 如果满足监测条件，那么从当前标签开始，向上追溯到body标签，并记录这条路径上所有的元素到一个数组中</span></div><div class="line">            <span class="keyword">var</span> targetElementList = [target];</div><div class="line">            <span class="keyword">var</span> curEl = target;</div><div class="line">            <span class="keyword">while</span> (curEl.parentNode &amp;&amp; !<span class="keyword">this</span>._isTag(curEl, <span class="string">'body'</span>)) &#123;</div><div class="line">                targetElementList.push(curEl.parentNode);</div><div class="line">                curEl = curEl.parentNode;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 按照刚才记录的路径开始遍历（相当于自底向上）</span></div><div class="line">            <span class="keyword">var</span> elementsJson = [];</div><div class="line">            <span class="keyword">var</span> href, elementText, form, explicitNoTrack = <span class="literal">false</span>;</div><div class="line">            _.each(targetElementList, <span class="function"><span class="keyword">function</span>(<span class="params">el, idx</span>) </span>&#123;</div><div class="line">                <span class="comment">// if the element or a parent element is an anchor tag</span></div><div class="line">                <span class="comment">// include the href as a property</span></div><div class="line">                <span class="comment">// 读取到a标签或者form标签时，记录它们的属性。</span></div><div class="line">                <span class="keyword">if</span> (el.tagName.toLowerCase() === <span class="string">'a'</span>) &#123;</div><div class="line">                    href = el.getAttribute(<span class="string">'href'</span>);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.tagName.toLowerCase() === <span class="string">'form'</span>) &#123;</div><div class="line">                    form = el;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// crawl up to max of 5 nodes to populate text content</span></div><div class="line">                <span class="comment">// 读取节点的文本内容，最多往上读个5层</span></div><div class="line">                <span class="keyword">if</span> (!elementText &amp;&amp; idx &lt; <span class="number">5</span> &amp;&amp; el.textContent) &#123;</div><div class="line">                    <span class="keyword">var</span> textContent = _.trim(el.textContent);</div><div class="line">                    <span class="keyword">if</span> (textContent) &#123;</div><div class="line">                        elementText = textContent.replace(<span class="regexp">/[\r\n]/g</span>, <span class="string">' '</span>).replace(<span class="regexp">/[ ]+/g</span>, <span class="string">' '</span>).substring(<span class="number">0</span>, <span class="number">255</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// allow users to programatically prevent tracking of elements by adding class 'mp-no-track'</span></div><div class="line">                <span class="comment">// 如果不希望某个节点被监测，开发者可以设置一个名为`mp-no-track`的css class</span></div><div class="line">                <span class="keyword">var</span> classes = <span class="keyword">this</span>._getClassName(el).split(<span class="string">' '</span>);</div><div class="line">                <span class="keyword">if</span> (_.includes(classes, <span class="string">'mp-no-track'</span>)) &#123;</div><div class="line">                    explicitNoTrack = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 读取每个标签的属性，最后这条路径上所有的标签都会被记录下来保存在elementsJson数组中</span></div><div class="line">                elementsJson.push(<span class="keyword">this</span>._getPropertiesFromElement(el));</div><div class="line">            &#125;, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 如果是一个开发者设置了不需要监测的标签，那么直接返回，不上报了</span></div><div class="line">            <span class="keyword">if</span> (explicitNoTrack) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 处理采集到的属性，这里面有几个getXXXProperties(element/elements)方法（_getPropertiesFromElement、_getDefaultProperties、_getCustomProperties、_getFormFieldProperties），就是在读取各种属性</span></div><div class="line">            <span class="keyword">var</span> props = _.extend(</div><div class="line">                <span class="keyword">this</span>._getDefaultProperties(e.type), <span class="comment">// 事件的基本属性，包含事件名称、window.location.host、window.location.pathname</span></div><div class="line">                &#123;</div><div class="line">                    <span class="string">'$elements'</span>: elementsJson, <span class="comment">// target标签到body标签这条路径上的所有标签及其属性</span></div><div class="line">                    <span class="string">'$el_attr__href'</span>: href, <span class="comment">// 采集到的href链接</span></div><div class="line">                    <span class="string">'$el_text'</span>: elementText <span class="comment">// target标签的文本内容</span></div><div class="line">                &#125;,</div><div class="line">                <span class="keyword">this</span>._getCustomProperties(targetElementList) <span class="comment">// 读取自定义属性，这里应该是指用户在后台管理界面配置的属性</span></div><div class="line">            );</div><div class="line">            <span class="keyword">if</span> (form &amp;&amp; (e.type === <span class="string">'submit'</span> || e.type === <span class="string">'click'</span>)) &#123;</div><div class="line">                _.extend(props, <span class="keyword">this</span>._getFormFieldProperties(form)); <span class="comment">// 读取表单的一些属性</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 调用了代码埋点中介绍的track方法上报一个名为`$web_event`的事件，并带上采集的到的属性</span></div><div class="line">            instance.track(<span class="string">'$web_event'</span>, props);</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line"><span class="comment">// _trackEvent之前，需要判断标签上的发生的事件是不是应该被autotrack监测上报</span></div><div class="line">_shouldTrackDomEvent: <span class="function"><span class="keyword">function</span>(<span class="params">element, event</span>) </span>&#123;</div><div class="line">        <span class="comment">// html根节点下面的事件不需要监测</span></div><div class="line">        <span class="keyword">if</span> (!element || <span class="keyword">this</span>._isTag(element, <span class="string">'html'</span>) || element.nodeType !== ELEMENT_NODE) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> tag = element.tagName.toLowerCase();</div><div class="line">        <span class="comment">// 查看标签的名字</span></div><div class="line">        <span class="comment">// 如果是html则不监听</span></div><div class="line">        <span class="comment">// 如果是form标签下的submit事件，或者是input-&gt;button、input-&gt;submit标签的change、click事件，或者是select、textarea标签下的change、click事件，可以监听</span></div><div class="line">        <span class="comment">// 如果是其他标签，监听click事件</span></div><div class="line">        <span class="keyword">switch</span> (tag) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'html'</span>:</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'form'</span>:</div><div class="line">                <span class="keyword">return</span> event.type === <span class="string">'submit'</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'input'</span>:</div><div class="line">                <span class="keyword">if</span> ([<span class="string">'button'</span>, <span class="string">'submit'</span>].indexOf(element.getAttribute(<span class="string">'type'</span>)) === <span class="number">-1</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> event.type === <span class="string">'change'</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> event.type === <span class="string">'click'</span>;</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">case</span> <span class="string">'select'</span>:</div><div class="line">            <span class="keyword">case</span> <span class="string">'textarea'</span>:</div><div class="line">                <span class="keyword">return</span> event.type === <span class="string">'change'</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> event.type === <span class="string">'click'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div></pre></td></tr></table></figure><h3 id="3-3-全埋点小结"><a href="#3-3-全埋点小结" class="headerlink" title="3.3 全埋点小结"></a>3.3 全埋点小结</h3><p>可以看到全埋点还是有点暴力的，会采集的数据量也挺大，并且采集到的属性也比较多，可以看到在MixpanelSDK中，如果页面结构比较深，那么数据报过去分析起来可能还是需要花点时间的。在神策SDK的接入文档中也提到，建议那些按钮不是很多的，相对简单的页面可以采用这个方法。一般情况下，如果网页上的按钮比较多的话，因为每次按钮的点击都会发数据，会导数据量增大。。</p><h2 id="四、可视化埋点"><a href="#四、可视化埋点" class="headerlink" title="四、可视化埋点"></a>四、可视化埋点</h2><p>Mixpanel和神策，都提供了JS可视化埋点功能，与全埋点相比，这种方式可以指定自己想要监测的元素和属性（所有可以点击的元素），既可以做到动态配置，又不会像全埋点那样产生大量的数据。</p><p>以Mixpanel为例，可视化埋点的入口在后台管理界面，需要在后台输入需要埋点的页面url，然后再进入我们的Web页面，此时就会加载可视化圈选的编辑器（代码见<code>autotrack.js</code>中的<code>_maybeLoadEditor</code>方法，需要注意的是这个页面必须已经嵌入了JS SDK）。</p><p><strong>可视化埋点需要完成两件事：</strong></p><ul><li><strong>圈选元素，保存配置</strong>：这一步最重要的就是保存好需要追踪的元素的element_path，以及需要追踪的元素。</li><li><strong>下发配置，上报行为</strong>：这一步最重要的就是通过element_path找到元素，给它添加一个点击监听器。</li></ul><h3 id="4-1-圈选操作"><a href="#4-1-圈选操作" class="headerlink" title="4.1 圈选操作"></a>4.1 圈选操作</h3><p>在JS SDK内部，通常会<strong>判断当前页面的sessionStorge/localStorage中是否有一个开启可视化编辑器标志字段（例如Mixpanel是<code>_mpcehash</code>字段）</strong>，读取这个字段，解析到其中的打开可视化编辑器的开关开启之后，就会加载可视化编辑器。由此可见其实从SDK后台管理界面跳转到可视化圈选页面时，就是向SessionStorage中写入了相应的标志。</p><blockquote><p>MixpanelJS加载可视化编辑器时，需要从<code>//mixpanel.com/js-bundle/reports/collect-everything/editor.js?_ts={$timestamp}</code>去加载一个js文件，<strong>这个js差不多可以看成一个独立的圈选SDK，</strong>最后这个请求会被重定向到一个cdn地址（<code>https://cdn4.mxpnl.com/static/asset-cache/3fc4abfdcebcb5121f1ebf143415b232/compiled/reports/collect-everything/editor.min.js</code>），随便打开这个js看下就有两万多行，因此单独做成一个按需加载的SDK是很有必要的。</p></blockquote><p>由于Mixpanel就没有提供圈选SDK的源码，不过我从其他的SDK上体验了一下这种操作，就是在开发者web页面上，当用户的鼠标经过<strong>可以被点击</strong>的元素时，这个元素会被一种颜色高亮提示，此时点击一下这个元素，就会弹出一个浮窗，用户填写信息，设置一个事件和一些属性，保存之后就算完成对这个元素的圈选操作了（可能每个SDK在这里的操作上有些小差别，但是基本原理都是这样），当圈选过的元素的配置保存好了以后，这个元素会用特殊的颜色高亮起来。</p><p><strong>虽然圈选SDK的代码可以有很长，但是圈选元素的核心是如何唯一标识需要被追踪的元素。</strong>查看神策JS SDK中的<code>vtrack.sdk.js</code>这个文件发现，当神策SDK进入可视化圈选模式的时候，会去加载<code>vendor.js</code>和<code>vendor.css</code>，这两个文件可以看作一个圈选SDK。讲真，圈选SDK的代码都挺长，抓重点，看下<code>vendor.js</code>代码里是<strong>如何标记需要追踪的元素的</strong>。</p><p>在<code>vendor.js</code>中，有一个<code>EventDefine</code>模块，这个模块负责把一个标签处理成我们要保存的selector。</p><p><strong>EventDefine</strong>有三个方法：</p><ul><li>getSelfAttr：获取一个标签内部的文本内容，举例来说，一个<code>&lt;p&gt;This is another paragraph.&lt;/p&gt;</code>得到的内容是<code>This is another paragraph.</code>。</li><li>toSelector：把一个标签的tagName、id、classNames解析出来，拼成一个串。举例来说，一个<code>&lt;div id=&quot;test&quot; class=&quot;uncle chen&quot;&gt;&lt;/div&gt;</code>标签，它的selector是<code>div#id.uncle.chen</code>，这个selector是可以直接给jQuery用来查找元素的。</li><li>toAllSelector：选择一个需要追踪的标签，并给这个标签定义点击时上报的事件（EventDefine），最后将这个事件转成一个selector保存下来，selector就是用于给jQuery来查找元素的选择器，这里需要注意，如果一个元素是在iFrame里面的，那么SDK保存的选择器路径是相对iFrame内部的，而不是最外层的document。</li></ul><p>前两个方法都是给<code>toAllSelector</code>方法调用的，<code>toAllSelector</code>方法是圈选SDK的重点，这个方法的实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">toAllSelector: <span class="function"><span class="keyword">function</span>(<span class="params">$target, outDocuemnt</span>) </span>&#123;</div><div class="line">    outDocuemnt = outDocuemnt ? $(outDocuemnt) : $(<span class="built_in">document</span>);</div><div class="line">    <span class="keyword">var</span> $parent, newSelSize, newSelector, parts, selSize, selector, targetSel;</div><div class="line">    selector = <span class="keyword">this</span>.toSelector($target, outDocuemnt);</div><div class="line">    $parent = $target.parent();</div><div class="line">    selSize = outDocuemnt.find(selector).length;</div><div class="line">    <span class="keyword">while</span> ($parent.prop(<span class="string">'tagName'</span>) !== <span class="string">'BODY'</span> &amp;&amp; selSize !== <span class="number">1</span>) &#123;</div><div class="line">      newSelector = <span class="string">''</span> + (<span class="keyword">this</span>.toSelector($parent)) + <span class="string">' '</span> + selector; <span class="comment">// 如果向上回溯的话，selector会用空格分开保存</span></div><div class="line">      newSelSize = outDocuemnt.find(newSelector).length;</div><div class="line">      <span class="keyword">if</span> (newSelSize &lt; selSize) &#123;</div><div class="line">        selector = newSelector;</div><div class="line">        selSize = newSelSize;</div><div class="line">      &#125;</div><div class="line">      $parent = $parent.parent();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> nthEle = selector;</div><div class="line">    <span class="keyword">var</span> selfAttr = <span class="keyword">this</span>.getSelfAttr($target);</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      nthEle: nthEle,</div><div class="line">      selfAttr: selfAttr</div><div class="line">    &#125;;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>当选中一个标签时，SDK会提取出这个标签的selector，然后用jQuery选择器查找这个selector指向的元素，如果这个selector指向的元素有多个（<code>selSize !== 1</code>，也就是说这个元素有着多个兄弟标签），那么还需要进一步去提取其父标签的selector，直到找出可以唯一标识这个元素的selector为止，最后将需要追踪的这个元素以{nthEle: nthEle, selfAttr: selfAttr}`，nthEle是selector，selfAttr是文本内容。</p><h3 id="4-2-监测"><a href="#4-2-监测" class="headerlink" title="4.2 监测"></a>4.2 监测</h3><p>圈选元素，保存配置之后，SDK如何根据配置来监测配置好的元素，并进行上报呢？仍然以神策js为例，<code>vtrack.sdk.js</code>在正常模式下，会去解析后台下发的配置，找到圈选过的元素，绑定事件。</p><p><strong>1.下发配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 进入普通模式时，会从后台的一个接口去拉去圈选过的元素（这里也叫“部署”过的元素）的关键信息，然后进行解析</span></div><div class="line">  enterNormalMode: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    sd.vtrack_mode = <span class="string">'normalMode'</span>;</div><div class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">this</span>.getDeployFile().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      me.parseDeployFile(); <span class="comment">// 解析配置</span></div><div class="line">    &#125;);</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><p><strong>2.解析配置，监测元素</strong></p><p>不多说直接看代码实现，分析见注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解析配置，查看当前页面中是否有元素需要被追踪，把需要追踪的元素的配置保存到requiredData变量中</span></div><div class="line">parseDeployFile: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.requireData = <span class="keyword">this</span>.checkUrl(<span class="keyword">this</span>.deployData);</div><div class="line">  <span class="keyword">this</span>.listenEvents();</div><div class="line">&#125;,</div><div class="line"><span class="comment">// 找到元素，绑定点击事件的处理，当元素被点击时，上报事件</span></div><div class="line">listenEvents: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> data = <span class="keyword">this</span>.requireData;</div><div class="line">  <span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</div><div class="line">    <span class="keyword">this</span>.getEle(data[i]).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        me.doVTrackAction(ev);</div><div class="line">      &#125;</div><div class="line">    &#125;(data[i]));</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">doVTrackAction: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  sd.track(</div><div class="line">    data.eventName,</div><div class="line">    &#123;</div><div class="line">      $from_vtrack: <span class="built_in">String</span>(data.trigger_id)</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      $lib_method: <span class="string">'vtrack'</span>,</div><div class="line">      $lib_detail: <span class="built_in">String</span>(data.trigger_id)</div><div class="line">    &#125;</div><div class="line">  );</div><div class="line">&#125;,</div><div class="line"><span class="comment">// 通过jQuery的选择器来找到元素，我们在前一节的圈选操作中知道，圈选SDK会把一个定义好的事件eventDefine转化成一个&#123;nthEle: nthEle, selfAttr: selfAttr&#125;结构保存起来，这里去寻找元素的时候和圈选那里的逻辑其实是一个逆操作。</span></div><div class="line"><span class="comment">// 这里要注意，和圈选时一样元素，碰到iframe时要特殊处理一下。</span></div><div class="line">getEle: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ele;</div><div class="line">  <span class="keyword">if</span> ($(data.nthEle[<span class="number">0</span>]) &amp;&amp; $(data.nthEle[<span class="number">0</span>]).prop(<span class="string">'tagName'</span>) === <span class="string">'IFRAME'</span>) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      ele = $(data.nthEle[<span class="number">0</span>]).contents().find(data.nthEle.slice(<span class="number">1</span>).join(<span class="string">' '</span>));</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    &#125;</div><div class="line">    ;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    ele = $(data.nthEle.join(<span class="string">' '</span>));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (data.selfAttr &amp;&amp; data.selfAttr.text !== <span class="keyword">void</span> <span class="number">0</span>) &#123;</div><div class="line">    ele = ele.filter(<span class="string">':contains('</span> + data.selfAttr.text + <span class="string">')'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> ele;</div><div class="line">&#125;,</div></pre></td></tr></table></figure><p>关于元素的查找，在Mixpanel-JS中没有用jQuery，而是用的Document.querySelectorAll方法，在追踪移动页面的时候会显得更优化一些，毕竟jQuery是有些重的。<br>此外，当追踪一些特殊的标签时，可以考虑用<a href="http://www.w3school.com.cn/xpath/" target="_blank" rel="external">XPath</a>去定位，今日头条的广告监测插件其实就用到了XPath。</p><p>可以看出，在JS上实现可视化埋点不是一件太麻烦的事情，不过它缺点是只会没有读取标签元素的属性等信息，也不会像代码埋点的方案那样去理解业务场景；另外，当页面的结构发生变化的时候，可能要重新进行一次圈选操作。有些平台是通过对事件监测的告警来提醒用户的，当事件数量同比大幅减少的时候，大概率是因为某次改版导致页面DomTree产生了变化，jQuery选择器找不到之前圈选的元素了，这时就应该提醒用户重新圈选了。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>本文从代码埋点、全埋点、可视化埋点三个角度，以Mixpanel、神策数据的JS SDK的源代码，分析了Web页面埋点的实现方案的实现。在流量红利逐渐消失的现在，数据的采集、分析和精细化的运营显得更加重要，下面简单列一个表格对以上三种方式的埋点方案进行对比，还是那句话，三种埋点方式相辅相成，结合业务需求搭配使用，适合自己的才是最好的。</p><table><thead><tr><th style="text-align:center">埋点方案</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th><th style="text-align:left">适用场景</th></tr></thead><tbody><tr><td style="text-align:center">代码埋点</td><td style="text-align:left">可以按照业务上报详细、定制化的数据</td><td style="text-align:left">需要开发人员参与，更新维护成本高，无法获得历史数据</td><td style="text-align:left">对上下文理解要求较高的业务数据</td></tr><tr><td style="text-align:center">全埋点</td><td style="text-align:left">对发人员依赖低，仅需嵌入一次SDK，可以全量上报通用数据，可以拿到历史数据</td><td style="text-align:left">数量量太大，占用更多资源，且无法收集业务上下文数据，给后续数据筛选和分析带来一定的难度</td><td style="text-align:left">上下文相对独立的、通用的数据</td></tr><tr><td style="text-align:center">可视化埋点</td><td style="text-align:left">对开发人员依赖低，可以按照业务需求上报数据，对上下文数据有一定收集能力</td><td style="text-align:left">圈选事件有一定的操作难度，事件需要被更新时无法获得历史数据，界面变化时圈选的元素可能失效</td><td style="text-align:left">业务上下文数据相对简单，操作交互比较固定的界面</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://unclechen.github.io/2017/12/18/Android%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/&quot;&gt;上一篇博客&lt;/a&gt;分析了Android上的埋点SDK技术原理，这次我们看一下这几种方案在Web页面上的实践。在JS里面同样有代码埋点、全埋点、可视化埋点三种方案，如果对这几种方案的概念不了解可以看下上一篇博客。由于&lt;a href=&quot;https://github.com/mixpanel/mixpanel-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mixpanel-js&lt;/a&gt;和&lt;a href=&quot;https://github.com/sensorsdata/sa-sdk-javascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sensors Analytics JavaScript SDK&lt;/a&gt;都开源了自己的SDK，就以它们为例进行分析。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SDK" scheme="http://unclechen.github.io/tags/SDK/"/>
    
      <category term="埋点" scheme="http://unclechen.github.io/tags/%E5%9F%8B%E7%82%B9/"/>
    
      <category term="无埋点" scheme="http://unclechen.github.io/tags/%E6%97%A0%E5%9F%8B%E7%82%B9/"/>
    
      <category term="可视化埋点" scheme="http://unclechen.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%8B%E7%82%B9/"/>
    
      <category term="JS" scheme="http://unclechen.github.io/tags/JS/"/>
    
      <category term="监测" scheme="http://unclechen.github.io/tags/%E7%9B%91%E6%B5%8B/"/>
    
      <category term="数据" scheme="http://unclechen.github.io/tags/%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Android埋点技术分析</title>
    <link href="http://unclechen.github.io/2017/12/18/Android%E5%9F%8B%E7%82%B9%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    <id>http://unclechen.github.io/2017/12/18/Android埋点技术分析/</id>
    <published>2017-12-18T00:00:00.000Z</published>
    <updated>2017-12-27T08:28:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><p>埋点，是对网站、App或者后台等应用程序进行数据采集的一种方法。通过埋点，可以收集用户在应用中的产生行为，进而用于分析和优化产品后续的体验，也可以为产品的运营提供数据支撑，其中常见的指标有PV、UV、页面时长和按钮的点击等。</p><p>采集行为数据时，通常需要在Web页面/App里面添加一些代码，当用户的行为达到某种条件时，就会向服务器上报用户的行为。其实添加这些代码的过程就可以叫做“埋点”，在很久以前就已经出现了这种技术。随着技术的发展和大家对数据采集要求的不断提高，我认为埋点的技术方案走过了下面几个阶段：</p><ul><li><p><strong>代码埋点：</strong>代码埋点是指开发人员按照产品/运营的需求，在Web页面/App的源码里面添加行为上报的代码，当用户的行为满足某一个条件时，这些代码就会被执行，向服务器上报行为数据。这种方案是最基础的方案，每次增加或者修改数据上报的条件，都需要开发人员的参与，并且只能在下一个版本上线后才能看到效果。很多公司都提供了这类数据上报的SDK，将行为上报的后台服务器接口封装成了简单的客户端SDK接口。开发者可以通过嵌入这类SDK，在埋点的地方调用少量的代码就可以上报行为数据。</p></li><li><p><strong>全埋点：</strong>全埋点指的是将Web页面/App内产生的所有的、满足某个条件的行为，全部上报到后台服务器。例如把App中所有的按钮点击都进行上报，然后由产品/运营去后台筛选所需要的行为数据。这种方案的优点非常明显，就是可以不用在新增/修改行为上报条件时，再找开发人员去修改埋点的代码。然而它的缺点也和优点一样明显，那就是上报的数据量比代码埋点大很多，里面可能很多是没有价值的数据。此外，这种方案更倾向于独立去看待用户的行为，而没有关注行为的上下文，给数据分析带来了一些难度。很多公司也提供了这类功能的SDK，通过静态或者动态的方式，“Hook”了原有的App代码，从而实现了行为的监测，在数据上报时通常是采用累积多条再上报的方案来合并请求。</p></li></ul><blockquote><p>hook直译是钩子的意思，以前学信息安全的时候在windows上听到过，大体意思是通过某种手段去改变系统API的一个行为，绕过系统的某个方法，或者改变系统的工作流程。在这里其实是指把本来要执行某个方法的对象替换成另一个，一般用的是反射或者代理，需要找到hook的代码位置，甚至还可以在编译阶段实现替换。</p></blockquote><ul><li><strong>可视化埋点：</strong>可视化埋点是指产品/运营在Web页面/App的界面上进行圈选，配置需要监测界面上哪一个元素，然后保存这个配置，当App启动时会从后台服务器获得产品/运营预先圈选好的配置，然后根据这份配置监测App界面上的元素，当某一个元素满足条件时，就会上报行为数据到后台服务器。有了全埋点技术方案，从体验优化的角度很容易想到按需埋点，可视化埋点就是一种按需配置埋点的方案。现在也有一些公司提供了这类SDK，圈选监测元素时，一般都是提供一个Web管理界面，手机在安装并初始化了SDK之后，可以和管理界面了连接，让用户在Web管理界面上配置需要监测的元素。</li></ul><p>业界有多家SDK都支持上面介绍的3种埋点方案中的一种或者全部，例如Mixpanel、Sensorsdata、TalkingData、GrowingIO、诸葛IO、Heap Analytics、MTA、Umeng Analytics、百度，只是大家对后两种埋点的称呼不完全相同，有的叫无埋点或者codeless埋点。由于<a href="https://github.com/mixpanel/mixpanel-android" target="_blank" rel="external">Mixpanel</a>（支持代码埋点、可视化埋点）和<a href="https://github.com/sensorsdata/sa-sdk-android" target="_blank" rel="external">Sensorsdata</a>（全部支持）都开源了自己的全部SDK，技术方案也比较类似，下面以它们的Android SDK为例，简单分析一下3种埋点方案的技术实现。关于JS的SDK技术实现，可以看下我的另一篇博客-<a href="http://unclechen.github.io/2017/12/24/JS%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/">JS埋点SDK技术分析</a>。</p><a id="more"></a><h1 id="二、代码埋点"><a href="#二、代码埋点" class="headerlink" title="二、代码埋点"></a>二、代码埋点</h1><p>包含Mixpanel SDK在内的大部分SDK，都会把这种埋点方案封装成一个比较简单的接口，在这里是<code>track(String eventName, JSONObject properties)</code>，开发者在调用这个接口时，可以把一个事件名称和事件的属性传入，然后就可以上报到后台了。</p><p>在实现上，Mixpanel SDK默认采用一条HandlerThread线程来处理事件，当开发者调用<code>track(String eventName, JSONObject properties)</code>方法时，<strong>主线程切换到HandlerThread</strong>当中，并先将事件存入数据库。然后看SDK中是否累计到了40个事件，如果累计到40个事件的话，就合并它们上报到后台。</p><p>当开发者设置为debug模式，或者手动调用<code>flush</code>接口时，可以立即上报累计的所有事件，不过由于只有一条线程，所以如果在flush的时候，前面的事件还没有处理完成，SDK会间隔1分钟再次去处理后面的这些事件。</p><p>开发者可以设置累计上报的事件数量阈值、事件阻塞时再次尝试上报的时间间隔等。这种方案比较基础，相信大部分开发者都接触过，不需要过多分析。</p><h1 id="三、全埋点"><a href="#三、全埋点" class="headerlink" title="三、全埋点"></a>三、全埋点</h1><h2 id="3-1-AOP基础"><a href="#3-1-AOP基础" class="headerlink" title="3.1 AOP基础"></a>3.1 AOP基础</h2><p>Mixpanel现在的Android SDK没有提供这个功能，但是神策Android SDK提供了，实现方式是依赖AOP。那么什么是AOP？</p><blockquote><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。（from baidu baike）</p><p>简而言之，AOP是可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术。</p></blockquote><p><strong>Sensors Analytics AndroidSDK全埋点的实现就是通过在代码编译阶段，找到源代码中需要上报事件的位置，插入SDK的事件上报代码。它用到的框架是<a href="https://www.eclipse.org/aspectj/" target="_blank" rel="external">AspectJ</a>。</strong></p><p>说到这里，必须简单了解一下AspectJ以及它里面的一些概念.它是AOP的领跑者，在很多地方我们可以看到它的身影，例如JakeWartson大神贡献的一个注解日志和性能调优框架<a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">Hugo</a>，在Spring框架里面也大量应用到AspectJ。我理解AspectJ里面的主要几个概念有：</p><ul><li><strong>JPoint：</strong>代码切点（就是我们要插入代码的地方）</li><li><strong>Aspect：</strong>代码切点的描述<ul><li><strong>Pointcut：</strong>描述切点具体是什么样的点，如函数被调用的地方（<code>Call(MethodSignature)</code>）、函数执行的内部（<code>execution(MethodSignature)</code>）</li><li><strong>Advice：</strong>描述在切点的什么位置插入代码，如在Pointcut前面（<code>@Before</code>）还是后面（<code>@After</code>），还是环绕整个Pointcut（<code>@Around</code>）</li></ul></li></ul><p>由此可见，在实现AOP功能时，需要做下面几件事：</p><ul><li>定义一个Aspect，这个Aspect里面必须有Pointcut和Advice两个属性</li><li>编写在匹配到符合Pointcut和Advice描述的代码时，需要注入的代码</li><li>在代码编译时，通过特殊的java编译器（Aspect的ajc编译器），找到符合我们定义的Aspect的代码，将需要注入的代码插入到Advice指定的位置。</li></ul><p>如果你对AspectJ有了解的话，已经可以猜到SDK内部是怎么实现全埋点的了；如果没有接触，我觉得也不用急于全面地去学习AspectJ，因为SDK内部只用到了AspectJ当中的一小部分功能而已，可以直接看下面的分析。</p><h2 id="3-2-全埋点-技术实现"><a href="#3-2-全埋点-技术实现" class="headerlink" title="3.2 全埋点-技术实现"></a>3.2 全埋点-技术实现</h2><p>神策SDK里面是如何监测View点击事件呢？我把SDK代码简化一下进行分析，有下面几个步骤：</p><h3 id="3-2-1-定义一个Aspect"><a href="#3-2-1-定义一个Aspect" class="headerlink" title="3.2.1 定义一个Aspect"></a>3.2.1 定义一个Aspect</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class="line"></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewOnClickListenerAspectj</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * android.view.View.OnClickListener.onClick(android.view.View)</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint JoinPoint</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@After</span>(<span class="string">"execution(* android.view.View.OnClickListener.onClick(android.view.View))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClickAOP</span><span class="params">(<span class="keyword">final</span> JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        AopUtil.sendTrackEventToSDK(joinPoint, <span class="string">"onViewOnClick"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段Aspect的代码定义了：<strong>在执行android.view.View.OnClickListener.onClick(android.view.View)方法原有的实现后面，需要插入<code>AopUtil.sendTrackEventToSDK(joinPoint, &quot;onViewOnClick&quot;);</code>这段代码。</strong></p><p><code>AopUtil.sendTrackEventToSDK(joinPoint, &quot;onViewOnClick&quot;);</code>这段代码做的事情就是点击事件的上报。因为神策SDK将全埋点功能和主SDK包分离成了两个jar包，所以通过AopUtil工具去调用真正的事件上报代码，这里不细述其实现，下面直接看这段代码背后真正的点击上报实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SensorsDataAPI.sharedInstance().track(AopConstants.APP_CLICK_EVENT_NAME, properties);</div></pre></td></tr></table></figure><p>可以看到AOP实现的点击监测，最后也走<code>track</code>方法进行上报了。</p><h3 id="3-2-2-使用ajc编译器向源代码中插入Aspect代码"><a href="#3-2-2-使用ajc编译器向源代码中插入Aspect代码" class="headerlink" title="3.2.2 使用ajc编译器向源代码中插入Aspect代码"></a>3.2.2 使用ajc编译器向源代码中插入Aspect代码</h3><p>采用AspectJ框架编写的代码，想要注入原来的工程的代码，需要在<code>/app/build.gradle</code>中引用ajc编译器，脚本如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">import</span> org.aspectj.bridge.IMessage</div><div class="line"><span class="keyword">import</span> org.aspectj.bridge.MessageHandler</div><div class="line"><span class="keyword">import</span> org.aspectj.tools.ajc.Main</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'org.aspectj:aspectjtools:1.8.10'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile <span class="string">'org.aspectj:aspectjrt:1.8.10'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="keyword">def</span> log = project.logger</div><div class="line"><span class="keyword">final</span> <span class="keyword">def</span> variants = project.android.applicationVariants</div><div class="line"></div><div class="line">variants.all &#123; variant -&gt;</div><div class="line">    <span class="keyword">if</span> (!variant.buildType.isDebuggable()) &#123;</div><div class="line">        log.debug(<span class="string">"Skipping non-debuggable build type '$&#123;variant.buildType.name&#125;'."</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    JavaCompile javaCompile = variant.javaCompile</div><div class="line">    javaCompile.doLast &#123;</div><div class="line">        String[] args = [<span class="string">"-showWeaveInfo"</span>,</div><div class="line">                     <span class="string">"-1.5"</span>,</div><div class="line">                     <span class="string">"-inpath"</span>, javaCompile.destinationDir.toString(),</div><div class="line">                     <span class="string">"-aspectpath"</span>, javaCompile.classpath.asPath,</div><div class="line">                     <span class="string">"-d"</span>, javaCompile.destinationDir.toString(),</div><div class="line">                     <span class="string">"-classpath"</span>, javaCompile.classpath.asPath,</div><div class="line">                     <span class="string">"-bootclasspath"</span>, project.android.bootClasspath.join(File.pathSeparator)]</div><div class="line">        log.debug <span class="string">"ajc args: "</span> + Arrays.toString(args)</div><div class="line"></div><div class="line">        MessageHandler handler = <span class="keyword">new</span> MessageHandler(<span class="literal">true</span>);</div><div class="line">        <span class="keyword">new</span> Main().run(args, handler);</div><div class="line">        <span class="keyword">for</span> (IMessage <span class="string">message :</span> handler.getMessages(<span class="literal">null</span>, <span class="literal">true</span>)) &#123;</div><div class="line">           <span class="keyword">switch</span> (message.getKind()) &#123;</div><div class="line">                <span class="keyword">case</span> IMessage.<span class="string">ABORT:</span></div><div class="line">                <span class="keyword">case</span> IMessage.<span class="string">ERROR:</span></div><div class="line">                <span class="keyword">case</span> IMessage.<span class="string">FAIL:</span></div><div class="line">                    log.error message.message, message.thrown</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> IMessage.<span class="string">WARNING:</span></div><div class="line">                    log.warn message.message, message.thrown</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> IMessage.<span class="string">INFO:</span></div><div class="line">                    log.info message.message, message.thrown</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> IMessage.<span class="string">DEBUG:</span></div><div class="line">                    log.debug message.message, message.thrown</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在SensorsAndroidSDK中，把上面这段脚本编写成了一个<a href="https://github.com/sensorsdata/sa-sdk-android-plugin2" target="_blank" rel="external">gradle插件</a>，开发者只需要在<code>app/build.gradle</code>引用这个插件即可。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.sensorsdata.analytics.android'</span></div></pre></td></tr></table></figure><h3 id="3-2-3-完成代码插入，查看插入之后的效果"><a href="#3-2-3-完成代码插入，查看插入之后的效果" class="headerlink" title="3.2.3 完成代码插入，查看插入之后的效果"></a>3.2.3 完成代码插入，查看插入之后的效果</h3><p>完成上面两步，就可以实现在<code>android.view.View.OnClickListener.onClick(android.view.View)</code>方法中插入我们的数据上报代码了。我们在demo代码中加一个Button，并给它set一个OnClickListener，编译一下代码，查看<code>/build/intermediates/classes/debug/</code>里面class文件，经过ajc编译之后，原始代码中插入了Aspect的代码，并调用了<code>ViewOnClickListenerAspectj</code>里面的<code>onViewClickAOP</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="keyword">this</span>.setContentView(<span class="number">2130968603</span>);</div><div class="line">        Button btnTst = (Button)<span class="keyword">this</span>.findViewById(<span class="number">2131427422</span>);</div><div class="line">        btnTst.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                JoinPoint var2 = Factory.makeJP(ajc$tjp_0, <span class="keyword">this</span>, <span class="keyword">this</span>, v);</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Log.i(<span class="string">"MainActivity"</span>, <span class="string">"button clicked"</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</div><div class="line">                    ViewOnClickListenerAspectj.aspectOf().onViewClickAOP(var2);</div><div class="line">                    <span class="keyword">throw</span> var5;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                ViewOnClickListenerAspectj.aspectOf().onViewClickAOP(var2);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">static</span> &#123;</div><div class="line">                ajc$preClinit();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>AspectJ的基本用法就是这样，SensorsAndroidSDK借助AspectJ插入了Aspect代码，这是一种静态的方式。静态的全埋点方案，本质上是对字节码进行修改，插入事件上报的代码。</p><p>修改字节码，除了这种方案之外，还有Android Gradle插件提供的trasform api（1.5.0版本以上）、ASM、Javassist。在网易乐得的埋点方案，Nuwa热修复项目都可以见到这些技术的实践。</p><h2 id="3-3-AspectJ相关资料"><a href="#3-3-AspectJ相关资料" class="headerlink" title="3.3 AspectJ相关资料"></a>3.3 AspectJ相关资料</h2><ul><li>Aspect Oriented Programming in Android：<a href="https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/" target="_blank" rel="external">https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/</a></li><li>AOP之AspectJ全面剖析in Android：<a href="http://www.jianshu.com/p/f90e04bcb326" target="_blank" rel="external">http://www.jianshu.com/p/f90e04bcb326</a></li><li>沪江开源了一个叫做AspectJX的插件，扩展了AspectJ，除了对src代码进行AOP，还支持kotlin、工程中引用的jar和aar进行AOP：<a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx" target="_blank" rel="external">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a></li><li>关于 Spring AOP (AspectJ) 你该知晓的一切：<a href="http://blog.csdn.net/javazejian/article/details/56267036" target="_blank" rel="external">http://blog.csdn.net/javazejian/article/details/56267036</a></li></ul><h2 id="3-4-其他思路"><a href="#3-4-其他思路" class="headerlink" title="3.4 其他思路"></a>3.4 其他思路</h2><p>上面介绍的是以AspectJ为代表的<strong>“静态Hook”</strong>实现方案，有没有其他办法可以不修改源代码，只是在App运行的时候去<strong>“动态Hook”</strong>点击行为的处理呢？答案是肯定的，在Java的世界，还有反射大法啊，下面看一下怎么实现点击事件的替换吧。</p><p>在<a href="https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/view/View.java" target="_blank" rel="external">android.view.View.java</a>的源码（<code>API&gt;=14</code>）中，有这么几个关键的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// getListenerInfo方法：返回所有的监听器信息mListenerInfo</span></div><div class="line"><span class="function">ListenerInfo <span class="title">getListenerInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mListenerInfo != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> mListenerInfo;</div><div class="line">    &#125;</div><div class="line">    mListenerInfo = <span class="keyword">new</span> ListenerInfo();</div><div class="line">    <span class="keyword">return</span> mListenerInfo;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 监听器信息</span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerInfo</span> </span>&#123;</div><div class="line">    ... <span class="comment">// 此处省略各种xxxListener</span></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Listener used to dispatch click events.</span></div><div class="line"><span class="comment">     * This field should be made private, so it is hidden from the SDK.</span></div><div class="line"><span class="comment">     * &#123;<span class="doctag">@hide</span>&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> OnClickListener mOnClickListener;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Listener used to dispatch long click events.</span></div><div class="line"><span class="comment">     * This field should be made private, so it is hidden from the SDK.</span></div><div class="line"><span class="comment">     * &#123;<span class="doctag">@hide</span>&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">protected</span> OnLongClickListener mOnLongClickListener;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">ListenerInfo mListenerInfo;</div><div class="line"></div><div class="line"><span class="comment">// 我们非常熟悉的方法，内部其实是把mListenerInfo的mOnClickListener设成了我们创建的OnclickListner对象</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(@Nullable OnClickListener l)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isClickable()) &#123;</div><div class="line">        setClickable(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    getListenerInfo().mOnClickListener = l;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 判断这个View是否设置了点击监听器</span></div><div class="line"><span class="comment"> * Return whether this view has an attached OnClickListener.  Returns</span></div><div class="line"><span class="comment"> * true if there is a listener, false if there is none.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasOnClickListeners</span><span class="params">()</span> </span>&#123;</div><div class="line">    ListenerInfo li = mListenerInfo;</div><div class="line">    <span class="keyword">return</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过上面几个方法可以看到，点击监听器其实被保存在了<strong><code>mListenerInfo.mOnClickListener</code></strong>里面。那么实现<strong>Hook点击监听器</strong>时，只要将这个<code>mOnClickListener</code>替换成我们包装的<strong>点击监听器代理对象</strong>就行了。简单看一下实现思路：</p><p><strong>1. 创建点击监听器的代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 点击监听器的代理类，具有上报点击行为的功能</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnClickListenerWrapper</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="comment">// 原始的点击监听器对象</span></div><div class="line">    <span class="keyword">private</span> View.OnClickListener onClickListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OnClickListenerWrapper</span><span class="params">(View.OnClickListener onClickListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.onClickListener = onClickListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="comment">// 让原来的点击监听器正常工作</span></div><div class="line">        <span class="keyword">if</span>(onClickListener != <span class="keyword">null</span>)&#123;</div><div class="line">            onClickListener.onClick(view);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 点击事件上报，可以获取被点击view的一些属性</span></div><div class="line">        track(APP_CLICK_EVENT_NAME, getSomeProperties(view));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>2. 反射获取一个View的mListenerInfo.mOnClickListener，替换成代理的点击监听器</strong></p><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对一个View的点击监听器进行hook</span></div><div class="line">public void hookView(<span class="keyword">View</span> <span class="keyword">view</span>) &#123;</div><div class="line">    <span class="comment">// 1. 反射调用View的getListenerInfo方法（API&gt;=14），获得mListenerInfo对象</span></div><div class="line">    <span class="keyword">Class</span> viewClazz = <span class="keyword">Class</span>.forName(<span class="string">"android.view.View"</span>)<span class="comment">;</span></div><div class="line">    Method getListenerInfoMethod = viewClazz.getDeclaredMethod(<span class="string">"getListenerInfo"</span>)<span class="comment">;</span></div><div class="line">    <span class="keyword">if</span> (!getListenerInfoMethod.isAccessible()) &#123;</div><div class="line">        getListenerInfoMethod.setAccessible(true)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    Object mListenerInfo = listenerInfoMethod.invoke(<span class="keyword">view</span>)<span class="comment">;</span></div><div class="line">    </div><div class="line">    <span class="comment">// 2. 然后从mListenerInfo中反射获取mOnClickListener对象</span></div><div class="line">    <span class="keyword">Class</span> listenerInfoClazz = <span class="keyword">Class</span>.forName(<span class="string">"android.view.View$ListenerInfo"</span>)<span class="comment">;</span></div><div class="line">    Field onClickListenerField = listenerInfoClazz.getDeclaredField(<span class="string">"mOnClickListener"</span>)<span class="comment">;</span></div><div class="line">    <span class="keyword">if</span> (!onClickListenerField.isAccessible()) &#123;</div><div class="line">        onClickListenerField.setAccessible(true)<span class="comment">;</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">View</span>.OnClickListener mOnClickListener = (<span class="keyword">View</span>.OnClickListener) onClickListenerField.get(mListenerInfo)<span class="comment">;</span></div><div class="line">    </div><div class="line">    <span class="comment">// 3. 创建代理的点击监听器对象</span></div><div class="line">    <span class="keyword">View</span>.OnClickListener mOnClickListenerWrapper = <span class="keyword">new</span> OnClickListenerWrapper(mOnClickListener)<span class="comment">;</span></div><div class="line">    </div><div class="line">    <span class="comment">// 4. 把mListenerInfo的mOnClickListener设成新的onClickListenerWrapper</span></div><div class="line">    onClickListenerField.<span class="keyword">set</span>(mListenerInfo, mOnClickListenerWrapper)<span class="comment">;</span></div><div class="line">    <span class="comment">// 用这个似乎也可以：view.setOnClickListener(mOnClickListenerWrapper);     </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意，如果是<code>API&lt;14</code>的话，mOnClickListener直接是直接以一个Field保存在View对象中的，没有ListenerInfo，因此反射的次数要更少一些。</p><p><strong>3. 对App中所有的View进行Hook</strong></p><p>我们在分析的是全埋点，那么怎样把App里面所有的View点击都Hook到呢？有两种方式：</p><ul><li><p>第一种：当Activity创建完成后，开始从Activity的DecorView开始自顶向下深度遍历ViewTree，遍历到一个View的时候，对它进行hookView操作。这种方式有点暴力，由于这里面遍历ViewTree的时候用到了大量反射，性能会有影响。</p></li><li><p>第二种：比第一种方式稍微优秀一些，来源是一个Github上的开源库<a href="https://github.com/foolchen/AndroidTracker" target="_blank" rel="external">AndroidTracker</a>（Kotlin实现）。他的处理方式是当Activity创建完成后，在DecorView中添加一个透明的View作为子View，在这个子View的onTouchEvent方法中，根据触摸坐标找到屏幕中包含了这个坐标的View，再对这些View尝试进行hookView操作。<strong>这种方式比较取巧，首先是拿到了手指按下的位置，根据这个位置来找需要被Hook的View，避免了在遍历ViewTree的同时对View进行反射。具体实现是在遍历ViewTree中的每个View时，判断这个View的坐标是否包含手指按下的坐标，以及View是否Visible，如果满足这两个条件，就把这个View保存到一个ArrayList<view>hitViews。然后再遍历这个ArrayList里面的View，如果一个View#hasOnClickListeners返回true，那么才对他进行hookView操作。</view></strong></p></li></ul><p>整体来看，动态Hook的思路用到了反射，难免对程序性能产生影响，如果要采用这种方式实现全埋点方案，还需要好好评估。</p><h1 id="四、可视化埋点"><a href="#四、可视化埋点" class="headerlink" title="四、可视化埋点"></a>四、可视化埋点</h1><h2 id="4-1-可视化埋点-技术实现"><a href="#4-1-可视化埋点-技术实现" class="headerlink" title="4.1 可视化埋点-技术实现"></a>4.1 可视化埋点-技术实现</h2><p>可视化埋点，需要经过两个步骤，可以由非技术人员操作完成。第一步，使用嵌入了Mixpanel/SensorsSDK的App连接后台，当手机App与后台同步时，后台管理界面上会显示和手机App一样的界面，用户可以在管理界面上用鼠标选择需要监测的元素，设置事件名称，需要监测的元素属性等（据说有些SDK的圈选操作是在手机上进行的，不管是什么方式本质上是一样的，需要保存一份配置到后台）。第二步，嵌入了SDK的App启动时，会从服务器获取到一份配置，再根据这份配置去检测App中的界面及其元素，满足配置的条件时向服务器上报事件。下面以Mixpanel、SensorsdataSDK为例，简单分析一下技术方案的实现。</p><h3 id="4-1-1-圈选需要监测的元素，保存配置"><a href="#4-1-1-圈选需要监测的元素，保存配置" class="headerlink" title="4.1.1 圈选需要监测的元素，保存配置"></a>4.1.1 圈选需要监测的元素，保存配置</h3><p><strong>1.创建WebSocket连接后台</strong></p><p>采用WebSocket连接是因为要让手机和后台长时间保持连接，是一个持续的双向通信。连接到后台时，把手机的设备信息发送到后台。</p><p><strong>2.把App界面截图发送到后台</strong></p><p>创建Socket连接后，在主线程中，对App中启动的Activity进行扫描，找到界面的RootView（其实是DecorView）。在查找RootView的同时，会对RootView进行截图，截图时采用反射调用View类<code>createSnapshot</code>方法。</p><p>截图之后，SDK内部会判断图片的hash值，如果图片发生了变化，会采用递归的方法深度遍历Activity的ViewTree，遍历同时读取View的属性（id、top、left、width、height、class名称、layoutRules等等）。</p><p>最后，将上面收集到数据发送到连接的后台，由后台解析之后，把App界面展示在Web页面。用户可以在这个Web页面圈选需要监测的元素，设置这个元素的时间名称（event_type和event_name），并保存这个配置。</p><h3 id="4-1-2-获取配置，监测元素的行为，上报事件"><a href="#4-1-2-获取配置，监测元素的行为，上报事件" class="headerlink" title="4.1.2 获取配置，监测元素的行为，上报事件"></a>4.1.2 获取配置，监测元素的行为，上报事件</h3><p><strong>1.获取配置</strong></p><p>SDK启动时，会从服务器拉取一份JSON格式的配置，保存到sharedPreference里，同时SDK会扫描<code>android.R</code>文件里面的资源id和资源的name并保存起来。</p><p>SDK得到配置之后，解析成JSON对象，读取<code>event_bindings</code>字段，再进一步读取<code>events</code>字段，这个字段下面包含了一个数组，数组的每个元素都描述了一类事件，并包含了这类事件需要监测的元素所在的Activity和元素的路径。这份配置基本上是这样的一个结构：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">event_bindings: &#123;</div><div class="line">    events:[</div><div class="line">        &#123;</div><div class="line">            target_activity: ""</div><div class="line">            event_name: ""</div><div class="line">            event_type: ""</div><div class="line">            path: [</div><div class="line">                &#123;</div><div class="line">                    prefix:</div><div class="line">                    view_class:</div><div class="line">                    index:</div><div class="line">                    id:</div><div class="line">                    id_name:</div><div class="line">                &#125;, </div><div class="line">                ...</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>收到了这份配置之后，SDK会把根据每个event信息，生成一个<code>ViewVisitor</code>。<code>ViewVisitor</code>的作用就是把<code>path</code>数组里面指向的所有View元素都找到，并且根据event_type，给这个View元素设置相应的行为监测器，当这个View发生指定行为时，监测器就会监测到，并上报行为。</p><p>生成ViewVisitor之后，SDK内部是以<code>Map&lt;activity, ViewVisitor&gt;</code>结构保存它们的，这也比较容易理解。</p><p><strong>2.监测元素，上报事件</strong></p><p><code>ViewVisitor</code>是怎么监测元素的产生的行为呢？答案就是<code>View.AccessibilityDelegate</code>。</p><p>在Android SDK里面，AccessibilityService)为我们提供了一系列的事件回调，帮助我们指示一些用户界面的状态变化。我们可以派生辅助功能类，进而对不同的AccessibilityEvent进行处理，我们看下AccessibilityEvent里面有哪些事件类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Represents the event of clicking on a &#123;<span class="doctag">@link</span> android.view.View&#125; like</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.widget.Button&#125;, &#123;<span class="doctag">@link</span> android.widget.CompoundButton&#125;, etc.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_VIEW_CLICKED = <span class="number">0x00000001</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Represents the event of long clicking on a &#123;<span class="doctag">@link</span> android.view.View&#125; like</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.widget.Button&#125;, &#123;<span class="doctag">@link</span> android.widget.CompoundButton&#125;, etc.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_VIEW_LONG_CLICKED = <span class="number">0x00000002</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Represents the event of selecting an item usually in the context of an</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.widget.AdapterView&#125;.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_VIEW_SELECTED = <span class="number">0x00000004</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Represents the event of setting input focus of a &#123;<span class="doctag">@link</span> android.view.View&#125;.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_VIEW_FOCUSED = <span class="number">0x00000008</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Represents the event of changing the text of an &#123;<span class="doctag">@link</span> android.widget.EditText&#125;.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_VIEW_TEXT_CHANGED = <span class="number">0x00000010</span>;</div><div class="line">...</div></pre></td></tr></table></figure><p><strong>以点击事件<code>TYPE_VIEW_CLICKED</code>为例</strong>，当Activity界面的RootView开始绘制的时候（ViewTreeObserver.OnGlobalLayoutListener的onGlobalLayout回调时），ViewVisitor也会开始寻找指定的View，并给这个View设置新的AccessibilityDelegate。简单看一下这个新的View.AccessibilityDelegate是怎么写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TrackingAccessibilityDelegate</span> <span class="keyword">extends</span> <span class="title">View</span>.<span class="title">AccessibilityDelegate</span> </span>&#123;</div><div class="line">...</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="title">TrackingAccessibilityDelegate</span><span class="params">(View.AccessibilityDelegate realDelegate)</span> </span>&#123;</div><div class="line">                mRealDelegate = realDelegate;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">public</span> View.<span class="function">AccessibilityDelegate <span class="title">getRealDelegate</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> mRealDelegate;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            ...</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAccessibilityEvent</span><span class="params">(View host, <span class="keyword">int</span> eventType)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (eventType == mEventType) &#123;</div><div class="line">                    fireEvent(host); <span class="comment">// 事件上报</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != mRealDelegate) &#123;</div><div class="line">                    mRealDelegate.sendAccessibilityEvent(host, eventType);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">private</span> View.AccessibilityDelegate mRealDelegate;</div><div class="line">        &#125;</div><div class="line">        ...</div></pre></td></tr></table></figure><p>可以看到在SDK的<code>TrackingAccessibilityDelegate#sendAccessibilityEvent</code>方法里面，发出了事件上报。</p><p>那么View在点击方法的内部实现里有调用<code>sendAccessibilityEvent</code>方法吗？通过View处理点击事件时调用的<code>View.performClick</code>方法，看一下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> result;</div><div class="line">    <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</div><div class="line">    <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">        playSoundEffect(SoundEffectConstants.CLICK);</div><div class="line">        li.mOnClickListener.onClick(<span class="keyword">this</span>);</div><div class="line">        result = <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        result = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAccessibilityEvent</span><span class="params">(<span class="keyword">int</span> eventType)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mAccessibilityDelegate != <span class="keyword">null</span>) &#123;</div><div class="line">        mAccessibilityDelegate.sendAccessibilityEvent(<span class="keyword">this</span>, eventType);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        sendAccessibilityEventInternal(eventType);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccessibilityDelegate</span><span class="params">(@Nullable AccessibilityDelegate delegate)</span> </span>&#123;</div><div class="line">    mAccessibilityDelegate = delegate;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由此可以见在RootView开始绘制的时候，给View注册AccessibilityDelegate可以监测到它的点击事件。</p><h2 id="4-2-可视化埋点的难点和问题"><a href="#4-2-可视化埋点的难点和问题" class="headerlink" title="4.2 可视化埋点的难点和问题"></a>4.2 可视化埋点的难点和问题</h2><p>上面简单分析了Mixpanel和SensorsSDK可视化埋点的基本实现，里面还有一个难点需要仔细琢磨，那就是<strong>如何唯一标识App中的一个View？</strong>需要记录View的哪些信息，如何生成View的唯一ID，保证在不同手机上这些ID是固定的，而且保证App每次启动，ID也不会变化，同时ID也要能应对一定程度的界面调整。这里有两篇网易的博客，可以仔细看看。</p><ul><li><a href="http://www.infoq.com/cn/presentations/netease-happy-to-no-burial-point-data-collection-practice-road" target="_blank" rel="external">http://www.infoq.com/cn/presentations/netease-happy-to-no-burial-point-data-collection-practice-road</a></li><li><a href="http://www.jianshu.com/p/b5ffe845fe2d" target="_blank" rel="external">http://www.jianshu.com/p/b5ffe845fe2d</a></li></ul><p>另外在网上看到有网友提出，setAccessibilityDelegate来监测View的点击对大多数厂商的机型和版本都是可以的，但是有部分机型是无法成功捕获监控到点击事件。从View的标识生成，以及监测原理来讲，这个方案的稳定性存在一些疑问。</p><h2 id="4-3-参考资料"><a href="#4-3-参考资料" class="headerlink" title="4.3 参考资料"></a>4.3 参考资料</h2><ul><li>sensorsdata git，包含了Android、iOS、js、JAVA等多个版本的SDK：<a href="https://github.com/sensorsdata" target="_blank" rel="external">https://github.com/sensorsdata</a></li><li>Mixpanel git，包含了Android、iOS、js、JAVA等多个版本的SDK：<a href="https://github.com/mixpanel" target="_blank" rel="external">https://github.com/mixpanel</a></li><li>网易移动端数据收集和分析博客：<a href="http://www.jianshu.com/c/ee326e36f556" target="_blank" rel="external">http://www.jianshu.com/c/ee326e36f556</a></li></ul><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>最后简单总结一下几种方案的优缺点和使用场景，在实际应用中多种方式配合使用，平衡效率和可靠性，适合自己的业务才是最好的。</p><table><thead><tr><th style="text-align:center">埋点方案</th><th style="text-align:left">优点</th><th style="text-align:left">缺点</th><th style="text-align:left">适用场景</th></tr></thead><tbody><tr><td style="text-align:center">代码埋点</td><td style="text-align:left">可以按照业务上报详细、定制化的数据</td><td style="text-align:left">需要开发人员参与，更新维护成本高，无法获得历史数据</td><td style="text-align:left">对上下文理解要求较高的业务数据</td></tr><tr><td style="text-align:center">全埋点</td><td style="text-align:left">对发人员依赖低，可以全量上报一类通用数据，可以拿到历史数据</td><td style="text-align:left">数量量太大，占用更多资源，且无法收集业务上下文数据</td><td style="text-align:left">上下文相对独立的、通用的数据</td></tr><tr><td style="text-align:center">可视化埋点</td><td style="text-align:left">对开发人员依赖低，可以按照业务需求上报数据，对上下文数据有一定收集能力</td><td style="text-align:left">圈选事件有一定的操作难度，事件需要被更新时无法获得历史数据，界面变化时圈选的元素可能失效</td><td style="text-align:left">业务上下文数据相对简单，操作交互比较固定的界面</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、概念&quot;&gt;&lt;a href=&quot;#一、概念&quot; class=&quot;headerlink&quot; title=&quot;一、概念&quot;&gt;&lt;/a&gt;一、概念&lt;/h1&gt;&lt;p&gt;埋点，是对网站、App或者后台等应用程序进行数据采集的一种方法。通过埋点，可以收集用户在应用中的产生行为，进而用于分析和优化产品后续的体验，也可以为产品的运营提供数据支撑，其中常见的指标有PV、UV、页面时长和按钮的点击等。&lt;/p&gt;
&lt;p&gt;采集行为数据时，通常需要在Web页面/App里面添加一些代码，当用户的行为达到某种条件时，就会向服务器上报用户的行为。其实添加这些代码的过程就可以叫做“埋点”，在很久以前就已经出现了这种技术。随着技术的发展和大家对数据采集要求的不断提高，我认为埋点的技术方案走过了下面几个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码埋点：&lt;/strong&gt;代码埋点是指开发人员按照产品/运营的需求，在Web页面/App的源码里面添加行为上报的代码，当用户的行为满足某一个条件时，这些代码就会被执行，向服务器上报行为数据。这种方案是最基础的方案，每次增加或者修改数据上报的条件，都需要开发人员的参与，并且只能在下一个版本上线后才能看到效果。很多公司都提供了这类数据上报的SDK，将行为上报的后台服务器接口封装成了简单的客户端SDK接口。开发者可以通过嵌入这类SDK，在埋点的地方调用少量的代码就可以上报行为数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;全埋点：&lt;/strong&gt;全埋点指的是将Web页面/App内产生的所有的、满足某个条件的行为，全部上报到后台服务器。例如把App中所有的按钮点击都进行上报，然后由产品/运营去后台筛选所需要的行为数据。这种方案的优点非常明显，就是可以不用在新增/修改行为上报条件时，再找开发人员去修改埋点的代码。然而它的缺点也和优点一样明显，那就是上报的数据量比代码埋点大很多，里面可能很多是没有价值的数据。此外，这种方案更倾向于独立去看待用户的行为，而没有关注行为的上下文，给数据分析带来了一些难度。很多公司也提供了这类功能的SDK，通过静态或者动态的方式，“Hook”了原有的App代码，从而实现了行为的监测，在数据上报时通常是采用累积多条再上报的方案来合并请求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;hook直译是钩子的意思，以前学信息安全的时候在windows上听到过，大体意思是通过某种手段去改变系统API的一个行为，绕过系统的某个方法，或者改变系统的工作流程。在这里其实是指把本来要执行某个方法的对象替换成另一个，一般用的是反射或者代理，需要找到hook的代码位置，甚至还可以在编译阶段实现替换。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可视化埋点：&lt;/strong&gt;可视化埋点是指产品/运营在Web页面/App的界面上进行圈选，配置需要监测界面上哪一个元素，然后保存这个配置，当App启动时会从后台服务器获得产品/运营预先圈选好的配置，然后根据这份配置监测App界面上的元素，当某一个元素满足条件时，就会上报行为数据到后台服务器。有了全埋点技术方案，从体验优化的角度很容易想到按需埋点，可视化埋点就是一种按需配置埋点的方案。现在也有一些公司提供了这类SDK，圈选监测元素时，一般都是提供一个Web管理界面，手机在安装并初始化了SDK之后，可以和管理界面了连接，让用户在Web管理界面上配置需要监测的元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;业界有多家SDK都支持上面介绍的3种埋点方案中的一种或者全部，例如Mixpanel、Sensorsdata、TalkingData、GrowingIO、诸葛IO、Heap Analytics、MTA、Umeng Analytics、百度，只是大家对后两种埋点的称呼不完全相同，有的叫无埋点或者codeless埋点。由于&lt;a href=&quot;https://github.com/mixpanel/mixpanel-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mixpanel&lt;/a&gt;（支持代码埋点、可视化埋点）和&lt;a href=&quot;https://github.com/sensorsdata/sa-sdk-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sensorsdata&lt;/a&gt;（全部支持）都开源了自己的全部SDK，技术方案也比较类似，下面以它们的Android SDK为例，简单分析一下3种埋点方案的技术实现。关于JS的SDK技术实现，可以看下我的另一篇博客-&lt;a href=&quot;http://unclechen.github.io/2017/12/24/JS%E5%9F%8B%E7%82%B9SDK%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/&quot;&gt;JS埋点SDK技术分析&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="SDK" scheme="http://unclechen.github.io/tags/SDK/"/>
    
      <category term="埋点" scheme="http://unclechen.github.io/tags/%E5%9F%8B%E7%82%B9/"/>
    
      <category term="无埋点" scheme="http://unclechen.github.io/tags/%E6%97%A0%E5%9F%8B%E7%82%B9/"/>
    
      <category term="可视化埋点" scheme="http://unclechen.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%8B%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Android混合开发之——WebView中使用原生组件替换标签元素</title>
    <link href="http://unclechen.github.io/2017/10/15/Android%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E4%B9%8BWebView%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9F%E7%BB%84%E4%BB%B6%E6%9B%BF%E6%8D%A2%E6%A0%87%E7%AD%BE%E5%85%83%E7%B4%A0/"/>
    <id>http://unclechen.github.io/2017/10/15/Android混合开发之WebView中使用原生组件替换标签元素/</id>
    <published>2017-10-15T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>在Android混合开发中，常常会把界面渲染全部交给html，而后台数据相关的处理交给Native。然而在有些时候html无法完全满足我们在界面处理上的要求，比如像要有一个自己定制的软键盘或者在html里面播放视频，或者想要把html里面的图片替换成Native中统一封装的ImageView等等。这不，跟WebView打交道这么多年，我最近还真遇到这样的需要了，希望把html中展示的一个大图换成Native实现的播放器，这个播放器是自己封装过的，播放控制的界面和交互也全部都由Native实现。拍脑袋一想，这有点困难啊？html里面的标签怎么替换成Native组件呢？这不可能啊？难道要实现一套把html全部转成Native的框架？这岂不是得自己做一套ReactNative？</p><a id="more"></a><p>你别说我还真在万能的Github上找到一个叫<a href="https://github.com/hsllany/HtmlNative" target="_blank" rel="external">HtmlNative</a>的库，这货就真的实现了把一部分css+html转成Native，看了下它的demo，效果其实不错。但是对于我来讲还有点偏重了，因为如果一旦我们开始转换css，那么到底对css支持到一个什么样的程度呢？这种无法走到尽头的大难路，我不想走。于是我又开始看微信小程序，发现小程序大部分的组件还是WebView渲染的dom，只有几个组件入输入框，视频播放器是原生的，并且我很惊讶地发现它就是把原生组件“嵌入”到了WebView中！！！看到这里我觉得如果是把html里面的某些指定的元素替换成Native组件，是可行的，这时我开始想办法了。从界面绘制的角度，界面由一个个的View组成，每个View都应该由坐标和尺寸来描述，从而可以被摆放到正确的位置上。举个最简单的例子，我们知道ViewGroup里面的onLayout方法，当我们实现一个ViewGroup的时候，需要在onLayout方法中调用每一个子View的layout方法，并给这个方法传入left、top、right、bottom参数，这几个参数表示这个View距离父控件的左、上、右、下距离。<strong>如果我可以把html中需要替换的元素，相对WebView控件的left、top、right、bottom参数获取，并通过js传给Native，Native再把一个原生组件盖在WebView的位置上，是不是就可以实现“原声组件嵌入WebView里？”</strong></p><h1 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h1><p>这里我们就以一个简单场景来做示例，比如有一个组件是包装WebView实现的，转门用于加载html格式的广告。现在需要把这个WebView里面<strong>img标签变成一个ImageView</strong>，思路如下：</p><ul><li>1.把WebView放到一个FrameLayout里面，使用WebView加载这个html，让其中的元素都被加载、渲染完成，这时img标签的位置和尺寸才可以确定。</li><li>2.自定义WebViewClient，监听onPageFinished回调，当回调发生时，执行一段js，去获取指定的img标签的left、top、width、height属性，然后传给Native</li><li>3.Native接收到之后，把ImageView添加到第一步中的FrameLayout里面。</li></ul><h1 id="三、具体实现方案"><a href="#三、具体实现方案" class="headerlink" title="三、具体实现方案"></a>三、具体实现方案</h1><h2 id="1-准备html"><a href="#1-准备html" class="headerlink" title="1.准备html"></a>1.准备html</h2><p>html中一定要能清楚的获取到需要替换的img标签，例如我们可以给这个img标签加上特定的id，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.container</span>&#123; <span class="attribute">margin</span>:<span class="number">0</span> auto; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">overflow</span>:hidden&#125; </span></div><div class="line"><span class="css"><span class="selector-class">.container</span> <span class="selector-tag">img</span>&#123; <span class="attribute">float</span>:left; <span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">100px</span>&#125; </span></div><div class="line"><span class="css"><span class="selector-class">.container</span> <span class="selector-class">.right</span>&#123; <span class="attribute">float</span>:right; <span class="attribute">width</span>:<span class="number">180px</span>; <span class="attribute">text-align</span>:left&#125; </span></div><div class="line"><span class="css"><span class="selector-class">.container</span> <span class="selector-class">.right</span> <span class="selector-tag">h3</span>&#123; <span class="attribute">height</span>:<span class="number">20px</span>; <span class="attribute">line-height</span>:<span class="number">20px</span>; <span class="attribute">font-family</span>:<span class="string">"Microsoft YaHei"</span>; <span class="attribute">font-size</span>:<span class="number">16px</span>; <span class="attribute">overflow</span>:hidden;&#125; </span></div><div class="line"><span class="css"><span class="selector-class">.container</span> <span class="selector-class">.right</span> <span class="selector-tag">div</span>&#123; <span class="attribute">padding-top</span>:<span class="number">0px</span>; <span class="attribute">height</span>:<span class="number">50px</span>; <span class="attribute">overflow</span>:hidden&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"imageHolder"</span> <span class="attr">src</span>=<span class="string">"./img.jpeg"</span>/&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我是一个标题好吗<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>无论事态变迁，你总有一颗人仰马翻的少年心<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>这段html里面的有两个需要注意的地方：</p><ul><li>需要替换的html标签img，我们给它加上了一个id叫“imageHolder”，后面我们需要通过js获取这个标签。</li><li>viewport里面把device-width设为设备的宽度，这样我们获取到的图片位置和宽高都是dp为单位。</li></ul><h1 id="2-准备好获取img标签left、top、width、height属性的js方法，提供给Native调用"><a href="#2-准备好获取img标签left、top、width、height属性的js方法，提供给Native调用" class="headerlink" title="2.准备好获取img标签left、top、width、height属性的js方法，提供给Native调用"></a>2.准备好获取img标签left、top、width、height属性的js方法，提供给Native调用</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="keyword">var</span> jsFun = &#123;</span></div><div class="line"><span class="actionscript">  <span class="comment">// 测量图片的大小和位置</span></span></div><div class="line"><span class="actionscript">  measureImagePlaceHolder: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"imageHolder"</span>);</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> left = img.getBoundingClientRect().left + img.scrollLeft;</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> top = img.getBoundingClientRect().top + img.scrollTop;</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> width = img.getBoundingClientRect().right - left;</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> height = img.getBoundingClientRect().bottom - top;</span></div><div class="line"><span class="undefined">    JavaFun.replaceImgWithImageView(left, top, width, height);</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>这段代码的功能就是获取img标签在网页中的绝对位置和大小，我是从阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html" target="_blank" rel="external">博客</a>学到的，把这段js加入到html的body最后即可。</p><p>这时其实已经可以用chrome打开这个页面，进入inspect界面，手动调用一下<code>measureImagePlaceHolder</code>方法已经可以看到效果了，如下图所示。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fkjcqk16dgj30rs082774.jpg" alt="chrome查看js"></p><h1 id="3-在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。"><a href="#3-在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。" class="headerlink" title="3.在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。"></a>3.在Native中把WebView放到一个FrameLayout里面，自定义WebViewClient监听onPageFinished事件。</h1><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">    rootView = (FrameLayout) findViewById(R.id.root_view);</div><div class="line">    initView();</div><div class="line">    initWebView();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initWebView</span><span class="params">()</span> </span>&#123;</div><div class="line">    webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">    webView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">            view.loadUrl(<span class="string">"javascriprt:jsFun.measureImagePlaceHolder();"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">    webView = <span class="keyword">new</span> WebView(<span class="keyword">this</span>);</div><div class="line">    imageView = <span class="keyword">new</span> ImageView(<span class="keyword">this</span>);</div><div class="line">    FrameLayout.LayoutParams layoutParams = <span class="keyword">new</span> FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</div><div class="line">    rootView.addView(webView, layoutParams);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="4-Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法"><a href="#4-Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法" class="headerlink" title="4.Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法"></a>4.Native中提供一个给js调用的方法，用于传递需要替换的img标签的方法</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">JavaFun</span> &#123;</div><div class="line">    @JavascriptInterface</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceImgWithImageView</span>(<span class="params"><span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height</span>) </span>&#123;</div><div class="line">        final Context context = MainActivity.<span class="keyword">this</span>.getApplicationContext();</div><div class="line">        <span class="keyword">if</span> (imageView == <span class="literal">null</span>) &#123;</div><div class="line">            imageView = <span class="keyword">new</span> ImageView(MainActivity.<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">        final FrameLayout.LayoutParams <span class="keyword">params</span> = <span class="keyword">new</span> FrameLayout.LayoutParams(dp2px(context, width), dp2px(context, height));</div><div class="line">        <span class="keyword">params</span>.leftMargin = dp2px(context, left);</div><div class="line">        <span class="keyword">params</span>.topMargin = dp2px(context, top);</div><div class="line">        <span class="keyword">new</span> Handler(Looper.getMainLooper()).post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                rootView.addView(imageView, <span class="keyword">params</span>);</div><div class="line">                imageView.setBackgroundColor(Color.WHITE);</div><div class="line">                imageView.setImageDrawable(context.getResources().getDrawable(R.drawable.shepherd));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 此后还需要在initWebView方法添加一行。把一个名为JavaFun的对象注入js：webView.addJavascriptInterface(new JavaFun(), "JavaFun");</span></div><div class="line"><span class="comment">// 然后在js的measureImagePlaceHolder方法后面添加一行调用Java的代码：JavaFun.replaceImgWithImageView(left, top, width, height);</span></div></pre></td></tr></table></figure><p>关于Java和JS通信的方法，这里不做介绍，感兴趣的同学可以看看前面写过的博客。</p><p>我们看下两种模式下的效果，左边是html的img标签渲染图片的效果，右边是ImageView渲染图片的效果，为了明显对比，我用了两张不同的图片，打开了开发者模式的布局边界：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fkjcpehayoj30xc08kk08.jpg" alt="two mode"></p><p>怎么样，是不是还可以用来其他的Native组件来替换html标签啊？哈哈，我要用我们的视频组件去替换喽。上面这个小例子的代码在<a href="https://github.com/unclechen/ReplaceElementInHtml" target="_blank" rel="external">这里</a>，仅供大家参考，更复杂的例子还需要具体情况具体分析了。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>在界面开发的时候，不论是Android、iOS还是html，其实我们都是在处理布局，也就是说撇开各个平台上它们自己定义的一套标准，大部分时候，我们编写界面就是在处理界面上每一个元素在这个界面的位置和这个元素自身的大小。ReactNative类的框架干得事情就是帮开发者把html里面那套布局转换到Android和iOS各自的平台，站在现在看，可能会有人会争论html什么时候统一天下。但也许将来会出现一个新标准，在各个平台上都可以执行，而不是现阶段的哪个平台去取代哪个平台这么简单。前段时间看到过一个叫<a href="https://flutter.io/" target="_blank" rel="external">Flutter</a>的东西，好像就有点这个方向的意思，感兴趣的同学可以看看去。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;在Android混合开发中，常常会把界面渲染全部交给html，而后台数据相关的处理交给Native。然而在有些时候html无法完全满足我们在界面处理上的要求，比如像要有一个自己定制的软键盘或者在html里面播放视频，或者想要把html里面的图片替换成Native中统一封装的ImageView等等。这不，跟WebView打交道这么多年，我最近还真遇到这样的需要了，希望把html中展示的一个大图换成Native实现的播放器，这个播放器是自己封装过的，播放控制的界面和交互也全部都由Native实现。拍脑袋一想，这有点困难啊？html里面的标签怎么替换成Native组件呢？这不可能啊？难道要实现一套把html全部转成Native的框架？这岂不是得自己做一套ReactNative？&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="WebView" scheme="http://unclechen.github.io/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>使用React.js开发Chrome插件</title>
    <link href="http://unclechen.github.io/2017/06/16/%E4%BD%BF%E7%94%A8ReactJS%E5%BC%80%E5%8F%91Chrome%E6%8F%92%E4%BB%B6/"/>
    <id>http://unclechen.github.io/2017/06/16/使用ReactJS开发Chrome插件/</id>
    <published>2017-06-16T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>相信看到这篇文章的人应该都用过Chrome插件吧，最近刚好有个这方面的需求，我就把Chrome插件的相关知识学习了一下，发现其实Chrome插件的开发和大前端Web开发的底子是一样的，无非就是runtime只限于Chrome浏览器，并且可以调用Chrome提供的一些<code>chrome.*</code> API来实现一些基于Chrome浏览器的小功能。这里非要类比的话，我理解<code>chrome.*</code> API就像我们开发Hybird应用一样，需要有一个bridge层来提供底层原生的能力给js。我是做Android开发出生的，这只是我的个人理解，可能对大Web技术的理解还是不够。</p><p>其实Chrome上的插件，从UI上主要分成两类：一类是浏览器按钮（<a href="https://crxdoc-zh.appspot.com/extensions/browserAction" target="_blank" rel="external">BrowserAction</a>），另一类是页面按钮（<a href="https://crxdoc-zh.appspot.com/extensions/pageAction" target="_blank" rel="external">PageAction</a>）。两者的开发大同小异，我这里今天主要介绍的主角不是Chrome插件开发，而是<strong>如何使用React.js来开发Chrome插件</strong>，本文先简单介绍下Chrome插件的开发和ReactJS，最后介绍如何采用Facebook官方推荐的creat-react-app脚手架来开发Chrome插件。</p><a id="more"></a><h1 id="二、Chrome插件开发基础知识"><a href="#二、Chrome插件开发基础知识" class="headerlink" title="二、Chrome插件开发基础知识"></a>二、Chrome插件开发基础知识</h1><p>下面是我看的几篇教程，简单看一下应该就可以算Chrome插件速成了：</p><ul><li><a href="https://crxdoc-zh.appspot.com/extensions/getstarted" target="_blank" rel="external">入门：建立 Chrome 扩展程序</a></li><li><a href="https://wizardforcel.gitbooks.io/chrome-doc/content/" target="_blank" rel="external">Chrome 扩展开发文档</a></li><li><a href="http://www.ituring.com.cn/book/miniarticle/60223" target="_blank" rel="external">Chrome扩展及应用开发</a></li></ul><p>简单来说，一个最基本Chrome插件应用需要有一个manifest.json清单文件，这个文件一般长这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line"></div><div class="line">  <span class="attr">"name"</span>: <span class="string">"One-click Kittens"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"This extension demonstrates a browser action with kittens."</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</div><div class="line"></div><div class="line">  <span class="attr">"permissions"</span>: [</div><div class="line">    <span class="string">"https://secure.flickr.com/"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"browser_action"</span>: &#123;</div><div class="line">    <span class="attr">"default_icon"</span>: <span class="string">"icon.png"</span>,</div><div class="line">    <span class="attr">"default_popup"</span>: <span class="string">"popup.html"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个文件里描述了插件应用的一些属性，如名称、版本、需要的权限、界面的对应的html文件名等等。额！！乍一看怎么和AndroidManifest.xml的<strong>功能</strong>这么像啊？是的大兄弟！！恭喜你对技术的理解已经融会贯通了！</p><p>根据manifest.json文件可以看到，一个Chrome插件最少得有：manifest.json文件，icon.png图标和popup.html文件。当然文件名可以随便改，只要和manifest.json里声明的一致就行。</p><p>这里就不浪费时间具体说怎么开发插件了，各路前端大牛比我强100倍。但我只强调一点，那就是popup.html中引用的js文件只能是外部引入，不能在popup.html文件里面写js代码。所以一般我们还有见到popup.js文件。另外如果你想知道自己使用的插件有什么秘密，完全可以去Chrome浏览器的安装目录下面把它们给扒出来。。</p><h1 id="三、React-JS基础知识"><a href="#三、React-JS基础知识" class="headerlink" title="三、React JS基础知识"></a>三、React JS基础知识</h1><p>React.js不需要多说了吧，从React这个词在技术界诞生起，就是一颗明星，连我这种死抱着Native技术的人都不得不去学习它。。</p><p>简单扯两句React JS的话题（React Native下次再说），作为一个Android App/SDK开发，我没有开发过太多传统意义上的Web页面，但是经过我学习了大概一周多的时间，我发现React JS开发Web页面的思路其实和客户端很像，不去用jQuery/Zepto啊操作DOM，而是关注数据本身，以数据驱动去改变界面。重构写好了静态html后，哪块地方需要变化，你就把哪里变成一个变量放到组件的State/Props里面（至于组件怎么切分，哪个数据放State，哪个放Prop不是今天要讨论的话题），然后就只用关注数据的变化，然后setState一下界面就可以刷新了。理解了这一点，就会发现其实开发Web页面很简单。比起操作DOM，一些模板引擎之类的东西，我认为React这个思想非常容易接受，写起来也很舒服，完全没有那种混乱的感觉，而且现在ReactJS生态圈非常大，诸如Redux这类的库使得ReactJS越发的犀利，很多公司早就用得飞起了。</p><p>扯得有点远了，ReactJS开发我推荐大家就看<a href="https://facebook.github.io/react/docs/hello-world.html" target="_blank" rel="external">Facebook官方的示例</a>就够了。英文不好的朋友可以看看<a href="http://www.ruanyifeng.com/blog/2015/03/react" target="_blank" rel="external">阮一峰老师的博客</a>，或者看看<a href="https://github.com/kdchang/reactjs101" target="_blank" rel="external">这篇入门教程</a>也是阔以的。</p><h1 id="四、应该用哪个脚手架？"><a href="#四、应该用哪个脚手架？" class="headerlink" title="四、应该用哪个脚手架？"></a>四、应该用哪个脚手架？</h1><p>当然是Facebook官方推荐的<a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">creat-react-app</a>。打开终端，依次输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install -g create-react-app</div><div class="line"></div><div class="line">create-react-app my-app</div><div class="line">cd my-app/</div></pre></td></tr></table></figure><p>然后就在<code>my-app</code>下面看到这些文件了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">my-app/</div><div class="line">  README.md</div><div class="line">  node_modules/</div><div class="line">  package.json</div><div class="line">  .gitignore</div><div class="line">  public/</div><div class="line">    favicon.ico</div><div class="line">    index.html</div><div class="line">    manifest.json</div><div class="line">  src/</div><div class="line">    App.css</div><div class="line">    App.js</div><div class="line">    App.test.js</div><div class="line">    index.css</div><div class="line">    index.js</div><div class="line">    logo.svg</div><div class="line">    registerServiceWorker.js</div></pre></td></tr></table></figure><p>到此为止，是一个标准的ReactJS编写WebApp的步骤，在终端输入<code>npm start</code>，就可以在浏览器中访问本地的localServer了。</p><h2 id="1-怎么让这个项目支持Chrome插件开发呢？"><a href="#1-怎么让这个项目支持Chrome插件开发呢？" class="headerlink" title="1.怎么让这个项目支持Chrome插件开发呢？"></a>1.怎么让这个项目支持Chrome插件开发呢？</h2><p>前面介绍了，Chrome插件最重要的文件就是manifest.json清单文件。我们先看下脚手架给我们默认生成的manifest.json长啥样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"short_name"</span>: <span class="string">"React App"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"Create React App Sample"</span>,</div><div class="line">  <span class="attr">"icons"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"src"</span>: <span class="string">"favicon.ico"</span>,</div><div class="line">      <span class="attr">"sizes"</span>: <span class="string">"192x192"</span>,</div><div class="line">      <span class="attr">"type"</span>: <span class="string">"image/png"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"start_url"</span>: <span class="string">"./index.html"</span>,</div><div class="line">  <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</div><div class="line">  <span class="attr">"theme_color"</span>: <span class="string">"#000000"</span>,</div><div class="line">  <span class="attr">"background_color"</span>: <span class="string">"#ffffff"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于一个普通的WebApp来说，manifest.json文件在缓存、离线模式以及最新的PWA场景下会起作用，但是这里我们是要开发Chrome插件，那么把它原来的内容通通删掉，改成你的Chrome插件所需要的格式和内容就好了。例如可以改成这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"MyChromeExt"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"My first chrome extension."</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"icons"</span>: &#123;</div><div class="line"><span class="attr">"16"</span>: <span class="string">"img/icon-16.png"</span>,</div><div class="line"><span class="attr">"128"</span>: <span class="string">"img/icon-128.png"</span></div><div class="line">&#125;,</div><div class="line">  <span class="attr">"browser_action"</span>: &#123;</div><div class="line">    <span class="attr">"default_icon"</span>: &#123;</div><div class="line"><span class="attr">"19"</span>: <span class="string">"img/icon-19.png"</span>,</div><div class="line"><span class="attr">"38"</span>: <span class="string">"img/icon-38.png"</span></div><div class="line">&#125;,</div><div class="line">    <span class="attr">"default_title"</span>: <span class="string">"MyChromeExt"</span>,</div><div class="line">    <span class="attr">"default_popup"</span>: <span class="string">"index.html"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"permissions"</span>: [</div><div class="line">    <span class="string">"tabs"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"background"</span>: &#123;</div><div class="line">    <span class="attr">"scripts"</span>: [<span class="string">"background.js"</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里尽可能对脚手架的东西做最小的改动，把default_popup的文件名改成了<code>index.html</code>，因为脚手架默认会把js文件都打包到一个main.js文件中，并在index.html中插入这个main.js。</p><p>我们运行一下<code>npm run build</code>命令，就会发现生成了一个<code>my-app/build</code>目录，这个目录就是我们可以在<a href="chrome://extensions/" target="_blank" rel="external">chrome://extensions/</a>去加载的插件目录，当然也可以用Chrome把这个目录打包成一个crx插件。</p><p>使用creat-react-app脚手架开发Chrome插件的基本方法就是这样了，但是在实际中我们会遇到很多的问题，有时甚至会想要运行<a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#available-scripts" target="_blank" rel="external">npm run eject</a>，然后去完全自定义<code>webpack.config.js</code>来实现打包。</p><h2 id="2-background-js怎么打包？"><a href="#2-background-js怎么打包？" class="headerlink" title="2.background.js怎么打包？"></a>2.background.js怎么打包？</h2><p>我们在开发插件的时候，非常可能需要用到后台的background.js，原因如下：</p><blockquote><p>注意：不要在popup页面的js空间变量中保存数据。由于popup页面只在用户点击图标时才会开启，当用户关闭这个页面时就会停止，并没有一个从始至终的实例分配给popup页面。所以每当用户打开popup页面时，它都是崭新的，之前保存在变量中的数据都会消失。如果需要通过popup页面保存用户的数据，可以通过通信将数据交给后台页面（background页面）处理，或者通过localStorage和chrome.storage将数据保存在用户的硬盘上。</p></blockquote><p>所以background.js最后也是要进入到我们的发布文件夹下面的，这里建议还是要坚持<strong>最低程度地修改</strong>脚手架的设置，建议不要npm run eject之后来修改webpack的配置，因为实在是真的有点复杂。</p><p>这次修改下<code>package.json</code>文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"my-app"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"react-scripts"</span>: <span class="string">"1.0.7"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"react"</span>: <span class="string">"^15.6.1"</span>,</div><div class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^15.6.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"react-scripts start"</span>,</div><div class="line">    <span class="attr">"build"</span>: <span class="string">"react-scripts build"</span>,</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"react-scripts test --env=jsdom"</span>,</div><div class="line">    <span class="attr">"eject"</span>: <span class="string">"react-scripts eject"</span>,</div><div class="line">    <span class="attr">"build-chrome-ext"</span>: <span class="string">"react-scripts build &amp;&amp; cp src/background.js build/background.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到我们添加了一个命令<code>npm run build-chrome-ext</code>，并把background.js丢到了build目录下。如果你还有其他的js，我建议在<code>my-app/src</code>下建立一个<code>my-app/src/chrome</code>文件夹，专用于存在chrome相关其他js代码，然后在build的时候统一丢到build里面。如果要minify这些js，同样可以采用<code>&amp;&amp;</code>方式去添加命令。修改</p><h2 id="3-需要注意的细节"><a href="#3-需要注意的细节" class="headerlink" title="3.需要注意的细节"></a>3.需要注意的细节</h2><p>由于使用了一些<code>chrome.*</code> API，我们需要在编译js的时候将<code>chrome</code>这个全局对象声明一下。</p><p>creat-react-app这个脚手架在<strong>非eject模式</strong>下，没办法修改ESlint的配置来添加global对象，只能在用到了 <code>chrome.*</code> API的代码处添加 <code>// eslint-disable-line</code> 注释来实现保证编译通过。</p><p>如果你已经<code>npm run eject</code>了，在<strong>eject模式</strong>下，可以在<code>package.json</code>文件里配置ESLint：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">"eslintConfig"</span>: &#123;</div><div class="line"><span class="string">"extends"</span>: <span class="string">"react-app"</span>,</div><div class="line"><span class="string">"globals"</span>: &#123;</div><div class="line">  <span class="string">"chrome"</span>: true</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="五、其他脚手架推荐"><a href="#五、其他脚手架推荐" class="headerlink" title="五、其他脚手架推荐"></a>五、其他脚手架推荐</h1><p>除了自己改造Facebook推荐的<a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="external">creat-react-app</a>外，下面两个脚手架也算是用户比较多的，专门用于开发Chrome插件的脚手架。</p><ul><li><a href="https://github.com/jhen0409/react-chrome-extension-boilerplate" target="_blank" rel="external">https://github.com/jhen0409/react-chrome-extension-boilerplate</a>：默认支持ReactJS，基于webpack。</li><li><a href="https://github.com/yeoman/generator-chrome-extension" target="_blank" rel="external">https://github.com/yeoman/generator-chrome-extension</a>：没有默认支持ReactJS，需要自己修改，基于gulp打包。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;相信看到这篇文章的人应该都用过Chrome插件吧，最近刚好有个这方面的需求，我就把Chrome插件的相关知识学习了一下，发现其实Chrome插件的开发和大前端Web开发的底子是一样的，无非就是runtime只限于Chrome浏览器，并且可以调用Chrome提供的一些&lt;code&gt;chrome.*&lt;/code&gt; API来实现一些基于Chrome浏览器的小功能。这里非要类比的话，我理解&lt;code&gt;chrome.*&lt;/code&gt; API就像我们开发Hybird应用一样，需要有一个bridge层来提供底层原生的能力给js。我是做Android开发出生的，这只是我的个人理解，可能对大Web技术的理解还是不够。&lt;/p&gt;
&lt;p&gt;其实Chrome上的插件，从UI上主要分成两类：一类是浏览器按钮（&lt;a href=&quot;https://crxdoc-zh.appspot.com/extensions/browserAction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BrowserAction&lt;/a&gt;），另一类是页面按钮（&lt;a href=&quot;https://crxdoc-zh.appspot.com/extensions/pageAction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PageAction&lt;/a&gt;）。两者的开发大同小异，我这里今天主要介绍的主角不是Chrome插件开发，而是&lt;strong&gt;如何使用React.js来开发Chrome插件&lt;/strong&gt;，本文先简单介绍下Chrome插件的开发和ReactJS，最后介绍如何采用Facebook官方推荐的creat-react-app脚手架来开发Chrome插件。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React" scheme="http://unclechen.github.io/tags/React/"/>
    
      <category term="Chrome插件" scheme="http://unclechen.github.io/tags/Chrome%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Web" scheme="http://unclechen.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>WebView缓存原理分析和应用</title>
    <link href="http://unclechen.github.io/2017/05/13/WebView%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%92%8C%E5%BA%94%E7%94%A8/"/>
    <id>http://unclechen.github.io/2017/05/13/WebView缓存原理分析和应用/</id>
    <published>2017-05-13T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>现在的App开发，或多或少都会用到Hybrid模式，到了WebView这边，经常会加载一些js文件（例如和WebView用来Native通信的bridge.js），而这些js文件不会经常发生变化，所以我们希望js在WebView里面加载一次之后，如果js没有发生变化，下次就不用再发起网络请求去加载，从而减少流量和资源的占用。那么有什么方式可以达到这个目的呢？先得从WebView的缓存原理入手。</p><h1 id="二、WebView的缓存类型"><a href="#二、WebView的缓存类型" class="headerlink" title="二、WebView的缓存类型"></a>二、WebView的缓存类型</h1><p>WebView主要包括两类缓存，<strong>一类是浏览器自带的网页数据缓存</strong>，这是所有的浏览器都支持的、由HTTP协议定义的缓存；<strong>另一类是H5缓存</strong>，这是由web页面的开发者设置的，H5缓存主要包括了App Cache、DOM Storage、Local Storage、Web SQL Database 存储机制等，这里我们主要介绍App Cache来缓存js文件。</p><a id="more"></a><h1 id="三、浏览器自带的网页数据缓存"><a href="#三、浏览器自带的网页数据缓存" class="headerlink" title="三、浏览器自带的网页数据缓存"></a>三、浏览器自带的网页数据缓存</h1><h2 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h2><p>浏览器缓存机制是通过HTTP协议Header里的Cache-Control（或Expires）和Last-Modified（或 Etag）等字段来控制文件缓存的机制。关于这几个字段的作用和浏览器的缓存更新机制，大家可以看看这两篇文章(<a href="http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=267" target="_blank" rel="external">H5 缓存机制浅析 移动端 Web 加载性能优化</a>，<a href="http://www.jianshu.com/p/5e7075f4875f" target="_blank" rel="external">Android：手把手教你构建 WebView 的缓存机制 &amp; 资源预加载方案</a>)，里面有详细的介绍。下面从我实际应用的角度，介绍一下通常会在HTTP协议中遇到的Header。</p><p>这两个字段是<strong>接收响应时，浏览器决定文件是否需要被缓存；或者需要加载文件时，浏览器决定是否需要发出请求</strong>的字段。</p><ul><li><p><strong>Cache-Control:max-age=315360000，</strong>这表示缓存时长为315360000秒。如果315360000秒内需要再次请求这个文件，那么浏览器不会发出请求，直接使用本地的缓存的文件。这是HTTP/1.1标准中的字段。</p></li><li><p><strong>Expires: Thu, 31 Dec 2037 23:55:55 GMT，</strong>这表示这个文件的过期时间是2037年12月31日晚上23点55分55秒，在这个时间之前浏览器都不会再次发出请求去获取这个文件。这是HTTP/1.0中的字段，如果客户端和服务器时间不同步会导致缓存出现问题，因此才有了上面的Cache-Control，当它们同时出现在HTTP Response的Header中时，Cache-Control优先级更高。 </p></li></ul><p>下面两个字段是<strong>发起请求时，服务器决定文件是否需要更新</strong>的字段。</p><ul><li><p><strong>Last-Modified:Wed, 28 Sep 2016 09:24:35 GMT，</strong>这表示这个文件最后的修改时间是2016年9月28日9点24分35秒。这个字段对于浏览器来说，会在下次请求的时候，作为Request Header的If-Modified-Since字段带上。例如浏览器缓存的文件已经超过了Cache-Control（或者Expires），那么需要加载这个文件时，就会发出请求，请求的Header有一个字段为<code>If-Modified-Since：Wed, 28 Sep 2016 09:24:35 GMT</code>，服务器接收到请求后，会把文件的Last-Modified时间和这个时间对比，如果时间没变，那么浏览器将返回<code>304 Not Modified</code>给浏览器，且content-length肯定是0个字节。如果时间有变化，那么服务器会返回<code>200 OK</code>，并返回相应的内容给浏览器。</p></li><li><p><strong>ETag:”57eb8c5c-129”，</strong>这是文件的特征串。功能同上面的Last-Modified是一样的。只是在浏览器下次请求时，ETag是作为Request Header中的<code>If-None-Match:&quot;57eb8c5c-129&quot;</code>字段传到服务器。服务器和最新的文件特征串对比，如果相同那么返回<code>304 Not Modified</code>，不同则返回<code>200 OK</code>。当ETag和Last-Modified同时出现时，任何一个字段只要生效了，就认为文件是没有更新的。</p></li></ul><h2 id="2-WebView如何设置才能支持上面的协议"><a href="#2-WebView如何设置才能支持上面的协议" class="headerlink" title="2.WebView如何设置才能支持上面的协议"></a>2.WebView如何设置才能支持上面的协议</h2><p>由上面的介绍可知，只要是个主流的、合格的浏览器，都应该能够支持HTTP协议层面的这几个字段。这不是我们开发者可以修改的，也不是我们应该修改的配置。在Android上，我们的WebView也支持这几个字段。但是我们可以通过代码去<strong>设置WebView的Cache Mode</strong>，而使得协议生效或者无效。WebView有下面几个Cache Mode：</p><ul><li>LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据。</li><li>LOAD_DEFAULT: 根据cache-control决定是否从网络上取数据。 </li><li>LOAD_CACHE_NORMAL: API level 17中已经废弃，从API level 11开始作用同LOAD_DEFAULT模式 </li><li>LOAD_NO_CACHE: 不使用缓存，只从网络获取数据。</li><li>LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。本地没有缓存时才从网络上获取。</li></ul><p>设置WebView缓存的Cache Mode示例代码如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WebSettings<span class="built_in"> settings </span>= webView.getSettings();</div><div class="line">settings.setCacheMode(WebSettings.LOAD_DEFAULT);</div></pre></td></tr></table></figure><p>网上很多人都说根据网络条件去选择Cache Mode，当有网络时，设置为LOAD_DEFAULT，当没有网络时设置为LOAD_CACHE_ELSE_NETWORK。但是在我的业务中，js文件的更新都是非覆盖式的更新，也就是时候每次改变js文件的时候，文件的url地址一定会发生变化，所以我希望浏览器能够缓存下来js，并且一直使用它，那么我就给它只设置为LOAD_CACHE_ELSE_NETWORK。当然如果你要是可以改js的cdn服务器的Cache-Control字段，那也行啊，用LOAD_DEFAULT就ok了。至于文件是应该采用覆盖式or非覆盖式的更新，不是我今天要讨论的内容，在web前端领域，这是一个可以聊聊的topic。</p><blockquote><p>关于iOS的WebView，我同事在实际测试的时候竟然发现，控制文件缓存的Response Header是Expires字段。。而且iOS无法针对整个WebView设置Cache Mode，只能针对每一个URLRequest去设置。。后续有机会要学习一下iOS那块的情况。</p></blockquote><h2 id="3-在手机里面的存储路径"><a href="#3-在手机里面的存储路径" class="headerlink" title="3.在手机里面的存储路径"></a>3.在手机里面的存储路径</h2><p>浏览器默认缓存下来的文件是怎么被存储到了哪里呢？这个问题在接触到WebView以来，就一直是一个谜题。这次由于工作的需要，我特意root了两台手机，一台红米1（Android 4.4）和一台小米4c（Android 5.1），在root高系统版本（6.0和7.1）的两台Nexus都以失败告终之后，我决定还是先看看4.4和5.1系统上，WebView自带的缓存存到了哪里。</p><p>首先，不用思考就知道，这些文件一定是在<strong>/data/data/包名/</strong>目录下，在我之前的一篇博客里面提到过，这是每一个应用自己的内部存储目录。</p><p>接着，我们打开终端，使用adb连接手机，然后按照下面命令操作一下。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.先进入shell</span></div><div class="line">adb shell</div><div class="line"><span class="comment">// 2.开启root账号 </span></div><div class="line">su</div><div class="line"><span class="comment">// 3.修改文件夹权限</span></div><div class="line">chmod <span class="number">777</span> <span class="keyword">data</span>/<span class="keyword">data</span>/你的应用包名/</div><div class="line"><span class="comment">// 4.修改子文件夹的权限，因为Android命令行不支持向Linux那样的-R命令实现递归式的chmod。。。</span></div><div class="line">chmod <span class="number">777</span> <span class="keyword">data</span>/<span class="keyword">data</span>/你的应用包名<span class="comment">/*</span></div><div class="line"><span class="comment">// 5.所以如果你对应用目录层级更深，你就要进一步地chmod。。。</span></div><div class="line"><span class="comment">chmod 777 data/data/你的应用包名/*/</span>*</div><div class="line"><span class="comment">// 6.直到终端里提示你说，no such file or directory时，说明chmod完了，所有的内部存储里面的文件夹和文件都可以看到了，如果大家有更好的方法请一定告诉我，多谢了~</span></div></pre></td></tr></table></figure><ul><li>Android 4.4的目录：<code>/data/data/包名/app_webview/cache/</code>，如下图所示的第二个文件夹。</li></ul><p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1ffjvarjyijj30jg05k0yr.jpg" alt="Android4.4系统WebView自带缓存路径"></p><p>可能你注意到了，第一个文件夹是叫Application Cache，我们后面再说它。</p><ul><li>Android 5.1的目录：<code>/data/data/包名/cache/org.chromium.android_webview/</code>下面，如下图所示。</li></ul><p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1ffjvztg93zj30jg0a247x.jpg" alt=""></p><p>但是在5.1系统上，<code>/data/data/包名/app_webview/</code>文件夹依然存在，只是4.4系统上面存储WebView自带缓存的<code>app_webview/cache</code>文件夹不再存在了（注意下App Cache目录还在），如下图所示。</p><p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1ffjw46ygoqj30jg06443v.jpg" alt="Android5.1系统WebView自带缓存路径"></p><p>综上所述，WebView自带的浏览器协议支持的缓存，在不同的系统版本上，位置是不一样的。也许除了我root过的4.4、5.1以外，其他版本系统的WebView自带缓存还可能存在于不同的目录里面。</p><p>另外一个是关于<strong>缓存文件的存储格式和索引格式</strong>，在不同的手机上可能也有差别，因为之前看到网上的人都说有叫<strong>webview.db</strong>或者<strong>webviewCache.db</strong>的文件，这个文件呢，还不是在<code>app_webview/cache</code>或者<code>org.chromium.android_webview</code>下面，而是在<code>/data/data/包名/database/</code>里面。但是，我这两台root过的手机都没有看到这种文件，而且我把<code>/data/data/包名/</code>下面所有的db文件都打开看了，并没有发现有存储url记录的table。。</p><p>实际上，以5.1系统为例，我看到了<code>/data/data/包名/cache/org.chromium.android_webview/</code>下面有叫<strong>index</strong>和<strong>/index-dir/the-real-index</strong>的文件，以及一堆名称为<strong>md5+下划线+数字</strong>的文件，上面的图中也可以看得到，这块的原理仍然有些疑问，也希望专业的大神可以解答一下。</p><h1 id="四、H5的缓存"><a href="#四、H5的缓存" class="headerlink" title="四、H5的缓存"></a>四、H5的缓存</h1><p>讲完了WebView自带的缓存，下面讲一下H5里面的App Cache。这个Cache是由开发Web页面的开发者控制的，而不是由Native去控制的，但是Native里面的WebView也需要我们做一下设置才能支持H5的这个特性。</p><h2 id="1-工作原理-1"><a href="#1-工作原理-1" class="headerlink" title="1.工作原理"></a>1.工作原理</h2><p>写Web页面代码时，指定manifest属性即可让页面使用App Cache。通常html页面代码会这么写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"xxx.appcache"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>xxx.appcache文件用的是相对路径，这时appcache文件的路径是和页面一样的。也可以使用的绝对路径，但是域名要保持和页面一致。</p><p>完整的xxx.appcache文件一般包括了3个section，基本格式如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CACHE MANIFEST</div><div class="line"><span class="meta"># 2017-05-13 v1.0.0</span></div><div class="line">/bridge.js</div><div class="line"> </div><div class="line"><span class="symbol">NETWORK:</span></div><div class="line">*</div><div class="line"> </div><div class="line"><span class="symbol">FALLBACK:</span></div><div class="line">/<span class="number">404.</span>html</div></pre></td></tr></table></figure><ul><li>CACHE MANIFEST下面文件就是要被浏览器缓存的文件</li><li>NETWORK下面的文件就是要被加载的文件</li><li>FALLBACK下面的文件是目标页面加载失败时的显示的页面</li></ul><p><strong>AppCache工作的原理：</strong>当一个设置了manifest文件的html页面被加载时，CACHE MANIFEST指定的文件就会被缓存到浏览器的App Cache目录下面。当下次加载这个页面时，会首先应用通过manifest已经缓存过的文件，然后发起一个加载xxx.appcache文件的请求到服务器，如果xxx.appcache文件没有被修改过，那么服务器会返回<code>304 Not Modified</code>给到浏览器，如果xxx.appcache文件被修改过，那么服务器会返回<code>200 OK</code>，并返回新的xxx.appcache文件的内容给浏览器，浏览器收到之后，再把新的xxx.appcache文件中指定的内容加载过来进行缓存。</p><p>可以看到，AppCache缓存需要在每次加载页面时都发出一个xxx.appcache的请求去检查manifest文件是不是有更新（byte by byte）。根据这篇文章（<a href="http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=267" target="_blank" rel="external">H5 缓存机制浅析 移动端 Web 加载性能优化</a>）的介绍，AppCache有一些坑的地方，且官方已经不推荐使用了，但目前主流的浏览器依然是支持的。文章里主要提到下面这些坑：</p><ul><li>要更新缓存的文件，需要更新包含它的 manifest 文件，那怕只加一个空格。常用的方法，是修改 manifest 文件注释中的版本号。如：# 2012-02-21 v1.0.0</li><li>被缓存的文件，浏览器是先使用，再通过检查 manifest 文件是否有更新来更新缓存文件。这样缓存文件可能用的不是最新的版本。</li><li>在更新缓存过程中，如果有一个文件更新失败，则整个更新会失败。</li><li>manifest 和引用它的HTML要在相同 HOST。</li><li>manifest 文件中的文件列表，如果是相对路径，则是相对 manifest 文件的相对路径。</li><li>manifest 也有可能更新出错，导致缓存文件更新失败。</li><li>没有缓存的资源在已经缓存的 HTML 中不能加载，即使有网络。例如：[url=]<a href="http://appcache-demo.s3-website-us-east-1.amazonaws.com/without-network/[/url" target="_blank" rel="external">http://appcache-demo.s3-website-us-east-1.amazonaws.com/without-network/[/url</a>]</li><li>manifest 文件本身不能被缓存，且 manifest 文件的更新使用的是浏览器缓存机制。所以 manifest 文件的 Cache-Control 缓存时间不能设置太长。</li></ul><h2 id="2-WebView如何设置才能支持AppCache"><a href="#2-WebView如何设置才能支持AppCache" class="headerlink" title="2.WebView如何设置才能支持AppCache"></a>2.WebView如何设置才能支持AppCache</h2><p>WebView默认是没有开启AppCache支持的，需要添加下面这几行代码来设置：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WebSettings webSettings = webView.getSettings<span class="params">()</span>;</div><div class="line">webSettings.<span class="keyword">set</span>AppCacheEnabled<span class="params">(true)</span>;</div><div class="line">String cachePath = getApplicationContext<span class="params">()</span><span class="string">.getCacheDir</span><span class="params">()</span><span class="string">.getPath</span><span class="params">()</span>; <span class="string">//</span> 把内部私有缓存目录'<span class="string">/data/data/</span>包名<span class="string">/cache/</span>'作为WebView的AppCache的存储路径</div><div class="line">webSettings.<span class="keyword">set</span>AppCachePath<span class="params">(cachePath)</span>;</div><div class="line">webSettings.<span class="keyword">set</span>AppCacheMaxSize<span class="params">(5 * 1024 * 1024)</span>;</div></pre></td></tr></table></figure><p>注意：WebSettings的setAppCacheEnabled和setAppCachePath都必须要调用才行。</p><h2 id="3-存储AppCache的路径"><a href="#3-存储AppCache的路径" class="headerlink" title="3.存储AppCache的路径"></a>3.存储AppCache的路径</h2><p>按照Android SDK的API说明，setAppCachePath是可以用来设置AppCache路径的，但是我实际测试发现，不管你怎么设置这个路径，设置到应用自己的内部私有目录还是外部SD卡，都无法生效。AppCache缓存文件最终都会存到<code>/data/data/包名/app_webview/cache/Application Cache</code>这个文件夹下面，在上面的Android 4.4和5.1系统目录截图可以看得到，<strong>但是如果你不调用setAppCachePath方法，WebView将不会产生这个目录</strong>。这里有点让我觉得奇怪，我猜测可能从某一个系统版本开始，为了缓存文件的完整性和安全性考虑，SDK实现的时候就吧AppCache缓存目录设置到了内部私有存储。</p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>WebView自带的缓存和AppCache都是可以用来做文件级别的缓存的，基本上比较好地满足对于非覆盖式的js、css等文件更新。</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ul><li>WebView自带的缓存是是协议层实现的（浏览器内核标准实现，开发者无法改变）；而AppCache是应用层实现的。</li><li>WebView的缓存目录在不同系统上可能是不同的；而对于AppCache而言，AppCache的存储路径虽然有方法设置，但是最终都存储到了一个固定的内部私有目录下。</li><li>WebView自带的缓存可以在缓存生效的时候不用再发HTTP请求；而AppCache一定会发出一个manifest文件的请求。</li><li>WebView自带的缓存可以通过设置CacheMode来改变WebView的缓存机制；而AppCache的缓存策略是由manifest文件控制的，也就是说是由web页面开发者控制的。</li></ul><p>最后说一下，其实很多时候，这两类缓存是共同在工作的，当manifest文件没有控制某些资源加载时，例如我上面写的xxx.appcache文件里，NETWORK section下面用的是*号，意思是所有不缓存的文件都要去网络加载。此时，这些资源就会走到WebView自带的缓存机制去，结合WebView的CacheMode，我们实际上对这些文件进行了一次WebView自带的缓存。搞清楚这两类缓存的原理有利于我们更好的设计自己的页面和App，尽可能减少网络请求，提高App运行效率。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;现在的App开发，或多或少都会用到Hybrid模式，到了WebView这边，经常会加载一些js文件（例如和WebView用来Native通信的bridge.js），而这些js文件不会经常发生变化，所以我们希望js在WebView里面加载一次之后，如果js没有发生变化，下次就不用再发起网络请求去加载，从而减少流量和资源的占用。那么有什么方式可以达到这个目的呢？先得从WebView的缓存原理入手。&lt;/p&gt;
&lt;h1 id=&quot;二、WebView的缓存类型&quot;&gt;&lt;a href=&quot;#二、WebView的缓存类型&quot; class=&quot;headerlink&quot; title=&quot;二、WebView的缓存类型&quot;&gt;&lt;/a&gt;二、WebView的缓存类型&lt;/h1&gt;&lt;p&gt;WebView主要包括两类缓存，&lt;strong&gt;一类是浏览器自带的网页数据缓存&lt;/strong&gt;，这是所有的浏览器都支持的、由HTTP协议定义的缓存；&lt;strong&gt;另一类是H5缓存&lt;/strong&gt;，这是由web页面的开发者设置的，H5缓存主要包括了App Cache、DOM Storage、Local Storage、Web SQL Database 存储机制等，这里我们主要介绍App Cache来缓存js文件。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="WebView" scheme="http://unclechen.github.io/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>python利用beautifulsoup+selenium自动翻页抓取网页内容</title>
    <link href="http://unclechen.github.io/2016/12/11/python%E5%88%A9%E7%94%A8beautifulsoup+selenium%E8%87%AA%E5%8A%A8%E7%BF%BB%E9%A1%B5%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9/"/>
    <id>http://unclechen.github.io/2016/12/11/python利用beautifulsoup+selenium自动翻页抓取网页内容/</id>
    <published>2016-12-11T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>记录一次周末在家速成的爬虫实现之旅。受人之托，想要把这个页面<a href="http://baike.baidu.com/starrank?fr=lemmaxianhua" target="_blank" rel="external">http://baike.baidu.com/starrank?fr=lemmaxianhua</a>的明星排行榜爬取下来。用chrome打开一看，其实就1000条记录。然后“右键菜单”-&gt;“检查”，看下网页的结构，也不是特别复杂。所以我目测只要用<strong>python</strong>自带的<code>urllib2</code>库打开网页，获取html代码，再交给<code>BeautifulSoup</code>库解析html代码，应该就可以快速搞定。</p><a id="more"></a><p><img src="http://ww3.sinaimg.cn/large/006y8lVagw1famy31l1mvj30go0gjwh6.jpg" alt="webpage"></p><p>但仔细一看，<strong>点击下一页，网页的url没有任何变化</strong>，只是用js去加载了新的数据，然后动态地改变了table里面的数据。这可和本菜菜以前爬的页面可不一样，所以这次要想办法<strong>模拟翻页，然后重新读取新的html代码，再去解析</strong>。</p><p>实现翻页可以有两种办法，<strong>第一种是分析js的实现来模拟翻页。</strong>翻页操作实际上js向后台发出了请求，这里肯定是带着跳转的目的页码请求了后台，然后拿到新数据后重新渲染了html的表格部分。这种方法会更加高效，但难度也会更大一些。因为如果你已经能够模拟请求了，那其实相当于你连人家的服务器接口都已经知道了，那么进一步分析下响应就可以拿到结果了，这甚至不需要再去分析html代码了是不是？<strong>第二种比较简单暴力，也是我这里用的方法，那就是模拟点击网页中的下一页按钮，然后重新读取html代码来解析。</strong></p><h1 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h1><p>在前面已经说了，这里把思路流程化：</p><ul><li>1.打开网页</li><li>2.读取当前页面的html代码，解析列表里面的明星名字</li><li>3.<strong><em>模拟</em></strong>点击“下一页”</li><li>4.重复第2步的工作，直到页面里没有“下一页”的按钮</li></ul><p>在这里打开网页和读取网页的html代码，是通过<code>selenium</code>实现的；<br>解析html代码，是通过<code>beautifulsoup</code>实现的。</p><h1 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h1><h2 id="1-准备工作，安装依赖库"><a href="#1-准备工作，安装依赖库" class="headerlink" title="1.准备工作，安装依赖库"></a>1.准备工作，安装依赖库</h2><ul><li>安装beautifulsoup</li></ul><p>在下用的是mac，所以直接easy_install命令行安装。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sudo</span> easy_install beautifulsoup4</div></pre></td></tr></table></figure><ul><li>安装selenium</li></ul><p>还是用easy_install命令装。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sudo</span> easy_install selenium</div></pre></td></tr></table></figure><blockquote><p>这里selenium版本已经到了3.0.2，想要用这个版本的selenium去打开一个网页，需要用到对应的driver。于是下面我还需要安装一个driver。</p></blockquote><ul><li>安装chromedirver</li></ul><p>我这里用的是homebrew安装的chromediver，安装完成后<strong>大家记得找到chromediver的安装目录</strong>，我们在下面去写代码的时候会用到的。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>chromedirver</div></pre></td></tr></table></figure><blockquote><p>注意：mac下有很多软件管理包，除了我的安装方法，用<code>pip</code>之类的去安装，或者直接去官网下载安装程序，都是可以的。但是一定要安装上面的3个程序才行。这里我突然有个想法，要是python也有像gradle一样的构建管理工具多好，讲真，今天我安装这几个依赖的library花的时间比写代码还多呢。。</p></blockquote><h2 id="2-分析网页"><a href="#2-分析网页" class="headerlink" title="2.分析网页"></a>2.分析网页</h2><p>简单贴一段我要爬的网页的部分html代码，里面我用//写了点注释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tables-container"</span> <span class="attr">style</span>=<span class="string">"height: 1417px"</span>&gt;</span></div><div class="line">// 本周排行榜，这是我要抓的内容</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ranking-table cur"</span> <span class="attr">data-cat</span>=<span class="string">"thisWeek"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"padding-left: 30px; width: 101px"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://baike.bdimg.com/static/wiki-activity/starRanking/resource/img/trophy-blue_05c0f47.png"</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"padding-left: 115px; width: 226px"</span>&gt;</span>明星<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"padding-left: 50px; width: 175px"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://baike.bdimg.com/static/wiki-activity/starRanking/resource/img/flower-blue_31b8b3b.png"</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;鲜花数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"padding-left: 80px; width: 154px"</span>&gt;</span>TOP粉丝<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">class</span>=<span class="string">"list-container"</span>&gt;</span>                           </div><div class="line">             <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"star-index star-index-0"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                 // 这个td标签，star-name的css class是我要抓的内容</div><div class="line">                 <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"star-name"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/subview/3938672/10939278.htm"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://imgsa.baidu.com/baike/whcrop%3D100%2C100/sign=b5ae35ac11d8bc3ec65d5088edfb9b2f/8d5494eef01f3a29f4da55589125bc315c607c12.jpg"</span>&gt;</span>王俊凯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"star-score"</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">span</span>&gt;</span>1790892<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"star-score-sendFlower"</span> <span class="attr">data-lemmaid</span>=<span class="string">"75850"</span>&gt;</span>送花<span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"star-fans"</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span>183*****630<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>2<span class="tag">&lt;/<span class="name">i</span>&gt;</span>185*****759<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>3<span class="tag">&lt;/<span class="name">i</span>&gt;</span>wx526298988<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">             ...此处省略巨量代码...</div><div class="line">         <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">// 这里是本周排行榜分页的html代码，可以看到一页20个明星，共有50页</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ranking-pager wgt_horPager wgt_horPager_tpl_noEllipsis"</span> <span class="attr">nslog</span>=<span class="string">"area"</span> <span class="attr">nslog-type</span>=<span class="string">"20100105"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag first disabled"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"separator disabled"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag prev disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>&amp;lt;<span class="tag">&lt;/<span class="name">em</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"separator disabled"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag cur"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag"</span> <span class="attr">p-index</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag"</span> <span class="attr">p-index</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag"</span> <span class="attr">p-index</span>=<span class="string">"4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag"</span> <span class="attr">p-index</span>=<span class="string">"5"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"separator"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    // 这里就是要模拟点击的下一页按钮</div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag next"</span> <span class="attr">p-index</span>=<span class="string">"2"</span>&gt;</span>下一页<span class="tag">&lt;<span class="name">em</span>&gt;</span>&amp;gt;<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"separator"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"pTag last"</span> <span class="attr">p-index</span>=<span class="string">"50"</span>&gt;</span>尾页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">// 下面开始就是“上周排行榜”，html结构和上面完全类似</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ranking-table"</span> <span class="attr">data-cat</span>=<span class="string">"lastWeek"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">...此处再次省略巨量代码...</div></pre></td></tr></table></figure><h2 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3.完整代码"></a>3.完整代码</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"></div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>) <span class="comment"># 设置编码</span></div><div class="line"></div><div class="line">url = <span class="string">'http://baike.baidu.com/starrank?fr=lemmaxianhua'</span></div><div class="line"></div><div class="line"></div><div class="line">driver = webdriver.Chrome(<span class="string">'/usr/local/Cellar/chromedriver/2.20/bin/chromedriver'</span>) <span class="comment"># 创建一个driver用于打开网页，记得找到brew安装的chromedriver的位置，在创建driver的时候指定这个位置</span></div><div class="line">driver.get(url) <span class="comment"># 打开网页</span></div><div class="line"></div><div class="line">name_counter = <span class="number">1</span></div><div class="line">page = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> page &lt; <span class="number">50</span>: <span class="comment"># 共50页，这里是手工指定的</span></div><div class="line">soup = BeautifulSoup(driver.page_source, <span class="string">"html.parser"</span>)</div><div class="line">current_names = soup.select(<span class="string">'div.ranking-table'</span>) <span class="comment"># 选择器用ranking-table css class，可以取出包含本周、上周的两个table的div标签</span></div><div class="line"><span class="keyword">for</span> current_name_list <span class="keyword">in</span> current_names:</div><div class="line"><span class="comment"># print current_name_list['data-cat']</span></div><div class="line"><span class="keyword">if</span> current_name_list[<span class="string">'data-cat'</span>] == <span class="string">'thisWeek'</span>: <span class="comment"># 这次我只想抓取本周，如果想抓上周，改一下这里为lastWeek即可</span></div><div class="line">names = current_name_list.select(<span class="string">'td.star-name &gt; a'</span>) <span class="comment"># beautifulsoup选择器语法</span></div><div class="line">counter = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> star_name <span class="keyword">in</span> names:</div><div class="line">counter = counter + <span class="number">1</span>;</div><div class="line"><span class="built_in">print</span> star_name.text <span class="comment"># 明星的名字是a标签里面的文本，虽然a标签下面除了文本还有一个与文本同级别的img标签，但是.text输出的只是文本而已</span></div><div class="line">name_counter = name_counter + <span class="number">1</span>;</div><div class="line">driver.find_element_by_xpath(<span class="string">"//a[contains(text(),'下一页')]"</span>).click() <span class="comment"># selenium的xpath用法，找到包含“下一页”的a标签去点击</span></div><div class="line">page = page + <span class="number">1</span></div><div class="line">time.sleep(<span class="number">2</span>) <span class="comment"># 睡2秒让网页加载完再去读它的html代码</span></div><div class="line"></div><div class="line"><span class="built_in">print</span> name_counter <span class="comment"># 共爬取得明星的名字数量</span></div><div class="line">driver.quit()</div></pre></td></tr></table></figure><h1 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h1><p>这里只是简单记录一次稍微复杂点的网页爬取的实现思路，关于selenium和beatifulsoup，还有很多的用法，我还没仔细看过。下面是一些参考资料，以后有机会还要多学习一下。</p><ul><li><a href="http://cuiqingcai.com/1319.html" target="_blank" rel="external">Python爬虫利器二之Beautiful Soup的用法</a>：介绍了安装bs的方法，以及不同的parser，如html5、xml有什么区别。</li><li><a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">Beautiful Soup 4.4.0 文档</a>：其实bs支持不同语言，这次写python就是因为代码少，但是安装依赖确实是麻烦。</li><li><a href="http://www.seleniumhq.org/" target="_blank" rel="external">selenium官网</a>：selenium其实有官方的IDE，也支持不同的语言。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;记录一次周末在家速成的爬虫实现之旅。受人之托，想要把这个页面&lt;a href=&quot;http://baike.baidu.com/starrank?fr=lemmaxianhua&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://baike.baidu.com/starrank?fr=lemmaxianhua&lt;/a&gt;的明星排行榜爬取下来。用chrome打开一看，其实就1000条记录。然后“右键菜单”-&amp;gt;“检查”，看下网页的结构，也不是特别复杂。所以我目测只要用&lt;strong&gt;python&lt;/strong&gt;自带的&lt;code&gt;urllib2&lt;/code&gt;库打开网页，获取html代码，再交给&lt;code&gt;BeautifulSoup&lt;/code&gt;库解析html代码，应该就可以快速搞定。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://unclechen.github.io/tags/python/"/>
    
      <category term="爬虫" scheme="http://unclechen.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>利用属性动画在Android4.x上实现Android L的元素转场动画效果（shared elements transition）</title>
    <link href="http://unclechen.github.io/2016/11/08/%E5%88%A9%E7%94%A8%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E5%9C%A8Android4.x%E4%B8%8A%E5%AE%9E%E7%8E%B0Android%20L%E7%9A%84%E5%85%83%E7%B4%A0%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <id>http://unclechen.github.io/2016/11/08/利用属性动画在Android4.x上实现Android L的元素转场动画效果/</id>
    <published>2016-11-08T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>随着谷歌推出的MaterialDesign不断被各种实践，最近我也碰到这么一个需求，就是要求实现一个图片的转场效果。在第一个界面上，图片被点击后，会渐渐地滑动到第二个界面中去。</p><p>其实仔细观察一下Google相册也有用到这种效果，大概的效果图是这样的：</p><p><img src="http://ww2.sinaimg.cn/large/801b780agw1f9kunqk6sqg20b40jre86.gif" alt="transition-ui-demo"></p><p>按照我的理解，这种效果要是直接把View拿出来复用就可以。但是经过学习（国内外各种大神的博客）和实践发现，里面有不少可以思考的地方。</p><a id="more"></a><p>根据官方介绍的<a href="https://developer.android.com/training/material/animations.html#Transitions" target="_blank" rel="external">Transitions</a>，在Android 5.0以后，可以使用<strong>shared elements transition</strong>来实现这个效果，非常方便。但是我们的App一般还需要向下兼容到4.x，所以在4.x上得想其它的办法实现。</p><p>下面我以上图的ImageView转场动画为例子，介绍一下是怎么实现这个效果的。（代码都在<a href="https://github.com/unclechen/ActivityTransitionDemo" target="_blank" rel="external">这里</a>）</p><blockquote><p>注意：为了说明转场效果实现的核心内容，一些无关的东西都用了最简单的实现。</p></blockquote><h1 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h1><h2 id="1-入场"><a href="#1-入场" class="headerlink" title="1.入场"></a>1.入场</h2><ul><li>（1）保存第一个Activity中ImageView（我们叫它originImageView）的位置信息、宽、高，然后把这些信息传给第二个Activity。</li><li>（2）去掉Activity默认的转场动画。</li><li>（3）进入第二个Activity之后，拿到第一个Activity传过来的ImageView的位置、宽、高信息，并在第二个Activity动态添加一个一模一样的ImageView（我叫它sourceImageView）。</li><li>（4）在第二个Activity中，找到最终的ImageView（我叫它targetImageView），并取出它最终所在的位置。</li><li>（5）对比sourceImageView和targetImageView的位置、大小等等各种<strong>属性</strong>的区别，然后使用属性动画将sourceImageView变换成targetImageView。</li><li>（6）当动画结束时，显示出targetImageView，隐藏sourceImageView。</li></ul><blockquote><p>注意：这里当动画结束时，我们需要将sourceImageView的LayoutParams改成和targetImageView的LayoutParams一模一样，用于退出时做转场动画使用。<br>其实退场效果和入场效果是完全相反的步骤。</p></blockquote><h2 id="2-退场"><a href="#2-退场" class="headerlink" title="2.退场"></a>2.退场</h2><ul><li>（1）将之前隐藏的sourceImageView显示出来，隐藏targetImageView。</li><li>（2）通过属性动画将sourceImageView从当前的位置和宽、高大小，变换到刚进入第二个Activity时的状态。（这里的动画代码几乎一样，只是把开始值和结束值调换了位置）</li><li>（3）动画结束时，关闭第二个Activity，去掉Activity的转场动画。</li></ul><p>上面就是实现思路，其实很好理解。实现这个思路的重点，就在于属性动画的应用了。也就是上面提到的<strong>入场的第5步</strong>和<strong>退场的第2步</strong>，这里面用到的属性动画代码见下一章。</p><h1 id="三、实现代码"><a href="#三、实现代码" class="headerlink" title="三、实现代码"></a>三、实现代码</h1><h2 id="1-入场-1"><a href="#1-入场-1" class="headerlink" title="1.入场"></a>1.入场</h2><h3 id="（1）先复原出sourceImageView"><a href="#（1）先复原出sourceImageView" class="headerlink" title="（1）先复原出sourceImageView"></a>（1）先复原出sourceImageView</h3><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个和第一个界面一模一样的ImageView，作为这个界面的sourceImageView</span></div><div class="line">private void initSourceImageView() &#123;</div><div class="line">    <span class="comment">// 先动态创建出这个sourceImageView，把它添加到第二个界面的ContentView中。</span></div><div class="line">    <span class="type">FrameLayout</span> contentView = (<span class="type">FrameLayout</span>) getWindow().getDecorView().findViewById(android.<span class="type">R</span>.id.content);</div><div class="line">    mSourceImageView = <span class="function"><span class="keyword">new</span> <span class="title">ImageView</span>(this);</span></div><div class="line"><span class="function">    <span class="title">contentView</span>.<span class="title">addView</span>(mSourceImageView);</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    <span class="comment">// 读取第一个界面传过来的信息</span></span></div><div class="line"><span class="function">    <span class="title">Bundle</span> <span class="title">bundle</span> = <span class="title">getIntent</span>().<span class="title">getExtras</span>();</span></div><div class="line"><span class="function">    <span class="title">mRect</span> = (<span class="type">Rect</span>) <span class="title">getIntent</span>().<span class="title">getParcelableExtra</span>(<span class="type">IMAGE_ORIGIN_RECT</span>);</span></div><div class="line"><span class="function">    <span class="title">ImageView</span>.<span class="title">ScaleType</span> <span class="title">scaleType</span> = (<span class="type">ImageView</span>.<span class="type">ScaleType</span>) <span class="title">bundle</span>.<span class="title">getSerializable</span>(<span class="type">IMAGE_SCALE_TYPE</span>);</span></div><div class="line"><span class="function">    <span class="title">mResId</span> = <span class="title">bundle</span>.<span class="title">getInt</span>(<span class="type">IMAGE_RES_ID</span>);</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    <span class="comment">// 设置为和第一个界面一样的图片</span></span></div><div class="line"><span class="function">    <span class="title">mSourceImageView</span>.<span class="title">setImageResource</span>(mResId);</span></div><div class="line"><span class="function">    <span class="title">mTargetImageView</span>.<span class="title">setImageResource</span>(mResId);</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    <span class="comment">// 设为和原来一样的裁剪模式</span></span></div><div class="line"><span class="function">    <span class="title">mSourceImageView</span>.<span class="title">setScaleType</span>(scaleType);</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    <span class="comment">// 设置为和原来一样的位置</span></span></div><div class="line"><span class="function">    <span class="title">FrameLayout</span>.<span class="title">LayoutParams</span> <span class="title">layoutParams</span> = (<span class="type">FrameLayout</span>.<span class="type">LayoutParams</span>) <span class="title">mSourceImageView</span>.<span class="title">getLayoutParams</span>();</span></div><div class="line"><span class="function">    <span class="title">layoutParams</span>.<span class="title">width</span> = <span class="title">mRect</span>.<span class="title">width</span>();</span></div><div class="line"><span class="function">    <span class="title">layoutParams</span>.<span class="title">height</span> = <span class="title">mRect</span>.<span class="title">height</span>();</span></div><div class="line"><span class="function">    <span class="title">layoutParams</span>.<span class="title">setMargins</span>(mRect.left, mRect.top, <span class="number">0</span>, <span class="number">0</span>);</span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure><h3 id="（2）找到targetImageView的位置和宽高"><a href="#（2）找到targetImageView的位置和宽高" class="headerlink" title="（2）找到targetImageView的位置和宽高"></a>（2）找到targetImageView的位置和宽高</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initImageEnterAnimation</span><span class="params">()</span> </span>&#123;</div><div class="line">    mTargetImageView.getViewTreeObserver().addOnPreDrawListener(<span class="keyword">new</span> ViewTreeObserver.OnPreDrawListener() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onPreDraw</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 第一帧被绘制时，TargetImageView已经具有了实际的尺寸和位置，这是就应该开始播放动画。</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span>[] finalLocationOnTheScreen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">            mTargetImageView.getLocationOnScreen(finalLocationOnTheScreen);</div><div class="line">            mTargetLeft = finalLocationOnTheScreen[<span class="number">0</span>];</div><div class="line">            mTargetTop = finalLocationOnTheScreen[<span class="number">1</span>];</div><div class="line">            mTargetWidth = mTargetImageView.getWidth();</div><div class="line">            mTargetHeight = mTargetImageView.getHeight();</div><div class="line">            playEnteringAnimation(mTargetLeft, mTargetTop, mTargetWidth, mTargetHeight);</div><div class="line">            mTargetImageView.getViewTreeObserver().removeOnPreDrawListener(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="（3）播放入场动画"><a href="#（3）播放入场动画" class="headerlink" title="（3）播放入场动画"></a>（3）播放入场动画</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 属性动画走起，将sourceImageView变换到targetImageView</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">playEnteringAnimation</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> left, <span class="keyword">final</span> <span class="keyword">int</span> top, <span class="keyword">final</span> <span class="keyword">int</span> width, <span class="keyword">final</span> <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">    <span class="comment">// 1.改变ImageView的位置、宽高</span></div><div class="line">    PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(<span class="string">"left"</span>, mSourceImageView.getLeft(), left);</div><div class="line">    PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(<span class="string">"top"</span>, mSourceImageView.getTop(), top);</div><div class="line">    PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(<span class="string">"right"</span>, mSourceImageView.getRight(), left + width);</div><div class="line">    PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(<span class="string">"bottom"</span>, mSourceImageView.getBottom(), top + height);</div><div class="line"></div><div class="line">    ObjectAnimator positionAnimator = ObjectAnimator.ofPropertyValuesHolder(mSourceImageView,</div><div class="line">            propertyLeft, propertyTop, propertyRight, propertyBottom);</div><div class="line">    positionAnimator.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">            <span class="comment">// 为了退出动画，需要把sourceImageView的LayoutParams改成targetImageView</span></div><div class="line">            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) mSourceImageView.getLayoutParams();</div><div class="line">            layoutParams.height = height;</div><div class="line">            layoutParams.width = width;</div><div class="line">            layoutParams.setMargins(left, top, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 2.ImageView的矩阵动画</span></div><div class="line">    Matrix initMatrix = getImageMatrix(mSourceImageView);</div><div class="line">    initMatrix.getValues(mInitImageMatrixValues);</div><div class="line">    <span class="keyword">final</span> Matrix endMatrix = getImageMatrix(mTargetImageView);</div><div class="line">    mSourceImageView.setScaleType(ImageView.ScaleType.MATRIX);</div><div class="line">    <span class="comment">// ofObject()用法：传入自定义Property和Evaluator的用法</span></div><div class="line">    ObjectAnimator matrixAnimator = ObjectAnimator.ofObject(mSourceImageView, ANIMATED_TRANSFORM_PROPERTY, <span class="keyword">new</span> MatrixEvaluator(), initMatrix, endMatrix);</div><div class="line"></div><div class="line">    <span class="comment">// 3.顺便加个渐变动画</span></div><div class="line">    ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, <span class="string">"alpha"</span>, <span class="number">0.0</span>f, <span class="number">1.0</span>f);</div><div class="line"></div><div class="line">    <span class="comment">// 4.一起播放上面的动画</span></div><div class="line">    mEnteringAnimation = <span class="keyword">new</span> AnimatorSet();</div><div class="line">    mEnteringAnimation.setDuration(IMAGE_TRANSLATION_DURATION);</div><div class="line">    mEnteringAnimation.setInterpolator(DEFAULT_INTERPOLATOR);</div><div class="line">    mEnteringAnimation.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">            mEnteringAnimation = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mEnteringAnimation != <span class="keyword">null</span>) &#123;</div><div class="line">                mEnteringAnimation = <span class="keyword">null</span>;</div><div class="line">                mTargetImageView.setVisibility(View.VISIBLE);</div><div class="line">                mSourceImageView.setVisibility(View.INVISIBLE);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    mEnteringAnimation.playTogether(positionAnimator, matrixAnimator, fadeInAnimator);</div><div class="line">    mEnteringAnimation.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="（4）2个关键的入场动画的说明"><a href="#（4）2个关键的入场动画的说明" class="headerlink" title="（4）2个关键的入场动画的说明"></a>（4）2个关键的入场动画的说明</h3><p>在（3）中，用到下面两个关键的动画：</p><ul><li><p>ObjectAnimator - positionAnimator：改变sourceImageView的top、left、right、bottom属性，动画的起始值就是sourceImageView的这4个属性，结束值就是targetImageView的这4个属性。</p></li><li><p>ObjectAnimator - matrixAnimator：通过改变sourceImageView的Matrix，来改变其中显示的图片（drawable）的Bounds，从而使ImageView呈现出渐变效果。</p></li></ul><p>介绍这两个关键动画的实现细节之前，需要具备属性动画的基础知识。如果不熟悉的话，建议先看下这几篇博客，里面详细地介绍了属性动画的各种用法。</p><ul><li><p><a href="http://blog.csdn.net/harvic880925/article/details/50525521" target="_blank" rel="external">ValueAnimator基本使用</a></p></li><li><p><a href="http://blog.csdn.net/harvic880925/article/details/50546884" target="_blank" rel="external">ValueAnimator高级进阶（一）</a></p></li><li><p><a href="http://blog.csdn.net/harvic880925/article/details/50549385" target="_blank" rel="external">ValueAnimator高级进阶（二）</a></p></li><li><p><a href="http://blog.csdn.net/harvic880925/article/details/50598322" target="_blank" rel="external">ObjectAnimator基本使用</a></p></li><li><p><a href="http://blog.csdn.net/harvic880925/article/details/50752838" target="_blank" rel="external">PropertyValuesHolder与Keyframe</a></p></li><li><p><a href="http://blog.csdn.net/harvic880925/article/details/50759059" target="_blank" rel="external">联合动画的代码实现</a></p></li></ul><hr><p>下面介绍这两个关键的动画实现</p><h4 style="color:#ff0000">关键动画之 ObjectAnimator - positionAnimator 实现：改变ImageView的位置和大小</h4><p>我们知道，设置一个动画，就要给它设置起始值和结束值。所以我们的positionAnimator就需要设置sourceImageView的left、top、right、bottom这4个属性起始值和结束值。在动画执行的过程中，就可以渐渐地改变sourceImageView的这4个属性了。</p><p>下面这行代码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">PropertyValuesHolder propertyLeft</span> = PropertyValuesHolder.ofInt(<span class="string">"left"</span>, mSourceImageView.getLeft(), left);</div></pre></td></tr></table></figure><p>用<strong>PropertyValuesHolder</strong>可以给sourceImageView的left属性设置了起始值、结束值。</p><p>对于left属性，起始值就是sourceImageView的left值，我们已经从第一个Activity传过来了。<br>而left属性的结束值，我们可以从targetImageView的left属性值。<br>其他的top、right、bottom属性也是一样的道理。</p><blockquote><p>需要需要特别注意的一点就是targetImageView的宽高获取方法，我们都知道获取一个View的宽高必须要等它绘制完了，而<strong>targetImageView不会在setContentView之后立刻绘制完成</strong>。<br>因此我们需要监听targetImageView的绘制状态，也就是监听<strong>ViewTreeObserver</strong>的各种回调，这里我们要监听的是<strong>OnPreDrawListener</strong>。<br>关于ViewTreeObserver，可以参考<a href="http://souly.cn/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/2015/11/16/viewTreeObserver%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">《Viewtreeobserver解析》</a>这篇文章学习一下。</p></blockquote><h4 style="color:#ff0000">关键动画之ObjectAnimator - matrixAnimator实现：使ImageView展示的图片呈现渐变效果</h4><p>这里的数值计算比positionAnimator要复杂一点。</p><p>首先我们要<strong>自定义一个计算器MatrixEvaluator</strong>，它的作用是返回动画执行过程中的Matrix，然后再使用这个Matrix去改变sourceImageView的Matrix属性。</p><p>这个自定义计算器evaluate方法非常简单，就是根据起始Matrix（startMatrix）和结束Matrix（endMatrix）之间的差值diff，然后乘以当前<strong>加速器</strong>返回的动画的<strong>数值</strong>进度即可得到当前实时的Matrix值。</p><p>下面看它的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MatrixEvaluator</span> <span class="keyword">implements</span> <span class="title">TypeEvaluator</span>&lt;<span class="title">Matrix</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> TypeEvaluator&lt;Matrix&gt; NULL_MATRIX_EVALUATOR = <span class="keyword">new</span> TypeEvaluator&lt;Matrix&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Matrix <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, Matrix startValue, Matrix endValue)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">float</span>[] mTempStartValues = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</div><div class="line">        <span class="keyword">float</span>[] mTempEndValues = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</div><div class="line">        Matrix mTempMatrix = <span class="keyword">new</span> Matrix();</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Matrix <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, Matrix startValue, Matrix endValue)</span> </span>&#123;</div><div class="line">            startValue.getValues(mTempStartValues);</div><div class="line">            endValue.getValues(mTempEndValues);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">                <span class="keyword">float</span> diff = mTempEndValues[i] - mTempStartValues[i];</div><div class="line">                <span class="comment">// fraction是加速器中的返回值，表示当前动画的“数值”进度。我们用的是Android SDK中提供的AccelerateDecelerateInterpolator。</span></div><div class="line">                mTempEndValues[i] = mTempStartValues[i] + (fraction * diff); </div><div class="line">            &#125;</div><div class="line">            mTempMatrix.setValues(mTempEndValues);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> mTempMatrix;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>有了这个计算器，得到动画执行过程中的Matrix值，怎么动态地赋给sourceImageView呢？</p><p>我们知道，在普通的<code>ObjectAnimator#ofFloat(Object target, String propertyName, float... values)</code>方法中，当Evaluator接收到最后一个可变长参数values后，可以得到起始值和结束值后。然后在<strong>evaluate</strong>方法中计算出动画执行过程的应该赋予的属性的值，然后调用目标对象（这里就是我们的ImageView）的setter方法把这个值赋给目标对象。</p><blockquote><p>例如这句代码，<code>ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, &quot;alpha&quot;, 0.0f, 1.0f);</code>其实就是在计算出了动画过程中每一个时刻的alpha值，然后再调用mContainer的setAlpha(float alpha)方法去改变mContainer的透明度。</p></blockquote><p>但是要改变sourceImageView的Matrix值，我们需要调用<strong>ImageView#animateTransform()</strong>这个方法，这个方法在Android SDK中属于隐藏API，其代码片段所示：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ImageView#animateTransform()源代码</span></div><div class="line"><span class="comment">/** @hide */</span></div><div class="line">public void animateTransform(<span class="keyword">Matrix</span> <span class="keyword">matrix</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (mDrawable == <span class="built_in">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">matrix</span> == <span class="built_in">null</span>) &#123;</div><div class="line">            mDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mDrawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, mDrawableWidth, mDrawableHeight);</div><div class="line">            <span class="keyword">if</span> (mDrawMatrix == <span class="built_in">null</span>) &#123;</div><div class="line">                mDrawMatrix = <span class="keyword">new</span> <span class="keyword">Matrix</span>();</div><div class="line">            &#125;</div><div class="line">            mDrawMatrix.set(<span class="keyword">matrix</span>);</div><div class="line">        &#125;</div><div class="line">        invalidate();</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>而且这个方法的名字也不叫<strong>setXXX</strong>，所以我们没法调用像<code>ofFloat</code>这样的方法去改变sourceImageView的Matrix。</p><p>这时候需要采用自定义Property，并且实现它的<strong>set</strong>方法，自定义Property代码如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Property&lt;ImageView, Matrix&gt; ANIMATED_TRANSFORM_PROPERTY = <span class="keyword">new</span> Property&lt;ImageView, Matrix&gt;(Matrix.class, <span class="string">"animatedTransform"</span>) &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(ImageView imageView, Matrix matrix)</span> </span>&#123;</div><div class="line">            <span class="comment">// 这里模仿了SDK源码中ImageView#animateTransform的实现</span></div><div class="line">            Drawable drawable = imageView.getDrawable();</div><div class="line">            <span class="keyword">if</span> (drawable == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (matrix == <span class="keyword">null</span>) &#123;</div><div class="line">                drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, imageView.getWidth(), imageView.getHeight());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());</div><div class="line">                Matrix drawMatrix = imageView.getImageMatrix();</div><div class="line">                <span class="keyword">if</span> (drawMatrix == <span class="keyword">null</span>) &#123;</div><div class="line">                    drawMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">                    imageView.setImageMatrix(drawMatrix);</div><div class="line">                &#125;</div><div class="line">                imageView.setImageMatrix(matrix);</div><div class="line">            &#125;</div><div class="line">            imageView.invalidate();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function">Matrix <span class="title">get</span><span class="params">(ImageView object)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure><p>自定义一个Property必须要实现里面的get方法，但是在我们的这里例子中，get方法不会被调用。</p><p>因为在属性动画中，只有当你传入的可变长参数values（也就是起始值、中间值1、中间值2. … 结束值）长度为1，也就是说你只传了一个值的时候，才会对我们的target调用getter方法去获取初始值。所以这里我们是不需要getter方法的。</p><p>自定义Property完成后，通过<code>ObjectAnimator#ofObject(T target, Property&lt;T, V&gt; property, TypeEvaluator&lt;V&gt; evaluator, V... values)</code> 方法，就可以把计算器计算出的动画执行过程中的Matrix值，通过自定义Property中的set方法，赋给当前的目标对象，即sourceImageView！从而使得sourceImageView呈现出渐变效果。</p><blockquote><p>这里的实现是来自这位大神的博客<a href="https://medium.com/@v.danylo/implementing-imageview-transition-between-activities-for-pre-lollipop-devices-8b24bc387a2a#.7c6qxvf59" target="_blank" rel="external">Implementing ImageView transition between activities for pre-Lollipop devices</a>。<br>我们首先感谢这位大神的分享！这位大神在文中也提到，用动画来实现图片的渐进式改变，起实来自于我们Android SDK中的隐藏API——<strong>ImageView#animateTransform</strong>。</p></blockquote><h2 id="2-退场-1"><a href="#2-退场-1" class="headerlink" title="2.退场"></a>2.退场</h2><p>退场动画完全是入场动画的逆操作，直接看代码。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 图片退出的转场动画：完全是和之前相反的过程</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">playExitAnimations</span><span class="params">(<span class="keyword">int</span> sourceImageViewLeft, <span class="keyword">int</span> sourceImageViewTop, <span class="keyword">int</span> sourceImageViewWidth, <span class="keyword">int</span> sourceImageViewHeight, <span class="keyword">float</span>[] imageMatrixValues)</span> </span>&#123;</div><div class="line">    mSourceImageView.setVisibility(View.VISIBLE);</div><div class="line">    mTargetImageView.setVisibility(View.INVISIBLE);</div><div class="line"></div><div class="line">    <span class="comment">// 改变SourceView的位置、宽高属性。这里每个属性的起始值和结束值和入场时刚好相反。</span></div><div class="line">    <span class="keyword">int</span>[] locationOnScreen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">    mSourceImageView.getLocationOnScreen(locationOnScreen);</div><div class="line">    PropertyValuesHolder propertyLeft = PropertyValuesHolder.ofInt(<span class="string">"left"</span>, locationOnScreen[<span class="number">0</span>], sourceImageViewLeft);</div><div class="line">    PropertyValuesHolder propertyTop = PropertyValuesHolder.ofInt(<span class="string">"top"</span>, locationOnScreen[<span class="number">1</span>], sourceImageViewTop);</div><div class="line">    PropertyValuesHolder propertyRight = PropertyValuesHolder.ofInt(<span class="string">"right"</span>, locationOnScreen[<span class="number">0</span>] + mSourceImageView.getWidth(), sourceImageViewLeft + sourceImageViewWidth);</div><div class="line">    PropertyValuesHolder propertyBottom = PropertyValuesHolder.ofInt(<span class="string">"bottom"</span>, mSourceImageView.getBottom(), sourceImageViewTop + sourceImageViewHeight);</div><div class="line">    ObjectAnimator positionAnimator = ObjectAnimator.ofPropertyValuesHolder(mSourceImageView, propertyLeft, propertyTop, propertyRight, propertyBottom);</div><div class="line"></div><div class="line">    <span class="comment">// ImageView的矩阵动画</span></div><div class="line">    Matrix initialMatrix = getImageMatrix(mSourceImageView);</div><div class="line"></div><div class="line">    Matrix endMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">    endMatrix.setValues(imageMatrixValues);</div><div class="line">    mSourceImageView.setScaleType(ImageView.ScaleType.MATRIX);</div><div class="line">    <span class="comment">// 这里Matrix的起始值和结束值和入场时也刚好相反。</span></div><div class="line">    ObjectAnimator matrixAnimator = ObjectAnimator.ofObject(mSourceImageView, ANIMATED_TRANSFORM_PROPERTY, <span class="keyword">new</span> MatrixEvaluator(), initialMatrix, endMatrix);</div><div class="line"></div><div class="line">    <span class="comment">// 渐变动画</span></div><div class="line">    ObjectAnimator fadeInAnimator = ObjectAnimator.ofFloat(mContainer, <span class="string">"alpha"</span>, <span class="number">1.0</span>f, <span class="number">0.0</span>f);</div><div class="line"></div><div class="line">    mExitingAnimation = <span class="keyword">new</span> AnimatorSet();</div><div class="line">    mExitingAnimation.setDuration(IMAGE_TRANSLATION_DURATION);</div><div class="line">    mExitingAnimation.setInterpolator(<span class="keyword">new</span> AccelerateInterpolator());</div><div class="line">    mExitingAnimation.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (mExitingAnimation != <span class="keyword">null</span>) &#123;</div><div class="line">                mExitingAnimation = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 关闭第二个界面</span></div><div class="line">            Activity activity = (Activity) mSourceImageView.getContext();</div><div class="line">            activity.finish();</div><div class="line">            activity.overridePendingTransition(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 同样去掉默认的转场动画</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    mExitingAnimation.playTogether(positionAnimator, matrixAnimator, fadeInAnimator);</div><div class="line">    mExitingAnimation.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="四、涉及到的知识点"><a href="#四、涉及到的知识点" class="headerlink" title="四、涉及到的知识点"></a>四、涉及到的知识点</h1><p>我认为实现demo里面的效果需要了解下面的知识点，如果不熟悉的话，建议先看一下上一章推荐的属性动画讲解的几篇博客。</p><h2 id="1-ImageView的ScaleType"><a href="#1-ImageView的ScaleType" class="headerlink" title="1.ImageView的ScaleType"></a>1.ImageView的ScaleType</h2><p>不管将ScaleType设为多少，bitmap始终都是一个。如果在Android Studio打开debug模式来查看bitmap实际的图片，用一个ImageView去展示一张图片，不管你怎么改变ScaleType，其实里面的图片对象都是一样的。</p><h2 id="2-属性动画之插值器-Interpolator"><a href="#2-属性动画之插值器-Interpolator" class="headerlink" title="2.属性动画之插值器 - Interpolator"></a>2.属性动画之插值器 - Interpolator</h2><p>控制动画数值进度的转换器，我们给动画是指一个duration之后，插值器负责把动画的<strong>自然</strong>进度转成<strong>数值</strong>进度。自然进度就是指随着时间匀速增长的值。</p><p>所有的插值器都实现了<strong>TimeInterpolator接口里面的public float getInterpolation(float input)</strong>方法，input就是随时间流逝的自然进度，在这个方法中根据实际需求，用input计算出实际数字，作为数值进度返回。</p><h2 id="3-属性动画之计算器-TypeEvaluator"><a href="#3-属性动画之计算器-TypeEvaluator" class="headerlink" title="3.属性动画之计算器 - TypeEvaluator"></a>3.属性动画之计算器 - TypeEvaluator</h2><p>计算器就是计算动画执行过程中，目标对象的某个属性的数值。</p><p>TypeEvaluator接口中有一个<strong>public T evaluate(float fraction, T startValue, T endValue)</strong>方法，fraction就是插值器返回的数值进度，而startValue就是对象的某一个属性的起始值，endValue是这个属性的结束值。</p><p>这里利用的是泛型编程，我们可以把属性的起始、结束值看成一个Type。传入自己定义的任何Type后，在evaluate方法中，计算出当前应该改变<strong>对象</strong>的<strong>属性</strong>的具体Type值。再调用这个对象的setter方法，将Type值赋给这个对象。</p><p>很多时候，我们不会像这个demo中自定义Property，然后把它set给一个系统封装好的ImageView。我们很可能会有一个自定义的CustomView，然后在这个CustomView中提供一个setXXX方法。这样也可以在自定义的计算器中实现CustomView的属性动态改变。</p><h2 id="4-属性动画之中的ObjectAnimator和ValueAnimator的区别"><a href="#4-属性动画之中的ObjectAnimator和ValueAnimator的区别" class="headerlink" title="4.属性动画之中的ObjectAnimator和ValueAnimator的区别"></a>4.属性动画之中的ObjectAnimator和ValueAnimator的区别</h2><p>ObjectAnimator是ValueAnimator的子类，ValueAnimator只负责计算动画过程中，目标对象（一般是一个View或者其他UI元素）属性的值，但是需要我们自己监听动画的update状态，再把监听到的值set给目标对象的属性。</p><p>ObjectAnimator除了可以计算动画过程中的属性值外，还可以调用目标对象的setter方法，改变这个属性的值。所以它的功能比ValueAnimator要强大。</p><h2 id="4-属性动画之PropertyValuesHolder用法"><a href="#4-属性动画之PropertyValuesHolder用法" class="headerlink" title="4.属性动画之PropertyValuesHolder用法"></a>4.属性动画之PropertyValuesHolder用法</h2><p>一般直接使用<code>ObjectAnimator ofFloat(Object target, String propertyName, float... values)</code>只能改变目标对象的一个属性值。</p><p>如果我们想要改一个目标对象的的多个属性时，可以先使用<code>PropertyValuesHolder ofInt(String propertyName, int... values)</code>创建PropertyValuesHolder。</p><p>然后再用<code>ObjectAnimator ofPropertyValuesHolder(Object target, PropertyValuesHolder... values)</code>创建出改变多个属性的属性动画对象ObjectAnimator。</p><h2 id="5-如何向ContentView中动态添加View"><a href="#5-如何向ContentView中动态添加View" class="headerlink" title="5.如何向ContentView中动态添加View"></a>5.如何向ContentView中动态添加View</h2><p>首先要从当前的Activity中获得根视图：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">getWindow</span>()<span class="selector-class">.getDecorView</span>()<span class="selector-class">.findViewById</span>(<span class="selector-tag">android</span><span class="selector-class">.R</span><span class="selector-class">.id</span><span class="selector-class">.content</span>);</div></pre></td></tr></table></figure><p>这是个FrameLayout，然后我们就可以用java代码动态向它里面添加sourceImageView了。</p><p>关于DecorView再多说两句，它是Activity界面的根View，继承自FrameLayout。在它里面又是一个LinearLayout，在这个LinearLayout里面又包含了<strong>id为@android:id/title_container</strong>的标题栏，和一个<strong>id为@android:id/content</strong>的ContentView，结构大概是下面这个样子的：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> DecorView</span></div><div class="line"><span class="ruby">    - LinearLayout</span></div><div class="line"><span class="ruby">        - ...</span></div><div class="line"><span class="ruby">        - FrameLayout：<span class="symbol">android:</span>id/title_container</span></div><div class="line"><span class="ruby">        - FrameLayout：@android<span class="symbol">:id/content</span></span></div></pre></td></tr></table></figure><p>当我们在onCreate方法中调用Activity#setContentView()时，会把我们自己写的布局添加到这个ContentView中去。</p><h1 id="五、Android-5-0上的实现方法"><a href="#五、Android-5-0上的实现方法" class="headerlink" title="五、Android 5.0上的实现方法"></a>五、Android 5.0上的实现方法</h1><p>下面是在Android 5.0以上一种示例，非常简单，只需要几行代码就可实现：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一个Activity，利用ActivityOptions创建SceneTransitionAnimation</span></div><div class="line">private void transitionOnAndroidL() &#123;</div><div class="line">    <span class="comment">// 把需要共享的元素-ImageView，传给第二个界面</span></div><div class="line">    <span class="type">Intent</span> intent = <span class="function"><span class="keyword">new</span> <span class="title">Intent</span>(<span class="type">MainActivity</span>.this, <span class="type">DetailActivityLollipop</span>.class);</span></div><div class="line"><span class="function">    <span class="comment">// 一定要传入shareElementName</span></span></div><div class="line"><span class="function">    <span class="title">String</span> <span class="title">shareElementName</span> = "<span class="title">sharedImageView</span>";</span></div><div class="line"><span class="function">    <span class="title">ActivityOptions</span> <span class="title">activityOptions</span> = <span class="title">ActivityOptions</span>.<span class="title">makeSceneTransitionAnimation</span>(this, mImageView, shareElementName);</span></div><div class="line"><span class="function">    <span class="title">getWindow</span>().<span class="title">setSharedElementEnterTransition</span>(new <span class="type">ChangeImageTransform</span>(this, null));</span></div><div class="line"><span class="function">    <span class="title">intent</span>.<span class="title">putExtra</span>(<span class="type">DetailActivityLollipop</span>.<span class="type">SHARED_ELEMENT_KEY</span>, shareElementName);</span></div><div class="line"><span class="function">    <span class="title">intent</span>.<span class="title">putExtra</span>(<span class="type">DetailActivityLollipop</span>.<span class="type">IMAGE_RES_ID</span>, mImageResId);</span></div><div class="line"><span class="function">    <span class="comment">// 打开它</span></span></div><div class="line"><span class="function">    <span class="title">startActivity</span>(intent, activityOptions.toBundle());</span></div><div class="line"><span class="function">&#125;</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="comment">// 第二个Activity，取出shareElementName，再调用ViewCompat#setTransitionName</span></span></div><div class="line"><span class="function"><span class="title">private</span> <span class="title">void</span> <span class="title">initImageEnterTransition</span>() &#123;</span></div><div class="line"><span class="function">    <span class="title">imageView</span>.<span class="title">setVisibility</span>(<span class="type">View</span>.<span class="type">VISIBLE</span>);</span></div><div class="line"><span class="function">    <span class="title">String</span> <span class="title">imageTransitionName</span> = <span class="title">getIntent</span>().<span class="title">getStringExtra</span>(<span class="type">SHARED_ELEMENT_KEY</span>);</span></div><div class="line"><span class="function">    <span class="title">ViewCompat</span>.<span class="title">setTransitionName</span>(imageView, imageTransitionName);</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">    <span class="title">View</span> <span class="title">mainContainer</span> = <span class="title">findViewById</span>(<span class="type">R</span>.id.activityContanierDetail);</span></div><div class="line"><span class="function">    <span class="title">mainContainer</span>.<span class="title">setAlpha</span>(<span class="number">1.0</span>f);</span></div><div class="line"><span class="function">    <span class="title">int</span> <span class="title">resId</span> = <span class="title">getIntent</span>().<span class="title">getExtras</span>().<span class="title">getInt</span>(<span class="type">IMAGE_RES_ID</span>);</span></div><div class="line"><span class="function">    <span class="title">imageView</span>.<span class="title">setImageResource</span>(resId);</span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure><p>官方介绍的<a href="https://developer.android.com/training/material/animations.html#Transitions" target="_blank" rel="external">Transitions</a>中用xml也可以实现。另外，还有多个元素的转场动画效果，这里就不详细说了，如果有需要，也可以参考下这篇文章——<a href="https://guides.codepath.com/android/Shared-Element-Activity-Transition" target="_blank" rel="external">Shared Element Activity Transition</a>。</p><h1 id="六、其他实现方法"><a href="#六、其他实现方法" class="headerlink" title="六、其他实现方法"></a>六、其他实现方法</h1><p>在我的demo中只演示了核心的View转场实现，没有和其他的稍微复杂一些的需求相结合。网上还有很多关于这种效果实现的分享，也有应用到一些更复杂场景，下面推荐出来一起多多学习。</p><p>文章推荐：</p><ul><li><p><a href="http://wl9739.github.io/2016/10/16/Android-%E4%B8%AD%E7%9A%84%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%E5%8F%8A%E5%85%BC%E5%AE%B9%E5%A4%84%E7%90%86/" target="_blank" rel="external">Android中的转场动画及兼容处理</a></p></li><li><p><a href="http://www.jianshu.com/p/340c938e9f32" target="_blank" rel="external">Android共享元素转场动画兼容实践</a></p></li><li><p><a href="http://immortalz.me/859.html" target="_blank" rel="external">两步实现类似格瓦拉的转场动画</a></p></li><li><p><a href="https://guides.codepath.com/android/Shared-Element-Activity-Transition" target="_blank" rel="external">Shared Element Activity Transition</a>：详细介绍了5.0以上的各种共享元素转场效果。</p></li></ul><p>开源Library推荐：</p><ul><li><p><a href="https://github.com/takahirom/PreLollipopTransition" target="_blank" rel="external">PreLollipopTransition</a></p></li><li><p><a href="https://github.com/vikramkakkar/ImageTransition" target="_blank" rel="external">ImageTransition</a></p></li><li><p><a href="https://github.com/alexvasilkov/GestureViews" target="_blank" rel="external">GestureViews</a>：手势操作库，其demo本身就实现了一个类似的转场的动画效果。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;随着谷歌推出的MaterialDesign不断被各种实践，最近我也碰到这么一个需求，就是要求实现一个图片的转场效果。在第一个界面上，图片被点击后，会渐渐地滑动到第二个界面中去。&lt;/p&gt;
&lt;p&gt;其实仔细观察一下Google相册也有用到这种效果，大概的效果图是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/801b780agw1f9kunqk6sqg20b40jre86.gif&quot; alt=&quot;transition-ui-demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;按照我的理解，这种效果要是直接把View拿出来复用就可以。但是经过学习（国内外各种大神的博客）和实践发现，里面有不少可以思考的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="动画" scheme="http://unclechen.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android View的可见性检查方法（上）</title>
    <link href="http://unclechen.github.io/2016/10/17/Android%20View%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7%E6%A3%80%E6%9F%A5%E6%96%B9%E6%B3%95-%E4%B8%8A%E7%AF%87/"/>
    <id>http://unclechen.github.io/2016/10/17/Android View的可见性检查方法-上篇/</id>
    <published>2016-10-17T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>在Android开发中有时候会遇到需要检查一个View是不是对用户可见，比如在消息流中，根据ImageView是否在屏幕中出现了再决定加载它，或者当视频滑入屏幕被用户可见时才播放、滑出屏幕就自动停止播放等等。乍一看好像都是在ListView、RecyclerView、ScrollView这些组件里面比较需要做这件事，今天总结一下我在实际开发中是怎么处理View可见性检查的。</p><a id="more"></a><h1 id="二、检查View是否可见的基本方法（从外部检查View）"><a href="#二、检查View是否可见的基本方法（从外部检查View）" class="headerlink" title="二、检查View是否可见的基本方法（从外部检查View）"></a>二、检查View是否可见的基本方法（从外部检查View）</h1><h2 id="1-View-getVisibility"><a href="#1-View-getVisibility" class="headerlink" title="1 View.getVisibility()"></a>1 View.getVisibility()</h2><p>很显然，我们可以用<code>View.getVisibility()</code>来检查一个它是否处于<strong>View.VISIBLE</strong>状态。这是<strong>最基本</strong>的检查，如果连这个方法得到的返回值都是<strong>View.INVISIBLE或者View.GONE</strong>的话，那么它对用户肯定是不可见的。</p><h2 id="2-View-isShown"><a href="#2-View-isShown" class="headerlink" title="2. View.isShown()"></a>2. View.isShown()</h2><p>这个方法相当于对View的所有祖先调用getVisibility方法。看下它的实现：</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Returns the visibility of this view and all of its ancestors</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> True if this view and all of its ancestors are &#123;<span class="doctag">@link</span> #VISIBLE&#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isShown() &#123;</div><div class="line">    View current = this;</div><div class="line">    <span class="comment">//noinspection ConstantConditions</span></div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">if</span> ((current.mViewFlags &amp; VISIBILITY_MASK) != VISIBLE) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        ViewParent <span class="keyword">parent</span> = current.mParent;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">parent</span> == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// We are not attached to the view root</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!(<span class="keyword">parent</span> <span class="keyword">instanceof</span> View)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        current = (View) <span class="keyword">parent</span>;</div><div class="line">    &#125; <span class="keyword">while</span> (current != <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看代码注释便知，这个方法<strong>递归地</strong>去检查这个View以及它的parentView的Visibility属性是不是等于<strong>View.VISIBLE</strong>，这样就对这个View的所有parentView做了一个检查。</p><p>另外这个方法还在递归的检查过程中，检查了<code>parentView == null</code>，也就是说所有的parentView都不能为null。否则就说明这个View根本没有被<code>addView</code>过（比如使用Java代码创建界面UI时，可能会先new一个View，然后根据条件动态地把它add带一个ViewGroup中），那肯定是不可能对用户可见的，这里很好理解。</p><h2 id="3-View-getGlobalVisibleRect"><a href="#3-View-getGlobalVisibleRect" class="headerlink" title="3 View.getGlobalVisibleRect"></a>3 View.getGlobalVisibleRect</h2><p>先看下什么是<a href="https://developer.android.com/reference/android/graphics/Rect.html" target="_blank" rel="external">Rect</a>：</p><blockquote><p>Rect holds four integer coordinates for a rectangle. The rectangle is represented by the coordinates of its 4 edges (left, top, right bottom).<br>Rect代表一个矩形，这个矩形可以由它左上角坐标(left, top)、右下角坐标(right, bottom)表示。所以每一个Rect对象里面都有left, top, right bottom这4个属性。</p></blockquote><p>使用这个方法的代码非常简单，如下所示，直接可以得到rect对象和方法的返回值visibility：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Rect <span class="built_in">rect</span> = <span class="keyword">new</span> Rect();</div><div class="line"><span class="keyword">boolean</span> visibility = bottom.getGlobalVisibleRect(<span class="built_in">rect</span>);</div></pre></td></tr></table></figure><p>看一下该方法的注释：当这个View只要有一部分仍然在屏幕中（没有被父View遮挡，所谓的<strong>not clipped by any of its parents</strong>），那么将把没有被遮挡的那部分区域保存在rect对象中返回，且方法的返回值是true，即visibility=true。此时的rect是以手机屏幕作为坐标系（所谓的<strong>global coordinates</strong>），即原点是屏幕左上角；如果它全部被父View遮挡住了或者本身就是不可见的，返回的visibility就为false。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * If <span class="keyword">some</span> part <span class="keyword">of</span> this view <span class="keyword">is</span> <span class="keyword">not</span> clipped <span class="keyword">by</span> any <span class="keyword">of</span> <span class="keyword">its</span> parents, <span class="keyword">then</span></div><div class="line">     * <span class="literal">return</span> <span class="keyword">that</span> area <span class="keyword">in</span> r <span class="keyword">in</span> <span class="keyword">global</span> (root) coordinates. To convert r <span class="keyword">to</span> <span class="keyword">local</span></div><div class="line">     * coordinates (<span class="keyword">without</span> taking possible View rotations <span class="keyword">into</span> account), <span class="built_in">offset</span></div><div class="line">     * <span class="keyword">it</span> <span class="keyword">by</span> -globalOffset (e.g. r.<span class="built_in">offset</span>(-globalOffset.x, -globalOffset.y)).</div><div class="line">     * If <span class="keyword">the</span> view <span class="keyword">is</span> completely clipped <span class="keyword">or</span> translated out, <span class="literal">return</span> <span class="literal">false</span>.</div><div class="line">     *</div><div class="line">     * @param r If <span class="literal">true</span> <span class="keyword">is</span> returned, r holds <span class="keyword">the</span> <span class="keyword">global</span> coordinates <span class="keyword">of</span> <span class="keyword">the</span></div><div class="line">     *        visible portion <span class="keyword">of</span> this view.</div><div class="line">     * @param globalOffset If <span class="literal">true</span> <span class="keyword">is</span> returned, globalOffset holds <span class="keyword">the</span> dx,dy</div><div class="line">     *        <span class="keyword">between</span> this view <span class="keyword">and</span> <span class="keyword">its</span> root. globalOffet may be null.</div><div class="line">     * @<span class="literal">return</span> <span class="literal">true</span> <span class="keyword">if</span> r <span class="keyword">is</span> non-empty (i.e. part <span class="keyword">of</span> <span class="keyword">the</span> view <span class="keyword">is</span> visible <span class="keyword">at</span> <span class="keyword">the</span></div><div class="line">     *         root level.</div><div class="line">     */</div></pre></td></tr></table></figure><p>举例子看一下，先看布局：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">                <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">View</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#0000ff"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"-90dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"-90dp"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure><p>在xml中定义了一个View，给它设置负值的marginLeft和marginTop，让它只有一部分可以显示在屏幕中。可以看到这个View只有10x10dp大小可以出现在屏幕里面，但是只要有这么点大小可以在屏幕中，上面的方法的返回值就是：<strong>visibility=true</strong>。</p><p>执行的效果如下图所示，可以看到100x100dp的蓝色矩形虽然只剩下<strong>左上角的10x10dp蓝色小方块</strong>可见，但是visibility仍然等于true。</p><p><img src="http://ww1.sinaimg.cn/large/006y8mN6gw1f8v777610gj30go0efgm6.jpg" alt="self-visibility"></p><p>此时的GlobalVisibleRect的左上角(left,top)和右下角(right,bottom)分别为<code>(0, 280)和(36, 316)</code>。在这里top不为0是因为标题栏和系统状态栏已经占据了一定的屏幕高度。</p><blockquote><p>tips：这里写代码时测试getGlobalVisibleRect方法时，记得要等View已经绘制完成后，再去调用View的getGlobalVisibleRect方法，否则无法得到的返回值都是0。这和获取View的宽高原理是一样的，如果View没有被绘制完成，那么View.getWidth和View.getHeight一定是等于0的。</p></blockquote><h4 id="关于getGlobalVisibleRect方法的特别说明"><a href="#关于getGlobalVisibleRect方法的特别说明" class="headerlink" title="关于getGlobalVisibleRect方法的特别说明"></a>关于<strong>getGlobalVisibleRect</strong>方法的特别说明</h4><p><strong>这个方法只能检查出这个View在手机屏幕（或者说是相对它的父View）的位置，而不能检查出与其他兄弟View的相对位置</strong>。</p><p>比如说有一个ViewGroup，下面有View1、View2这两个子View，View1和View2是平级关系。此时如果View2盖住了View1，那么用getGlobalVisibleRect方法检查View1的可见性，得到的返回值依然是true，得到的可见矩形区域rect也是没有任何变化的。也就是说<strong>View1.getGlobalVisibleRect(rect)得到的结果与View2没有任何关系。</strong></p><p>空说无凭，看个具体的例子，先看xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></div><div class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">View</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/bottom_view"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"-90dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"-90dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#0000ff"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 这里为了看清bottom_view, 给top_view的背景色加了一个透明度 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">View</span></span></div><div class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/top_view"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#9000ffff"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure><p>这个xml很简单，两个View，分别是下层的bottom_view（100x100dp，在父ViewGroup中居中），<br>top_view（200x200dp，也在父ViewGroup居中，因此可以完全盖住bottom_view）。</p><p><img src="http://ww4.sinaimg.cn/large/006y8mN6gw1f8v77fhy24j30go0eqaat.jpg" alt="related-visibility"></p><p>我们用getGlobalVisibleRect来获取一下bottom_view的visibleRect和visibility，得到的结果是：<strong>visibility=true，rect的左上角(left, top)和右下角(right, bottom)是(545, 1161)和(895, 1511)。</strong></p><p>即使把top_view从xml里面删掉，我们得到visibility和rect也是一样的。</p><p>所以<code>getGlobalVisibleRect</code>方法并不是万能的，因为它只能检查View和他们的ParentView之间的位置进而判它断是不是在屏幕中可见。</p><blockquote><p>PS：有一次我还想到个奇葩思路，那就是把这个View的兄弟View找出来，也拿出它的GlobalVisibleRect，然后对比兄弟View和这个View的GlobalVisibleRect，看是不是有重合的地方。但是这也只能表明屏幕这一块区域内有两个View，还是无法判断到底是谁遮挡住了谁。</p></blockquote><h2 id="4-View-getLocalVisibleRect"><a href="#4-View-getLocalVisibleRect" class="headerlink" title="4 View.getLocalVisibleRect"></a>4 View.getLocalVisibleRect</h2><p>这个方法和getGlobalVisibleRect有些类似，也可以拿到这个View在屏幕的可见区域的坐标，<strong>唯一的区别getLocalVisibleRect(rect)获得的rect坐标系的原点是View自己的左上角，而不是屏幕左上角。</strong></p><p>先看例子，仍然是使用上面第2个例子的代码，加上下面的代码，执行一下：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Rect localRect</span> = new Rect();</div><div class="line"><span class="attribute">boolean localVisibility</span> = bottom.getLocalVisibleRect(localRect);</div></pre></td></tr></table></figure><p>得到的local坐标结果是：<strong>localVisibility=true，localRect的左上角(left, top)和右下角(right, bottom)为(0, 0)和(350, 350)</strong>。</p><p>而global坐标的结果是：<strong>visibility=true，rect的左上角为(545, 1161)，右下角为(895,1511)。</strong></p><p><strong>看下getLocalVisibleRect的源码</strong>，原来就是先获取View的offset point（相对屏幕或者ParentView的偏移坐标），然后再去调用getGlobalVisibleRect(Rect r, Point globalOffset)方法来获取可见区域，最后再把得到的GlobalVisibleRect和Offset坐标做一个加减法，转换坐标系原点。</p><p><strong>所以只要这个View的左上角在屏幕中，它的LocalVisibleRect的左上角坐标就一定是(0,0)，如果View的右下角在屏幕中，它的LocalVisibleRect右下角坐标就一定是(view.getWidth(), view.getHeight())。</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">getLocalVisibleRect</span><span class="params">(Rect r)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Point offset = mAttachInfo != <span class="keyword">null</span> ? mAttachInfo.mPoint : <span class="keyword">new</span> Point();</div><div class="line">        <span class="keyword">if</span> (getGlobalVisibleRect(r, offset)) &#123;</div><div class="line">            r.offset(-offset.x, -offset.y); <span class="comment">// make r local</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="5-判断手机屏幕是否熄灭or是否解锁"><a href="#5-判断手机屏幕是否熄灭or是否解锁" class="headerlink" title="5. 判断手机屏幕是否熄灭or是否解锁"></a>5. 判断手机屏幕是否熄灭or是否解锁</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);</div><div class="line">boolean isScreenOn = pm.isScreenOn();</div><div class="line">boolean isInteractive = pm.isInteractive();</div><div class="line"><span class="comment">// 可能有些版本上面isScreenOn方法隐藏了或者是deprecated了，可以尝试反射调用它，但是要记得用的时候catch异常</span></div><div class="line"><span class="function"><span class="keyword">Method</span> <span class="title">isScreenOnMethod</span> = <span class="title">pm</span>.<span class="title">getClass</span><span class="params">()</span>.<span class="title">getMethod</span><span class="params">("isScreenOn")</span>;</span></div><div class="line">boolean isScreenOn = (Boolean) isScreenOnMethod.invoke(pm);</div></pre></td></tr></table></figure><p>这里不深究解锁和屏幕是否熄灭的实现方法了，检查View的可见性虽然和屏幕的状态看起来没有直接关系，但是在做检查前先对屏幕的状态做一个检查也是很有必要的，如果屏幕都已经关闭了，那这个View当然是对用户不可见的。</p><h1 id="三、ListView、RecyclerView、ScrollView中如何检查View的可见性"><a href="#三、ListView、RecyclerView、ScrollView中如何检查View的可见性" class="headerlink" title="三、ListView、RecyclerView、ScrollView中如何检查View的可见性"></a>三、ListView、RecyclerView、ScrollView中如何检查View的可见性</h1><p>说实话感觉App开发中用得最多的就是各种列表啊、滚动滑动的View。在Android里面这几个可以滚动的View，都有着各自的特点。在用到上面的检测方法时，可以好好结合这几个View的特点，在它们各自的滚动过程中，更加有效的去检查View的可见性。我们可以先根据自己的业务需要，把上面提到的方法封装成一个<code>VisibilityCheckUtil</code>工具类，例如可以提供一个check方法，当View的物理面积有50%可见时，就返回true。</p><h2 id="1-ScrollView"><a href="#1-ScrollView" class="headerlink" title="1. ScrollView"></a>1. ScrollView</h2><p>假设我们有一个mView在mScrollView中，我们可以监听mScrollView的滚动，在onScrollChanged中检查mView的可见性。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">mScrollView.getViewTreeObserver().addOnScrollChangedListener(</div><div class="line">        <span class="keyword">new</span> ViewTreeObserver.OnScrollChangedListener() &#123;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onScrollChanged</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 可以先判断ScrollView中的mView是不是在屏幕中可见</span></div><div class="line">            Rect scrollBounds = <span class="keyword">new</span> Rect();</div><div class="line">            mScrollView.getHitRect(scrollBounds);</div><div class="line">            <span class="keyword">if</span> (!mView.getLocalVisibleRect(scrollBounds)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">// 再用封装好的工具类检查可见性是否大于50%</span></div><div class="line">            <span class="keyword">if</span> (VisibilityCheckUtil.check(mView)) &#123;</div><div class="line">                <span class="comment">// do something</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><h2 id="2-ListView"><a href="#2-ListView" class="headerlink" title="2. ListView"></a>2. ListView</h2><p>假设我们在mListView的第10个位置（界面上是第11个item）有一个需要检查可见性的mView。</p><p>首先要监听mListView的滚动，接着在onScroll回调中，调用mListView.getFirstVisiblePosition和mListView.getLastVisiblePosition查看第10个位置是否处于可见范围，然后在调用封装好的VisibilityCheckUtil去检查mView是否可见。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">mListView.setOnScrollListener(<span class="keyword">new</span> OnScrollListener() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</div><div class="line">        mScrollState = scrollState;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="keyword">public</span> <span class="keyword">void</span> onScroll(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount,</div><div class="line">          <span class="keyword">int</span> totalItemCount) &#123;</div><div class="line">        <span class="keyword">if</span> (mScrollState == OnScrollListener.SCROLL_STATE_IDLE) &#123;</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> first = mListView.getFirstVisiblePosition();</div><div class="line">        <span class="keyword">int</span> last = mListView.getLastVisiblePosition();</div><div class="line">        <span class="comment">// 满足3个条件：先判断ListView中的mView是不是在可见范围中，再判断是不是大于50%面积可见</span></div><div class="line">        <span class="keyword">if</span> (<span class="number">10</span> &gt;= first &amp;&amp; <span class="number">10</span> &lt;= last &amp;&amp; VisibilityCheckUtil.check(mView)) &#123;</div><div class="line">            <span class="comment">// do something</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><h2 id="3-RecyclerView"><a href="#3-RecyclerView" class="headerlink" title="3. RecyclerView"></a>3. RecyclerView</h2><p>和上面类似，还是把mView摆放在第10个位置，检查原理和ListView类似。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">mLinearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">mRecyclerView.setLayoutManager(mLinearLayoutManager);</div><div class="line">mRecyclerView.addOnScrollListener(<span class="keyword">new</span> RecyclerView.OnScrollListener() &#123;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);</div><div class="line">        <span class="keyword">if</span> (mLinearLayoutManager == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> firstVisiblePosition = mLinearLayoutManager.findFirstVisibleItemPosition();</div><div class="line">        <span class="keyword">int</span> lastVisiblePosition = mLinearLayoutManager.findLastVisibleItemPosition();</div><div class="line">        <span class="comment">// 同样是满足3个条件</span></div><div class="line">        <span class="keyword">if</span> (<span class="number">10</span> &gt;= firstVisiblePosition &amp;&amp; <span class="number">10</span> &lt;= lastVisiblePosition &amp;&amp; VisibilityCheckUtil.check(mView)) &#123;</div><div class="line">          <span class="comment">// do something</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><p>实际的开发中肯定会遇到更多的场景，我们都要先分析界面的特点，再结合前面提到的几个方法，更有效地检查View的可见性。这里最后再给大家推荐一个开源的项目——<a href="https://github.com/danylovolokh/VideoPlayerManager" target="_blank" rel="external">VideoPlayerManager</a>，里面就用到<code>getLocalVisibleRect</code>来检测View的可见面积，进而控制在ListView和RecyclerView中哪一个Item应该显示什么内容。</p><h1 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h1><p>本篇博客的思路，都是从View的外部去检查一个View的可见性。首先提到了一些基本的方法，然后介绍了几种常见的界面下可以怎么使用这些各种方法。</p><p>如果是App开发者的话，自己写的界面自己去判断View的可见性，有上面这些方法应该就够用了。但是如果你是一个SDK开发者，给App开发者提供第三方的library时（通常是自定义View这类的库），也能够检查开发者的使用到的View，并根据可见性来自动管理一些View的操作，那就非常棒了。这时从外部去检查一个View的可见性可能就不够用了，我们可以换一个角度，从内部去检查一个View的可见性，具体内容详见<a href="http://unclechen.github.io/2016/10/21/Android-View的可见性检查方法-下篇/">Android View的可见性检查方法-下篇</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;在Android开发中有时候会遇到需要检查一个View是不是对用户可见，比如在消息流中，根据ImageView是否在屏幕中出现了再决定加载它，或者当视频滑入屏幕被用户可见时才播放、滑出屏幕就自动停止播放等等。乍一看好像都是在ListView、RecyclerView、ScrollView这些组件里面比较需要做这件事，今天总结一下我在实际开发中是怎么处理View可见性检查的。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="View" scheme="http://unclechen.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>App动态配置探讨</title>
    <link href="http://unclechen.github.io/2016/09/25/App%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E6%8E%A2%E8%AE%A8/"/>
    <id>http://unclechen.github.io/2016/09/25/App动态配置探讨/</id>
    <published>2016-09-25T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>App开发中一个比较常见的问题就是动态化，有时我们会需要程序的某一个逻辑可以动态改变而不需要发版本让用户重新安装。例如，App中的某个WebView有一个url白名单，我们希望它可以动态改变。这是个常见的需求，现在无论是技术面上还是产品上大家都在讲一个动态化，所以一波接一波出了各种插件化，甚至是ReactNative、weex、微信小程序等等这些轮子。</p><p>但是在实际中需要考虑到很多的业务特点，使得我们在<strong>统一化</strong>和<strong>个性化</strong>的时候比较难以选择，半年前天猫的技术博客就出了这篇文章–<a href="http://pingguohe.net/2016/03/18/config-center.html" target="_blank" rel="external">动态调整的基础 —— 配置中心</a>，里面介绍了阿里的团队在这方面的实践经验。今天我以一个遇到的实际需求为例，总结下我的想法。</p><a id="more"></a><h1 id="二、需求-amp-目标：设计一个动态配置中心"><a href="#二、需求-amp-目标：设计一个动态配置中心" class="headerlink" title="二、需求&amp;目标：设计一个动态配置中心"></a>二、需求&amp;目标：设计一个动态配置中心</h1><ul><li><p><strong>需求：</strong>支持不同业务、不同平台、不同版本（一般是版本的范围），按需动态下发配置。这里业务可以是不同的App、也可以是同一个App里面不同的模块，或者不同的SDK。</p></li><li><p><strong>目标：</strong>业务方（App开发者）可以自助到配置中心添加新的配置项或者修改以前的配置，按需下发到客户端。</p></li></ul><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>这里参考天猫动态配置的设计，我的动态配置中心也有下面两个的<strong>数据模型：</strong></p><ul><li>1.配置的数据结构</li></ul><p>这是客户端希望拿到的下发配置信息，这里我的需求就是一个<strong>key-value</strong>形式的json字符串，value里面是客户端可以自己解析出来使用的结构即可。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"base_setting"</span>: &#123;</div><div class="line">        <span class="string">"key_1"</span>: <span class="string">"value_1"</span>,</div><div class="line">        <span class="string">"key_2"</span>: <span class="string">"value_2"</span>  </div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>2.元信息（meta-info）：<strong>业务(bizType) -&gt; 平台(platform) -&gt; 版本(version)</strong></li></ul><p>元信息代表着按需选择配置的条件。例如，对于同一个配置项<code>key_1</code>，对于业务1，它的值是0，对于业务2，它的值是1。或者对于配置项<code>key_2</code>，不会下发给业务1，只下发给业务2。这两类情况都应该能够在配置中心实现配置。</p><p>此外，<strong>业务-&gt;平台-&gt;版本</strong>，这三个<strong>元信息之间的优先级顺序关系一定要明确</strong>，例如，业务1下面可以有iOS、Android两个平台；iOS下面又可以有1.0.0、2.0.0等多个版本。因此我认为版本的配置优先级要高于平台，平台的配置优先级要高于业务。</p><h1 id="三、数据关系的设计"><a href="#三、数据关系的设计" class="headerlink" title="三、数据关系的设计"></a>三、数据关系的设计</h1><p>数据关系如何设计，取决于两点：</p><ul><li><strong>1.每一项配置是如何生成的？</strong></li></ul><p>（1）当用户添加一个新的配置时，需要添加它的<strong>key（下发的key）、defaultValue（默认值）、name（语义上可读配置名称）</strong>。</p><p>（2）然后根据需要，按照<strong>业务 -&gt; 平台 -&gt; 版本</strong>的顺序，逐级地选择这个配置支持的元信息。每一步选择时都需要设定一个单独的value。这里可以不用每一级元信息都要选择，只要选择到了第一级的<strong>业务</strong>，客户端就已经可以拿到这个配置了，如果需要更加细粒度的控制配置的value，才需要选择第二级的<strong>平台</strong>和<strong>版本</strong>。</p><p>（3）把这个配置，和它对应的业务、平台、版本这三个元信息关系，以及各个元信息下面的value都存储下来。所以配置是直接关联着业务、平台、版本这3个元信息的。</p><p>（4）存储业务、平台、版本之间的对应关系，这样才可以明确在逐级选择配置时，每一级都有哪些元信息。这里我实际中存储的是版本范围信息和平台的关系，如<code>bizA | Android | 1.0.0-2.0.0</code>、<code>bizA | iOS | 1.0.0 - 2.0.0</code>。其实在创建每一级元信息的setting-value之前，就应该建立好了这个关系。</p><ul><li><strong>2.对于每一个请求，配置中心是如何处理、最后得到属于这个请求的配置？</strong></li></ul><p>当配置中心的Server接收到一个请求时：</p><p>（1）提取出元信息：业务(bizType)、平台(platform)、版本(version)</p><p>（2）根据业务、平台、版本找到和它关联的所有配置项。</p><blockquote><p>结合一个实例理解上面的两点：假设有2种业务，2个平台，2个版本范围，那么元信息的各种组合最多就是8种，所以每一个配置项的取值最多就是8种，我们可以选择不给某一种元信息下发这个配置，或者下发它独立的配置值。</p></blockquote><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>在设计过程中，其实就是要解决：配置结构长什么样，需要哪些元信息，元信息之间的关系是什么样的，怎么保存元信息之间的关系。这里我的需求比较简单，想到的方案也可能不是很好。实际中可能还有更多元信息，例如如果含有渠道ID，我们还可能加一个app_setting来覆盖base_setting。希望可以见到更多关于这方面的讨论和分享。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;App开发中一个比较常见的问题就是动态化，有时我们会需要程序的某一个逻辑可以动态改变而不需要发版本让用户重新安装。例如，App中的某个WebView有一个url白名单，我们希望它可以动态改变。这是个常见的需求，现在无论是技术面上还是产品上大家都在讲一个动态化，所以一波接一波出了各种插件化，甚至是ReactNative、weex、微信小程序等等这些轮子。&lt;/p&gt;
&lt;p&gt;但是在实际中需要考虑到很多的业务特点，使得我们在&lt;strong&gt;统一化&lt;/strong&gt;和&lt;strong&gt;个性化&lt;/strong&gt;的时候比较难以选择，半年前天猫的技术博客就出了这篇文章–&lt;a href=&quot;http://pingguohe.net/2016/03/18/config-center.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;动态调整的基础 —— 配置中心&lt;/a&gt;，里面介绍了阿里的团队在这方面的实践经验。今天我以一个遇到的实际需求为例，总结下我的想法。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="客户端" scheme="http://unclechen.github.io/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
      <category term="服务器" scheme="http://unclechen.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="动态化" scheme="http://unclechen.github.io/tags/%E5%8A%A8%E6%80%81%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android反编译技术总结</title>
    <link href="http://unclechen.github.io/2016/09/07/Android%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://unclechen.github.io/2016/09/07/Android反编译技术总结/</id>
    <published>2016-09-07T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Apk反编译工具及其使用方法"><a href="#一、Apk反编译工具及其使用方法" class="headerlink" title="一、Apk反编译工具及其使用方法"></a>一、Apk反编译工具及其使用方法</h1><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h2><p>学习反编译之前，建议先学习一下Apk打包的过程，明白打包完成后的Apk里面都有什么文件，各种文件都是怎么生成的。</p><p>这里有两篇AndroidWeekly中推荐过的好文章：</p><ul><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&amp;mid=2247483789&amp;idx=1&amp;sn=6aed8c7907d5bd9c8a5e7f2c2dcdac2e&amp;scene=1&amp;srcid=0831CCuRJsbJNuz1WxU6uUsI#wechat_redirect" target="_blank" rel="external">浅析 Android 打包流程</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzI1NjEwMTM4OA==&amp;mid=2651232113&amp;idx=1&amp;sn=02f413999ab0865e23d272e69b9e6196&amp;scene=1&amp;srcid=0831gT4p6M0NFG5HTTeRHTUC#wechat_redirect" target="_blank" rel="external">Android构建过程分析</a></p></li></ul><p>Apk技术也有非常多的技术可以学习，主要都是围绕着如何减小体积，如何提高打包速度展开，这里先不多说了。下面是一张基本的Apk文件结构图。</p><p><img src="http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l2d6e4z5j20a80a0jrw.jpg" alt="APK文件结构"></p><a id="more"></a><p>Apk文件本质上其实是一个zip包。直接拿解压工具解压就可以看到其中包含了什么。下面简单介绍一下Apk文件的结构。</p><ul><li>AndroidManifest.xml：应用的全局配置文件</li><li>assets文件夹：原始资源文件夹，对应着Android工程的assets文件夹，一般用于存放原始的网页、音频等等，与res文件夹的区别这里不再赘述，可以参考上面介绍的两篇文章。</li><li>classes.dex：源代码编译成class后，转成jar，再压缩成dex文件，dex是可以直接在Android虚拟机上运行的文件。</li><li>lib文件夹：引用的第三方sdk的so文件。</li><li>META-INF文件夹：Apk签名文件。</li><li>res文件夹：资源文件，包括了布局、图片等等。</li><li>resources.arsc：记录资源文件和资源id的映射关系。</li></ul><p>上面的截图中每个文件都是一个最基本的Apk<br>文件应该包含在内的。但是直接把Apk当做zip解压后的这些文件是没法直接阅读的，毕竟他们都是经过了build-tools打包工具处理过的。我们直接用文本编辑器打开这里面的Manifest文件看看。</p><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f7kzdom045j20go06sjul.jpg" alt="反编译前的Manifest文件"></p><p><strong>反编译Apk</strong>的目的就是Apk拆成我们可以阅读的文件。通过反编译，我们一般想要得到里面的<strong>AndroidManifest.xml文件</strong>、<strong>res文件</strong>和<strong>java代码</strong>。</p><h2 id="2-Apk反编译步骤"><a href="#2-Apk反编译步骤" class="headerlink" title="2.Apk反编译步骤"></a>2.Apk反编译步骤</h2><h3 id="1-ApkTool拆包，得到AndroidManifest和res等资源文件"><a href="#1-ApkTool拆包，得到AndroidManifest和res等资源文件" class="headerlink" title="(1) ApkTool拆包，得到AndroidManifest和res等资源文件"></a>(1) ApkTool拆包，得到AndroidManifest和res等资源文件</h3><p><strong>工具下载地址：</strong><a href="https://bitbucket.org/iBotPeaches/apktool/downloads" target="_blank" rel="external">https://bitbucket.org/iBotPeaches/apktool/downloads</a></p><p><strong>功能：</strong>拆解Apk文件，反编译其中的资源文件，将它们反编译为可阅读的<strong>AndroidManifest.xml文件</strong>和<strong>res文件</strong>。前面讲过，直接把Apk文件当做zip解压，得到的xml资源文件，都是无法直接用文本编辑器打开阅读的，因为它们在打包时经过了build-tools的处理。</p><p><strong>用法：</strong>官网<a href="https://ibotpeaches.github.io/Apktool/documentation/" target="_blank" rel="external">https://ibotpeaches.github.io/Apktool/documentation/</a>有介绍，最新版本是<strong>2.2.0</strong>，运行环境需要<strong>jre1.7</strong>。</p><p>这里，我演示一下用apktool来拆解Apk文件的基本方法，只需要在终端里面执行下面的命令。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">java -jar apktool<span class="selector-class">.jar</span> d yourApkFile.apk</div><div class="line"><span class="comment">// 注意`apktool.jar`是刚才下载后的jar的名称，`d`参数表示decode</span></div><div class="line"><span class="comment">// 在这个命令后面还可以添加像`-o -s`之类的参数，例如</span></div><div class="line"><span class="comment">// java -jar apktool.jar d yourApkFile.apk -o destiantionDir -s</span></div><div class="line"><span class="comment">// 几个主要的参数设置方法及其含义：</span></div><div class="line">-f 如果目标文件夹已存在，强制删除现有文件夹</div><div class="line">-o 指定反编译的目标文件夹的名称（默认会将文件输出到以Apk文件名命名的文件夹中）</div><div class="line">-s 保留classes.dex文件（默认会将dex文件解码成smali文件）</div><div class="line">-r 保留resources.arsc文件（默认会将resources.arsc解码成具体的资源文件）</div></pre></td></tr></table></figure><p>下面我们看一下<code>java -jar apktool.jar d yourApkFile.apk</code>拆解后的结果：</p><p><img src="http://ww1.sinaimg.cn/large/801b780agw1f7kxk0y0i9j20h00c6dgm.jpg" alt="Apk拆包结果"></p><p>我们已经得到一个可以用文本编辑器打开的阅读的<strong>AndroidManifest.xml文件、assets文件夹、res文件夹、smali文件夹</strong>等等。original文件夹是原始的AndroidManifest.xml文件，res文件夹是反编译出来的所有资源，smali文件夹是反编译出来的代码。注意，smali文件夹下面，结构和我们的源代码的package一模一样，只不过换成了smali语言。它有点类似于汇编的语法，是Android虚拟机所使用的寄存器语言。</p><p>这时，我们已经可以文本编辑器打开<strong>AndroidManifest.xml</strong>文件和<strong>res下面的layout文件</strong>了。这样，我们就可以查看到这个Apk文件的<strong>package包名、Activity组件、程序所需要的权限、xml布局、图标</strong>等等信息。其实我们把Apk上传到应用市场时，应用市场也会通过类似的方式解析我们的apk。</p><blockquote><p><strong>note1：</strong>其实还有一种方法，可以省去每次解包时，都要输入<code>java -jar apktool.jar xxx</code>这行命令，官网也有说明，就是将这个命令包装成shell脚本，方法见：<a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="external">https://ibotpeaches.github.io/Apktool/install/</a></p><p><strong>note2：</strong>如果你在编译的时候，发现终端里面提示发生了<strong>brut.android.UndefinedResObject</strong>错误，说明你的apktool.jar版本太低了，需要去下载新版工具了。</p><p><strong>note3：</strong>如果想要自己实现一个解析Apk文件，提取版本、权限信息的<strong><em>java</em></strong>服务时，可以引用<code>apktool.jar</code>中的<code>ApkDecoder</code>，调用<code>decode</code>方法来实现。可以看下图中，apktool.jar里面有解析Apk文件的实现。</p></blockquote><p><img src="http://ww4.sinaimg.cn/large/801b780agw1f7kxsfcc9gj20m80f8ju0.jpg" alt="apktool.jar"></p><h3 id="2-dex2jar反编译dex文件，得到java源代码"><a href="#2-dex2jar反编译dex文件，得到java源代码" class="headerlink" title="(2) dex2jar反编译dex文件，得到java源代码"></a>(2) dex2jar反编译dex文件，得到java源代码</h3><p>上一步中，我们得到了反编译后的资源文件，这一步我们还想看java源代码。这里要用的工具就是<strong>dex2jar</strong>。</p><p><strong>工具下载地址：</strong><a href="https://sourceforge.net/projects/dex2jar/" target="_blank" rel="external">https://sourceforge.net/projects/dex2jar/</a></p><p><strong>功能：</strong>将dex格式的文件，转换成jar文件。dex文件时Android虚拟机上面可以执行的文件，jar文件大家都是知道，其实就是java的class文件。在<a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="external">官网</a>有详细介绍。</p><p><strong>用法：</strong>打开下载的dex2jar-2.0文件夹，里面有shell和bat脚本，进入终端，就可以在命令行使用了。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d2j-dex2jar classes.dex</div><div class="line"><span class="comment">// 获取classes.dex文件在最前面说过，只要把Apk当做zip解压出来，里面就有dex文件了</span></div><div class="line"><span class="comment">// 或者用apktool反编译时带上 `-s` 参数</span></div></pre></td></tr></table></figure><p>运行后，可以看到<strong>classes.dex</strong>已经变成了<strong>classes-dex2jar.jar</strong>。</p><p><img src="http://ww4.sinaimg.cn/large/801b780agw1f7kyy6qkwhj20go0e675q.jpg" alt="进入dex2jar文件夹"></p><blockquote><p><strong>note1：</strong>第一次下载下来后，在mac里运行的时候可能会提示需要管理员的权限，这里我给这些sh脚本<code>chmod 777</code>后，即可运行它。</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/801b780agw1f7kz7zdeewj20go018t92.jpg" alt="root执行dex2jar"></p><blockquote><p><strong>note2：</strong>写完这一节的时候，我发现<strong>把dex转换成jar</strong>已经有了更好的工具<strong>enjarify</strong>，<a href="https://github.com/google/enjarify" target="_blank" rel="external">https://github.com/google/enjarify</a>这个工具是谷歌官方开源的用于反编译dex文件的。使用方法和dex2jar差不多，也是简单的命令行操作。这个工具的主页中也提到dex2jar已经是一个比较老的工具，在遇到混淆等等复杂的情况时，可能无法正常工作。所以这里推荐大家使用<strong>enjarify</strong>这个工具。</p></blockquote><h3 id="3-jd-gui查看java源代码"><a href="#3-jd-gui查看java源代码" class="headerlink" title="(3) jd-gui查看java源代码"></a>(3) jd-gui查看java源代码</h3><p><strong>工具下载地址：</strong>官网<a href="http://jd.benow.ca/" target="_blank" rel="external">http://jd.benow.ca/</a>上选择自己所需要的版本。</p><p><strong>功能：</strong>这个工具不用多说，写java的人都知道。有时候我们自己开发一个jar包给别人用，也会用它来查看class是不是都被正确的打入到了jar内，我以前介绍的gradle自定义打包jar的博客中也提到过它。</p><p><strong>用法：</strong>下载后双击既可以运行这个工具，直接把上一步得到的<strong>classes-dex2jar.jar</strong>拖到jd-gui程序的界面上即可打开了，效果如下图所示。</p><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f7kzaffqirj20go04lmxb.jpg" alt="classes-dex2jar.jar"></p><h3 id="反编译Apk步骤小结"><a href="#反编译Apk步骤小结" class="headerlink" title="反编译Apk步骤小结"></a>反编译Apk步骤小结</h3><p>反编译一个Apk，查看它的资源文件和java代码，我们需要用到3个工具。</p><ul><li>apktool：<a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">https://ibotpeaches.github.io/Apktool/</a></li><li>dex2jar：<a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="external">https://github.com/pxb1988/dex2jar</a></li><li>jd-gui：<a href="http://jd.benow.ca/" target="_blank" rel="external">http://jd.benow.ca/</a></li></ul><p>反编译就是用这3个工具得到AndroidManifest.xml、res、java代码等。但是我们可以看到，如果你要对一个Apk做尽可能彻底的反编译，把它扒得干干净净，这一步一步的基本操作还是稍显麻烦。另外加固过Apk的情况可能更复杂，需要我们勤动手尝试。为了能提高效率，下面我把自己见过的一些集成工具介绍给大家，尽可能实现可以一键反编译Apk。</p><h1 id="二、自动化工具汇总（一键反编译Apk）"><a href="#二、自动化工具汇总（一键反编译Apk）" class="headerlink" title="二、自动化工具汇总（一键反编译Apk）"></a>二、自动化工具汇总（一键反编译Apk）</h1><h2 id="1-谷歌提供的工具：android-classyshark"><a href="#1-谷歌提供的工具：android-classyshark" class="headerlink" title="1.谷歌提供的工具：android-classyshark"></a>1.谷歌提供的工具：<a href="http://classyshark.com/" target="_blank" rel="external">android-classyshark</a></h2><p><strong>下载地址：</strong><a href="https://github.com/google/android-classyshark/releases" target="_blank" rel="external">https://github.com/google/android-classyshark/releases</a>，下载下来之后是一个可执行的jar文件，win下或者mac下都只要双击即可运行。</p><p><strong>功能：</strong>带有界面，一键反编译Apk工具，直接打开Apk文件，就可以看到Apk中所有的文件结构，甚至还集成了dex文件查看，java代码查看，方法数分析、导入混淆mapping文件等一系列工具。谷歌推出这个工具的目的是为了让我们开发者更清楚的了解自己的Apk中都有什么文件、混淆前后有什么变化，并方便我们进一步优化自己的Apk打包实现。下面带上几张截图，真是帅气的一笔的好工具啊！</p><p><img src="http://ww1.sinaimg.cn/large/801b780agw1f7l03o4znvj20m80e8n0f.jpg" alt="dex文件查看"></p><p><img src="http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l21d8lm6j20p009iac1.jpg" alt="方法数分析"></p><p>即将到来的<strong>Android Studio 2.2</strong>中集成了一个叫做<strong>APK Analyzer</strong>的功能，这个功能不知道是不是和这个工具有关系呢，本人还没有尝试过2.2版本，有兴趣的朋友可以体验一下<a href="http://android-developers.blogspot.com/2016/05/android-studio-22-preview-new-ui.html" target="_blank" rel="external">preview版本</a>。</p><h2 id="2-Python实现的工具：AndroidGuard"><a href="#2-Python实现的工具：AndroidGuard" class="headerlink" title="2.Python实现的工具：AndroidGuard"></a>2.Python实现的工具：<a href="https://github.com/androguard/androguard" target="_blank" rel="external">AndroidGuard</a></h2><p><strong>下载地址：</strong><a href="https://github.com/androguard/androguard/releases" target="_blank" rel="external">https://github.com/androguard/androguard/releases</a></p><p><strong>功能：</strong>集成了反编译资源、代码等各种文件的工具包。需要安装Python环境来运行这个工具，这个工具按照不同的反编译需求，分别写成了不同的py功能模块，还有静态分析的功能。所以如果想要用Python开发一个解析Apk文件并进行静态扫描分析的服务，可以引用这个工具来实现。</p><p><strong>用法：</strong>具体用法比较多，这里也不再展开了。可以通过工具内置的<code>-h</code>帮助指令查看各个模块的功能。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">unclechendeiMac:androguard-2.0 unclechen$ python androaxml.py -<span class="built_in">h</span></div><div class="line">Usage: androaxml.py [options]</div><div class="line"></div><div class="line">Options:</div><div class="line">  -<span class="keyword">h</span>, --<span class="keyword">help</span>            show this <span class="keyword">help</span> message and <span class="keyword">exit</span></div><div class="line">  -i <span class="keyword">INPUT</span>, --<span class="keyword">input</span>=<span class="keyword">INPUT</span></div><div class="line">                        filename <span class="keyword">input</span> (APK or android's binary xml)</div><div class="line">  -o OUTPUT, --output=OUTPUT</div><div class="line">                        filename output of the xml</div><div class="line">  -v, --<span class="keyword">version</span>         <span class="keyword">version</span> of the API</div><div class="line"></div><div class="line"><span class="comment">// androaxml.py这个模块是用来解析AndroidManifest文件的，`-i` 表示输入的apk文件，`-o` 表示输出xml文件。</span></div></pre></td></tr></table></figure><h2 id="3-Mac专属工具：Android-Crack-Tool"><a href="#3-Mac专属工具：Android-Crack-Tool" class="headerlink" title="3.Mac专属工具：Android-Crack-Tool"></a>3.Mac专属工具：<a href="https://github.com/Jermic/Android-Crack-Tool" target="_blank" rel="external">Android-Crack-Tool</a></h2><p><strong>功能：</strong>这是网上一位名为<a href="https://github.com/Jermic" target="_blank" rel="external">Jermic</a>的大神开发的、在Mac环境下使用的App，集成了Android开发中常见的一些编译/反编译工具，方便用户对Apk进行逆向分析，提供Apk信息查看功能。工具的截图如下所示，非常强大。</p><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f7l1q0hwugj20rs0gtwjl.jpg" alt="Android-Crack-Tool.app"></p><h2 id="4-手机上的反编译工具：ApkParser"><a href="#4-手机上的反编译工具：ApkParser" class="headerlink" title="4.手机上的反编译工具：ApkParser"></a>4.手机上的反编译工具：<a href="https://github.com/jaredrummler/APKParser" target="_blank" rel="external">ApkParser</a></h2><p><strong>功能：</strong>在电脑上已经有了这么多的工具，在手机上的也有很方便的工具。<strong>APKParser</strong>是一款在查看手机上已经安装的Apk的信息的工具，他可以查看软件的<strong>AndroidManifest.xml文件、方法数、res资源文件</strong>，并在手机上直接展示出来。个人觉得这是一个非常实用的工具，作为开发者，手机里面必须要有它。</p><p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f7l1wnbkv1j20m80b4jtf.jpg" alt="ApkParser"></p><h2 id="5-工具汇总"><a href="#5-工具汇总" class="headerlink" title="5.工具汇总"></a>5.工具汇总</h2><p>以上几款工具都是我体验过、感觉不错的集成工具，推荐给大家。临近本文结束前，又发现了这么一个福利网站-<a href="http://www.androiddevtools.cn/" target="_blank" rel="external">http://www.androiddevtools.cn/</a>，其中有一章专门总结了各种Apk反编译的工具。相信有了这么多的利器，大家应该有100种方法将一个App扒得干干净净了。</p><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f7l112kl4yj20m80pfwiq.jpg" alt="Apk反编译工具汇总"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、Apk反编译工具及其使用方法&quot;&gt;&lt;a href=&quot;#一、Apk反编译工具及其使用方法&quot; class=&quot;headerlink&quot; title=&quot;一、Apk反编译工具及其使用方法&quot;&gt;&lt;/a&gt;一、Apk反编译工具及其使用方法&lt;/h1&gt;&lt;h2 id=&quot;1-原理&quot;&gt;&lt;a href=&quot;#1-原理&quot; class=&quot;headerlink&quot; title=&quot;1.原理&quot;&gt;&lt;/a&gt;1.原理&lt;/h2&gt;&lt;p&gt;学习反编译之前，建议先学习一下Apk打包的过程，明白打包完成后的Apk里面都有什么文件，各种文件都是怎么生成的。&lt;/p&gt;
&lt;p&gt;这里有两篇AndroidWeekly中推荐过的好文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0NjIzNDkwOA==&amp;amp;mid=2247483789&amp;amp;idx=1&amp;amp;sn=6aed8c7907d5bd9c8a5e7f2c2dcdac2e&amp;amp;scene=1&amp;amp;srcid=0831CCuRJsbJNuz1WxU6uUsI#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅析 Android 打包流程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI1NjEwMTM4OA==&amp;amp;mid=2651232113&amp;amp;idx=1&amp;amp;sn=02f413999ab0865e23d272e69b9e6196&amp;amp;scene=1&amp;amp;srcid=0831gT4p6M0NFG5HTTeRHTUC#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android构建过程分析&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apk技术也有非常多的技术可以学习，主要都是围绕着如何减小体积，如何提高打包速度展开，这里先不多说了。下面是一张基本的Apk文件结构图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/65e4f1e6gw1f7l2d6e4z5j20a80a0jrw.jpg&quot; alt=&quot;APK文件结构&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="反编译" scheme="http://unclechen.github.io/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Android地理位置服务解析</title>
    <link href="http://unclechen.github.io/2016/09/02/Android%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E8%A7%A3%E6%9E%90/"/>
    <id>http://unclechen.github.io/2016/09/02/Android地理位置服务解析/</id>
    <published>2016-09-02T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="手机设备有哪几种定位方式"><a href="#手机设备有哪几种定位方式" class="headerlink" title="手机设备有哪几种定位方式"></a>手机设备有哪几种定位方式</h1><h2 id="GPS"><a href="#GPS" class="headerlink" title="GPS"></a>GPS</h2><p>基于卫星发射的信号，可以推算出手机到每颗卫星的距离，根据卫星的位置，推测出手机的位置。</p><p>这是一张简单的GPS定位原理图，需要一点数学知识，先不讨论这个细节，需要的同学看<a href="http://baike.baidu.com/view/193655.htm" target="_blank" rel="external">这里</a>。</p><p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f7fbixzcaxj20dw0bo750.jpg" alt="gps定位原理图"></p><p>现在卫星信号全球都覆盖了，手机一般都有GPS芯片，因此可以实现定位。GPS方式准确度是最高的，走卫星通道，不需要联网就可以要使用。但是它的缺点也非常明显：</p><ul><li>1.比较耗电; </li><li>2.绝大部分用户默认不开启GPS模块，也不会长时间开着; </li><li>3.从GPS模块启动到获取第一次定位数据，可能需要<strong>比较长的时间</strong>; </li><li>4.<strong>只能在户外使用</strong>，当有遮挡物干扰时，几乎无法使用，如城市大楼密集的地方。</li></ul><a id="more"></a><h2 id="WiFi"><a href="#WiFi" class="headerlink" title="WiFi"></a>WiFi</h2><p>通过获取当前所连接的WiFi热点的一些信息，然后访问定位服务以获得经纬度坐标。</p><p>这是一张简单的WiFi定位原理图。</p><p><img src="http://ww3.sinaimg.cn/large/65e4f1e6gw1f7fbjjbmesj20b408a0t0.jpg" alt="WiFi定位原理图"></p><p>因为WiFi热点一般都是固定位置，所以只要能知道手机连接的WiFi热点的位置，也就可以推算出手机的位置。而且由于手机一般连接的WiFi不会太远，所以其实精确度也不会太差。也不会像GPS那样需要耗时比较久才能获得位置信息。</p><h2 id="Cell-ID"><a href="#Cell-ID" class="headerlink" title="Cell-ID"></a>Cell-ID</h2><p>采集到手机所连接的基站ID号(cellid)和其它的一些信息(MNC，MCC，LAC等)，然后通过网络访问定位服务，获取并返回对应的经纬度坐标。</p><p>这是一张简单的基站定位原理图。</p><p><img src="http://ww2.sinaimg.cn/large/65e4f1e6gw1f7fbjts47yj20b40bqq3o.jpg" alt="基站定位原理"></p><p>现在各大运营商的基站已经覆盖了全国大部分地区，每个基站的ID号是全球唯一的，只要有手机信号，就能接收到周围基站的信号。基站定位的精确度不如GPS，但优点是能够在室内用，只要网络通畅就行。</p><p>其实各种定位方式，大体都是基于三角定位的原理，不过计算的时候会有一些自己的特点，这里先不深究背景知识了。下面进入正题。</p><h1 id="Android系统上如何获取地理位置"><a href="#Android系统上如何获取地理位置" class="headerlink" title="Android系统上如何获取地理位置"></a>Android系统上如何获取地理位置</h1><h2 id="方法1：Google-Play-Service提供的API"><a href="#方法1：Google-Play-Service提供的API" class="headerlink" title="方法1：Google Play Service提供的API"></a>方法1：Google Play Service提供的API</h2><p>这个不多说，因为国内不可用！！！ </p><p>需要的同学可以自己爬梯子看下用法，比较简单：<a href="https://developer.android.com/google/play-services/location.html" target="_blank" rel="external">https://developer.android.com/google/play-services/location.html</a></p><h2 id="方法2：系统提供的原生API：主要就是系统的android-location中提供的两个类。"><a href="#方法2：系统提供的原生API：主要就是系统的android-location中提供的两个类。" class="headerlink" title="方法2：系统提供的原生API：主要就是系统的android.location中提供的两个类。"></a>方法2：系统提供的原生API：主要就是系统的<code>android.location</code>中提供的两个类。</h2><ul><li><strong>LocationManager：</strong>和大多数系统提供的<strong>SystemService</strong>一样是单例，通过<code>locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);</code>来获取。</li><li><strong>LocationListener：</strong>非常典型的观察者模式，需要监听地理位置的时候，创建一个<strong>Listener</strong>，实现LocationListener中的几个回调方法。把Listener传给LocationManager，当地理位置变化的时候就会回调<code>onLocationChanged(Location location)</code>发出通知。</li><li>官方指导：<a href="https://developer.android.com/guide/topics/location/strategies.html" target="_blank" rel="external">https://developer.android.com/guide/topics/location/strategies.html</a></li></ul><h2 id="方法3：使用百度、高德之类的地图SDK。"><a href="#方法3：使用百度、高德之类的地图SDK。" class="headerlink" title="方法3：使用百度、高德之类的地图SDK。"></a>方法3：使用百度、高德之类的地图SDK。</h2><p>这简直就是大招了，各家都有自己的数据库，比起系统提供的API强太多了。这个这次也不说，各家的接入文档写的很清楚。</p><h1 id="使用原生API采集地理位置的方法"><a href="#使用原生API采集地理位置的方法" class="headerlink" title="使用原生API采集地理位置的方法"></a>使用原生API采集地理位置的方法</h1><p>下面介绍一下我对使用原生API的理解，毕竟不是所有场景都需要用到大招级别的sdk，有的情况我们需要自己实现定位服务。</p><h2 id="1-首先需要了解PROVIDER"><a href="#1-首先需要了解PROVIDER" class="headerlink" title="1.首先需要了解PROVIDER"></a>1.首先需要了解<strong>PROVIDER</strong></h2><p>看过前面介绍的3种定位方式之后，可以很容易理解PROVIDER是什么。其实它就对应着地理位置采集的几种方式：</p><ul><li>LocationManager.GPS_PROVIDER：通过gps来获取地理位置的经纬度信息，优点：获取地理位置信息精确度高，缺点：只能在户外使用，<strong>耗时，耗电</strong>。</li><li>LocationManager.NETWORK_PROVIDER：通过移动网络的基站或者WiFi来获得地理位置，优点：只要有网络，获取速度快，耗电低，在室内室外都可以使用。</li><li>LocationManager.PASSIVE_PROVIDER：被动的接收更新的地理位置信息，而不用自己主动请求地理位置。意思就是共享手机上其他App采集的位置信息，而不是自己主动去采集。</li></ul><p>下图是3种Provider的特点和区别：</p><p><img src="http://ww3.sinaimg.cn/large/65e4f1e6gw1f7f3p1sx4aj20kp0g5acw.jpg" alt="3种Provider的特点"></p><h2 id="2-打开手机的设置"><a href="#2-打开手机的设置" class="headerlink" title="2.打开手机的设置"></a>2.打开手机的设置</h2><p>先看下原生系统中地理位置设置的界面截图：</p><p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f47p124kj20rs0m376v.jpg" alt="地理位置设置截图"></p><p>以原生系统为例，需要采集地理位置时，需要：</p><ul><li>打开通知栏的GPS开关</li><li>进入<code>设置-&gt;位置信息-&gt;模式</code>，打开开关。然后我们可以看到，这里有3类模式：<ul><li>高精确度：使用GPS、WLAN、蓝牙或者移动网络确定位置</li><li>节电：使用WLAN、蓝牙或者移动网络确定位置</li><li>仅限设备：使用GPS确定位置</li></ul></li></ul><p><strong>PS：</strong>我发现小米手机上，即使你把通知栏里面地理位置开关关闭了，进入系统的设置界面，还是可以看到地理位置是开启的，默认选择的是<code>节电</code>模式。而原生系统你只要在通知栏关闭了开关，就无法使用定位服务了。这里感觉国内厂商在细节上可能会有一些不同的实现。</p><h2 id="3-给你的App注册权限"><a href="#3-给你的App注册权限" class="headerlink" title="3.给你的App注册权限"></a>3.给你的App注册权限</h2><p>当你在代码里面使用3种不同的Provider时，应该关注到两个权限：</p><ul><li>LocationManager.GPS_PROVIDER：android.permission.ACCESS_FINE_LOCATION</li><li>LocationManager.NETWORK_PROVIDER：android.permission.ACCESS_COARSE_LOCATION 或者 android.permission.ACCESS_FINE_LOCATION。<ul><li>当声明ACCESS_FINE_LOCATION时，拿到的位置信息将更精确（几十米到几百米）</li><li>当声明ACCESS_COARSE_LOCATION时，拿到的位置会粗略一点（几百米到几千米）</li></ul></li><li>LocationManager.PASSIVE_PROVIDER：android.permission.ACCESS_COARSE_LOCATION </li></ul><blockquote><p>注意：如果声明了ACCESS_FINE_LOCATION时，就不用再声明ACCESS_COARSE_LOCATION了，因为ACCESS_FINE_LOCATION已经包含了使用NETWORK_PROVIDER的能力。此外从Android6.0开始，ACCESS_FINE_LOCATION和ACCESS_COARSE_LOCATION已经是<strong><em>dangerous permission</em></strong>，开发者需要注意这一点，当用户在运行你的App时，如果没有授权，仍然是无法获取到地理位置信息的。</p></blockquote><h2 id="4-根据需求的场景写代码（记住要尽量省电）"><a href="#4-根据需求的场景写代码（记住要尽量省电）" class="headerlink" title="4.根据需求的场景写代码（记住要尽量省电）"></a>4.根据需求的场景写代码（<strong>记住要尽量省电</strong>）</h2><p><strong>一定要省电：</strong>这是一个非常重要的用户体验，我们应该对自己做的App负责。什么时候开始使用地理位置服务，什么时候停止使用，我们一定要想清楚，尽量不要一直占用着这种高耗电的资源。</p><h3 id="4-1基本代码"><a href="#4-1基本代码" class="headerlink" title="4.1基本代码"></a>4.1基本代码</h3><p>下面看代码，一段基本的获取地理位置的代码是这么写的，这段代码可以让你通过异步的方式获取到用户的地理位置。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获得Location Manager的实例</span></div><div class="line">LocationManager locationManager = (LocationManager) <span class="keyword">this</span>.getSystemService(Context.LOCATION_SERVICE);</div><div class="line"></div><div class="line"><span class="comment">// 定义一个监听器，实现onLocationChanged方法，在这个方法里面可以拿到更新后的地理位置</span></div><div class="line">LocationListener locationListener = <span class="keyword">new</span> LocationListener() &#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onLocationChanged</span><span class="params">(Location location)</span> </span>&#123;</div><div class="line">      <span class="comment">// 新的Location值在这里返回，Location实例中包含着纬度、经度、海拔、精确度、更新时间等一系列信息。</span></div><div class="line">      makeUseOfNewLocation(location);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onStatusChanged</span><span class="params">(String provider, <span class="keyword">int</span> status, Bundle extras)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onProviderEnabled</span><span class="params">(String provider)</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onProviderDisabled</span><span class="params">(String provider)</span> </span>&#123;&#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"><span class="comment">// 注册监听器，当地理位置变化时，发出通知给Listener。这个方法很关键。4个参数需要了解清楚：</span></div><div class="line"><span class="comment">// 第1个参数：你所使用的provider名称，是个String</span></div><div class="line"><span class="comment">// 第2个参数minTime：地理位置更新时发出通知的最小时间间隔</span></div><div class="line"><span class="comment">// 第3个参数minDistance：地理位置更新发出通知的最小距离，第2和第3个参数的作用关系是“或”的关系，也就是满足任意一个条件都会发出通知。这里第2、3个参数都是0，意味着任何时间，只要位置有变化就会发出通知。</span></div><div class="line"><span class="comment">// 第4个参数：你的监听器</span></div><div class="line">locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, <span class="number">0</span>, <span class="number">0</span>, locationListener);</div></pre></td></tr></table></figure><h3 id="4-2如何优化"><a href="#4-2如何优化" class="headerlink" title="4.2如何优化"></a>4.2如何优化</h3><p>但是实战中一定要尽量去优化，虽然获取地理位置只能是异步的，但是仍然不建议一直不停地监听地理位置的变化。</p><p>谷歌官方也给出了一个采集地理位置的思路，非常值得我们来参考。思路的基本步骤如下：</p><ul><li>启动应用。</li><li>当用户进入到应用中需要使用地理位置场景时，选择一个合适的Provider，开始监听地理位置的变化。</li><li>获取系统中缓存的上次的地理位置<code>LastKnownLocation</code>，保存到当前地理位置变量<code>currentLocation</code>中作为备选值，当拿到新的地理位置后，对比两者，选择最优的那个继续保存它。</li><li>停止监听地理位置的变化。</li><li>使用当前维护着的这个Location作为用户的位置。</li></ul><p>谷歌还给出了这个方案的一个timeline图示。</p><p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f4svf6zsj20mj064ab0.jpg" alt="A timeline representing the window in which an application listens for location updates"></p><h3 id="4-3关键问题"><a href="#4-3关键问题" class="headerlink" title="4.3关键问题"></a>4.3关键问题</h3><p>我们比较关注下面4点：</p><ul><li>1.如何选择一个最好的provider？</li><li>2.什么时候开始监听地理位置变化，什么时候结束？</li><li>3.如何比较两个地理位置，决定哪个更好？</li><li>4.LastknownPostion怎么获取，怎么使用？</li></ul><p>下面介绍我的想法：</p><h4 id="第1点：如何选择一个最好的provider？"><a href="#第1点：如何选择一个最好的provider？" class="headerlink" title="第1点：如何选择一个最好的provider？"></a>第1点：如何选择一个最好的provider？</h4><p>这需要看你的需求。系统中也提供了一些方法来帮我们选择，可以设定一个条件<code>Criteria</code>，指定帅选最符合条件的地理位置提供者，根据Cirteria指定的条件，设备会自动选择哪种location provider。</p><p>代码如下：</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="type">Criteria</span> criteria = <span class="function"><span class="keyword">new</span> <span class="title">Criteria</span>();<span class="comment">//</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setAccuracy</span>(<span class="type">Criteria</span>.<span class="type">ACCURACY_FINE</span>);<span class="comment">//设置定位精准度</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setAltitudeRequired</span>(false);<span class="comment">//是否要求海拔</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setBearingRequired</span>(true);<span class="comment">//是否要求方向</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setCostAllowed</span>(true);<span class="comment">//是否要求收费</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setSpeedRequired</span>(true);<span class="comment">//是否要求速度</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setPowerRequirement</span>(<span class="type">Criteria</span>.<span class="type">POWER_LOW</span>);<span class="comment">//设置相对省电</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setBearingAccuracy</span>(<span class="type">Criteria</span>.<span class="type">ACCURACY_HIGH</span>);<span class="comment">//设置方向精确度</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setSpeedAccuracy</span>(<span class="type">Criteria</span>.<span class="type">ACCURACY_HIGH</span>);<span class="comment">//设置速度精确度</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setHorizontalAccuracy</span>(<span class="type">Criteria</span>.<span class="type">ACCURACY_HIGH</span>);<span class="comment">//设置水平方向精确度</span></span></div><div class="line"><span class="function"><span class="title">criteria</span>.<span class="title">setVerticalAccuracy</span>(<span class="type">Criteria</span>.<span class="type">ACCURACY_HIGH</span>);<span class="comment">//设置垂直方向精确度</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"><span class="comment">// 返回满足条件的，当前设备可用的location provider</span></span></div><div class="line"><span class="function"><span class="comment">// 当第2个参数为false时，返回当前设备所有provider中最符合条件的那个（但是不一定可用）。</span></span></div><div class="line"><span class="function"><span class="comment">// 当第2个参数为true时，返回当前设备所有可用的provider中最符合条件的那个。</span></span></div><div class="line"><span class="function"><span class="title">String</span> <span class="title">rovider</span>  = <span class="title">mLocationManager</span>.<span class="title">getBestProvider</span>(criteria,true);</span></div></pre></td></tr></table></figure><p>总之，一共就3个provider，其实对于大部分开发者，选来选去就是<code>gps</code> or <code>network</code>。</p><h4 id="第2点，什么时候开始，什么时候结束？"><a href="#第2点，什么时候开始，什么时候结束？" class="headerlink" title="第2点，什么时候开始，什么时候结束？"></a>第2点，什么时候开始，什么时候结束？</h4><p>我认为最好开启了监听器后，要尽可能早地结束它。也就是不要调用了<code>requestLocationUpdates(provider, minTime, minDistance, listener)</code>让位置服务开始工作后，很长时间都不去<code>removeUpdates(listener)</code>来停止服务。</p><p>虽然在<code>requestLocationUpdates</code>方法中，有<strong>minTime</strong>、<strong>minDistance</strong>参数可以设置。比如设置了60000ms的minTime，希望采更新完一次地理位置后休息60s。或者设置2000米的minDistance，希望位置变化不超过2公里，也休息。这样做<strong>看起来好像</strong>是可以省电。</p><p>但是实测中发现，如果调用<code>requestLocationUpdates(LocationManager.GPS_PROVIDER, 60000, 2000, listener)</code>注册监听器后，系统的状态栏上面的GPS那个小图标一直在显示。只要你不<code>removeUpdates(listener)</code>，他就一直在工作。其实我理解，即使你设置了minTime和minDistance，位置服务还是一直处于工作状态的，不然它怎么知道位置变化超过了你设定的minDistance呢？</p><p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f7f94tb263j20eu022t8r.jpg" alt="系统栏中的GPS图标"></p><p>所以我的建议是，当你调用<strong>requestLocationUpdates</strong>后，还应该是设置一个定时器，比如30s。当30s时间到了之后，就<strong>removeUpdate</strong>，不再监听地理位置了，转而使用备选的LastKnownLocation。当下次需要使用地理位置时，再重新注册监听器，监听30s，然后就移除监听器。如果对实时性要求高，我们可以在用户进入App中某个需要定位服务的场景之前，采用这个方法获取一次地理位置，把它保存下来。</p><h4 id="第3点，如何比较两个Location，选出更好的那个？"><a href="#第3点，如何比较两个Location，选出更好的那个？" class="headerlink" title="第3点，如何比较两个Location，选出更好的那个？"></a>第3点，如何比较两个Location，选出更好的那个？</h4><p>谷歌也给出了代码示例，先看一下。</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TWO_MINUTES = <span class="number">1000</span> * <span class="number">60</span> * <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">/** Determines whether one Location reading is better than the current Location fix</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> location  The new Location that you want to evaluate</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> currentBestLocation  The current Location fix, to which you want to compare the new one</span></div><div class="line"><span class="comment">  */</span></div><div class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span> isBetterLocation(Location location, Location currentBestLocation) &#123;</div><div class="line">    <span class="keyword">if</span> (currentBestLocation == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// A new location is always better than no location</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Check whether the new location fix is newer or older</span></div><div class="line">    <span class="keyword">long</span> timeDelta = location.getTime() - currentBestLocation.getTime();</div><div class="line">    <span class="keyword">boolean</span> isSignificantlyNewer = timeDelta &gt; TWO_MINUTES;</div><div class="line">    <span class="keyword">boolean</span> isSignificantlyOlder = timeDelta &lt; -TWO_MINUTES;</div><div class="line">    <span class="keyword">boolean</span> isNewer = timeDelta &gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// If it's been more than two minutes since the current location, use the new location</span></div><div class="line">    <span class="comment">// because the user has likely moved</span></div><div class="line">    <span class="keyword">if</span> (isSignificantlyNewer) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="comment">// If the new location is more than two minutes older, it must be worse</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSignificantlyOlder) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Check whether the new location fix is more or less accurate</span></div><div class="line">    <span class="keyword">int</span> accuracyDelta = (<span class="keyword">int</span>) (location.getAccuracy() - currentBestLocation.getAccuracy());</div><div class="line">    <span class="keyword">boolean</span> isLessAccurate = accuracyDelta &gt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">boolean</span> isMoreAccurate = accuracyDelta &lt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">boolean</span> isSignificantlyLessAccurate = accuracyDelta &gt; <span class="number">200</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Check if the old and new location are from the same provider</span></div><div class="line">    <span class="keyword">boolean</span> isFromSameProvider = isSameProvider(location.getProvider(),</div><div class="line">            currentBestLocation.getProvider());</div><div class="line"></div><div class="line">    <span class="comment">// Determine location quality using a combination of timeliness and accuracy</span></div><div class="line">    <span class="keyword">if</span> (isMoreAccurate) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isNewer &amp;&amp; !isLessAccurate) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isNewer &amp;&amp; !isSignificantlyLessAccurate &amp;&amp; isFromSameProvider) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** Checks whether two providers are the same */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isSameProvider(String provider1, String provider2) &#123;</div><div class="line">    <span class="keyword">if</span> (provider1 == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> provider2 == <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> provider1.equals(provider2);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码的策略是：</p><ul><li><p>1.先看更新时间：设定一个时间范围，2分钟。</p><ul><li>如果新的Location比旧的Location获取时间更新，且超过2分钟，那么认为新的Location更好。</li><li>如果新的Location比旧的Location获取时间更老，且超过2分钟，那么认为新的Location不够好。</li><li>如果新的Location比旧的Location获取时间更新，但没有超过2分钟，那么看下它们的精确度。</li></ul></li><li><p>2.再看精确度：设定一个精确度范围，200米。</p><ul><li>如果新的Location比旧的Location精确度更高，那么认为新的Location更好。</li><li>如果新的Location和旧的Location精确度相等，且获取时间更新，那么认为新的Location更好。</li><li>如果新的Location比旧的Location精确度低200m以内，且获取时间更新，来自同一个provider，那么为认为新的Location更好。</li><li>其他情况都认为旧的Location更好。</li></ul></li></ul><p>这段代码是一个参考，我们实际开发中可以更具需要去定义自己的<strong>Better Location</strong>策略。</p><p>另外，从API&gt;=17开始，Location类还增加了一个<code>getElapsedRealtimeNanos</code>方法（获取从系统启动后走过的时间），这是为了解决<code>getTime</code>方法（获取UTC时间）不够精确，容易产生误差的问题。这个方法在比较两个Location时将更加可靠。</p><h4 id="第4点，怎么获取LastknownPostion，怎么使用？"><a href="#第4点，怎么获取LastknownPostion，怎么使用？" class="headerlink" title="第4点，怎么获取LastknownPostion，怎么使用？"></a>第4点，怎么获取LastknownPostion，怎么使用？</h4><p>相信有了第3点，应该知道怎么选择<strong>Better Location</strong>。至于获取LastKnownLocation直接看代码。</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Location <span class="attr">gpsLocation</span> = <span class="literal">null</span>;</div><div class="line">Location <span class="attr">networkLocation</span> = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (context.checkCallingOrSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">    <span class="attr">gpsLocation</span> = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (context.checkCallingOrSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">    <span class="attr">networkLocation</span> = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 下面可以比较一下哪个更好...</div><div class="line">Location <span class="attr">currentLocation</span> = gpsLocation;</div><div class="line"><span class="keyword">if</span> (isBetterLocation(currentLocation, networkLocation))&#123;</div><div class="line">    <span class="attr">currentLocation</span> = networkLocation;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h1><p>说了一大堆，我觉得平时开发的时候应该这么做：</p><ul><li>1.确定自己的应用什么时候要开始监听地理位置变化，什么时候停止。</li><li>2.选择一个合适的provider，开始监听它提供的地理位置变化。</li><li>3.读取系统中GPS和NETWORK这两个Provide缓存的<strong>LastKnownPostion</strong>，选出Better Location保存到currentBestLocation变量中。</li><li>4.监听到地理位置更新后，把更新到的Location和保存的currentBestLocation比较，得出Better One，再保存到currentBestLocation变量中。</li><li>5.使用currentBestLocation作为用户的位置，并在合适时机移除监听器。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;手机设备有哪几种定位方式&quot;&gt;&lt;a href=&quot;#手机设备有哪几种定位方式&quot; class=&quot;headerlink&quot; title=&quot;手机设备有哪几种定位方式&quot;&gt;&lt;/a&gt;手机设备有哪几种定位方式&lt;/h1&gt;&lt;h2 id=&quot;GPS&quot;&gt;&lt;a href=&quot;#GPS&quot; class=&quot;headerlink&quot; title=&quot;GPS&quot;&gt;&lt;/a&gt;GPS&lt;/h2&gt;&lt;p&gt;基于卫星发射的信号，可以推算出手机到每颗卫星的距离，根据卫星的位置，推测出手机的位置。&lt;/p&gt;
&lt;p&gt;这是一张简单的GPS定位原理图，需要一点数学知识，先不讨论这个细节，需要的同学看&lt;a href=&quot;http://baike.baidu.com/view/193655.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/65e4f1e6gw1f7fbixzcaxj20dw0bo750.jpg&quot; alt=&quot;gps定位原理图&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在卫星信号全球都覆盖了，手机一般都有GPS芯片，因此可以实现定位。GPS方式准确度是最高的，走卫星通道，不需要联网就可以要使用。但是它的缺点也非常明显：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.比较耗电; &lt;/li&gt;
&lt;li&gt;2.绝大部分用户默认不开启GPS模块，也不会长时间开着; &lt;/li&gt;
&lt;li&gt;3.从GPS模块启动到获取第一次定位数据，可能需要&lt;strong&gt;比较长的时间&lt;/strong&gt;; &lt;/li&gt;
&lt;li&gt;4.&lt;strong&gt;只能在户外使用&lt;/strong&gt;，当有遮挡物干扰时，几乎无法使用，如城市大楼密集的地方。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="定位" scheme="http://unclechen.github.io/tags/%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>不写代码，快速实现px转换成dp</title>
    <link href="http://unclechen.github.io/2016/08/21/%E4%B8%8D%E5%86%99%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0px%E8%BD%AC%E6%8D%A2%E6%88%90dp/"/>
    <id>http://unclechen.github.io/2016/08/21/不写代码实现px转换成dp/</id>
    <published>2016-08-21T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>有很多朋友在实际的工作中，会遇到设计同事给了一张设计图，上面只有px标注的距离和尺寸。产品看到设计稿后，就拿给iOS和Android的开发，说就按这个做。iOS开发可能还好，虽然也有9种屏幕，但那毕竟是两只手数的来的。但是Android开发可能是心中无数只草泥马奔腾 + 一脸懵逼。。</p><p>其实我们只要把px转换成dp就可以了，两步走：</p><ul><li>第1步：确认设计稿中的屏幕dpi是多少</li><li>第2步：根据dpi，将px值转换成dp值</li></ul><a id="more"></a><h1 id="方法1：不写代码，快速实现"><a href="#方法1：不写代码，快速实现" class="headerlink" title="方法1：不写代码，快速实现"></a>方法1：不写代码，快速实现</h1><p>不管哪种方法，请先记住下面这个dpi范围对照表：</p><ul><li><p>0dpi ~ 120dpi：ldpi</p></li><li><p>120dpi ~ 160dpi：mdpi</p></li><li><p>160dpi ~ 240dpi：hdpi</p></li><li><p>240dpi ~ 320dpi：xhdpi</p></li><li><p>320dpi ~ 480dpi：xxhdpi</p></li><li><p>480dpi ~ 640dpi：xxxhdpi</p></li></ul><h2 id="第1步-确认手机屏幕的DPI"><a href="#第1步-确认手机屏幕的DPI" class="headerlink" title="第1步 - 确认手机屏幕的DPI"></a>第1步 - 确认手机屏幕的DPI</h2><p>写代码不是万能的，假如设计师给的稿子里面用的屏幕，是我们手上没有的呢？或者我们根本不确定它这个设计稿上的屏幕是什么手机呢？？上哪儿去写代码run？</p><p>（1）网上找一下这个手机的屏幕分辨率和尺寸（如果这个手机真实存在的话。。可能有些设计师给的就是iphone的设计稿。。）。或者如果设计师可以给你的话，那就是最好的。</p><p>（2）得到了宽、高像素，用勾股定理计算出对角线的像素值，再除以屏幕尺寸就得到了屏幕的dpi，然后根据上面的表格，即可得到你手机是哪个dpi的了。</p><blockquote><p>tips：其实很多网上列出手机参数的时候，除了<strong>主屏分辨率</strong>，一般也会列出<strong>屏幕像素密度</strong>，但一般都是拿ppi作为单位的。 所以如果设计稿里面是真实存在的机器，一般可以不用自己计算了。</p></blockquote><h2 id="第2步-把PX值转换成DP值"><a href="#第2步-把PX值转换成DP值" class="headerlink" title="第2步 - 把PX值转换成DP值"></a>第2步 - 把PX值转换成DP值</h2><p>直接上利器：<a href="http://labs.rampinteractive.co.uk/android_dp_px_calculator/" target="_blank" rel="external">android_dp_px_calculator</a></p><p><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f70nuqvhiqj30go0dqgnb.jpg" alt="android_dp_px_calculator"></p><p>这个利器是一个开发者已经做好的工具，显然选择一个dpi，然后输入px值，就自动生成dp值了。反之亦可。如果能在开发之前就能搞定px转dp，心里还是比较爽的。</p><blockquote><p>其实可以看到这个工具原理很简单：如果可以确定屏幕的dpi是<strong>xxh-dpi</strong>的，那么也就确定了density = 3，此时<code>dp = px/3</code>，其实是很简单的计算。我们只需要知道<code>density = dpi/160</code>。</p></blockquote><hr><h1 id="方法2：通过写代码自己实现"><a href="#方法2：通过写代码自己实现" class="headerlink" title="方法2：通过写代码自己实现"></a>方法2：通过写代码自己实现</h1><p>还是两步走，不过都要靠写代码run。</p><h2 id="第1步-确认手机屏幕的DPI-1"><a href="#第1步-确认手机屏幕的DPI-1" class="headerlink" title="第1步 - 确认手机屏幕的DPI"></a>第1步 - 确认手机屏幕的DPI</h2><p>找到设计师给的设计稿手机型号，写几行代码，run一下。得到横纵方向的xdpi，ydpi，通常，这两个值应该接近，至少也是在上面列出的同一个dpi范围的。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">//</span> 这两行是从郭神的博客里看到的</div><div class="line">float xdpi = getResources<span class="params">()</span><span class="string">.getDisplayMetrics</span><span class="params">()</span><span class="string">.xdpi</span>;</div><div class="line">float ydpi = getResources<span class="params">()</span><span class="string">.getDisplayMetrics</span><span class="params">()</span><span class="string">.ydpi</span>;</div><div class="line"></div><div class="line"><span class="string">//</span> 后来发现其实有更直接的方法，具体返回值待确认</div><div class="line">float density = getResources<span class="params">()</span><span class="string">.getDisplayMetrics</span><span class="params">()</span><span class="string">.density</span>;</div><div class="line">int densityDpi = getResources<span class="params">()</span><span class="string">.getDisplayMetrics</span><span class="params">()</span><span class="string">.densityDpi</span>;</div></pre></td></tr></table></figure><h2 id="第2步-把PX值转换成DP值-1"><a href="#第2步-把PX值转换成DP值-1" class="headerlink" title="第2步 - 把PX值转换成DP值"></a>第2步 - 把PX值转换成DP值</h2><p>相信很多人都写过这段代码，直接用当前运行中的手机的屏幕密度来转换px和dp。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PxUtils</span> &#123;</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">px2dp</span><span class="params">(Context context, <span class="keyword">float</span> pxValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> scale = context.getResources().getDisplayMetrics().density;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (pxValue / scale + <span class="number">0.5f</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(Context context, <span class="keyword">float</span> dpValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> scale = context.getResources().getDisplayMetrics().density;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (dpValue * scale + <span class="number">0.5f</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">px2sp</span><span class="params">(Context context, <span class="keyword">float</span> pxValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (pxValue / fontScale + <span class="number">0.5f</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sp2px</span><span class="params">(Context context, <span class="keyword">float</span> spValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (spValue * fontScale + <span class="number">0.5f</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h1 id="知识总结"><a href="#知识总结" class="headerlink" title="知识总结"></a>知识总结</h1><p>基础知识不能丢，把一些基本概念记录一下。</p><ul><li>dip：Density independent pixels，设备无关像素。</li><li>dp：等于dip。</li><li>px：物理像素。</li><li>dpi：dots per inch，直译就是每英寸多少个像素。常见取值为<code>120</code>，<code>160</code>，<code>240</code>，<code>320</code>，<code>480</code>，<code>640</code>，，也可以叫像素密度。</li><li>density：屏幕密度，<code>density = dpi / 160px</code>。所以它的常见取值为<code>0.75</code>，<code>1</code>，<code>1.5</code>，<code>2</code>，<code>3</code>，<code>4</code>，对应着Android工程里面的<code>ldpi</code>，<code>mdpi</code>，<code>hdpi</code>，<code>xhdpi</code>，<code>xxhdpi</code>，<code>xxxhdpi</code>。</li><li>分辨率：横纵2个方向的像素点的数量，常见取值<code>1080x1920</code>这样的，表示宽度有1080个像素点，高度有1920个像素点。</li><li>屏幕尺寸：屏幕对角线的长度。</li></ul><p>关于屏幕适配的问题，更多细节参考官网：<a href="https://developer.android.com/guide/practices/screens_support.html" target="_blank" rel="external">https://developer.android.com/guide/practices/screens_support.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有很多朋友在实际的工作中，会遇到设计同事给了一张设计图，上面只有px标注的距离和尺寸。产品看到设计稿后，就拿给iOS和Android的开发，说就按这个做。iOS开发可能还好，虽然也有9种屏幕，但那毕竟是两只手数的来的。但是Android开发可能是心中无数只草泥马奔腾 + 一脸懵逼。。&lt;/p&gt;
&lt;p&gt;其实我们只要把px转换成dp就可以了，两步走：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1步：确认设计稿中的屏幕dpi是多少&lt;/li&gt;
&lt;li&gt;第2步：根据dpi，将px值转换成dp值&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="适配" scheme="http://unclechen.github.io/tags/%E9%80%82%E9%85%8D/"/>
    
      <category term="微技巧" scheme="http://unclechen.github.io/tags/%E5%BE%AE%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Android N App分屏模式完全解析（下）</title>
    <link href="http://unclechen.github.io/2016/03/12/Android%20N%20App%E5%88%86%E5%B1%8F%E6%A8%A1%E5%BC%8F%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90-%E4%B8%8B%E7%AF%87/"/>
    <id>http://unclechen.github.io/2016/03/12/Android N App分屏模式完全解析-下篇/</id>
    <published>2016-03-12T02:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/">上篇</a>中，介绍了什么是App分屏模式，以及如何设置我们的App来进入分屏模式。这次我们看一下，作为开发者，我们应该如何让自己的App进入分屏模式，当App进入分屏模式时，我们注意哪些问题。</p><p>简单地说，我认为除了保证分屏时App功能、性能正常以外，我们需要重点学习 <strong><em>如何在分屏模式下打开新的Activity</em></strong> 以及 <strong><em>如何实现跨App/Activity的拖拽功能</em></strong>。</p><a id="more"></a><h1 id="用分屏模式运行你的App"><a href="#用分屏模式运行你的App" class="headerlink" title="用分屏模式运行你的App"></a>用分屏模式运行你的App</h1><p>Android N中新增了一些方法来支持App的分屏模式。同时在分屏模式下，也禁用了App一些特性。</p><h2 id="分屏模式下被禁用的特性"><a href="#分屏模式下被禁用的特性" class="headerlink" title="分屏模式下被禁用的特性"></a>分屏模式下被禁用的特性</h2><ul><li>自定义<a href="http://developer.android.com/training/system-ui/index.html" target="_blank" rel="external">系统UI</a>，例如分屏模式下无法隐藏系统的状态栏。</li><li>无法根据屏幕方向来旋转App的界面，也就是说<code>android:screenOrientation</code>属性会被系统忽略。</li></ul><h2 id="分屏模式的通知回调、查询App是否处于分屏状态"><a href="#分屏模式的通知回调、查询App是否处于分屏状态" class="headerlink" title="分屏模式的通知回调、查询App是否处于分屏状态"></a>分屏模式的通知回调、查询App是否处于分屏状态</h2><p>最新的<a href="http://developer.android.com/preview/setup-sdk.html#docs-dl" target="_blank" rel="external">Android N SDK</a>中，<code>Activity</code>类中增加了下面的方法。</p><ul><li>inMultiWindow()：返回值为boolean，调用此方法可以知道App是否处于分屏模式。</li><li>inPictureInPicture()：返回值为boolean，调用此方法可以知道App是否处于画中画模式。</li></ul><blockquote><p>注意：<code>画中画模式</code>其实是一个<strong>特殊的</strong><code>分屏模式</code>，如果<code>mActivity.inPictureInPicture()</code>返回<code>true</code>，那么<code>mActivity.inMultiWindow()</code>一定也是返回<code>true</code>。</p></blockquote><ul><li>onMultiWindowChanged(boolean inMultiWindow)：当Activity进入或者退出分屏模式时，系统会回调这个方法来通知开发者。回调的参数<code>inMultiWindow</code>为boolean类型，如果<code>inMultiWindow</code>为true，表示Activity进入分屏模式；如果<code>inMultiWindow</code>为false，表示退出分屏模式。</li><li>onPictureInPictureChanged(boolean inPictureInPicture)：当Activity进入画中画模式时，系统会回调这个方法。回调参数<code>inPictureInPicture</code>为<code>true</code>时，表示进入了画中画模式；<code>inPictureInPicture</code>为<code>false</code>时，表示退出了画中画模式。</li></ul><p><code>Fragment</code>类中，同样增加了以上支持分屏模式的方法，例如<code>Fragment.inMultiWindow()</code>。</p><h2 id="如何进入画中画模式"><a href="#如何进入画中画模式" class="headerlink" title="如何进入画中画模式"></a>如何进入画中画模式</h2><p>调用<code>Activity</code>类的<code>enterPictureInPicture()</code>方法，可以使得我们的App进入画中画模式。如果运行的设备不支持画中画模式，调用这个方法将不会有任何效果。更多画中画模式的资料，请参考<a href="http://developer.android.com/intl/zh-cn/preview/features/picture-in-picture.html" target="_blank" rel="external">picture-in-picture</a>。</p><h2 id="在分屏模式下打开新的Activity"><a href="#在分屏模式下打开新的Activity" class="headerlink" title="在分屏模式下打开新的Activity"></a>在分屏模式下打开新的Activity</h2><p>当你打开一个新的Activity时，只需要给Intent添加<code>Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT</code>，系统将<strong><em>尝试</em></strong>将它设置为与当前的Activity共同以分屏的模式显示在屏幕上。</p><p><strong>注意：</strong>这里只是尝试，但这不一定是100%生效的，前一篇博客里也说过，假如新打开的Activity的<code>android:resizeableActivity</code>属性设置为<code>false</code>，就会禁止分屏浏览这个Activity。所以系统只是尝试去以分屏模式打开一个新的Activity，如果条件不满足，将不会生效！此外，我实际用<code>Android N Preview SDK</code>实践的时候发现这个<code>FLAG</code>实际得值是<code>FLAG_ACTIVITY_LAUNCH_ADJACENT</code>，并非是<code>FLAG_ACTIVITY_LAUNCH_TO_ADJACENT</code>。</p><p>当满足下面的条件，系统会让这两个Activity进入分屏模式：</p><ul><li>当前Activity已经进入到分屏模式。</li><li>新打开的Activity支持分屏浏览（即<strong>android:resizeableActivity=true</strong>）。</li></ul><p>此时，给新打开的Activity，设置<code>intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK);</code>才会有效果。</p><p><img src="/content/images/two-acts.png" alt="two-acts"></p><p>建议参考官方的Sample：<a href="https://github.com/googlesamples/android-MultiWindowPlayground" target="_blank" rel="external">MultiWindow Playground Sample</a></p><p>那么为何还需要添加<code>FLAG_ACTIVITY_NEW_TASK</code>？看一下官方解释：</p><blockquote><p>注意：在同一个Activity返回栈中，打开一个新的Activity时，这个Activity将会继承上一个Activity所有和<code>分屏模式</code>有关的属性。如果你想要在一个独立的窗口以分屏模式打开一个新的Activity，那么必须新建一个Activity返回栈。</p></blockquote><p>此外，如果你的设备支持<code>自由模式</code>（官方名字叫<strong>freeform</strong>，暂且就这么翻译它，其实我认为这算也是一种尺寸更自由的分屏模式，上一篇博客里提到过如果设备厂商支持用户可以自由改变Activity的尺寸，那么就相当于支持<code>自由模式</code>，这将比普通的分屏模式更加自由），打开一个Activity时，还可通过<code>ActivityOptions.setLaunchBounds()</code>来指定新的Activity的尺寸和在屏幕中的位置。同样，这个方法也需要你的Activity已经处于分屏模式时，调用它才会生效。</p><h2 id="支持拖拽"><a href="#支持拖拽" class="headerlink" title="支持拖拽"></a>支持拖拽</h2><p>在<a href="http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/">上一篇</a>博客里也提到过，现在我们可以实现在两个分屏模式的Activity之间拖动内容了。Android N Preview SDK中，<code>View</code>已经增加支持Activity之间拖动的API。具体的类和方法，可以参考<a href="http://developer.android.com/preview/setup-sdk.html#docs-dl" target="_blank" rel="external">N Preview SDK Reference</a>，主要用到下面几个新的接口：</p><ul><li>View.startDragAndDrop()：<a href="http://developer.android.com/intl/zh-cn/reference/android/view/View.html#startDrag(android.content.ClipData,%20android.view.View.DragShadowBuilder,%20java.lang.Object,%20int" target="_blank" rel="external">View.startDrag()</a>) 的替代方法，需要传递<code>View.DRAG_FLAG_GLOBAL</code>来实现跨Activity拖拽。如果需要将URI权限传递给接收方Activity，还可以根据需要设置<code>View.DRAG_FLAG_GLOBAL_URI_READ</code>或者<code>View.DRAG_FLAG_GLOBAL_URI_WRITE</code>。</li><li>View.cancelDragAndDrop()：由拖拽的发起方调用，取消当前进行中的拖拽。</li><li>View.updateDragShadow()：由拖拽的发起方调用，可以给当前进行的拖拽设置阴影。</li><li>android.view.DropPermissions：接收方App所得到的权限列表。</li><li>Activity.requestDropPermissions()：传递URI权限时，需要调用这个方法。传递的内容存储在<a href="http://developer.android.com/reference/android/view/DragEvent.html" target="_blank" rel="external">DragEvent</a>中的<a href="http://developer.android.com/reference/android/content/ClipData.html" target="_blank" rel="external">ClipData</a>里。返回值为前面的<code>android.view.DropPermissions</code>。</li></ul><p>下面是我自己写的一个demo，实现了在分屏模式下，把一个Activity中ImageView中保存的内容到另外一个Activity中进行显示。实际应用中，可以还可以传递图片的url或者Bitmap对象。</p><p><img src="/content/images/drag-drop.png" alt="drag-drop"></p><p>上图是一个最基本的例子，实现了把MainActivity中的图片保存的内容，拖拽到SecondActivity中。实现步骤如下：</p><p>在MainActivity中，发起拖拽。</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.首先我们在分屏模式下，打开自己App中的SecondActivity</span></div><div class="line">findViewById(<span class="keyword">R</span>.id.launch_second_activity).setOnClickListener(<span class="keyword">new</span> <span class="keyword">View</span>.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(<span class="keyword">View</span> <span class="keyword">view</span>) &#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(MainActivity.this, SecondActivity.<span class="keyword">class</span>)<span class="comment">;</span></div><div class="line">                intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT | Intent.FLAG_ACTIVITY_NEW_TASK)<span class="comment">;</span></div><div class="line">                startActivity(intent)<span class="comment">;</span></div><div class="line">            &#125;</div><div class="line">        &#125;)<span class="comment">;</span></div><div class="line">        </div><div class="line"><span class="comment">// 2.然后我们在MainActivity中发出拖拽事件</span></div><div class="line">imageView = (ImageView) findViewById(<span class="keyword">R</span>.id.img)<span class="comment">;</span></div><div class="line">        <span class="comment">/** 拖拽的发送方Activity和ImageView */</span></div><div class="line">        imageView.setTag(<span class="string">"I'm a ImageView from MainActivity"</span>)<span class="comment">;</span></div><div class="line">        imageView.setOnTouchListener(<span class="keyword">new</span> <span class="keyword">View</span>.OnTouchListener() &#123;</div><div class="line"></div><div class="line">            public boolean onTouch(<span class="keyword">View</span> <span class="keyword">view</span>, MotionEvent motionEvent) &#123;</div><div class="line">                <span class="keyword">if</span> (motionEvent.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">                    <span class="comment">/** 构造一个ClipData，将需要传递的数据放在里面 */</span></div><div class="line">                    ClipData.Item item = <span class="keyword">new</span> ClipData.Item((CharSequence) <span class="keyword">view</span>.getTag())<span class="comment">;</span></div><div class="line">                    String[] mimeTypes = &#123;ClipDescription.MIMETYPE_TEXT_PLAIN&#125;<span class="comment">;</span></div><div class="line">                    ClipData dragData = <span class="keyword">new</span> ClipData(<span class="keyword">view</span>.getTag().toString(), mimeTypes, item)<span class="comment">;</span></div><div class="line">                    <span class="keyword">View</span>.DragShadowBuilder shadow = <span class="keyword">new</span> <span class="keyword">View</span>.DragShadowBuilder(imageView)<span class="comment">;</span></div><div class="line">                    <span class="comment">/** startDragAndDrop是Android N SDK中的新方法，替代了以前的startDrag，flag需要设置为DRAG_FLAG_GLOBAL */</span></div><div class="line">                    <span class="keyword">view</span>.startDragAndDrop(dragData, shadow, null, <span class="keyword">View</span>.DRAG_FLAG_GLOBAL)<span class="comment">;</span></div><div class="line">                    <span class="keyword">return</span> true<span class="comment">;</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> false<span class="comment">;</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)<span class="comment">;</span></div></pre></td></tr></table></figure><p>在<code>SecondActivity</code>中，接收这个拖拽的结果，在<code>ACTION_DROP</code>事件中，把结果显示出来。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">dropedText = (TextView) findViewById(R.id.text_drop);</div><div class="line">        dropedText.setOnDragListener(<span class="keyword">new</span> View.OnDragListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="keyword">boolean</span> onDrag(View view, DragEvent dragEvent) &#123;</div><div class="line">                <span class="keyword">switch</span> (dragEvent.getAction()) &#123;</div><div class="line">                    <span class="keyword">case</span> DragEvent.<span class="string">ACTION_DRAG_STARTED:</span></div><div class="line">                        Log.d(TAG, <span class="string">"Action is DragEvent.ACTION_DRAG_STARTED"</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">case</span> DragEvent.<span class="string">ACTION_DRAG_ENTERED:</span></div><div class="line">                        Log.d(TAG, <span class="string">"Action is DragEvent.ACTION_DRAG_ENTERED"</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">case</span> DragEvent.<span class="string">ACTION_DRAG_EXITED:</span></div><div class="line">                        Log.d(TAG, <span class="string">"Action is DragEvent.ACTION_DRAG_EXITED"</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">case</span> DragEvent.<span class="string">ACTION_DRAG_LOCATION:</span></div><div class="line">                        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">case</span> DragEvent.<span class="string">ACTION_DRAG_ENDED:</span></div><div class="line">                        Log.d(TAG, <span class="string">"Action is DragEvent.ACTION_DRAG_ENDED"</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">case</span> DragEvent.<span class="string">ACTION_DROP:</span></div><div class="line">                        Log.d(TAG, <span class="string">"ACTION_DROP event"</span>);</div><div class="line">                        <span class="comment">/** 3.在这里显示接收到的结果 */</span></div><div class="line">                        dropedText.setText(dragEvent.getClipData().getItemAt(<span class="number">0</span>).getText());</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="symbol">                    default:</span></div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>这里实现的关键在新增加的<code>startDragAndDrop</code>方法，看下官方的API文档：</p><p><img src="/content/images/start-drag.png" alt="start-drag"></p><p>清楚地提到了，<code>发出的DragEvent能够被所有可见的View对象接收到</code>，所以在分屏模式下，SecondActivity可以监听View的onDrag事件，于是我们监听它！</p><p>接着，我们看下<code>DragEvent.ACTION_DROP</code>事件发生的条件：</p><p><img src="/content/images/drop-event.png" alt="drop-event"></p><p>当被拖拽的View的阴影进入到接收方View的坐标区域，如果此时用户松手，那么接收方View就可以接收到这个Drop事件。一目了然，我们通过拖拽ImageView到图上的灰色区域，松手，便可以触发<code>DragEvent.ACTION_DROP</code>，把数据传到SecondActivity中了。</p><p>其实还有更复杂的一些情况，需要调用<code>requestDropPermissions</code>，后续我再进一步实践一下。</p><p>这个demo的地址在<a href="https://github.com/unclechen/AndroidN-DragAndDropDemo" target="_blank" rel="external">这里</a>，先分享出来，后面我再接着完善它。</p><h1 id="在分屏模式下测试你的App"><a href="#在分屏模式下测试你的App" class="headerlink" title="在分屏模式下测试你的App"></a>在分屏模式下测试你的App</h1><p>无论你是否将自己的App适配到了Android N，或者是支持分屏模式，都应该找个Android N的设备，来测试一下自己的App在分屏模式下会变成什么样。</p><h2 id="设置你的测试设备"><a href="#设置你的测试设备" class="headerlink" title="设置你的测试设备"></a>设置你的测试设备</h2><p>如果你有一台运行Android N的设备，它是默认支持分屏模式的。</p><h2 id="如果你的App不是用Android-N-Preview-SDK打包的"><a href="#如果你的App不是用Android-N-Preview-SDK打包的" class="headerlink" title="如果你的App不是用Android N Preview SDK打包的"></a>如果你的App不是用Android N Preview SDK打包的</h2><p>如果你的App是用<code>低于Android N Preview SDK</code>打包的，且你的Activity支持<code>横竖屏切换</code>。那么当用户在尝试使用分屏模式时，系统会强制将你的App进入分屏模式。（我在第一篇博客里提到过这个，Android N Preview的介绍视频中，很多Google家的App都可以进入分屏模式，但是打开它们的xml一看，其实<code>targetSDKVersion = 23</code>）</p><p>因此，如果你的App/Activity支持横竖屏切换，那么你应该尝试一下让自己的App分屏，看看当系统强制改变你的App尺寸时，用户是否还可以接受这种体验。如果你的App/Activity不支持横竖屏切换，那么你可以确认一下，看看当尝试进入分屏时，你的App是不是仍然能够保持全屏模式。</p><h2 id="如果你给App设置了支持分屏模式"><a href="#如果你给App设置了支持分屏模式" class="headerlink" title="如果你给App设置了支持分屏模式"></a>如果你给App设置了支持分屏模式</h2><p>如果你使用了<code>Android N Preview SDK</code>来开发自己的App，那么应该按照下面的要点检查一下自己的App。</p><ul><li>启动App，长按系统导航栏右下角的小方块（Google官方把这个叫做<strong>Overview Button</strong>），确保你的App可以进入分屏模式，且尺寸改变后仍然能正常工作。</li><li>启动任务管理器（即单击右下角的小方块），然后长按你App的标题栏，将它拖动到屏幕上的高亮区域。确保你的App可以进入分屏模式，且尺寸改变后仍然能正常工作。</li></ul><p>这两点在<a href="http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/">上一篇博客</a>中介绍过，让自己的App进入分屏模式有三种方法。第三种方法，就是在打开自己的App时，用手指从右下角的小方块向上滑动，这样也可以使得正在浏览的App进入分屏模式。这种方法目前属于实验性功能，正式版不一定保留。</p><ul><li>当你的App进入分屏后，通过拖动两个App中间的分栏上面的小白线，从而改变App的尺寸，观察App中各个UI元素是否正常显示。</li><li>如果你给自己的App/Activity设置了<strong>最小尺寸</strong>，可以尝试在改变App尺寸时，低于这个最小尺寸，观察App是不是会回到设定好的最小尺寸。</li><li>在进行上面几项测试时，请同时验证自己的App功能和性能是否正常，并注意一下自己的App在更新UI时是否花费了太长的时间。</li></ul><p>这几项测试，其实主要强调的是，我们的App可以顺利的进入/退出分屏模式，且改变App的尺寸时，UI依然可以也非常顺滑。</p><p>这里我想多说一句，如果进入了分屏模式，要注意下App弹出的对话框，因为屏幕被两个App分成两块之后，对话框也是可以弹出两个的。这时对话框上的UI元素可能就会变得比较小了，如果我们的代码是写死的大小，例如对话框是一个WebView，就需要特别注意了，搞不好显示出来就缺了一块了，这里需要我们做好适配。</p><h3 id="测试清单"><a href="#测试清单" class="headerlink" title="测试清单"></a>测试清单</h3><p>关于功能、性能方面测试，还可以按照下面的操作来进行。</p><ul><li>让App进入，再退出分屏模式，确保此时App功能正常。</li><li>让App进入分屏模式，激活屏幕上的另外一个App，让自己的App进入<code>可见、paused</code>状态。举了例子来讲，如果你的App是一个视频播放器，那么当用户点击了屏幕上另外一个App时，你的App不应该停止播放视频，即使此时你的Activity/Fragment已经接到了<code>onPaused()</code>回调。</li><li>让App进入分屏模式，拖动分栏上的小白线，改变App的尺寸。请在竖屏（两个App一上一下布局）和横屏（两个App一左一右布局）模式下分别进行改变尺寸的操作。确保App不会崩溃，各项功能正常，且UI的刷新没有花费太多时间。</li><li>在短时间内、多次、迅速地改变App尺寸，确保App没有崩溃，且没有发生内存泄露。关于内存使用方面的更详细注意事项，请参考<a href="http://developer.android.com/tools/debugging/debugging-memory.html" target="_blank" rel="external">Investigating Your RAM Usage</a>。</li><li>在不同的窗口设置的情况下，正常使用App，确保App功能正常，文字仍然可读，其他的UI元素也没有变得太小，用户仍然可以舒适地操作App。</li></ul><p>这几项测试，其实主要是说当App在分屏模式下运行时，仍然可以保持性能的稳定，不会Crash也不会OOM。</p><h2 id="如果你给App设置了禁止分屏模式"><a href="#如果你给App设置了禁止分屏模式" class="headerlink" title="如果你给App设置了禁止分屏模式"></a>如果你给App设置了禁止分屏模式</h2><p>如果你给App/Activity设置了<code>android:resizableActivity=&quot;false&quot;</code>，你应该试试当用户在Android N的设备上，尝试分屏浏览你的App时，它是否仍然能保持全屏模式。</p><p>以上就是参考Google最新的<a href="http://developer.android.com/intl/zh-cn/preview/features/multi-window.html" target="_blank" rel="external">multi-window</a>进行的实践，总结下，我认为有3点比较重要：</p><ol><li>如何让自己的App/Activity顺利的进入和退出分屏模式，可以参考<a href="http://developer.android.com/intl/zh-cn/guide/topics/resources/runtime-changes.html" target="_blank" rel="external">处理运行时改变</a>这一章。</li><li>如何在分屏模式下打开新的Activity，可以参考Google官方的<a href="https://github.com/googlesamples/android-MultiWindowPlayground" target="_blank" rel="external">MultiWindow Playground Sample</a>。</li><li>如何实现跨App/Activity的拖拽功能，可以参考<a href="http://developer.android.com/intl/zh-cn/guide/topics/ui/drag-drop.html" target="_blank" rel="external">Drag and Drop</a>这一章。</li></ol><p>关于App分屏模式的学习就到这里了，欢迎大家一起交流。我们还发挥更多的想象力，比如是否可以利用跨应用拖拽实现更方便操作，更好的用户体验。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-上篇/&quot;&gt;上篇&lt;/a&gt;中，介绍了什么是App分屏模式，以及如何设置我们的App来进入分屏模式。这次我们看一下，作为开发者，我们应该如何让自己的App进入分屏模式，当App进入分屏模式时，我们注意哪些问题。&lt;/p&gt;
&lt;p&gt;简单地说，我认为除了保证分屏时App功能、性能正常以外，我们需要重点学习 &lt;strong&gt;&lt;em&gt;如何在分屏模式下打开新的Activity&lt;/em&gt;&lt;/strong&gt; 以及 &lt;strong&gt;&lt;em&gt;如何实现跨App/Activity的拖拽功能&lt;/em&gt;&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android7.x" scheme="http://unclechen.github.io/tags/Android7-x/"/>
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="适配" scheme="http://unclechen.github.io/tags/%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android N App分屏模式完全解析（上）</title>
    <link href="http://unclechen.github.io/2016/03/12/Android%20N%20App%E5%88%86%E5%B1%8F%E6%A8%A1%E5%BC%8F%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90-%E4%B8%8A%E7%AF%87/"/>
    <id>http://unclechen.github.io/2016/03/12/Android N App分屏模式完全解析-上篇/</id>
    <published>2016-03-11T16:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>上手了Android N Preview，第一个不能错过的新特性就是App分屏的支持。Android7.0原生系统就可以支持两个App横屏并排或者竖屏上下摆放了。第二个新特性就是在Android TV上，原生系统也可以支持App实现画中画，用户可以一边看视频一边操作其他的应用。</p><p>其实早先在国内部分厂商以及鹅厂的微信App就已经支持在大尺寸手机上进行分屏浏览。也有一些视频播放器，如MoboPlayer就已经实现了按下Home键回到首页时以迷你播放器的形式进行播放。这种体验非常棒，我猜测一般是通过WindowManager来添加悬浮播放器界面的。但是这次是原生系统增加了对这种特性的支持，相信我们会有更多理由为用户的体验做出更多新的尝试。</p><p>下面介绍一下我参考<a href="http://developer.android.com/intl/zh-cn/preview/features/multi-window.html#running" target="_blank" rel="external">multi-window-support</a>对App分屏模式进行的实践。</p><p>首先引用一下官方的说法：</p><blockquote><p>如果你使用Android N Preview SDK来构建你的App，你可以给添加App一些分屏浏览的配置。例如设置Activity的最小尺寸，也可以禁止自己的App进入分屏模式，保证你的App只能在全屏模式下展示。</p></blockquote><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Android N允许用户一次在屏幕中使用两个App，例如将屏幕一分为二，左边浏览网页，右边查看邮件。具体的体验取决于你的设备。</p><ul><li>手持设备中，用户可以左右并排/上下摆放两个App来使用。用户还可以左右/上下拖拽中间的那个小白线来改变两个App的尺寸。</li></ul><p><img src="/content/images/split-screen.png" alt="split-screen"></p><ul><li><p>在运行Android N的Nexus Player上，App可以实现画中画模式，允许用户使用一个App浏览内容的同时，在另一个App上操作。</p></li><li><p>大尺寸设备的厂商甚至可以实现自由模式，这样就可以使得用户可以完全自由地改变界面的尺寸。这又是与分屏更为不同一种体验。</p></li></ul><p>用户是如何操作来进入分屏模式的呢：</p><ol><li>点击右下角的方块，进入任务管理器，长按一个App的标题栏，将其拖入屏幕的高亮区域，这个App金进入了分屏模式。然后在任务管理器中选择另一个App，单击它使得这个App也进入分屏模式。</li><li>打开一个App，然后长按右下角的方块，此时已经打开的这个App将进入分屏模式。然后在屏幕上的任务管理器中选择另外一个App，单击它使得这个App也进入分屏模式。</li><li>最新发现：下拉通知栏，长按右上角的设置图标，将开启隐藏设置功能<code>“系统界面调谐器”</code>，进入设置界面，最下方有系统界面调谐器选项，进入后选择<code>“Other”-&gt;“启用分屏上滑手势”</code>，就可以从任务管理器上上滑进入分屏模式了。具体操作是<code>当一个App已经处于全屏模式时，用手指从右下角的小方块向上滑动</code>。这个设置将来在正式版可能有变化，所以还是不要太依赖。</li></ol><p>用户还可以在这两个App之间拖动数据，例如将一个App的Activity上的文件拖动到另外一个App的Activity中去。具体的实现下面会介绍，谷歌官方也有<a href="http://developer.android.com/intl/zh-cn/guide/topics/ui/drag-drop.html" target="_blank" rel="external">拖拽相关的教程</a>。</p><h1 id="分屏模式的生命周期"><a href="#分屏模式的生命周期" class="headerlink" title="分屏模式的生命周期"></a>分屏模式的生命周期</h1><p>首先要说明的一点是，分屏模式没有改变Activity的生命周期。</p><p>官方说法是：</p><blockquote><p>在分屏模式下，用户最近操作、激活过的Activity将被系统视为<code>topmost</code>。而其他的Activity都属于<code>paused</code>状态，即使它是一个对用户可见的Activity。但是这些可见的处于<code>paused</code>状态的Activity将比那些不可见的处于<code>paused</code>状态的Activity得到更高优先级的响应。当用户在一个可见的<code>paused</code>状态的Activity上操作时，它将得到恢复<code>resumed</code>状态，并被系统视为<code>topmost</code>。而之前那个那个处于<code>topmpst</code>的Activity将变成<code>paused</code>状态。</p></blockquote><p>怎么理解这段话，看下图：</p><p><img src="/content/images/two-apps.png" alt="two-app"></p><p>其实就是说处于分屏模式下的两个Ap各自处于生命周期的什么状态。上图中我打开了两个App，上面的是一个Gmail App，下面这个是一个Demo App（<a href="https://github.com/jaredrummler/APKParser" target="_blank" rel="external">ApkParser</a>先感谢作者的分享~）是个开源应用，能够解析Apk，后面会用到它）。现在这两个App都是进入了<code>分屏模式</code>，我们还可以拖动中间这条白线来调整两个App占用的大小。</p><p>我点击了Gmail，浏览了一封邮件，那么此时<strong>Gmail</strong>就被系统视为<code>topmost</code>状态，它是处于<code>resumed</code>状态的，而下面的<strong>ApkPaserDemo</strong>虽然对用户可见，但是<strong>它仍然是处于<code>paused</code>状态</strong>的。接着我点击了系统的<code>back</code>按钮返回，响应的是上面的<strong>Gmail</strong>（因为它被视为topmost）。然后我又点击了下面的<strong>ApkParserDemo</strong>，这时它从<code>paused</code>状态变成了<code>resumed</code>状态。而上面的<strong>Gmail</strong>进入了 <code>paused</code>状态。</p><p>注意，这两个App对于用户都是<strong>始终可见</strong>的，当它们处于<code>paused</code>状态时，也将比那些后台的处于<strong>不可见的</strong>App得到更高系统优先级。这个优先级怎么体现呢？两个App进入分屏模式后，一定有一个处于resume/topmost状态，假如我一直按<code>back</code>返回，当这个topmost状态App的task返回栈已经为空时，那么系统将把另外一个可见的App恢复为全屏模式，这就是我的理解。</p><p>那么这种<code>可见的pause</code>的状态将带来什么影响呢？引用下官方说法是：</p><blockquote><p>在分屏模式中，一个App可以在对用户可见的状态下进入<code>paused</code>状态，所以你的App在处理业务时，应该知道自己什么时候应该真正的<code>暂停</code>。例如一个视频播放器，如果进入了分屏模式，就不应该在<code>onPaused()</code>回调中暂停视频播放，而应该在<code>onStop()</code>回调中才暂停视频，然后在<code>onStart</code>回调中恢复视频播放。关于如果知道自己进入了分屏模式，在<code>Android N</code>的Activity类中，增加了一个<code>void onMultiWindowChanged(boolean inMultiWindow)</code>回调，所以我们可以在这个回调知道App是不是进入了分屏模式。</p></blockquote><p>当App进入分屏模式后，将会触发Activity的<code>onConfigurationChanged()</code>，这与以前我们在处理App从<code>横竖屏切换</code>时的方法一样，不同于的是这里是宽/高有所改变，而<code>横竖屏切换</code>是宽高互换。至于如何处理，可以参考官方文档<a href="http://developer.android.com/intl/zh-cn/guide/topics/resources/runtime-changes.html" target="_blank" rel="external">处理运行时变更</a>。我们最好处理好这种运行时状态的改变，否则我们的Activity将被重新创建，即以新的宽高尺寸重新<code>onCreate()</code>一遍。</p><p>注意，如果用户重新调整窗口的大小，系统在<strong>必要的时候</strong>也可能触发<code>onConfigurationChanged()</code>。当App的窗口被用户拖动，其尺寸改变后界面的还没有绘制完成时，系统将用App主题中的<code>windowBackground</code>属性指定的背景来暂时填充这些区域。</p><h1 id="如何设置App的分屏模式"><a href="#如何设置App的分屏模式" class="headerlink" title="如何设置App的分屏模式"></a>如何设置App的分屏模式</h1><p>说了一堆分屏的操作方法、生命周期，那么作为开发者，怎样才能让App进入<code>分屏</code>模式呢？有下面这几个属性。</p><h2 id="android-resizeableActivity"><a href="#android-resizeableActivity" class="headerlink" title="android:resizeableActivity"></a>android:resizeableActivity</h2><p>如果你适配到了<code>Android N</code>，即<code>build.gradle</code>是这样的：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="section">android</span> &#123;</div><div class="line">    <span class="attribute">compileSdkVersion</span> <span class="string">'android-N'</span></div><div class="line">    buildToolsVersion <span class="string">'24.0.0 rc1'</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        <span class="attribute">applicationId</span> <span class="string">"com.example.noughtchen.andndemo"</span></div><div class="line">        minSdkVersion <span class="string">'N'</span></div><div class="line">        targetSdkVersion <span class="string">'N'</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>那么直接在<code>AndroidManifest.xml</code>中的<code>&lt;application&gt;</code>或者<code>&lt;activity&gt;</code>标签下设置新的属性<code>android:resizeableActivity=&quot;true&quot;</code>。</p><p>设置了这个属性后，你的App/Activity就可以进入<code>分屏模式</code>或者<code>自由模式</code>了。</p><p>如果这个属性被设为<code>false</code>，那么你的App将无法进入分屏模式，如果你在打开这个App时，长按右下角的小方块，App将仍然处于全屏模式，系统会弹出Toast提示你无法进入分屏模式。这个属性在你<strong>target</strong>到<code>Android N</code>后，<code>android:resizeableActivity</code>的默认值就是<code>true</code>。</p><blockquote><p>注意：假如你<strong>没有适配到Android N</strong>（<code>targetSDKVersion &lt; Android N</code>），打包App时的<code>compileSDKVersion &lt; Android N</code>，你的App也是可以支持分屏的！！！！原因在于：如果你的App<strong>没有</strong> 设置 <strong><code>仅允许Activity竖屏/横屏</code></strong>，即没有设置类型<strong><code>android:screenOrientation=&quot;XXX&quot;</code>属性</strong>时，运行Android N系统的设备还是 <strong>可以</strong> 将你的App <strong>分屏！！</strong> 但是这时候系统是不保证运行时的稳定性的，在进入分屏模式时，系统首先也会弹出Toast来提示你说明这个风险。</p></blockquote><p>所以其实我们在视频里看到那么多系统自带的App都是可以分屏浏览，原因就在于此。<strong>这些App其实也并没有全部适配到Android N</strong>。我不是骗你，不信你用<code>ApkParser</code>打开前面分屏过Gmail App的xml文件看看！</p><p><img src="/content/images/gmail-xml.png" alt="Gmail-xml"></p><h2 id="android-supportsPictureInPicture"><a href="#android-supportsPictureInPicture" class="headerlink" title="android:supportsPictureInPicture"></a>android:supportsPictureInPicture</h2><p>这里不多说，Activity标签下，添加<code>android:supportsPictureInPicture=&quot;true&quot;</code>即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:resizeableActivity</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:supportsPictureInPicture</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.NoActionBar"</span>&gt;</span></div><div class="line">            ...</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="Layout-attributes"><a href="#Layout-attributes" class="headerlink" title="Layout attributes"></a>Layout attributes</h2><p>在Android N中，我们可以向<code>manifest</code>文件中添加<code>layout</code>节点，并设置一些新增加的属性，通过这些属性来设置分屏模式的一些行为，如最小尺寸等。</p><ul><li>android:defaultWidth</li><li>android:defaultHeight</li><li>android:gravity</li><li>android:minimalSize</li></ul><p>我们可以给一个<code>Activity</code>增加一个<code>layout</code>子节点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:resizeableActivity</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:supportsPictureInPicture</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.NoActionBar"</span>&gt;</span></div><div class="line">            ...</div><div class="line">            <span class="tag">&lt;<span class="name">layout</span> <span class="attr">android:defaultHeight</span>=<span class="string">"500dp"</span></span></div><div class="line"><span class="tag">                    <span class="attr">android:defaultWidth</span>=<span class="string">"600dp"</span></span></div><div class="line"><span class="tag">                    <span class="attr">android:gravity</span>=<span class="string">"top|end"</span></span></div><div class="line"><span class="tag">                    <span class="attr">android:minimalSize</span>=<span class="string">"450dp"</span> /&gt;</span></div><div class="line">            ...</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure><p>下一篇<a href="http://unclechen.github.io/2016/03/12/Android-N-App分屏模式完全解析-下篇/">Android N App分屏模式完全解析（下）</a>将介绍一下分屏模式下运行的App将有哪些行为回调以及应该怎么处理等。</p><hr><p>ps：封面图片来自于谷歌官网</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上手了Android N Preview，第一个不能错过的新特性就是App分屏的支持。Android7.0原生系统就可以支持两个App横屏并排或者竖屏上下摆放了。第二个新特性就是在Android TV上，原生系统也可以支持App实现画中画，用户可以一边看视频一边操作其他的应用。&lt;/p&gt;
&lt;p&gt;其实早先在国内部分厂商以及鹅厂的微信App就已经支持在大尺寸手机上进行分屏浏览。也有一些视频播放器，如MoboPlayer就已经实现了按下Home键回到首页时以迷你播放器的形式进行播放。这种体验非常棒，我猜测一般是通过WindowManager来添加悬浮播放器界面的。但是这次是原生系统增加了对这种特性的支持，相信我们会有更多理由为用户的体验做出更多新的尝试。&lt;/p&gt;
&lt;p&gt;下面介绍一下我参考&lt;a href=&quot;http://developer.android.com/intl/zh-cn/preview/features/multi-window.html#running&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;multi-window-support&lt;/a&gt;对App分屏模式进行的实践。&lt;/p&gt;
&lt;p&gt;首先引用一下官方的说法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你使用Android N Preview SDK来构建你的App，你可以给添加App一些分屏浏览的配置。例如设置Activity的最小尺寸，也可以禁止自己的App进入分屏模式，保证你的App只能在全屏模式下展示。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android7.x" scheme="http://unclechen.github.io/tags/Android7-x/"/>
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="适配" scheme="http://unclechen.github.io/tags/%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android N安装方法及上手体验</title>
    <link href="http://unclechen.github.io/2016/03/10/Android%20N%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95%E5%8F%8A%E4%B8%8A%E6%89%8B%E4%BD%93%E9%AA%8C/"/>
    <id>http://unclechen.github.io/2016/03/10/Android N安装方法及上手体验/</id>
    <published>2016-03-10T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天早上一睁眼，手机上就收到几条Android N的新闻，瞅了一眼发现手里的Nexus6可以安装beta版，于是迫不及待的开始看怎么安装了。直接看<a href="http://developer.android.com/intl/zh-cn/preview/download.html#device-preview" target="_blank" rel="external">官网</a>，一共三种安装方式：</p><ul><li>在真机上直接安装，通过OTA的方式升级</li><li>在真机上用Android N的系统镜像安装</li><li>使用模拟器</li></ul><h1 id="1-真机安装"><a href="#1-真机安装" class="headerlink" title="1.真机安装"></a>1.真机安装</h1><p>简单方便，<a href="https://www.google.com/android/beta?pli=1" target="_blank" rel="external">Android Beta Program</a>官网注册你的设备，然后。我是把手机插在电脑上的，登录我的Google账号以后，就检测出我的设备了，然后再点击下图中的<code>ENROLL DEVICE</code>（由于我已经点击过了，所以现在显示的是<code>UNENROLL DEVICE</code>），手机秒秒地就收到官方的推送！爽就一个字，点击进入下载，850.6M。</p><p><img src="/content/images/enroll-device.png" alt="enroll-device"></p><p>下载完成后直接重启安装，大概需要5分钟。然后我手机上哪些应用喜欢自己后台一顿乱跑的就全部暴露出来了，可能是因为适配的原因很多应用都开始各种崩溃。首先是猎豹清理大师，接着是虾米音乐啊，淘宝啊，这些的，甚至有的SDK都开始不停地弹出对话框和Toast，“阿里百川XXXX”，真的是要哭了，我连关闭弹窗时间都来不及啊。。。。</p><a id="more"></a><h1 id="2-下载系统镜像，线刷"><a href="#2-下载系统镜像，线刷" class="headerlink" title="2.下载系统镜像，线刷"></a>2.下载系统镜像，线刷</h1><p>其实我觉得有设备的同学，通过OTA是最好的。但是如果你没有翻墙的梯子，那可能就只能线刷了。下载地址在<a href="http://developer.android.com/intl/zh-cn/preview/download.html#device-preview" target="_blank" rel="external">这里</a>。如果有好心搬运到墙内，大家才可以下载。。</p><p>支持的机型为：</p><p><img src="/content/images/android-n-devices.png" alt="android-n-devices"></p><p>下面开始刷机，官方的步骤在这里<a href="https://developers.google.com/android/nexus/images#instructions" target="_blank" rel="external">Factory Images for Nexus Devices</a>。</p><h2 id="2-1首先下载最新的Fastboot工具"><a href="#2-1首先下载最新的Fastboot工具" class="headerlink" title="2.1首先下载最新的Fastboot工具"></a>2.1首先下载最新的<code>Fastboot</code>工具</h2><p><strong>获取途径有两种：</strong></p><ul><li>编译好的<a href="https://source.android.com/" target="_blank" rel="external">Android Open Source Project</a></li><li>Android SDK下面的<code>platform-tools/</code>目录，记得打开你的<code>SDK Manager</code>下载最新的Android SDK Platform-tools，具体版本可以看看<strong>模拟器</strong>部分。</li></ul><p>下载好了<code>Fastboot</code>工具以后，把它添加到系统的环境变量，这样下面我们要用的<code>flash-all</code>脚本才能在命令行中找到它。例如我的<code>fastboot</code>在<code>/Users/noughtchen/Library/Android/sdk/platform-tools/fastboot</code>下。</p><blockquote><p>注意：刷机会删除掉手机上已有的所有用户数据，请备份好自己个人数据如手机上的照片。</p></blockquote><p><strong>由于需要unlock bootloader来刷机，请先确保<code>开发者选项</code>中的<code>OEM unlocking</code>是选中状态。</strong></p><h2 id="2-2下面正式进入刷机"><a href="#2-2下面正式进入刷机" class="headerlink" title="2.2下面正式进入刷机"></a>2.2下面正式进入刷机</h2><ul><li>1.下载合适的系统镜像，下载列表在<a href="http://developer.android.com/intl/zh-cn/preview/download.html#device-preview" target="_blank" rel="external">这里</a>。然后解压到你的硬盘上。</li><li>2.使用USB把手机连接到电脑上。</li><li><p>3.以<code>fastboot</code>模式启动你的手机的bootloader，有两种方式：</p><ul><li>adb工具: 保持手机开机，命令行中执行：<code>adb reboot bootloader</code></li><li>使用手机的组合键：关机，然后使用同时按下<code>音量-</code>、<code>音量+</code>和<code>电源键</code>（<strong>这是nexus5的组合键，其他机器请自行确认是哪几个组合</strong>），来启动你的手机。</li></ul></li><li><p>4.使用命令行unlock手机的<code>bootloader</code>，<code>fastboot flashing unlock</code>（如果是旧设备，则命令行为<code>fastboot oem unlock</code>，<strong>具体是哪个命令，请根据自己的手机搜索一下吧</strong>），此时，你的设备应该会弹出一个确认提示框，提示说会删除所有的数据。</p></li><li>5.打开一个终端，使用命令行进入到你最开始解压的镜像目录。</li><li>6.执行<strong><code>flash-all</code></strong>脚本，开始安装镜像。</li></ul><p>当这个脚本执行完成后，你的设备会重启。为了安全起见，你需要lock住bootloader，这分两步：</p><ul><li>1.重新以<code>fastboot</code>启动你的设备，参考上面的第3步。</li><li>2.执行<code>fastboot flashing lock</code>（如果是旧设备，则命令行为<code>fastboot oem lock</code>，<strong>这里和上面的unlock是刚好相反的，请自己根据手机输入对应的命令</strong>）。</li></ul><p>在一些设备上，Lock bootloader也会删除数据。如果你想要再次刷机，那么就得按照上面的步骤重新再fastboot启动设备，然后unlock bootloader。 </p><p><strong>刷机有风险，操作需谨慎!!!</strong>建议动手能力比较强的同学可以试试，我也只是把官网的步骤翻译解释了一下，手机变砖了不要来找我。。。</p><h1 id="3-模拟器"><a href="#3-模拟器" class="headerlink" title="3.模拟器"></a>3.模拟器</h1><p>这个简单，低成本，无风险。。其实我觉得没有设备的同学，通过这个也是可以体验一下。</p><p>操作之前，你需要下载最新的<code>Android N Preview SDK</code>，并新建一个虚拟机。</p><ul><li><p>1.安装最新的SDK和build-tools，这里我就不说了。安装完成后，需要有<code>Android SDK Built-Tools 24.0 0 rc1</code>和<code>Platform-Tools 24.0.0 rc1</code>和<code>SDK Tools 25.0.9</code>（如果你不安装SDK Tools25.0.9，就无法运行Android N的x86_64的系统镜像）。</p></li><li><p>2.新建一个虚拟机。在Android Studio中打开<code>Tool-Android-AVD Manager</code>，点击<code>Create Virtual Device</code>，选择一个设备（建议选择Nexus 5X, Nexus 6P, Nexus 9其中一个）。然后选择下一步，需要注意一点的是，虚拟机只支持x86的Android N系统镜像。好了，你可以一直点击下一步知道这个新的虚拟机创建完成，然后启动它吧。为了获得最佳的体验，建议安装<code>Android Studio 2.1 Preview</code>，因为Android Studio2.0开始，虚拟机的速度得到了几十倍的提升。</p></li></ul><blockquote><p>注意: 如果你现在使用的是Android Studio 2.0 Beta, 它有个已知的bug，是无法用Android N Preview的镜像来创建虚拟机的, 所以你需要安装Android Studio 2.1 preview 来新建虚拟机。</p><p>For more information about creating virtual devices, see <a href="http://developer.android.com/tools/devices/index.html" target="_blank" rel="external">Managing Virtual Devices</a>.</p></blockquote><h1 id="4-上手体验"><a href="#4-上手体验" class="headerlink" title="4.上手体验"></a>4.上手体验</h1><p>不说别的，今天发现一个一个特别好的Android网站<a href="http://www.droid-life.com" target="_blank" rel="external">DROIDLIFE</a>，推荐给大家，这里面有Android相关的新闻视频等等，非常的棒。今天他们已经出了一个视频，介绍了Android 7.0的新特性了，例如设置菜单、通知栏、分屏等等，iOS去年就出了画中画特性，但是只能在iPad上用，Android 7.0在手机上也支持应用分屏的哟，赶紧体验一下吧。<a href="http://www.droid-life.com/2016/03/09/heres-everything-new-in-android-n-developer-preview/" target="_blank" rel="external">heres-everything-new-in-android-n-developer-preview</a>，最后奉上一张我自己体验的效果图。</p><p><img src="/content/images/first-experience.png" alt="first-experience"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天早上一睁眼，手机上就收到几条Android N的新闻，瞅了一眼发现手里的Nexus6可以安装beta版，于是迫不及待的开始看怎么安装了。直接看&lt;a href=&quot;http://developer.android.com/intl/zh-cn/preview/download.html#device-preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;，一共三种安装方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在真机上直接安装，通过OTA的方式升级&lt;/li&gt;
&lt;li&gt;在真机上用Android N的系统镜像安装&lt;/li&gt;
&lt;li&gt;使用模拟器&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;1-真机安装&quot;&gt;&lt;a href=&quot;#1-真机安装&quot; class=&quot;headerlink&quot; title=&quot;1.真机安装&quot;&gt;&lt;/a&gt;1.真机安装&lt;/h1&gt;&lt;p&gt;简单方便，&lt;a href=&quot;https://www.google.com/android/beta?pli=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Beta Program&lt;/a&gt;官网注册你的设备，然后。我是把手机插在电脑上的，登录我的Google账号以后，就检测出我的设备了，然后再点击下图中的&lt;code&gt;ENROLL DEVICE&lt;/code&gt;（由于我已经点击过了，所以现在显示的是&lt;code&gt;UNENROLL DEVICE&lt;/code&gt;），手机秒秒地就收到官方的推送！爽就一个字，点击进入下载，850.6M。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/content/images/enroll-device.png&quot; alt=&quot;enroll-device&quot;&gt;&lt;/p&gt;
&lt;p&gt;下载完成后直接重启安装，大概需要5分钟。然后我手机上哪些应用喜欢自己后台一顿乱跑的就全部暴露出来了，可能是因为适配的原因很多应用都开始各种崩溃。首先是猎豹清理大师，接着是虾米音乐啊，淘宝啊，这些的，甚至有的SDK都开始不停地弹出对话框和Toast，“阿里百川XXXX”，真的是要哭了，我连关闭弹窗时间都来不及啊。。。。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android7.x" scheme="http://unclechen.github.io/tags/Android7-x/"/>
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="适配" scheme="http://unclechen.github.io/tags/%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android6.0权限适配之WRITE_EXTERNAL_STORAGE（SD卡写入）</title>
    <link href="http://unclechen.github.io/2016/03/06/Android6.0%E6%9D%83%E9%99%90%E9%80%82%E9%85%8D%E4%B9%8BSD%E5%8D%A1%E5%86%99%E5%85%A5/"/>
    <id>http://unclechen.github.io/2016/03/06/Android6.0权限适配之SD卡写入/</id>
    <published>2016-03-06T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>前一篇博客中介绍了<a href="http://unclechen.github.io/2016/03/05/Android6.0运行时权限简介/">Android6.0运行时权限简介</a>，最近遇到这么一个情况，就是一个App以前都是在SD卡根目录直接新建了一个<code>XXX/image/</code>目录，来保存图片缓存的，但是如果适配到Android6.0，我们就需要弹出对话框给用户，来申请<code>WRITE_EXTERNAL_STORAGE</code>权限，如果仅仅是缓存图片为了提高加载速度，对于一个小白用户来讲，好像并不是什么值得让他授权的理由。。。</p><p>下面记录一下我是怎么处理的，其实这次处理也不能叫做Android6.0权限适配了，不过对于<code>WRITE_EXTERNAL_STORAGE</code>这个权限而言，的确有一些需要注意的地方（坑）使我们以前没有关心的。</p><p>首先，App在手机上保存文件或者缓存数据时，我认为应该遵守以下几点：</p><ul><li>1.不要随意占用用户的内置存储。</li><li>2.不要随意在SD卡上新建目录，应该放置自己应用包名对应的扩展存储目录下，卸载App时可以被自动清除。</li><li>3.对占用的磁盘空间有上限，并按照一定的策略进行清除。</li></ul><a id="more"></a><h1 id="Android下有哪些文件目录"><a href="#Android下有哪些文件目录" class="headerlink" title="Android下有哪些文件目录"></a>Android下有哪些文件目录</h1><p>在Android系统中，根据调用的系统API接口，有3种目录可以给我们写入文件：</p><ul><li><p>1.<strong>应用</strong>私有存储（内置存储）</p><ul><li>获取方式：<ul><li><code>Context.getFileDir()</code>：获取内置存储下的文件目录，可以用来保存不能公开给其他应用的一些敏感数据如用户个人信息</li><li><code>Context.getCacheDir()</code>：获取内置存储下的缓存目录，可以用来保存一些缓存文件如图片，当内置存储的空间不足时将系统自动被清除（然而具体多大，清除时的策略我也没查到。。）</li></ul></li><li>绝对路径：<ul><li><code>Context.getFileDir()</code>：<code>/data/data/应用包名/files/</code></li><li><code>Context.getCacheDir()</code>：<code>/data/data/应用包名/cache/</code></li></ul></li><li><p>写权限：不需要申请</p><p>这是手机的内置存储，没有root的过的手机是无法用文件管理器之类的工具查看的。而且这些数据也会随着用户卸载App而被一起删除。这两个目录其实就对应着<code>设置-&gt;应用-&gt;你的App-&gt;存储空间</code>下面的<code>清除数据</code>和<code>清楚缓存</code>，如下图所示。</p><p><img src="/content/images/app-storage.png" alt="app-存储空间"></p></li></ul></li><li><p>2.<strong>应用</strong>扩展存储（SD卡）</p><ul><li>获取方式：<ul><li><code>Context.getExternalFilesDir()</code>：<code>获取SD卡上的文件目录</code></li><li><code>Context.getExternalCacheDir()</code>：<code>获取SD卡上的缓存目录</code></li></ul></li><li>绝对路径：<ul><li><code>Context.getExternalFilesDir()</code>：<code>SDCard/Android/data/应用包名/files/</code><ul><li><code>Context.getExternalCacheDir()</code>：<code>SDCard/Android/data/应用包名/cache/</code></li></ul></li></ul></li><li><p>写权限：</p><ul><li>API &lt; 19：需要申请</li><li>API &gt;= 19：不需要申请</li></ul><p>既然是SD卡上的目录，那么是可以被其他的应用读取到的，所以这个目录下，不应该存放用户的敏感信息。同上面一样的，这里的文件会随着App卸载而被删除，也可以由用户手动在设置界面里面清除。    </p></li></ul></li><li><p>3.公共存储（SD卡）</p><ul><li>获取方式：<code>Environment.getExternalStorageDirectory()</code></li><li>绝对路径：<code>SDCard/你设置的文件夹名字/</code></li><li><p>写权限：需要申请</p><p>如果我们的App需要存储一些公共的文件，甚至希望下载下来的文件即使在我们的App被删除之后，还可以被其他App使用，那么就可以使用这个目录。这个目录是始终需要申请SD写入权限的。</p></li></ul></li></ul><h1 id="Android6-0下应该把文件放到哪里？"><a href="#Android6-0下应该把文件放到哪里？" class="headerlink" title="Android6.0下应该把文件放到哪里？"></a>Android6.0下应该把文件放到哪里？</h1><p>有了前一节的介绍，其实很清楚了，根据最开始提到的规则，其实如果仅仅是做了简单的图片缓存工作，那么我们应该把图片缓存放到<code>/data/data/应用包名/cache/</code>或者<code>SDCard/Android/data/应用包名/cache/</code>，因为在6.0系统（<code>API &gt; 23</code>）时，不需要申请权限就可以向这两个目录写入文件。而且<code>/data/data/应用包名/cache/</code>目录，是内置存储的应用私有缓存目录，在系统空间不够时还会被自动清除，对于图片缓存来讲也是一个不错的管理策略，不过谷歌建议我们最好还是自己实现缓存清除管理，例如用<code>DiskLruCache</code>。</p><p>实际上我们可以在<code>API &gt;= 19（不一定非要大于23）</code>时，就可以在不需要申请权限的情况下把文件放到这两个目录了。如果开发的时候足够规范，即使在<code>API &lt; 19</code>时，我们申请到写入权限后，我们也应该手动创建和前面相同的目录，使得应用存储数据目录统一化。</p><h1 id="Last，最后还有个坑！"><a href="#Last，最后还有个坑！" class="headerlink" title="Last，最后还有个坑！"></a>Last，最后还有个坑！</h1><p>好了，是不是现在不用SD卡上创建的目录<code>XXX/image/</code>，直接改为改为<code>SDCard/Android/data/应用包名/cache/image/</code>就OK了？还真不完全是这样的。。。</p><p><strong>？？？纳尼？？？？</strong></p><p>通常我们开发App时会设置<code>targetSDKVersion=23</code>时，并同时<strong>向前兼容</strong>，还会设置<code>minSdkVersion=14</code>表示支持的最低系统版本是Android4.0(<code>API = 14</code>)。也就是说我们的<code>build.gradle</code>一般长这样：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion 23</div><div class="line">    buildToolsVersion <span class="string">"23.0.2"</span></div><div class="line">    <span class="string">...</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"xxx.xxx"</span></div><div class="line">        minSdkVersion 14</div><div class="line">        targetSdkVersion 23</div><div class="line">        <span class="keyword">version</span>Code 1</div><div class="line">        <span class="keyword">version</span>Name <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    <span class="string">...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是前面我们说过，通过<code>Context.getExternalCacheDir()</code>接口获取应用扩展存储目录时，只有在<code>API &gt;= 19</code>时才不需要申请权限。也就是说如果是上面这种兼容到<code>API 14</code>的应用，还是需要在<code>AndroidManifest.xml</code>中注册<code>WRITE_EXTERNAL_STORAGE</code>权限的。</p><p>前一篇博客<a href="http://unclechen.github.io/2016/03/05/Android6.0运行时权限简介/">Android6.0运行时权限简介</a>知道，如果在<code>AndroidManifest.xml</code>文件里注册过<code>WRITE_EXTERNAL_STORAGE</code>，当App运行在一台6.0的设备时，即使你的App全程都没有调用<code>requestPermissons</code>来申请权限，用户还是可以在<strong>Android6.0系统上</strong> 进入<code>设置-&gt;应用-&gt;你的App-&gt;权限</code>里面，取消<code>存储空间</code>这一个权限。记住是运行在<strong>6.0系统的机器</strong>上，这是关键，因为低于6.0的系统根本没有这个设置。</p><p>如下图所示，只要在manifest里面注册了，就可以动态取消之！</p><p><img src="/content/images/app-perm-before.png" alt="app-权限"></p><p>此时会发生什么？？？此时你的图片在6.0机器上也就没法缓存喽。。/(ㄒoㄒ)/~~  </p><p>为啥啊？6.0机器上，我不是不需要申请权限就可以获得写入<code>SDCard/Android/data/应用包名/cache/</code>目录吗？实际测试时发现，当用户取消了权限之后，SDK接口中与<code>File</code>相关的API全部都返回空了，于是我们就没法写文件了。</p><p>其实我们还需要做的是：</p><p>将AndroidManifest.xml文件中的</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="attribute">name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</div></pre></td></tr></table></figure><p>改为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:<span class="attribute">name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span></div><div class="line">android:<span class="attribute">maxSdkVersion</span>=<span class="string">"18"</span>/&gt;</div></pre></td></tr></table></figure><p>表示只在<code>API &lt;= 18</code>时，才申请<code>WRITE_EXTERNAL_STORAGE</code>权限。这样用户就无法在Android6.0系统的设置下面看到<code>存储空间</code>权限的开关，当然也就无法关闭它了，如下图所示。</p><p><img src="/content/images/app-perm-after.png" alt="app-权限"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一篇博客中介绍了&lt;a href=&quot;http://unclechen.github.io/2016/03/05/Android6.0运行时权限简介/&quot;&gt;Android6.0运行时权限简介&lt;/a&gt;，最近遇到这么一个情况，就是一个App以前都是在SD卡根目录直接新建了一个&lt;code&gt;XXX/image/&lt;/code&gt;目录，来保存图片缓存的，但是如果适配到Android6.0，我们就需要弹出对话框给用户，来申请&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;权限，如果仅仅是缓存图片为了提高加载速度，对于一个小白用户来讲，好像并不是什么值得让他授权的理由。。。&lt;/p&gt;
&lt;p&gt;下面记录一下我是怎么处理的，其实这次处理也不能叫做Android6.0权限适配了，不过对于&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;这个权限而言，的确有一些需要注意的地方（坑）使我们以前没有关心的。&lt;/p&gt;
&lt;p&gt;首先，App在手机上保存文件或者缓存数据时，我认为应该遵守以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.不要随意占用用户的内置存储。&lt;/li&gt;
&lt;li&gt;2.不要随意在SD卡上新建目录，应该放置自己应用包名对应的扩展存储目录下，卸载App时可以被自动清除。&lt;/li&gt;
&lt;li&gt;3.对占用的磁盘空间有上限，并按照一定的策略进行清除。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="适配" scheme="http://unclechen.github.io/tags/%E9%80%82%E9%85%8D/"/>
    
      <category term="权限" scheme="http://unclechen.github.io/tags/%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>Android6.0运行时权限简介</title>
    <link href="http://unclechen.github.io/2016/03/05/Android6.0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%E7%AE%80%E4%BB%8B/"/>
    <id>http://unclechen.github.io/2016/03/05/Android6.0运行时权限简介/</id>
    <published>2016-03-05T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android6.0发布距离现在快1年了，虽然它市场占有率仍在龟速上升中，但还是有一些App开发者已经在打包应用时将<code>targetSDKVersion</code>设置到了<code>23</code>，也就是说把App适配到了Android6.0。以前调用Android系统中需要声明权限的API时，只需要在<code>AndroidManifest.xml</code>文件中一次性列出来。但是如果在<code>build.gradle</code>文件里将<code>targetSDKVersion</code>设为<code>23</code>以后，除了在<code>AndroidManifest.xml</code>声明，我们还需要根据App运行时所在的手机的系统版本，在调用权限之前向用户申请授权，并在用户允许以后，才可以安全的调用对应的API。</p><a id="more"></a><p>简单举个例子，我的App有一个地理位置读取的功能，需要<code>ACCESS_COARSE_LOCATION</code>（粗略的地理位置信息）权限，如果Apk是以<code>targetSDKVersion=22</code>的方式进行打包的，那么在安装时用户将不得授权我的App这个权限，否则他将无法安装这个应用；如果是以<code>targetSDKVersion=23</code>的形式打包的，而且用户使用的手机是Android6.0的系统，那么在安装时我的App是没有获得读取地理位置权限的，我们需要调用系统提供的<code>requestPermissions</code>接口来申请权限。这时候你可能会说那我还设置<code>targetSDKVersion=23</code>干嘛？还不如直接用<code>22</code>打包得了。。</p><p>不要高兴得太早，下面我们会说理由。因为只要用户使用的是6.0系统的手机，他是可以在安装完成以后，在手机的设置界面取消一些<code>dangerous</code>权限的。</p><p>下图就是6.0系统上权限管理的界面。</p><p><img src="/content/images/app-cancel-perm.png" alt="app-cancel-perm"></p><h1 id="targetSDKVersion和compileSDKVersion的作用"><a href="#targetSDKVersion和compileSDKVersion的作用" class="headerlink" title="targetSDKVersion和compileSDKVersion的作用"></a>targetSDKVersion和compileSDKVersion的作用</h1><p>在<code>build.gradle</code>中有这么一段：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line"></div><div class="line">    compileSdkVersion <span class="number">23</span></div><div class="line">    buildToolsVersion <span class="string">"23.0.2"</span></div><div class="line">    ...</div><div class="line">    </div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        targetSdkVersion <span class="number">22</span></div><div class="line">        ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li><p>targetSDKVersion：简单来说就代表着你的App能够适配的系统版本，意味着你的App在这个版本的手机上做了充分的<strong>前向</strong>兼容性处理和实际测试。其实我们写代码时都是经常干这么一件事，就是<code>if(Build.VERSION.SDK_INT &gt;= 23) { ... }</code>，这就是兼容性处理最典型的一个例子。如果你的target设置得越高，其实调用系统提供的API时，所得到的处理也是不一样的，甚至有些新的API是只有新的系统才有的，例如前一篇博客里用到WebView的<code>setWebContentsDebuggingEnabled(boolean))</code>方法，这是Android4.4以后才可以用的一个API。</p></li><li><p>compileSdkVersion：是你SDK的版本号，也就是你在编程时引用的<code>android.jar</code>的版本。一般都会和targetSDKVersion相等，或者比targetSDKVersion高。</p></li></ul><p>因此，如果我们要把自己的App适配到Android6.0系统，首先要把<code>targetSDKVersion</code>和<code>compileSDKVersion</code>全部设置为<code>23</code>。</p><h1 id="Android6-0运行时权限系统到底是干嘛的？"><a href="#Android6-0运行时权限系统到底是干嘛的？" class="headerlink" title="Android6.0运行时权限系统到底是干嘛的？"></a>Android6.0运行时权限系统到底是干嘛的？</h1><p>介绍了targetSDKVersion和compileSDKVersion以后，我们就知道什么叫做适配到Android X.X了。那么Android6.0这个运行时权限系统和以前最大的不同就在于：将我们以前一股脑儿以<code>&lt;permission&gt;</code>标签方式写在<code>AndroidManifest.xml</code>文件中的权限划分成了<strong>normal permission</strong> 和 <strong>dangerous permission</strong>。</p><ul><li><p>Normal Permission：你写在xml文件里，那么App安装时就会默认获得这些权限，即使是在Android6.0系统的手机上，用户也无法在安装后动态取消这些normal权限，这和以前的权限系统是一样的，不变。</p></li><li><p>Dangerous Permission：你还是得写在xml文件里，但是App安装时具体如果执行授权分以下几种情况：</p><ul><li><code>targetSDKVersion &lt; 23</code> <strong>&amp;</strong> <code>API(手机系统) &lt; 6.0</code>：安装时默认获得权限，且用户无法在安装App之后取消权限。</li><li><code>targetSDKVersion &gt;= 23</code> <strong>&amp;</strong> <code>API(手机系统) &lt; 6.0</code>：安装时默认获得权限，且用户无法在安装App之后取消权限。</li><li><code>targetSDKVersion &lt; 23</code> <strong>&amp;</strong> <code>API(手机系统) &gt;= 6.0</code>：安装时默认获得权限，但是用户可以在安装App完成后动态取消授权（<strong>取消时手机会弹出提醒，告诉用户这个是为旧版手机打造的应用，让用户谨慎操作</strong>）。</li><li><code>targetSDKVersion &gt;= 23</code> <strong>&amp;</strong> <code>API(手机系统) &gt;= 6.0</code>：安装时不会获得权限，可以在运行时向用户申请权限。用户授权以后仍然可以在设置界面中取消授权。</li></ul></li></ul><p>6.0手机上取消授权的界面如下，如果是<code>targetSDKVersion &lt; 23</code>打包的应用，取消权限时，会：</p><p><img src="/content/images/app-permission.png" alt="app-权限"></p><p>我们可以看到其实只有在6.0的机器上，打包了适配到6.0的App，才需要做一些明显的权限适配工作。但是实话说，不论是不是适配6.0系统，我们都应该在调用需要权限的接口前，检查一下是否具有具有该权限。因为我们会遇到厂商的修改过权限系统的ROM，也有可能自己忘记在xml里加上权限清单。当然这里面也会有坑，因为有时在不同厂商手机上直接调用<code>checkCallingOrSelfPermission</code>方法得到的结果并不准确。</p><h1 id="如果我不target到23会怎么样？"><a href="#如果我不target到23会怎么样？" class="headerlink" title="如果我不target到23会怎么样？"></a>如果我不target到23会怎么样？</h1><p>很显然，如果不target到23，短期内还可以不写权限适配的代码。但是！！！前面提到了，用户仍然可以在6.0的手机上取消安装时默认赋予的dangerous权限。<strong>那么这时候会发生什么？？？？</strong>如果这个API原本应该返回的是对象，那么这时将返回<code>null</code>；如果这个API原本应该返回的是数字，这时就是<code>0</code>。可想而知，如果你只是对返回的<code>null</code>或者<code>0</code>做了一些不恰当的处理，App还是可能会crash的。所以这不是长久之计，尽快地处理好权限申请才是王道，这也是一种对App、对用户更负责的做法。</p><h1 id="如何在运行时申请权限-amp-官方的权限分级列表"><a href="#如何在运行时申请权限-amp-官方的权限分级列表" class="headerlink" title="如何在运行时申请权限 &amp; 官方的权限分级列表"></a>如何在运行时申请权限 &amp; 官方的权限分级列表</h1><ul><li><p>关于如何适配到6.0的权限系统，网上有非常多的例子，我觉得看了这篇文章基本上就OK了，因为网上很多貌似都翻译自这篇文章，强力推荐一下：<a href="http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition" target="_blank" rel="external">things-you-need-to-know-about-android-m-permission</a></p></li><li><p>Google官方的RuntimePermissions介绍：<a href="https://developer.android.com/preview/features/runtime-permissions.html" target="_blank" rel="external">runtime-permissions</a></p></li><li><p>Google官方的dangerous权限及分组：<a href="https://developer.android.com/intl/zh-cn/guide/topics/security/permissions.html#normal-dangerous" target="_blank" rel="external">permissions: normal-dangerous</a></p></li><li><p>开源社区-权限适配组件：伟大的开源社区已经有轮子了，可以学习一下！</p><ul><li><a href="https://github.com/k0shk0sh/PermissionHelper" target="_blank" rel="external">PermissionHelper</a></li><li><a href="https://github.com/hotchemi/PermissionsDispatcher" target="_blank" rel="external">PermissionsDispatcher</a></li><li><a href="https://github.com/lovedise/PermissionGen" target="_blank" rel="external">PermissionGen</a></li><li><a href="https://github.com/ParkSangGwon/TedPermission" target="_blank" rel="external">TedPermission</a>:不用自己调用checkSelfPermission(), requestPermissions(),然后再处理回调onRequestPermissionsResult(), onActivityResult()。只要一行代码，设置一个listener就可以监听授权的结果，使用起来非常简单。内部实现采用的是类似event bus的otto实现的。</li></ul></li></ul><h1 id="举个栗子（坑）：WRITE-EXTERNAL-STORGE的Android6-0适配问题"><a href="#举个栗子（坑）：WRITE-EXTERNAL-STORGE的Android6-0适配问题" class="headerlink" title="举个栗子（坑）：WRITE_EXTERNAL_STORGE的Android6.0适配问题"></a>举个栗子（坑）：WRITE_EXTERNAL_STORGE的Android6.0适配问题</h1><p>见下篇博客<a href="http://unclechen.github.io/2016/03/06/Android6.0权限适配之SD卡写入/">Android6.0权限适配之WRITE_EXTERNAL_STORAGE（SD卡写入）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android6.0发布距离现在快1年了，虽然它市场占有率仍在龟速上升中，但还是有一些App开发者已经在打包应用时将&lt;code&gt;targetSDKVersion&lt;/code&gt;设置到了&lt;code&gt;23&lt;/code&gt;，也就是说把App适配到了Android6.0。以前调用Android系统中需要声明权限的API时，只需要在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;文件中一次性列出来。但是如果在&lt;code&gt;build.gradle&lt;/code&gt;文件里将&lt;code&gt;targetSDKVersion&lt;/code&gt;设为&lt;code&gt;23&lt;/code&gt;以后，除了在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;声明，我们还需要根据App运行时所在的手机的系统版本，在调用权限之前向用户申请授权，并在用户允许以后，才可以安全的调用对应的API。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="适配" scheme="http://unclechen.github.io/tags/%E9%80%82%E9%85%8D/"/>
    
      <category term="权限" scheme="http://unclechen.github.io/tags/%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>Android WebView调用JS</title>
    <link href="http://unclechen.github.io/2015/11/26/Android%20WebView%E8%B0%83%E7%94%A8JS/"/>
    <id>http://unclechen.github.io/2015/11/26/Android WebView调用JS/</id>
    <published>2015-11-26T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>个人认为Android的WebView一直是一个比较难搞的东西，因为它需要和很多的Web开发打交道，如果以前没接触过Web相关的开发就会觉得有些不爽，但是现在越来越多的应用都是Hybrid的模式，HTML5定稿一年多，感觉也挺火，这也是以做内容为主的App非常需要的技术，所以还得多学学。</p><p>从Android4.4开始，WebView底层的实现从原来的Webkit变成了chromium，从而实现了对HTML5更好的支持，并且也和Chrome浏览器的一些特征越来越像。接触过WebView开发应该对<code>WebView.setWebContentsDebuggingEnabled(true)</code>不会陌生，正是从4.4开始的改变才使得WebView的调试变得更加方便。</p><p>只是用来展示一个网页内容还好，如果要通过WebView执行JS脚本来和Native代码做一些通信，就要小心可能会踩到各种坑了。例如onclick事件没用，用onTap又会触发两次，4.4以上只能用loadUrl的方法执行一行js代码，还有可能会被转码，API17以上需要给Java方法添加注解，API17以下又要换一种方法保证安全性等等。在这里记录一下我自己的学习心得和踩过的坑。</p><a id="more"></a><h1 id="Java与JS互相调用"><a href="#Java与JS互相调用" class="headerlink" title="Java与JS互相调用"></a>Java与JS互相调用</h1><p>在Android开发里面，我们说的WebView与JS互相调用，通常就是指用Java写的Native代码与JS的互相调用。所以下面我都会说Java调用JS，JS调用Java。而不是说WebView调用JS，JS调用WebView了。</p><h2 id="1-Java调用JS"><a href="#1-Java调用JS" class="headerlink" title="1.Java调用JS"></a>1.Java调用JS</h2><ul><li>首先在JS中定义好即将提供给Native的方法<code>function javaCallJS()</code></li><li>然后在Java代码里，通过<code>WebView.loadUrl(&quot;javascript:javaCallJS()&quot;);</code>就可以调用JS的方法了。</li></ul><h2 id="2-JS调用Java"><a href="#2-JS调用Java" class="headerlink" title="2.JS调用Java"></a>2.JS调用Java</h2><h3 id="方法1-addJavascriptInterface："><a href="#方法1-addJavascriptInterface：" class="headerlink" title="方法1:addJavascriptInterface："></a>方法1:addJavascriptInterface：</h3><ul><li>首先在Java里定义一个类<code>WebAppInterface</code>，然后在Java中通过<code>WebView.addJavascriptInterface(new WebAppInterface(), &quot;Android&quot;);</code>就可以在JS中创建这个类的实例<code>Android</code>对象了</li><li>然后在JS中可以直接使用<code>Android</code>对象和它的方法，这样就实现了JS调用Java。</li></ul><h3 id="方法2-iframe-CustomWebViewClient："><a href="#方法2-iframe-CustomWebViewClient：" class="headerlink" title="方法2:iframe + CustomWebViewClient："></a>方法2:iframe + CustomWebViewClient：</h3><ul><li>在JS代码动态添加一个iframe，将其src属性设置为JS需要传给Java的参数（例如<code>bridge://uncle.nought.com?arg=xxx</code>）。</li><li>在Java代码中，定义一个<code>CustomWebViewClient extends WebViewClient</code>，然后<code>mWebView.setWebViewClient(new CustomWebViewClient())</code>。</li><li>在Java代码中的<code>CustomWebViewClient</code>中，重写<code>shouldOverrideUrlLoading(WebView view, String url)</code>方法，自己处理<code>url</code>参数，并<code>return true</code>。</li><li>这时JS代码就可以把参数通过url传递给Java，Java拿到参数去执行相应的工作了。如果JS需要返回值，那么通过Java调用JS代码的形式把返回值返回给JS。</li></ul><h2 id="方法小结"><a href="#方法小结" class="headerlink" title="方法小结"></a>方法小结</h2><h3 id="Java调用JS的代码"><a href="#Java调用JS的代码" class="headerlink" title="Java调用JS的代码"></a>Java调用JS的代码</h3><p>其实比较简单，就是通过<code>WebView.loadUrl(&quot;javascript:javaCallJS()&quot;)</code>loadUrl的形式。这里啰嗦一句，从Android4.4开始，由于chromium内核对安全性检查更加严格，所以并不是传入的所有JS代码，都能够通过loadUrl来执行它。详情可以看一下这里<a href="https://code.google.com/p/android/issues/detail?id=69969" target="_blank" rel="external">https://code.google.com/p/android/issues/detail?id=69969</a>，简单来说就是4.4以上的WebView在loadUrl时会给我们的参数做一个escape，因此参数就变了，很有可能变得JS不认识，无法执行了。所以这时候需要用到<code>WebView.evaluateJavascript(java.lang.String, android.webkit.ValueCallback&lt;java.lang.String&gt;)</code>这个方法。后面我再详细举个例子来说明这个问题。</p><h3 id="JS调用Java的方法1：addJavascriptInterface"><a href="#JS调用Java的方法1：addJavascriptInterface" class="headerlink" title="JS调用Java的方法1：addJavascriptInterface"></a>JS调用Java的方法1：<strong>addJavascriptInterface</strong></h3><p>这种方法是比较简单的。在WebView官方的文档里面有介绍如何结合WebView来进行WebApp的开发<a href="http://developer.android.com/intl/zh-cn/guide/webapps/webview.html#AddingWebView" target="_blank" rel="external">http://developer.android.com/intl/zh-cn/guide/webapps/webview.html#AddingWebView</a>。</p><p>这里要再特别严肃地啰嗦一句！由于4.2（API&lt;17）版本之前的WebView，在执行<code>WebView.addJavascriptInterface(Object obj, String interfaceName)</code>时存在一个漏洞，该漏洞的原因是在向JS中注入一个Java对象的时候，并没有对注册的这个Java类的方法调用做限制。导致JS代码里面可以利用发射机制，调用未注册的其他Java类。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Java里面注册了injectedObj对象以后</span></div><div class="line">mWebView.addJavascriptInterface(<span class="keyword">this</span>, <span class="string">"injectedObj"</span>);</div><div class="line"></div><div class="line"><span class="comment">// JS中可以去反射调用短信程序来进行恶意扣费</span></div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> objSmsManager = injectedObj.getClass().forName(<span class="string">"android.telephony.SmsManager"</span>).getMethod(<span class="string">"getDefault"</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>);</div><div class="line">objSmsManager.sendTextMessage(<span class="string">"10086"</span>,<span class="literal">null</span>,<span class="string">"this message is sent by JS when webview is loading"</span>, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ 这段摘自http:/</span><span class="regexp">/jaq.alibaba.com/</span>blog.htm?id=<span class="number">48</span></div></pre></td></tr></table></figure><p>可想而知，要是一个 <strong>健康</strong> 的网页被挂马之后，嵌入了这样的JS脚本，那么用户的手机来访问这个页面的时候就完蛋了，有兴趣的同学可以研究一下乌云的这个介绍<a href="http://drops.wooyun.org/papers/548" target="_blank" rel="external">http://drops.wooyun.org/papers/548</a>。Android4.2以后，修复了这个漏洞，但是要求我们在执行<code>WebView.addJavascriptInterface(Object obj, String interfaceName)</code>时，这个Object里面需要暴露给JS调用的方法，都需要加上注解<code>@JavascriptInterface</code>。</p><p>那么4.2以下的系统该怎么办？？用下面的方法吧！</p><h3 id="JS调用Java的方法2：-iframe-WebViewClient"><a href="#JS调用Java的方法2：-iframe-WebViewClient" class="headerlink" title="JS调用Java的方法2： iframe + WebViewClient"></a>JS调用Java的方法2： <strong>iframe + WebViewClient</strong></h3><p>这是一种比较Trick的方式。js在执行的过程中去给整个dom添加一个iframe，并将这个iframe设置为<code>display:none</code>。然后通过这个iframe去load一个url，触发WebViewClient的shouldOverrideUrlLoading()，然后在这里面，我们可以决定如何处理JS传递过来的参数。由于这个url我们是自己来解析和处理的，不打算交给WebView去直接load，所以我们其实可以自己定义一个协议，例如<code>bridge://uncle.nought.com?arg1=x&amp;arg2=y</code>。然后在WebView的WebViewClient里面拿到这个<code>nought://</code>开头的url后，我们自己写Java代码处理arg等参数。</p><p>说到这里，我们首先要了解一下WebViewClient，它决定了我们的WebView加载一条Url时的行为。如果你自定义一个CustomWebViewClient继承自WebViewClient，并重写里面的shouldOverrideUrlLoading()方法，然后把CustomWebViewClient的一个实例set给了你的WebView。那么就可以在shouldOverrideUrlLoading方法中将WebView里面本来将要load的url拦截下来，并决定是否由开发者自己的Java代码处理它。那么怎么才能自行处理这个url，而不是让WebView去自动load呢？我们看看官方文档<a href="http://developer.android.com/intl/zh-cn/guide/webapps/webview.html" target="_blank" rel="external">http://developer.android.com/intl/zh-cn/guide/webapps/webview.html</a>，总得来说是下面这样的：</p><ul><li>CustomWebViewClient的shouldOverrideUrlLoading返回true，表示由Java处理url，WebView不用管。</li><li>CustomWebViewClient的shouldOverrideUrlLoading返回false，表示Java不管这个url，由WebView自己处理url（一般还会再添加一行代码<code>webView.loadUrl(url)</code>）。</li></ul><p>可能你还会觉得白白添加iframe进来不好吧，那么不加也是可以的。只要你能让当前WebView去加载一个url就可以了，所以这样<code>window.location.href=&#39;bridge://uncle.nought.com?arg=xxx&#39;</code>都是可以的！并没有任何问题！</p><h1 id="Java和JS互相调用实践"><a href="#Java和JS互相调用实践" class="headerlink" title="Java和JS互相调用实践"></a>Java和JS互相调用实践</h1><p>先上个图，在这个demo里面，左边是一个WebView，右边是一个TextView。然后实现点击左边Web页面的按钮，传递参数给Java，并在TextView里面显示出来。点击右边的按钮，传递参数给JS，并在WebView里面显示出来。</p><p><img src="/content/images/hello-webview-js-demo.png" alt="hello-webview-js-demo"></p><p>上面提到了两种JS调用Java的方法，所以在左边的WebView里面也设置两个按钮来演示这两种不同的方法。</p><h2 id="1-Java调用JS-1"><a href="#1-Java调用JS-1" class="headerlink" title="1.Java调用JS"></a>1.Java调用JS</h2><h3 id="第一步：提供JS给Java调用的方法"><a href="#第一步：提供JS给Java调用的方法" class="headerlink" title="第一步：提供JS给Java调用的方法"></a>第一步：提供JS给Java调用的方法</h3><p>首先在我们的assets目录下放一个<code>hello.html</code>文件，方便WebView去加载。然后在JS代码添加一个给Java调用的方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="comment">// JS提供给Java调用的方法</span></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">javaCallJS</span><span class="params">(arg)</span> </span>&#123;</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"hello"</span>).innerHTML += (<span class="string">"&lt;br/&gt;"</span> + arg);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="第二步：在Java代码中调用"><a href="#第二步：在Java代码中调用" class="headerlink" title="第二步：在Java代码中调用"></a>第二步：在Java代码中调用</h3><p>非常简单，直接在Java代码里调用刚才的JS Function。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mBtnJavaCallJs.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="built_in">void</span> onClick(View v) &#123;</div><div class="line">                <span class="comment">/**</span></div><div class="line"><span class="comment">                 * 注意参数的传递需要符合JS的语法，用单引号或者反斜杠转义</span></div><div class="line"><span class="comment">                 */</span></div><div class="line">                <span class="built_in">String</span> js = <span class="string">"javascript:javaCallJS(\"Java called JS.\")"</span>;</div><div class="line">                mWebView.loadUrl(js);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure><p>这样就实现了Java在WebView里面打印了“Java called JS.”。</p><h2 id="JS调用Java"><a href="#JS调用Java" class="headerlink" title="JS调用Java"></a>JS调用Java</h2><p>由于 <strong>addJavascriptInterface</strong> 的方法比较简单，大家可以直接看看代码示例。下面介绍一下第二种方法：</p><h3 id="第一步：JS里面添加一个iframe来触发loadUrl"><a href="#第一步：JS里面添加一个iframe来触发loadUrl" class="headerlink" title="第一步：JS里面添加一个iframe来触发loadUrl"></a>第一步：JS里面添加一个iframe来触发loadUrl</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="comment">// JS提供给Java调用的方法</span></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">javaCallJS</span><span class="params">(arg)</span> </span>&#123;</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"hello"</span>).innerHTML += (<span class="string">"&lt;br/&gt;"</span> + arg);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">/* </span></div><div class="line"><span class="undefined"> *  JS通过创建一个不可见的iframe来调用Java</span></div><div class="line"><span class="undefined"> */</span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">jsCallJavaByIframe</span><span class="params">(arg)</span> </span>&#123;</span></div><div class="line"><span class="actionscript"><span class="comment">//创建iframe</span></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span></div><div class="line"><span class="actionscript">iframe.id = <span class="string">"hello-iframe"</span></span></div><div class="line"><span class="actionscript">iframe.style.display = <span class="string">'none'</span>;</span></div><div class="line"><span class="actionscript">iframe.src = <span class="string">"bridge://uncle.nought.com?arg="</span> + arg; <span class="comment">// 把iframe的src设为要传递给Java的参数</span></span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.body.appendChild(iframe);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="第二步：自定义一个WebViewClient"><a href="#第二步：自定义一个WebViewClient" class="headerlink" title="第二步：自定义一个WebViewClient"></a>第二步：自定义一个WebViewClient</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWebViewClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = HelloWebViewClient.class.getSimpleName();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">"bridge://uncle.nought.com"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern ARG_PATTERN = Pattern.compile(PREFIX + <span class="string">"\\?arg=(.*)"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MainActivity.TextViewChanger mTextViewChanger;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWebViewClient</span><span class="params">(MainActivity.TextViewChanger textViewChanger)</span> </span>&#123;</div><div class="line">        mTextViewChanger = textViewChanger;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"Get params from JS: "</span> + url);</div><div class="line">        parseJSParams(url);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseJSParams</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="comment">// 解析自定义参数</span></div><div class="line">        <span class="keyword">if</span> (url.startsWith(PREFIX)) &#123;</div><div class="line">            Matcher matcher = ARG_PATTERN.matcher(url);</div><div class="line">            <span class="keyword">if</span> (matcher.matches()) &#123;</div><div class="line">                mTextViewChanger.changeText(matcher.group(<span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="第三步：异步刷新UI"><a href="#第三步：异步刷新UI" class="headerlink" title="第三步：异步刷新UI"></a>第三步：异步刷新UI</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> TextViewChanger mTextChanger = <span class="keyword">new</span> TextViewChanger() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">changeText</span><span class="params">(<span class="keyword">final</span> String arg)</span> </span>&#123;</div><div class="line">            <span class="comment">/**</span></div><div class="line"><span class="comment">             * 官方说明文档：</span></div><div class="line"><span class="comment">             * Note: The object that is bound to your JavaScript runs in another thread and not in the thread</span></div><div class="line"><span class="comment">             * in which it was constructed.</span></div><div class="line"><span class="comment">             *</span></div><div class="line"><span class="comment">             * mWebAppInterface虽然是在UI线程创建的，但是bind到JS以后就是在另一条线程中运行的，因此刷新UI的时候需要注意</span></div><div class="line"><span class="comment">             */</span></div><div class="line">            runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (mTextView != <span class="keyword">null</span>) &#123;</div><div class="line">                        mTextView.append(<span class="string">"\n"</span> + arg);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure><p>最后奉上<a href="https://github.com/unclechen/HelloWebViewJS" target="_blank" rel="external">完整代码</a>。</p><p>这里只是一个demo示例，在生产环境里面，我们肯定是需要针对自己的项目定制一个Java和JS通信的 <strong>bridge</strong> 框架，传递参数的时候也可以用JSON处理，对url的协议解析也应该做一个检查。</p><p>Github上面也有不少开源的 <strong>WebView&amp;JSBridge</strong> 。我随便搜了一下，就看到了这个<a href="https://github.com/pedant/safe-java-js-webview-bridge" target="_blank" rel="external">https://github.com/pedant/safe-java-js-webview-bridge</a>，实现的思路貌似是差不多的。另外iOS也有不少类似的框架，<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="external">https://github.com/marcuswestin/WebViewJavascriptBridge</a>这个项目有4000+的star，可见iOS上面的WebApp需求还是非常多的，因为它不像Android一样可以用DexClassLoader去做热更新，通过WebApp的形式来动态更新App对iOS的意义非常大。</p><h1 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h1><h2 id="1-HTML5的LocalStorage"><a href="#1-HTML5的LocalStorage" class="headerlink" title="1.HTML5的LocalStorage"></a>1.HTML5的LocalStorage</h2><p>Local Storage是h5里面常用到的一个缓存，如果加载的页面中用js去调用Local Storage的话，很容易出现<code>&quot;Uncaught TypeError: Cannot read property &#39;getItem&#39; of null&quot;, source: http://xxx.js</code>，原因就是没有开启WebView的h5缓存功能。于是上stackoverflow上搜了一下，加上下面这句：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">mWebView</span>.<span class="selector-class">.getSettings</span>()<span class="selector-class">.setDomStorageEnabled</span>(<span class="selector-tag">true</span>);</div></pre></td></tr></table></figure><p>就好了。</p><p>待补充。。。前面说到4.4开始有些JS代码得用evaluateJavascript来执行。blabla。。</p><h1 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h1><p>手头看到了篇WebView文章，<a href="https://github.com/cundong/blog/blob/master/Android%204.4%20%E4%B8%AD%20WebView%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.md" target="_blank" rel="external">Android 4.4 中 WebView 使用注意事项</a>，可参考参考。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人认为Android的WebView一直是一个比较难搞的东西，因为它需要和很多的Web开发打交道，如果以前没接触过Web相关的开发就会觉得有些不爽，但是现在越来越多的应用都是Hybrid的模式，HTML5定稿一年多，感觉也挺火，这也是以做内容为主的App非常需要的技术，所以还得多学学。&lt;/p&gt;
&lt;p&gt;从Android4.4开始，WebView底层的实现从原来的Webkit变成了chromium，从而实现了对HTML5更好的支持，并且也和Chrome浏览器的一些特征越来越像。接触过WebView开发应该对&lt;code&gt;WebView.setWebContentsDebuggingEnabled(true)&lt;/code&gt;不会陌生，正是从4.4开始的改变才使得WebView的调试变得更加方便。&lt;/p&gt;
&lt;p&gt;只是用来展示一个网页内容还好，如果要通过WebView执行JS脚本来和Native代码做一些通信，就要小心可能会踩到各种坑了。例如onclick事件没用，用onTap又会触发两次，4.4以上只能用loadUrl的方法执行一行js代码，还有可能会被转码，API17以上需要给Java方法添加注解，API17以下又要换一种方法保证安全性等等。在这里记录一下我自己的学习心得和踩过的坑。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="WebView" scheme="http://unclechen.github.io/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>自定义Android Gradle插件</title>
    <link href="http://unclechen.github.io/2015/11/17/%E8%87%AA%E5%AE%9A%E4%B9%89Android%20Gradle%E6%8F%92%E4%BB%B6/"/>
    <id>http://unclechen.github.io/2015/11/17/自定义Android Gradle插件/</id>
    <published>2015-11-17T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客介绍到<a href="http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/">Gradle实践之自定义打包jar+Log开关自动关闭</a>。可以自己定义打包的jar已经不错了，但是还是不够爽，怎么办？自己写一个Plugin！会用轮子，也要会造轮子是不是，我们经常使用到的<code>com.android.library</code>和<code>com.android.application</code>都是Google给我们提供的Gradle插件，里面已经实现了大部分App开发者所需要的功能。Github上面也已经有很多gradle插件，但是如果我们是程序猿，我们总是可以有需求是人家的Plugin无法满足的，那好吧，我们自己写个插件。</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="开发环境（以Win7为例）"><a href="#开发环境（以Win7为例）" class="headerlink" title="开发环境（以Win7为例）"></a>开发环境（以Win7为例）</h2><ul><li><p>IDE开发环境：我这篇例子就用Android Stuido来写的，使用AS写会有一点点的奇怪，因为AS默认新建的都是Android工程，可是！用它来写一个Gradle Plugin并没有任何问题！但实际上Gradle不仅仅可以给Android项目使用。所以我推荐大家去体验一下JetBrains家的Java IDE——<a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">Intelligent Java IDE</a>。我们用的Android Studio就是基于这个开发的。</p></li><li><p>JDK：我这次用的是Windows系统，安装了1.8和1.7的JDK，等下写Gradle插件的时候会指定一个版本的JDK。至于指定哪个版本的JDK，会遇到什么问题，我会在后面提到。不过不管你使用什么版本的JDK，必须用交叉编译选项来编译我们的插件，以保证别人能在低版本的JDK上运行我们的插件。交叉编译选项我会在build.gradle文件中会特别标注一下。 <strong>注意</strong> ，JDK必须要安装，Groovy最后也要compile成Jar包。</p></li><li><p>Gradle：一般我们用Android Studio开发的时候都已经配置好了这个。我是让它翻墙自己下载的，下载后的目录都在C盘的Users目录下。例如我的<code>GRADLE_HOME</code>是<code>C:\Users\noughtchen\.gradle\wrapper\dists\gradle-2.4-all\6r4uqcc6ovnq6ac6s0txzcpc0\gradle-2.4</code>。为了确保你安装了Gradle并配置了环境变量，可以在命令行输入一句:</p></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">gradle -v</span></div></pre></td></tr></table></figure><p>如果终端上显示了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">C</span>:\<span class="selector-tag">Users</span>\<span class="selector-tag">noughtchen</span>&gt;<span class="selector-tag">gradle</span> <span class="selector-tag">-v</span></div><div class="line"></div><div class="line"><span class="selector-tag">------------------------------------------------------------</span></div><div class="line"><span class="selector-tag">Gradle</span> 2<span class="selector-class">.4</span></div><div class="line"><span class="selector-tag">------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="selector-tag">Build</span> <span class="selector-tag">time</span>:   2015<span class="selector-tag">-05-05</span> 08<span class="selector-pseudo">:09</span><span class="selector-pseudo">:24</span> <span class="selector-tag">UTC</span></div><div class="line"><span class="selector-tag">Build</span> <span class="selector-tag">number</span>: <span class="selector-tag">none</span></div><div class="line"><span class="selector-tag">Revision</span>:     5<span class="selector-tag">c9c3bc20ca1c281ac7972643f1e2d190f2c943c</span></div><div class="line"></div><div class="line"><span class="selector-tag">Groovy</span>:       2<span class="selector-class">.3</span><span class="selector-class">.10</span></div><div class="line"><span class="selector-tag">Ant</span>:          <span class="selector-tag">Apache</span> <span class="selector-tag">Ant</span>(<span class="selector-tag">TM</span>) <span class="selector-tag">version</span> 1<span class="selector-class">.9</span><span class="selector-class">.4</span> <span class="selector-tag">compiled</span> <span class="selector-tag">on</span> <span class="selector-tag">April</span> 29 2014</div><div class="line"><span class="selector-tag">JVM</span>:          1<span class="selector-class">.7</span><span class="selector-class">.0_80</span> (<span class="selector-tag">Oracle</span> <span class="selector-tag">Corporation</span> 24<span class="selector-class">.80-b11</span>)</div><div class="line"><span class="selector-tag">OS</span>:           <span class="selector-tag">Windows</span> 7 6<span class="selector-class">.1</span> <span class="selector-tag">amd64</span></div><div class="line"></div><div class="line"><span class="selector-tag">C</span>:\<span class="selector-tag">Users</span>\<span class="selector-tag">noughtchen</span>&gt;</div></pre></td></tr></table></figure><p>那就说明gradle是OK的。</p><ul><li>Groovy SDK（可跳过）：这个类似于JDK，因为Gradle插件使用Groovy语言编写，所以我们也可以安装Groovy SDK。这里是官方的<a href="http://www.groovy-lang.org/install.html#_installation_on_windows" target="_blank" rel="external">安装教程</a>，非常简单。分为三步：<ul><li>下载一个<a href="http://www.groovy-lang.org/install.html#download-groovy" target="_blank" rel="external">Binary Release</a>版的zip包，解压到你本地的一个目录下，例如我本地是<code>D:\mydev\groovy-2.4.5</code>。</li><li>添加名为<code>GROOVY_HOME</code>的环境变量，它的值为刚才的目录<code>D:\mydev\groovy-2.4.5</code>。</li><li>然后将<code>GROOVY_HOME/bin</code>添加到系统的环境变量<code>Path</code>里，添加的值为<code>%GROOVY_HOME%\bin</code>。</li></ul></li></ul><h2 id="Groovy基础"><a href="#Groovy基础" class="headerlink" title="Groovy基础"></a>Groovy基础</h2><p>这里可以忽略，只要懂Java和一点基本Groovy语法就行，实际上我只是在打包我们SDK项目的时候自学了一点，另外参考了一下Google官方的Gradle插件就够了，实在不会的可以再去查看Gradle官方的Document。下面是几个可以学习的资源：</p><ul><li><a href="http://tools.android.com/build/gradleplugin" target="_blank" rel="external">http://tools.android.com/build/gradleplugin</a> 这里介绍了怎么从Google Checkout下来官方的Gradle插件源码，以及Android Studio的源码！开源万岁，真是碉堡，推荐大家看一下这个，这样就知道APK是怎么打包的了。</li><li><a href="https://docs.gradle.org/current/userguide/custom_plugins.html" target="_blank" rel="external">https://docs.gradle.org/current/userguide/custom_plugins.html</a> Gradle官方的自定义插件文档，这篇是必看的，非常简单的HelloWorld例子。看完肯定还是不会写Gradle插件的，呵呵！</li></ul><h1 id="自定义Gradle-Plugin"><a href="#自定义Gradle-Plugin" class="headerlink" title="自定义Gradle Plugin"></a>自定义Gradle Plugin</h1><p>不废话了，下面进入正式的开发过程，这次我们在前面<a href="http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/">Gradle实践之自定义打包jar+Log开关自动关闭</a>的基础上，把打包Jar、混淆Jar包的任务都丢到插件里，然后呢，我们这次自己写JavaCompile任务，这样一来，如果是做SDK开发的同学，实际上几乎就可以不用<code>com.android.library</code>插件了，当然我个人觉得吧，能不重复造轮子就不要重复造了，等下会大家看到这点的。</p><h2 id="1-新建一个Groovy工程"><a href="#1-新建一个Groovy工程" class="headerlink" title="1.新建一个Groovy工程"></a>1.新建一个Groovy工程</h2><p>如下图所示，我新建了一个名为<code>HelloGradlePlugin</code>的文件夹。</p><p><img src="/content/images/new-a-plugin-folder.png" alt="New a groovy folder"></p><p>接着在文件夹里新建了一个名为<code>build.gradle</code>的文件，里面现在没有任何代码。</p><p><img src="/content/images/new-a-gradle-file.png" alt="New a gradle file"></p><p>这里有点奇怪吗？是的，为啥不是用AS直接new一个project？前面说了，AS默认新建的只能选择Android Project，下面我们看看怎么使用这一步建立的文件夹。</p><h2 id="2-建立项目结构"><a href="#2-建立项目结构" class="headerlink" title="2.建立项目结构"></a>2.建立项目结构</h2><p>打开Android Studio，选择<code>File-&gt;Open</code>，打开刚才这个文件夹。如图所示：</p><p><img src="/content/images/open-the-plugin.png" alt="Open the plugin project"></p><p>这时AS会提示我们是否使用本地的<code>Gradle Wrapper</code>，点击<code>yes</code>，AS会帮我们在<code>HelloGradlePlugin</code>文件夹下面自动生成对应的gradle文件夹和文件。</p><p><img src="/content/images/use-your-gradle-wrapper.png" alt="use-your-gradle-wrapper"></p><p>这样，我们就算在AS中导入我们的Gradle Plugin工程了。下面我们建立项目结构。</p><p>首先，在<code>src</code>文件夹下面分别建立<code>main/groovy/</code>文件夹和<code>resources/META-INF/gradle-plugins</code>。</p><p><img src="/content/images/create-folders.png" alt="create-folders"></p><p>然后，在<code>src/main/resources/META-INF/gradle-plugins</code>文件夹下面新建一个<code>hello-world-plugin.properties</code>文件，这个文件的名字就是我们就是我们这个Gradle插件的名字(即<code>name</code>)，将来在其他项目中引用这个插件的时候，就需要指定为这个名字，在最后面会详细介绍这个<code>name</code>是怎么用的。</p><p>接着需要在这个文件中添加一行代码。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">implementation-class = com<span class="selector-class">.nought</span><span class="selector-class">.gradle</span><span class="selector-class">.plugin</span><span class="selector-class">.HelloPlugin</span></div></pre></td></tr></table></figure><p>意思是我们的插件名字叫<code>hello-world-plugin</code>，实现这个插件功能的类名为<code>HelloPlugin</code>。</p><p>在实现<code>helloPlugin</code>这个类之前，我们先给这个Project添加一下依赖，因为我们最开始是通过新建文件夹的形式，然后在AS中导入这个项目，所以它还没有把groovy相关的包依赖进来。我们在项目名字上右键，选择<code>Open Module Settings</code>，然后添加Dependencies，如下图所示：</p><p><img src="/content/images/add-groovy-sdk.png" alt="add-groovy-sdk"></p><p>最后，我们在<code>src/main/groovy</code>下面新建一个一个名为<code>com.nought.gradle.plugin</code>的package。</p><p><img src="/content/images/new-class-folder.png" alt="new-class-folder"></p><p>并在这个包下建立名为<code>HelloPlugin</code>的类(右键<code>new file</code>-&gt;输入<code>HelloPlugin.groovy</code>)。</p><p>下面开始写代码，我们通过自己定义一个插件，来实现前一篇博客里面的gradle打包功能，它可以把我们指定的java代码打包成jar包，并按照配置决定是否进行混淆，并输出到一个指定的文件夹中。</p><h2 id="3-实现Plugin接口"><a href="#3-实现Plugin接口" class="headerlink" title="3.实现Plugin接口"></a>3.实现Plugin接口</h2><p>定义了<code>HelloPlugin</code>类，我们要让它实现Plugin接口，并实现其中的<code>apply</code>方法。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package com<span class="selector-class">.nought</span><span class="selector-class">.gradle</span><span class="selector-class">.plugin</span></div><div class="line"></div><div class="line">import org<span class="selector-class">.gradle</span><span class="selector-class">.api</span><span class="selector-class">.Plugin</span></div><div class="line">import org<span class="selector-class">.gradle</span><span class="selector-class">.api</span><span class="selector-class">.Project</span></div><div class="line"></div><div class="line"></div><div class="line">class HelloPlugin implements Plugin&lt;Project&gt; &#123;</div><div class="line">    @Override</div><div class="line">    void apply(Project project) &#123;</div><div class="line">...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="4-定义Extension"><a href="#4-定义Extension" class="headerlink" title="4.定义Extension"></a>4.定义Extension</h2><p>首先，什么是Extension？</p><p>Extension就是扩展属性，指的是你可以给你的project添加额外的gradle约定之外的其他properties属性。我们在Android项目里的<code>build.gradle</code>文件中通常使用的诸如下面这种代码：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">android </span>&#123;</div><div class="line">    compileSdkVersion <span class="number">22</span></div><div class="line">    <span class="keyword">buildToolsVersion </span><span class="string">"22.0.1"</span></div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>就是在给Android插件的Extension的<code>compileSdkVersion</code>和<code>buildToolsVersion</code>赋值。我们自己写一个插件，也要实现同样的效果。只要在gradle文件里apply了我们的自定义的插件，我们就可以给自定义的插件赋予额外的属性，并在插件里用到它们，例如你打一个jar包时可以把输出文件存放地址传入进去等等。</p><p>So，新建一个名为<code>HelloPluginExtension</code>的类，表明这是<code>HelloPlugin</code>的扩展属性。并在这个类里面添加一些<code>String</code>类型的变量，如下所示：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nought.gradle.plugin</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPluginExtension</span> </span>&#123;</div><div class="line">    <span class="keyword">String</span> javaSrcDir <span class="comment">// java源码的目录</span></div><div class="line">    <span class="keyword">String</span> classesOutDir <span class="comment">// 编译输出的class文件目录</span></div><div class="line"></div><div class="line">    <span class="keyword">String</span> outputFileDir <span class="comment">// 输出的jar包目录</span></div><div class="line">    <span class="keyword">String</span> outputFileName <span class="comment">// 输出的jar包文件名</span></div><div class="line"></div><div class="line">    <span class="keyword">String</span> androidJarDir</div><div class="line">    <span class="keyword">String</span> javaBase</div><div class="line">    <span class="keyword">String</span> javaRt</div><div class="line"></div><div class="line">    <span class="keyword">String</span> proguardConfigFile</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>很显然，其实你可输入任何Java语言中的变量类型。这些属性在apply我们的插件时，都可以在build.gradle脚本中传入。</p><h2 id="5-在Plugin中增加自定义的task"><a href="#5-在Plugin中增加自定义的task" class="headerlink" title="5.在Plugin中增加自定义的task"></a>5.在Plugin中增加自定义的task</h2><p>刚才定义了Extension里面的一些属性，自定义Gradle Plugin的框架就基本是这样了，当然你要是只写一个 <strong>helloworld</strong> demo尝尝口味，那就没必要干下面的事情了。</p><p>接下来我们要在<code>HelloPlugin</code>中用到这个属性，并增加一些实现了不同功能的tasks。</p><p>本例子中，我们自定义的插件可以编译Java源代码，并把生成的class文件打包成jar，再根据需求决定是不是混淆它。下面直接上代码：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nought.gradle.plugin</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.gradle.api.JavaVersion</div><div class="line"><span class="keyword">import</span> org.gradle.api.Plugin</div><div class="line"><span class="keyword">import</span> org.gradle.api.<span class="keyword">Project</span></div><div class="line"><span class="keyword">import</span> org.gradle.api.tasks.<span class="keyword">Copy</span></div><div class="line"><span class="keyword">import</span> org.gradle.api.tasks.bundling.Jar</div><div class="line"><span class="keyword">import</span> org.gradle.api.tasks.<span class="keyword">compile</span>.JavaCompile</div><div class="line"><span class="keyword">import</span> proguard.gradle.ProGuardTask</div><div class="line"></div><div class="line"><span class="keyword">class</span> HelloPlugin <span class="keyword">implements</span> Plugin&lt;<span class="keyword">Project</span>&gt; &#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PLUGIN_NAME = <span class="string">"helloPlugin"</span></div><div class="line"></div><div class="line">    <span class="keyword">Project</span> <span class="keyword">project</span></div><div class="line">    HelloPluginExtension extension</div><div class="line"></div><div class="line">    JavaCompile compileJavaSrc</div><div class="line">    Jar jarLib</div><div class="line">    ProGuardTask proguardLib</div><div class="line">    <span class="keyword">Copy</span> copyLib</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">void</span> apply(<span class="keyword">Project</span> <span class="keyword">project</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">project</span> = <span class="keyword">project</span></div><div class="line">        <span class="keyword">this</span>.extension = <span class="keyword">project</span>.extensions.create(PLUGIN_NAME, HelloPluginExtension)</div><div class="line"></div><div class="line">        <span class="keyword">project</span>.afterEvaluate &#123;</div><div class="line">            createSomeTasks()</div><div class="line">            <span class="comment">// 如果是执行packageProguardJar任务，那么要提前关闭log开关</span></div><div class="line">            <span class="keyword">if</span> (<span class="string">'packageProguardJar'</span> in <span class="keyword">project</span>.gradle.startParameter.taskNames) &#123;</div><div class="line">                <span class="keyword">project</span>.tasks.getByName(<span class="string">"preBuild"</span>).<span class="keyword">doFirst</span> &#123;</div><div class="line">                    enableLoggerDebug(<span class="keyword">false</span>)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> createSomeTasks() &#123;</div><div class="line">        <span class="comment">// Create a task to compile all java sources.</span></div><div class="line">        compileJavaSrc = <span class="keyword">project</span>.tasks.create(<span class="string">"compileJava"</span>, JavaCompile);</div><div class="line">        compileJavaSrc.setDescription(<span class="string">"编译java源代码"</span>)</div><div class="line">        compileJavaSrc.<span class="keyword">source</span> = extension.javaSrcDir</div><div class="line">        compileJavaSrc.<span class="keyword">include</span>(<span class="string">"com/nought/hellolib/**"</span>)</div><div class="line">        compileJavaSrc.<span class="keyword">classpath</span> = <span class="keyword">project</span>.files([extension.androidJarDir + <span class="string">"/android.jar"</span>, extension.javaBase + <span class="string">"/"</span> + extension.javaRt])</div><div class="line">        compileJavaSrc.<span class="keyword">destinationDir</span> = <span class="keyword">project</span>.<span class="keyword">file</span>(extension.classesOutDir)</div><div class="line">        compileJavaSrc.<span class="keyword">sourceCompatibility</span> = JavaVersion.VERSION_1_7</div><div class="line">        compileJavaSrc.<span class="keyword">targetCompatibility</span> = JavaVersion.VERSION_1_7</div><div class="line">        compileJavaSrc.<span class="keyword">options</span>.encoding = <span class="string">"UTF-8"</span></div><div class="line">        compileJavaSrc.<span class="keyword">options</span>.debug = <span class="keyword">false</span></div><div class="line">        compileJavaSrc.<span class="keyword">options</span>.verbose = <span class="keyword">false</span></div><div class="line"></div><div class="line">        <span class="comment">// Create a task to jar the classes.</span></div><div class="line">        jarLib = <span class="keyword">project</span>.tasks.create(<span class="string">"jarLib"</span>, Jar);</div><div class="line">        jarLib.setDescription(<span class="string">"将class文件打包成jar"</span>)</div><div class="line">        jarLib.dependsOn compileJavaSrc</div><div class="line">        jarLib.archiveName = <span class="string">"helloLib.jar"</span></div><div class="line">        jarLib.<span class="keyword">from</span>(extension.classesOutDir)</div><div class="line">        jarLib.<span class="keyword">destinationDir</span> = <span class="keyword">project</span>.<span class="keyword">file</span>(extension.outputFileDir)</div><div class="line">        jarLib.<span class="keyword">exclude</span>(<span class="string">"com/nought/hellolib/BuildConfig.class"</span>)</div><div class="line">        jarLib.<span class="keyword">exclude</span>(<span class="string">"com/nought/hellolib/BuildConfig\$*.class"</span>)</div><div class="line">        jarLib.<span class="keyword">exclude</span>(<span class="string">"**/R.class"</span>)</div><div class="line">        jarLib.<span class="keyword">exclude</span>(<span class="string">"**/R\$*.class"</span>)</div><div class="line">        jarLib.<span class="keyword">include</span>(<span class="string">"com/nought/hellolib/*.class"</span>)</div><div class="line"></div><div class="line">        <span class="comment">// Create a task to proguard the jar.</span></div><div class="line">        proguardLib = <span class="keyword">project</span>.tasks.create(<span class="string">"proguardLib"</span>, ProGuardTask);</div><div class="line">        proguardLib.setDescription(<span class="string">"混淆jar包"</span>)</div><div class="line">        proguardLib.dependsOn jarLib</div><div class="line">        proguardLib.injars(extension.outputFileDir + <span class="string">"/"</span> + <span class="string">"helloLib.jar"</span>)</div><div class="line">        proguardLib.outjars(extension.outputFileDir + <span class="string">"/"</span> + extension.outputFileName)</div><div class="line">        proguardLib.libraryjars(extension.androidJarDir + <span class="string">"/android.jar"</span>)</div><div class="line">        proguardLib.libraryjars(extension.javaBase + <span class="string">"/"</span> + extension.javaRt)</div><div class="line">        proguardLib.configuration(extension.proguardConfigFile)</div><div class="line">        proguardLib.printmapping(extension.outputFileDir + <span class="string">"/"</span> + <span class="string">"helloLib.mapping"</span>)</div><div class="line"></div><div class="line">        <span class="comment">// Create a task to copy the jar.</span></div><div class="line">        copyLib = <span class="keyword">project</span>.tasks.create(<span class="string">"copyLib"</span>, <span class="keyword">Copy</span>);</div><div class="line">        copyLib.setDescription(<span class="string">"不混淆，仅拷贝jar包"</span>)</div><div class="line">        copyLib.dependsOn jarLib</div><div class="line">        copyLib.<span class="keyword">from</span>(extension.outputFileDir)</div><div class="line">        copyLib.<span class="keyword">into</span>(extension.outputFileDir)</div><div class="line">        copyLib.<span class="keyword">include</span>(<span class="string">"helloLib.jar"</span>)</div><div class="line">        copyLib.rename(<span class="string">"helloLib.jar"</span>, extension.outputFileName)</div><div class="line"></div><div class="line">        <span class="keyword">def</span> packageProguardJar = <span class="keyword">project</span>.tasks.create(<span class="string">"packageProguardJar"</span>);</div><div class="line">        packageProguardJar.setDescription(<span class="string">"打包混淆、关闭log开关的hello lib"</span>)</div><div class="line">        <span class="comment">// packageProguardJar任务作为一个钩子，依赖真正执行工作的proguardLib</span></div><div class="line">        packageProguardJar.dependsOn proguardLib</div><div class="line">        <span class="comment">// 最后把log开关置回原来开发时的状态</span></div><div class="line">        packageProguardJar.<span class="keyword">doLast</span> &#123;</div><div class="line">            enableLoggerDebug(<span class="keyword">true</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">def</span> packageNoProguardJar = <span class="keyword">project</span>.tasks.create(<span class="string">"packageNoProguardJar"</span>);</div><div class="line">        packageNoProguardJar.setDescription(<span class="string">"打包不混淆、开启log开关的hello lib"</span>)</div><div class="line">        <span class="comment">// packageNoProguardJar任务作为一个钩子，依赖真正执行工作的copyLib</span></div><div class="line">        packageNoProguardJar.dependsOn copyLib</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 开启/关闭Log开关</span></div><div class="line">    <span class="keyword">def</span> enableLoggerDebug(<span class="keyword">boolean</span> flag) &#123;</div><div class="line">        <span class="keyword">def</span> loggerFilePath = <span class="string">"src/main/java/com/nought/hellolib/UncleNought.java"</span></div><div class="line">        <span class="keyword">def</span> updatedDebug = <span class="keyword">new</span> <span class="keyword">File</span>(loggerFilePath).<span class="keyword">getText</span>(<span class="string">'UTF-8'</span>)</div><div class="line">                .replaceAll(<span class="string">"ENABLE_DEBUG\\s?=\\s?"</span> + (!flag).toString(), <span class="string">"ENABLE_DEBUG = "</span> + flag.toString())</div><div class="line">        <span class="keyword">new</span> <span class="keyword">File</span>(loggerFilePath).<span class="keyword">write</span>(updatedDebug, <span class="string">'UTF-8'</span>)</div><div class="line">        <span class="keyword">println</span>(flag ? <span class="string">'ENABLE_DEBUG : [true]'</span> : <span class="string">'ENABLE_DEBUG : [false]'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代码不多，其实就是创建了4个task，彼此之间有依赖，最后再创建两个钩子任务，他们不做实际的工作，只是通过钩子任务去依赖真正实现了功能的task。大家如果看过Android Gradle Plugin的实现，就知道assembleXXX任务就是这么干的。</p><h2 id="6-发布插件"><a href="#6-发布插件" class="headerlink" title="6.发布插件"></a>6.发布插件</h2><p>为了让其他的项目能引用这个打包插件，需要将这个插件发布出去，我们在插件项目的根目录下的<code>build.gradle</code>文件。添加下面的代码：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'groovy'</span></div><div class="line">apply plugin: <span class="string">'maven'</span></div><div class="line"></div><div class="line">version = <span class="string">'1.0.0'</span></div><div class="line"><span class="keyword">group</span> = <span class="string">'com.nought.gradle.plugin'</span></div><div class="line">archivesBaseName = <span class="string">'hello-gradle-plugin'</span></div><div class="line"></div><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> gradleApi()</div><div class="line">    <span class="keyword">compile</span> localGroovy()</div><div class="line">    <span class="keyword">compile</span> files(<span class="string">'libs/proguard.jar'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 一定要记得使用交叉编译选项，因为我们可能用很高的JDK版本编译，为了让安装了低版本的同学能用上我们写的插件，必须设定source和target</span></div><div class="line">compileGroovy &#123;</div><div class="line">    <span class="keyword">sourceCompatibility</span> = <span class="number">1.7</span></div><div class="line">    <span class="keyword">targetCompatibility</span> = <span class="number">1.7</span></div><div class="line">    <span class="keyword">options</span>.encoding = <span class="string">"UTF-8"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">uploadArchives &#123;</div><div class="line">    <span class="keyword">repositories</span>.mavenDeployer &#123;</div><div class="line"><span class="comment">// 如果你公司或者自己搭了nexus私服，那么可以将插件deploy到上面去</span></div><div class="line"><span class="comment">//        repository(url: "http://10.XXX.XXX.<span class="doctag">XXX:</span>8080/nexus/content/repositories/releases/") &#123;</span></div><div class="line"><span class="comment">//            authentication(userName: "admin", password: "admin")</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">// 如果没有私服的话，发布到本地也是ok的</span></div><div class="line">        repository(url: <span class="string">'file:release/libs'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的代码就是通过<code>groovy</code>插件编译打包我们的插件代码，并通过<code>maven</code>插件publish到指定的服务器。我们为了调试，先将插件发布到本地的<code>release/libs</code>文件夹下面就行。</p><h2 id="7-在自己项目中应用写好的插件"><a href="#7-在自己项目中应用写好的插件" class="headerlink" title="7.在自己项目中应用写好的插件"></a>7.在自己项目中应用写好的插件</h2><p>现在假设我们把刚才的插件打包，发布到了<code>release/libs</code>下面。这时属于本地的发布和引用，我们可以将这个libs下面的文件夹全部拷贝到自己的Android项目根目录的<code>libs</code>下面去，一般可能Android项目下的根目录中没有这个文件夹，那么我们就新建一个<code>libs</code>，再把gradle插件的文件夹全部丢进去。以前一篇博客的Android工程为例。</p><p>首先在项目根目录的<code>build.gradle</code>文件中按照下面的方式引用：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123;</div><div class="line"><span class="comment">// 假如你有私服可以用的话，可以引用私服</span></div><div class="line"><span class="comment">// url 'http://10.XXX.XXX.<span class="doctag">XXX:</span>8080/nexus/content/repositories/releases/'</span></div><div class="line"><span class="comment">// 没有的话，就本地引入</span></div><div class="line">            url <span class="string">'libs'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:1.3.0'</span></div><div class="line"><span class="comment">// 自定义的插件以 groupId:name:版本号 的方式引用，这个name来自插件工程下的hello-world-plugin.properties文件名</span></div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.nought.gradle.plugin:hello-gradle-plugin:1.0.0'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123;</div><div class="line"><span class="comment">// 假如你有私服可以用的话，可以引用私服</span></div><div class="line"><span class="comment">// url 'http://10.XXX.XXX.<span class="doctag">XXX:</span>8080/nexus/content/repositories/releases/'</span></div><div class="line"><span class="comment">// 没有的话，就本地引入，这里是给subProject设置，和上面类似</span></div><div class="line">            url <span class="string">'libs'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后在需要使用自定义插件的Module中apply这个插件。并将该自定义插件的Extension传入进去，如下所示：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">apply</span> plugin: <span class="string">'com.android.library'</span></div><div class="line">apply plugin: <span class="string">'hello-gradle-plugin'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    <span class="attribute">compileSdkVersion</span> <span class="number">22</span></div><div class="line">    buildToolsVersion <span class="string">"22.0.1"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        <span class="attribute">minSdkVersion</span> <span class="number">14</span></div><div class="line">        targetSdkVersion <span class="number">22</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        <span class="section">release</span> &#123;</div><div class="line">            <span class="attribute">buildConfigField</span> <span class="string">"boolean"</span>, <span class="string">"ENABLE_DEBUG"</span>, <span class="string">"false"</span></div><div class="line">            minifyEnabled <span class="literal">false</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">        <span class="literal">debug</span> &#123;</div><div class="line">            <span class="attribute">buildConfigField</span> <span class="string">"boolean"</span>, <span class="string">"ENABLE_DEBUG"</span>, <span class="string">"true"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    <span class="attribute">compile</span> fileTree(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</div><div class="line">&#125;</div><div class="line"></div><div class="line">helloPlugin &#123;</div><div class="line">    <span class="attribute">javaSrcDir</span> = <span class="string">'src/main/java'</span></div><div class="line">    classesOutDir = <span class="string">'build/out_classes'</span></div><div class="line"></div><div class="line">    outputFileDir = <span class="string">'release'</span></div><div class="line">    outputFileName = <span class="string">'helloLib-release.jar'</span></div><div class="line"></div><div class="line">    // Android SDK Dir</div><div class="line">    androidJarDir = android.getSdkDirectory().toString() + <span class="string">"/platforms/"</span> + <span class="string">"<span class="variable">$&#123;android.compileSdkVersion&#125;</span>"</span></div><div class="line"></div><div class="line">    // JAVA HOME</div><div class="line">    javaBase = System.properties[<span class="string">"java.home"</span>]</div><div class="line">    javaRt = <span class="string">"/lib/rt.jar"</span></div><div class="line">    if (System.properties[<span class="string">"os.name"</span>].toLowerCase().contains(<span class="string">"mac"</span>)) &#123;</div><div class="line">        <span class="attribute">if</span> (!new File(javaBase + javaRt).exists()) &#123;</div><div class="line">            <span class="attribute">javaRt</span> = <span class="string">"/../Classes/classes.jar"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    proguardConfigFile = <span class="string">'proguard-rules.pro'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这时我们的Android工程下的gradle打包脚本就干净多了，所有的任务都丢到自定义的插件里面去了。需要动态指定的属性，通过Extension就可以进行赋值，非常方便。</p><p>当需要打包时，打开Android Studio自带的终端，输入<code>cd hellolib</code>进入lib工程的目录，再输入<code>gradle packageProguardJar</code>或者<code>gradle packageNoProguardJar</code>就可以打包了。打包出来的jar怎么给app module去引用，就不赘述了。</p><p>你甚至可以在自己的Gradle插件里再写一个copy task，直接将打好的helloLib.jar拷贝到app目录的libs下面，这样就更方便了。另外，app module下的版本号管理任务，你也可以把他们丢到自定义的插件里面去，如果你的生成环境要求你的Android工程尽可能简洁时，建议大家都封装一个自己的打包插件，deploy到公司的maven私服去。</p><p>最后贴上<a href="https://github.com/unclechen/HelloGradlePlugin" target="_blank" rel="external">Gradle插件工程</a>和引用插件工程打包的<a href="https://github.com/unclechen/HelloGradle" target="_blank" rel="external">Android工程</a>供参考。</p><h1 id="容易遇到的问题"><a href="#容易遇到的问题" class="headerlink" title="容易遇到的问题"></a>容易遇到的问题</h1><h2 id="遇到Unsupported-major-minor-version-52-0问题"><a href="#遇到Unsupported-major-minor-version-52-0问题" class="headerlink" title="遇到Unsupported major.minor version 52.0问题"></a>遇到<code>Unsupported major.minor version 52.0</code>问题</h2><p>这个前面我提过，在插件工程的打包脚本中，有一个交叉编译选项，如果你使用高版本的JDK编写Gradle插件，为了让你打出来的Gradle Plugin（实际上就是一个jar包），能在别人低版本的JRE上跑起来，你就必须使用这个选项。否则，人家还要去安装一个新的JDK，就很蛋疼了。</p><p>请记得加上这个：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">compileGroovy &#123;</div><div class="line">    <span class="keyword">sourceCompatibility</span> = <span class="number">1.7</span></div><div class="line">    <span class="keyword">targetCompatibility</span> = <span class="number">1.7</span></div><div class="line">    <span class="keyword">options</span>.encoding = <span class="string">"UTF-8"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇博客介绍到&lt;a href=&quot;http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/&quot;&gt;Gradle实践之自定义打包jar+Log开关自动关闭&lt;/a&gt;。可以自己定义打包的jar已经不错了，但是还是不够爽，怎么办？自己写一个Plugin！会用轮子，也要会造轮子是不是，我们经常使用到的&lt;code&gt;com.android.library&lt;/code&gt;和&lt;code&gt;com.android.application&lt;/code&gt;都是Google给我们提供的Gradle插件，里面已经实现了大部分App开发者所需要的功能。Github上面也已经有很多gradle插件，但是如果我们是程序猿，我们总是可以有需求是人家的Plugin无法满足的，那好吧，我们自己写个插件。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="打包" scheme="http://unclechen.github.io/tags/%E6%89%93%E5%8C%85/"/>
    
      <category term="gradle" scheme="http://unclechen.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle实践之自定义打包jar+Log开关自动关闭</title>
    <link href="http://unclechen.github.io/2015/10/25/Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%89%93%E5%8C%85jar+Log%E5%BC%80%E5%85%B3%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD/"/>
    <id>http://unclechen.github.io/2015/10/25/Gradle实践之打包jar+Log开关自动关闭/</id>
    <published>2015-10-25T00:00:00.000Z</published>
    <updated>2017-12-25T04:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客介绍了<a href="http://unclechen.github.io/2015/10/22/Android%20Studio%20Gradle实践之多渠道自动化打包+版本号管理/">Gradle实践之多渠道自动化打包+版本号管理</a>。由于我在公司里主要是做SDK开发的，这次我想介绍一下如何使用Gradle打出自己想要的jar包，并根据需要混淆、发布jar包。然后再介绍一下如何在打包的时候将自定义的Log输出工具关闭。</p><a id="more"></a><h1 id="用Gradle打包出jar文件"><a href="#用Gradle打包出jar文件" class="headerlink" title="用Gradle打包出jar文件"></a>用Gradle打包出jar文件</h1><p>前面我们说过，在Android Studio里面使用Gradle来打包应用程序，一般都是build出来一个apk文件。但是有的同学是做实现层的开发，不直接做View层的东西，例如sdk开发主要是给View层开发的同学提供接口，通常是把代码打包成jar，再给开发者使用。</p><p>现在有很多github上的开源项目也都是使用Android的library插件打包成aar，再提供给开发者用。这里说到<code>aar</code>，它是随着Android Studio的出现而出现的，功能上类似一个library，可以在其他的项目里面调用这个aar提供的接口，aar也是一种zip包，与apk文件非常地相似，用解压工具打开它就会发现里面除了一个 <strong>classes.jar</strong> ，还有 <strong>res、assert、aidl、AndroidManifest.xml</strong> 等等文件，真的和apk太像了，不过apk压缩包里面的classes文件是一个dex文件，aar里面的classes文件还是个jar。</p><p>还是以上一篇博客中建立的HelloGradle工程为例，现在向里面再添加一个新的Module。添加方法就是在项目面板的左侧，以<code>Andrioid</code>视图查看工程结构，右键，在弹出的菜单中选择<code>open module settings</code>，然后选择<code>new a module</code>，接着在弹出的对话框中，选择新建一个<code>Android Library Module</code>，这里我把它命名为HelloLib。如下图所示：</p><p><img src="/content/images/new-a-lib-module.png" alt="New a lib module"></p><p>这时你会发现，我们的HelloGradle工程里，有了两个Module，一个是application类型的Module，一个是library类型的Module。</p><p><img src="/content/images/two-modules.png" alt="Two module"></p><p>它们的区别可以在各自的<code>build.gradle</code>文件中一目了然。因为application module的build.gradle中引入的是<code>com.android.application</code>插件来打包，而library module的build.gradle中引入的是<code>com.android.library</code>插件进行打包。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></div></pre></td></tr></table></figure><p>可想而知，这个<code>com.android.library</code>打包出的来的output一定就是<code>aar</code>文件了。这个aar文件位于<code>build/output/aar/</code>文件夹下。</p><p>那么我们要如何打包出一个jar呢？毕竟现在还有项目是用Eclipse开发的，使用jar文件比较方便，而且jar文件也可以在Android Studio中引入。</p><p>首先我们在新建HelloLib Module中new一个class，作为我们的库来提供给app module使用。如下所示，我新建了一个测试类。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nought.hellolib;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UncleNought</span> &#123;</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Output() &#123;</div><div class="line">        Log.i(UncleNought.<span class="keyword">class</span>.getSimpleName(), <span class="string">"I'm a library!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后在app module的build.gradle文件中添加一行<code>compile project(&#39;:hellolib&#39;)</code>，使得app module依赖我们的HelloLib module。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(<span class="keyword">include</span>: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:22.2.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:design:22.2.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':hellolib'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样就可以在app module中调用刚才的测试类了。我们在app module中MainActivity的onCreate方法里调用<code>UncleNought.Output();</code>，可以看到输出了Log<code>I&#39;m a library!</code>。</p><p><img src="/content/images/i-am-a-lib.png" alt="I am a lib"></p><p>接着，我们介绍两种生成jar的方法，有了jar以后，就可以在app module中以jar包的形式来调用HelloLib中的接口。</p><h2 id="方案1：拷贝默认生成的jar包"><a href="#方案1：拷贝默认生成的jar包" class="headerlink" title="方案1：拷贝默认生成的jar包"></a>方案1：拷贝默认生成的jar包</h2><p>说到jar包，其实它就是把java源文件编译出来的class字节码，以一种zip的形式压缩在了一起。Android很大部分的开发都是用java写的，那么我们可以将Android源代码编译出来的class字节码压缩到一个jar包里面，不就是我们想要的jar包吗？没错就是这个，实际上在<code>com.android.library</code>插件中，运行build命令是，也会有这样的操作，先把java源代码编译成class文件，再把文件打包成jar，再把jar压缩成dex。这其中就有jar的操作，生成的jar就位于<code>build/intermediates/bundles/release/classes.jar</code>。如果你想直接使用这个jar也是可以的，只要自己在HelloLib Module的build.gradle中写一个copy类型的task，把这个classes.jar拷贝到指定的目录下就可以了。下面是一种示例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">task</span> <span class="selector-tag">releaseMyLib</span>(<span class="attribute">type</span>: Copy, <span class="attribute">dependsOn</span>: [<span class="string">'build'</span>]) &#123;</div><div class="line">    <span class="selector-tag">from</span>( <span class="string">'build/intermediates/bundles/release/'</span>)</div><div class="line">    <span class="selector-tag">into</span>( <span class="string">'build/libs'</span>)</div><div class="line">    <span class="selector-tag">include</span>(<span class="string">'classes.jar'</span>)</div><div class="line">    <span class="selector-tag">rename</span>(<span class="string">'classes.jar'</span>, <span class="string">'my-lib.jar'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在HelloLib的build.gradle脚本添加完上面的task以后，打开Android Studio自带的命令行工具，依次输入下面两行，就可以打出一个my-lib.jar包了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> hellolib</div><div class="line">gradle releaseMyLib</div></pre></td></tr></table></figure><p>这段脚本的含义非常简单，我们自定义了一个名叫releaseMyLib的task，它是Gradle API自带的<code>copy</code>类型的任务，这个任务依赖于 <code>build</code>任务，前面我们提到过，gradle有很多默认的任务，build便是其中的一个。所以当build任务结束后，会在<code>build/intermediates/bundles/release/</code>下生成<code>classes.jar</code>文件，我们只要在这之后，把它拷贝出来，重命名为<code>my-lib.jar</code>就可以了。</p><p>然后把这个jar包拷贝到app module下的libs文件夹中，去掉刚才在app module的build.gradle文件中添加的<code>compile project(&#39;:hellolib&#39;)</code>，重新gradle sync一下，然后尝试运行你会发现和刚才的效果是一样的，这样就打出一个hellolib module的jar了。</p><p>但是上面这种做法太偷懒了，实际上这个classes.jar中，有一些是我们不要的类，例如<code>BuildConfig.class</code>这样的类。下图是用Java Decompiler反编译看到my-lib.jar里面的内容。</p><p><img src="/content/images/my-lib.png" alt="My lib"></p><p>作为一个sdk开发者，很多时候需要自己的jar越小越好，所以我们可以不需要把编译后自动生成的BuildConfig类加入到我们自己的jar包中来，此外有时候我们并不想把所有的类都打到这个my-lib.jar包中，这时应该怎么做呢？</p><h2 id="方案2：自定义Jar任务打包jar文件"><a href="#方案2：自定义Jar任务打包jar文件" class="headerlink" title="方案2：自定义Jar任务打包jar文件"></a>方案2：自定义Jar任务打包jar文件</h2><p>我们知道，Android Studio生成默认的jar包，是把源代码编译之后生成的所有的class字节码都压缩到这个classes.jar中，如果我想只打其中的一部分类该怎么办呢？</p><p>答案很简单：只需要在对编译出来的class字节码做Jar操作时，include我自己想要的类（或者exclude掉不想要的类）即可。那么所有的编译好的class字节码都在哪里呢？答案是<code>build/intermediates/classes/release/</code>目录下，如下图所示：</p><p><img src="/content/images/output-classes.png" alt="classes"></p><p>Android Library打包插件在build时，会把所有的java文件编译成class文件，放在这个目录下。所以我们接下来要做的事就是把这里面，所有需要的class，打成一个Jar包即可。下面是一个示例：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> jarMyLib(type: Jar, dependsOn: [<span class="string">'build'</span>]) &#123;</div><div class="line">    archiveName = <span class="string">'my-lib.jar'</span></div><div class="line">    <span class="keyword">from</span>(<span class="string">'build/intermediates/classes/release'</span>)</div><div class="line">    <span class="keyword">destinationDir</span> = <span class="keyword">file</span>(<span class="string">'build/libs'</span>)</div><div class="line">    <span class="keyword">exclude</span>(<span class="string">'com/nought/hellolib/BuildConfig.class'</span>)</div><div class="line">    <span class="keyword">exclude</span>(<span class="string">'com/nought/hellolib/BuildConfig\$*.class'</span>)</div><div class="line">    <span class="keyword">exclude</span>(<span class="string">'**/R.class'</span>)</div><div class="line">    <span class="keyword">exclude</span>(<span class="string">'**/R\$*.class'</span>)</div><div class="line">    <span class="keyword">include</span>(<span class="string">'com/nought/hellolib/*.class'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同样，打开Android Studio的终端，依次输入下面两行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> hellolib</div><div class="line">gradle jarMyLib</div></pre></td></tr></table></figure><p>这样就通过Jar任务，自己打包出了一个jar包。我们可以反编译一下这个jar包看看：</p><p><img src="/content/images/my-jar-lib.png" alt="Jar classes"></p><p>果然里面没有BuildCongfig这个类了，把这<code>my-lib.jar</code>拷贝到app module下的libs文件夹下，重新Gradle sync一下，再运行这个app module，可以看到和之前方案1中一样的效果了。</p><p>这里是一种基本的自定义示例，如果还需要有别的需求，可以参考Gradle官方的DSL，里面介绍了各种Task接收的参数和使用方法。大家可以自行发挥实现自己想要的效果。</p><h2 id="PS-0：如何将依赖的第三方库也打包进来"><a href="#PS-0：如何将依赖的第三方库也打包进来" class="headerlink" title="PS 0：如何将依赖的第三方库也打包进来"></a>PS 0：如何将依赖的第三方库也打包进来</h2><p>有一次我在Android开源群里，一个朋友问到“如果除了自己写的类，还想把第三方的OkHttp包打进来怎么办？”。其实这个问题很好解决，Gradle的<code>Jar</code>任务是可配置多个<code>from</code>来源的，所以我们只需要在上面的代码里添加一行:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> jarMyLib(type: Jar, dependsOn: [<span class="string">'build'</span>]) &#123;</div><div class="line">    archiveName = <span class="string">'my-lib.jar'</span></div><div class="line">    <span class="keyword">from</span>(<span class="string">'build/intermediates/classes/release'</span>)</div><div class="line">    <span class="keyword">from</span>(<span class="keyword">project</span>.zipTree(<span class="string">"libs/xxx-x.x.x.jar"</span>)) <span class="comment">// 添加这一行</span></div><div class="line">    <span class="keyword">destinationDir</span> = <span class="keyword">file</span>(<span class="string">'build/libs'</span>)</div><div class="line">    <span class="keyword">exclude</span>(<span class="string">'com/nought/hellolib/BuildConfig.class'</span>)</div><div class="line">    <span class="keyword">exclude</span>(<span class="string">'com/nought/hellolib/BuildConfig\$*.class'</span>)</div><div class="line">    <span class="keyword">exclude</span>(<span class="string">'**/R.class'</span>)</div><div class="line">    <span class="keyword">exclude</span>(<span class="string">'**/R\$*.class'</span>)</div><div class="line">    <span class="keyword">include</span>(<span class="string">'com/nought/hellolib/*.class'</span>)</div><div class="line">    <span class="keyword">include</span>(<span class="string">'com/xxx/*.class'</span>) <span class="comment">// 同时记得加上第三方的package</span></div></pre></td></tr></table></figure><p>看上面的加了注释的两行，这样就可以把第三放依赖的jar包添加进来了。</p><h2 id="PS-1：为何要依赖默认的build任务"><a href="#PS-1：为何要依赖默认的build任务" class="headerlink" title="PS 1：为何要依赖默认的build任务"></a>PS 1：为何要依赖默认的build任务</h2><p>前面我们自定义<code>jarMyLib</code>的时候，都依赖了<code>build</code>任务，因为这个任务可以帮我们把所有的java源代码编译成class文件，实际上build任务自己又依赖了很多其他的任务来实现打包。如果你想实现更快速的打包，运行一下<code>gradle tasks</code>或者在Android Studio中点击右边的Gradle按钮弹出任务列表的面板，就会看到还有一个<code>compileReleaseJavaWithJavac</code>，看名字就知道这个任务是编译所有的release type的java源文件，因为我们可以把上面的代码改为dependsOn这个任务即可，改为<code>task jarMyLib(type: Jar, dependsOn: [&#39;compileReleaseJavaWithJavac&#39;])</code>。但是记住了，一定要看清楚自己的gradle插件版本，我这个Android Gradle插件的版本是<code>com.android.tools.build:gradle:1.3.0</code>，而<code>com.android.tools.build:gradle:1.2.3</code>插件版本中对应的这个Compile任务的名字是叫做<code>compileReleaseJava</code>，大家记得不要写错了。</p><h2 id="PS-2：为何不直接自定义compileJava任务"><a href="#PS-2：为何不直接自定义compileJava任务" class="headerlink" title="PS 2：为何不直接自定义compileJava任务"></a>PS 2：为何不直接自定义compileJava任务</h2><p>另外大家可能会说，既然都自己自定义Jar任务，为啥不把<code>compileJava</code>任务也自定义了，其实也是可以的，这样等于完全不用依赖Android Gradle插件的默认任务了。但有的时候，假设我们的代码中要把aidl打进来，依赖默认的<code>compileReleaseJavaWithJavac</code>任务会把aidl生成的class文件也包含在里面，非常方便。如果自己去写JavaCompile任务的话，首先还要把aidl文件生成java文件，再来compile它，会有一点点麻烦。咱们做sdk开发的，不需要打那么多渠道包，直接依赖默认的<code>compileReleaseJavaWithJavac</code>其实多花个1-2s不是什么大问题。</p><h2 id="PS-3：混淆自定义的jar包"><a href="#PS-3：混淆自定义的jar包" class="headerlink" title="PS 3：混淆自定义的jar包"></a>PS 3：混淆自定义的jar包</h2><p>刚才忘了提，混淆也是比较常见的一个需求，假设我们不是打包apk，在buildTypes闭包里面也没有给release类型的任务设置``为混淆。那么我们还可以自己定义一个混淆任务，话不多说，直接上代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">androidSDKDir</span> = <span class="title">plugins</span>.<span class="title">getPlugin</span><span class="params">(<span class="string">'com.android.library'</span>)</span></span>.sdkHandler.getSdkFolder()</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">androidJarDir</span> = <span class="title">androidSDKDir</span>.<span class="title">toString</span><span class="params">()</span></span> + <span class="string">'/platforms/'</span> + <span class="string">"$&#123;android.compileSdkVersion&#125;"</span> + <span class="string">'/android.jar'</span></div><div class="line"></div><div class="line">task proguardMyLib(<span class="symbol">type:</span> proguard.gradle.ProGuardTask, <span class="symbol">dependsOn:</span> [<span class="string">'jarMyLib'</span>]) &#123;</div><div class="line">    injars(<span class="string">'build/libs/my-lib.jar'</span>)</div><div class="line">    outjars(<span class="string">'build/libs/my-pro-lib.jar'</span>)</div><div class="line">    libraryjars(androidJarDir)</div><div class="line">    configuration <span class="string">'proguard-rules.pro'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里的混淆Task——<code>proguard.gradle.ProGuardTask</code>，也是来自Gradle标准的API，查看一下Gradle DSL，就知道怎么用了。injars、outjars和libraryjars以及混淆配置文件proguard-rules.pro这些参数，和原来使用Eclipse开发时是一样的，injars表示输入的需要被混淆的jar包，outsjars表示混淆后输出的jar包，libraryjars表示引用到的jar包不被混淆，<code>proguard-rules.pro</code>里面写的是混淆配置，具体就不在这里详细发散了。</p><p>最后，还是在终端中进入HelloLib目录，执行<code>gradle proguardMyLib</code>，就可以得到混淆以后的jar包<code>my-pro-lib.jar</code>了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> hellolib</div><div class="line">gradle proguardMyLib</div></pre></td></tr></table></figure><p>同样，我们反编译一下这个<code>my-pro-lib.jar</code>，如下图所示：</p><p><img src="/content/images/my-pro-lib.png" alt="Decompile my-pro-lib"></p><p>有同学就会说了，这个混淆的后的jar包和原来的jar包没啥区别啊… …没错，因为我们这个类里面只调用了一句Log API，这个API又是来自于android.jar的，我们在混淆的时候使用libraryjars(android.jar)保证了这个包里面的东西不会被混淆，所以这个示例里面看起来是没有什么变化的。如果你的HelloLib Module写的很复杂，里面代码有很多的话，混淆以后是有明显变化的，自定义打包jar文件就到这里结束了，大家可以自己体验一下。</p><hr><h1 id="Gradle自动关闭Log开关"><a href="#Gradle自动关闭Log开关" class="headerlink" title="Gradle自动关闭Log开关"></a>Gradle自动关闭Log开关</h1><p>在Android开发中，很多时候我们会自己封装一个Log类，里面设置一个开关，在开发的时候将所有级别的Log全部打开输出。然后在发布应用前，把Log.i和Log.d这类级别的Log关闭，仅留下Log.e类型的输出。这样做是为了防止别人通过log来研究我们的代码，同时也可以把一些不必要给别人看的信息过滤掉。</p><p>其实这个需求很早就有，网上的大神们有很多的方法，这里我就举两个例子，说一下我自己的体会吧。</p><h2 id="方案1：通过BuildConfig类来关闭"><a href="#方案1：通过BuildConfig类来关闭" class="headerlink" title="方案1：通过BuildConfig类来关闭"></a>方案1：通过BuildConfig类来关闭</h2><p>前面我们一经发现，当你使用Android Gradle插件打包，执行默认的build任务时，会在<code>build/intermediates/classes/release</code>中自动生成一个<code>BuildConfig.class</code>，有class就应该有java源代码文件啊，那么这个class文件对应的java文件在哪里呢？答案是<code>app/build/generated/source/buildConfig/</code>下。</p><p>关于这个生成的类文件，我们可以通过在build.gradle脚本中的buildTypes闭包中指定参数，使得这个类生成出来的时候包含一个我们自定义的boolean类型的静态常量<code>ENABLE_DEBUG</code>，直接上代码：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class">buildTypes </span>&#123;</div><div class="line">        <span class="class">release </span>&#123;</div><div class="line">            <span class="comment">// 不显示log</span></div><div class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"ENABLE_DEBUG"</span>, <span class="string">"false"</span></div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="class">debug </span>&#123;</div><div class="line">            <span class="comment">// 显示Log</span></div><div class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"ENABLE_DEBUG"</span>, <span class="string">"true"</span></div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>按照上面的脚本编写之后，生成的release版BuildConfig类中就会多出一个常量，即<code>public static final boolean ENABLE_DEBUG = false;</code>；而debug版的BuildConfig类中的常量值则为true，即<code>public static final boolean ENABLE_DEBUG = true;</code>。你可以分别在源代码中调用这两个常量，最后这两个类分别也会被打包到release和debug版各自的apk文件当中。</p><p>当你修改build.gradle脚本以后，按照Android Studio的提示，点击<code>Gradle Sync</code>，就可以在之前我们自定义的UncleNought测试类中调用BuildConfig类中常量，可以看到<code>ENABLE_DEBUG</code>这个类已经自动生成出来了。下面是一段调用的示例：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nought.hellolib;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UncleNought</span> &#123;</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Output() &#123;</div><div class="line">        <span class="keyword">if</span> (BuildConfig.ENABLE_DEBUG) &#123;</div><div class="line">            Log.i(UncleNought.<span class="keyword">class</span>.getSimpleName(), <span class="string">"I'm a library!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>咱们可以打个包看一下，在命令行中运行:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">gradle releaseMyLib</span></div></pre></td></tr></table></figure><p>记住，这里必须执行<code>releaseMyLib</code>这个任务，因为我们用到了BuildConfig这个自动生成的类，假如不把它编译到我们的jar包里，那么就没法去引用<code>BuildConfig</code>里面的<code>ENABLE_DEBUG</code>常量了。打包好了以后，我们通过反编译再看一下这个jar，如下图：</p><p><img src="/content/images/buildconfig-enable-debug.png" alt="enable-debug"></p><p>把这个jar包给app module引用一下也会发现，现在Log已经不会输出了。</p><h2 id="方案2：自定义Log开关"><a href="#方案2：自定义Log开关" class="headerlink" title="方案2：自定义Log开关"></a>方案2：自定义Log开关</h2><p>假设我们不想把BuildConfig打包进来，只想在自己的类中定义一个常量，然后在release的时候修改这个动态去常量，应该怎么做呢？这个时候就可以利用gradle强大的能力了，话不多说，一步步看代码。</p><p>首先在测试类的代码里添加一个常量<code>ENABLE_DEBUG</code>：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.nought.hellolib;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UncleNought</span> &#123;</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> ENABLE_DEBUG = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> Output() &#123;</div><div class="line">        <span class="keyword">if</span> (ENABLE_DEBUG) &#123;</div><div class="line">            Log.i(UncleNought.<span class="keyword">class</span>.getSimpleName(), <span class="string">"I'm a library!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后修改我们的HelloLib打包脚本build.gradle文件，在前面的基础上添加：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> enableLoggerDebug(<span class="keyword">boolean</span> flag) &#123;</div><div class="line">    <span class="keyword">def</span> loggerFilePath = <span class="string">"src/main/java/com/qq/e/comm/util/GDTLogger.java"</span></div><div class="line">    <span class="keyword">def</span> updatedDebug = <span class="keyword">new</span> <span class="keyword">File</span>(loggerFilePath).<span class="keyword">getText</span>(<span class="string">'UTF-8'</span>)</div><div class="line">            .replaceAll(<span class="string">"DEBUG_ENABLE\\s?=\\s?"</span> + (!flag).toString(), <span class="string">"DEBUG_ENABLE = "</span> + flag.toString())</div><div class="line">    <span class="keyword">new</span> <span class="keyword">File</span>(loggerFilePath).<span class="keyword">write</span>(updatedDebug, <span class="string">'UTF-8'</span>)</div><div class="line">    <span class="keyword">println</span>(flag ? <span class="string">'GDTLogger.DEBUG_ENABLE : [true]'</span> : <span class="string">'GDTLogger.DEBUG_ENABLE : [false]'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">preBuild &#123;&#125;.<span class="keyword">doFirst</span> &#123;</div><div class="line">    <span class="keyword">if</span> ((<span class="string">'jarMyLib'</span> in gradle.startParameter.taskNames)) &#123;</div><div class="line">        enableLoggerDebug(<span class="keyword">false</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">jarMyLib &#123;&#125;.<span class="keyword">doLast</span> &#123;</div><div class="line">    enableLoggerDebug(<span class="keyword">true</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>前面我提过，Gradle兼容Java的语法，所以我就想到，可以用正则表达式替换掉原来代码中的<code>true</code>，让它变成<code>false</code>。当然我们要保证这该替换必须发生在<code>complileReleaseJavaWithJavac</code>之前，然后我们在打包彻底完成以后，再把Log开关打开，即再<code>false</code>变回<code>true</code>，使得开发环境一直都是可以输出Debug Log的。</p><p>可以看到我们在preBuild任务前把开关关闭了，然后在jarMyLib之后，又把开关打开了。<code>doFirst</code>和<code>doLast</code>都是通过闭包的方式向一个已有的任务里面添加可执行操作的语法。下面我们打开终端进入到HelloLib目录下，执行下面的语句打一个包试试：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">gradle jarMyLib</span></div></pre></td></tr></table></figure><p>找到我们的jar包，反编译一下看看：</p><p><img src="/content/images/custom-log-enable.png" alt="custom-enable-debug"></p><p>果然，虽然我们的代码里是<code>public static boolean ENABLE_DEBUG = true;</code>，然而打出来的jar包却是<code>public static boolean ENABLE_DEBUG = false;</code>。</p><p>是不是很方便，如果你还有类似的动态修改代码的需求，也可以采用这种方法实现。其实还有其他的方式也可以实现同样的效果，在Android打包脚本的buildTypes和productFlavor支持下，我们还可以为不同类型的任务创建不同的源代码或者资源类型的文件，前面的博客就提到过可以为不同渠道包设置不同的<code>appname</code>，也可以采用同样的思路实现刚才这个需求，大家看自己的偏好吧，黑猫白猫，只要能抓到老鼠那都是好狗哇，哈哈哈！</p><p>最后上一下这个HelloGradle工程的代码示例<a href="https://github.com/unclechen/HelloGradle" target="_blank" rel="external">https://github.com/unclechen/HelloGradle</a>，里面有这两篇博客的打包示例，需要的同学可以看看。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇博客介绍了&lt;a href=&quot;http://unclechen.github.io/2015/10/22/Android%20Studio%20Gradle实践之多渠道自动化打包+版本号管理/&quot;&gt;Gradle实践之多渠道自动化打包+版本号管理&lt;/a&gt;。由于我在公司里主要是做SDK开发的，这次我想介绍一下如何使用Gradle打出自己想要的jar包，并根据需要混淆、发布jar包。然后再介绍一下如何在打包的时候将自定义的Log输出工具关闭。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://unclechen.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://unclechen.github.io/tags/Android/"/>
    
      <category term="打包" scheme="http://unclechen.github.io/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
</feed>
